{"version":3,"sources":["./src/ui/FormWidgets/FormGroup.ts","./src/ui/ResultsPreferences/ResultsPreferences.ts","./sass/vapor/_Radio.scss","./sass/vapor/_FormGroup.scss","./sass/_ResultsPreferences.scss","./src/ui/FormWidgets/RadioButton.ts"],"names":[],"mappings":"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","file":"ResultsPreferences__93518d21988b4536d33d.js","sourcesContent":["import { IFormWidget } from './FormWidgets';\r\nimport { Dom, $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\n\r\nimport 'styling/vapor/_FormGroup';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\n/**\r\n * A simple `fieldset` HTMLElement containing multiple form widgets.\r\n */\r\nexport class FormGroup {\r\n  private element: Dom;\r\n  public labelElement: Dom;\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      FormGroup: FormGroup\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `FormGroup`.\r\n   * @param contents The form widgets to include in the form group.\r\n   * @param label The label to display for the form group.\r\n   */\r\n  constructor(contents: IFormWidget[], label: string) {\r\n    this.labelElement = $$('span', { className: 'coveo-form-group-label' });\r\n    this.labelElement.text(label);\r\n    this.element = $$('fieldset', { className: 'coveo-form-group' }, this.labelElement);\r\n    _.each(contents, (content: IFormWidget) => {\r\n      this.element.append(content.build());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the form group is bound.\r\n   * @returns {HTMLElement} The form group element.\r\n   */\r\n  public build(): HTMLElement {\r\n    return this.element.el;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/FormGroup.ts","import 'styling/_ResultsPreferences';\r\nimport * as _ from 'underscore';\r\nimport { PreferencesPanelEvents } from '../../events/PreferencesPanelEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { Defer } from '../../misc/Defer';\r\nimport { ComponentOptionsModel } from '../../models/ComponentOptionsModel';\r\nimport { l } from '../../strings/Strings';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { StorageUtils } from '../../utils/StorageUtils';\r\nimport { analyticsActionCauseList, IAnalyticsPreferencesChangeMeta } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { Checkbox } from '../FormWidgets/Checkbox';\r\nimport { FormGroup } from '../FormWidgets/FormGroup';\r\nimport { IFormWidgetSelectable } from '../FormWidgets/FormWidgets';\r\nimport { RadioButton } from '../FormWidgets/RadioButton';\r\n\r\nexport interface IResultsPreferencesOptions {\r\n  enableOpenInOutlook?: boolean;\r\n  enableOpenInNewWindow?: boolean;\r\n  enableQuerySyntax?: boolean;\r\n}\r\n\r\nexport interface IPossiblePreferences {\r\n  openInOutlook?: boolean;\r\n  alwaysOpenInNewWindow?: boolean;\r\n  enableQuerySyntax?: boolean;\r\n}\r\n\r\n/**\r\n * The ResultsPreferences component allows the end user to select preferences related to the search results. These\r\n * preferences are then saved in the local storage of the end user.\r\n *\r\n * This component is normally accessible through the {@link Settings} menu. Its usual location in the DOM is inside the\r\n * {@link PreferencesPanel} component.\r\n *\r\n * See also the {@link ResultsFiltersPreferences} component.\r\n */\r\nexport class ResultsPreferences extends Component {\r\n  static ID = 'ResultsPreferences';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      ResultsPreferences: ResultsPreferences\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IResultsPreferencesOptions = {\r\n    /**\r\n     * Specifies whether to make the option to open results in Microsoft Outlook available.\r\n     *\r\n     * Default value is `false`\r\n     */\r\n    enableOpenInOutlook: ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n    /**\r\n     * Specifies whether to make the option to open results in a new window available.\r\n     *\r\n     * Default value is `true`\r\n     */\r\n    enableOpenInNewWindow: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n    /**\r\n     * Specifies whether to make the option to allow end users to turn query syntax on or off available.\r\n     *\r\n     * If query syntax is enabled, the Coveo Platform tries to interpret special query syntax (e.g.,\r\n     * `@objecttype=message`) when the end user types a query in the [`Querybox`]{@link Querybox} (see\r\n     * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)). Enabling query\r\n     * syntax also causes the `Querybox` to highlight any query syntax.\r\n     *\r\n     * Selecting **On** for the **Enable query syntax** setting enables query syntax, whereas selecting **Off** disables\r\n     * it. Selecting **Automatic** uses the `Querybox` [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax}\r\n     * option value (which is `false` by default).\r\n     *\r\n     * Default value is `false`\r\n     */\r\n    enableQuerySyntax: ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n  };\r\n\r\n  public preferences: IPossiblePreferences;\r\n  private preferencePanelLocalStorage: StorageUtils<IPossiblePreferences>;\r\n  private preferencesPanel: HTMLElement;\r\n  private preferencePanelCheckboxInputs: { [label: string]: Checkbox } = {};\r\n  private preferencePanelRadioInputs: { [label: string]: RadioButton } = {};\r\n\r\n  /**\r\n   * Creates a new ResultsPreference component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the ResultsPreferences component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options: IResultsPreferencesOptions, public bindings: IComponentBindings) {\r\n    super(element, ResultsPreferences.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, ResultsPreferences, options);\r\n\r\n    this.preferencesPanel = $$(this.element).closest(Component.computeCssClassNameForType('PreferencesPanel'));\r\n    this.preferencePanelLocalStorage = new StorageUtils(ResultsPreferences.ID);\r\n    Assert.exists(this.componentOptionsModel);\r\n    Assert.exists(window.localStorage);\r\n    Assert.exists(this.preferencesPanel);\r\n\r\n    this.preferences = this.preferencePanelLocalStorage.load() || {};\r\n    this.adjustPreferencesToComponentConfig();\r\n\r\n    ComponentOptions.initComponentOptions(this.element, ResultsPreferences, this.options);\r\n\r\n    this.updateComponentOptionsModel();\r\n\r\n    this.bind.on(this.preferencesPanel, PreferencesPanelEvents.savePreferences, () => this.save());\r\n    this.bind.on(this.preferencesPanel, PreferencesPanelEvents.exitPreferencesWithoutSave, () => this.exitWithoutSave());\r\n    this.buildCheckboxesInput();\r\n    this.buildRadiosInput();\r\n  }\r\n\r\n  /**\r\n   * Saves the current state of the ResultsPreferences component in the local storage.\r\n   */\r\n  public save() {\r\n    this.fromInputToPreferences();\r\n    this.logger.info('Saving preferences', this.preferences);\r\n    this.preferencePanelLocalStorage.save(this.preferences);\r\n    this.updateComponentOptionsModel();\r\n  }\r\n\r\n  public exitWithoutSave() {\r\n    this.fromPreferencesToCheckboxInput();\r\n  }\r\n\r\n  private updateComponentOptionsModel() {\r\n    const resultLinkOption = _.pick(this.preferences, 'openInOutlook', 'alwaysOpenInNewWindow');\r\n    const searchBoxOption = _.pick(this.preferences, 'enableQuerySyntax');\r\n    this.componentOptionsModel.set(ComponentOptionsModel.attributesEnum.resultLink, resultLinkOption);\r\n    this.componentOptionsModel.set(ComponentOptionsModel.attributesEnum.searchBox, searchBoxOption);\r\n  }\r\n\r\n  private buildRadiosInput() {\r\n    if (this.options.enableQuerySyntax) {\r\n      const createRadioButton = (label: string) => {\r\n        const radio = new RadioButton(\r\n          radioButtonInstance => {\r\n            this.fromPreferenceChangeEventToUsageAnalyticsLog(radioButtonInstance.isSelected() ? 'selected' : 'unselected', label);\r\n            this.save();\r\n\r\n            this.queryController.executeQuery({\r\n              closeModalBox: false\r\n            });\r\n          },\r\n          label,\r\n          'coveo-results-preferences-query-syntax'\r\n        );\r\n        return radio;\r\n      };\r\n\r\n      const translatedLabels = _.map(['On', 'Off', 'Automatic'], label => l(label));\r\n      const radios = _.map(translatedLabels, label => {\r\n        const radio = createRadioButton(label);\r\n        this.preferencePanelRadioInputs[label] = radio;\r\n        return radio;\r\n      });\r\n\r\n      const formGroup = new FormGroup(radios, l('EnableQuerySyntax'));\r\n      $$(this.element).append(formGroup.build());\r\n      this.fromPreferencesToRadioInput();\r\n    }\r\n  }\r\n\r\n  private buildCheckboxesInput() {\r\n    const createCheckbox = (label: string) => {\r\n      const checkbox = new Checkbox(checkboxInstance => {\r\n        this.fromPreferenceChangeEventToUsageAnalyticsLog(checkboxInstance.isSelected() ? 'selected' : 'unselected', label);\r\n        this.save();\r\n        this.queryController.executeQuery({\r\n          closeModalBox: false\r\n        });\r\n      }, label);\r\n      this.preferencePanelCheckboxInputs[label] = checkbox;\r\n      return checkbox;\r\n    };\r\n\r\n    const checkboxes: Checkbox[] = [];\r\n\r\n    if (this.options.enableOpenInOutlook) {\r\n      checkboxes.push(createCheckbox(l('OpenInOutlookWhenPossible')));\r\n    }\r\n    if (this.options.enableOpenInNewWindow) {\r\n      checkboxes.push(createCheckbox(l('AlwaysOpenInNewWindow')));\r\n    }\r\n\r\n    this.element.appendChild(new FormGroup(checkboxes, l('ResultLinks')).build());\r\n    this.fromPreferencesToCheckboxInput();\r\n  }\r\n\r\n  private fromInputToPreferences() {\r\n    this.preferences = this.preferences || {\r\n      openInOutlook: false,\r\n      alwaysOpenInNewWindow: false,\r\n      enableQuerySyntax: undefined\r\n    };\r\n\r\n    _.each(this.preferencePanelCheckboxInputs, (checkbox: Checkbox, label: string) => {\r\n      if (label == l('OpenInOutlookWhenPossible')) {\r\n        if (this.isSelected(l('OpenInOutlookWhenPossible'), label, checkbox)) {\r\n          this.preferences.openInOutlook = true;\r\n        } else if (this.preferences.openInOutlook != null) {\r\n          this.preferences.openInOutlook = false;\r\n        }\r\n      }\r\n      if (label == l('AlwaysOpenInNewWindow')) {\r\n        if (this.isSelected(l('AlwaysOpenInNewWindow'), label, checkbox)) {\r\n          this.preferences.alwaysOpenInNewWindow = true;\r\n        } else if (this.preferences.alwaysOpenInNewWindow != null) {\r\n          this.preferences.alwaysOpenInNewWindow = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    _.each(this.preferencePanelRadioInputs, (radio: RadioButton, label: string) => {\r\n      if (this.isSelected(l('On'), label, radio)) {\r\n        this.preferences.enableQuerySyntax = true;\r\n      }\r\n      if (this.isSelected(l('Off'), label, radio)) {\r\n        this.preferences.enableQuerySyntax = false;\r\n      }\r\n      if (this.isSelected(l('Automatic'), label, radio)) {\r\n        delete this.preferences.enableQuerySyntax;\r\n      }\r\n    });\r\n  }\r\n\r\n  private fromPreferencesToCheckboxInput() {\r\n    if (this.preferences.openInOutlook) {\r\n      this.preferencePanelCheckboxInputs[l('OpenInOutlookWhenPossible')].select(false);\r\n    }\r\n    if (this.preferences.alwaysOpenInNewWindow) {\r\n      this.preferencePanelCheckboxInputs[l('AlwaysOpenInNewWindow')].select(false);\r\n    }\r\n  }\r\n\r\n  private fromPreferencesToRadioInput() {\r\n    if (this.preferences.enableQuerySyntax === true) {\r\n      this.preferencePanelRadioInputs[l('On')].select(false);\r\n    } else if (this.preferences.enableQuerySyntax === false) {\r\n      this.preferencePanelRadioInputs[l('Off')].select(false);\r\n    } else {\r\n      this.preferencePanelRadioInputs[l('Automatic')].select(false);\r\n    }\r\n  }\r\n\r\n  private fromPreferenceChangeEventToUsageAnalyticsLog(type: 'selected' | 'unselected', preference: string) {\r\n    this.usageAnalytics.logCustomEvent<IAnalyticsPreferencesChangeMeta>(\r\n      analyticsActionCauseList.preferencesChange,\r\n      { preferenceName: preference, preferenceType: type },\r\n      this.element\r\n    );\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsPreferencesChangeMeta>(analyticsActionCauseList.preferencesChange, {\r\n      preferenceName: preference,\r\n      preferenceType: type\r\n    });\r\n  }\r\n\r\n  private adjustPreferencesToComponentConfig() {\r\n    // This method is used when there are illogical configuration between what's saved in local storage (the preferences)\r\n    // and how the component is configured.\r\n    // This can happen if an admin change the component configuration after end users have already selected a preferences.\r\n    // We need to adapt the saved preferences to what's actually available in the component\r\n    let needToSave = false;\r\n    if (!this.options.enableOpenInNewWindow) {\r\n      delete this.preferences.alwaysOpenInNewWindow;\r\n      needToSave = true;\r\n    }\r\n\r\n    if (!this.options.enableOpenInOutlook) {\r\n      delete this.preferences.openInOutlook;\r\n      needToSave = true;\r\n    }\r\n\r\n    if (!this.options.enableQuerySyntax) {\r\n      delete this.preferences.enableQuerySyntax;\r\n      needToSave = true;\r\n    }\r\n\r\n    if (needToSave) {\r\n      Defer.defer(() => {\r\n        this.save();\r\n      });\r\n    }\r\n  }\r\n\r\n  private isSelected(checkingFor: string, label: string, input: IFormWidgetSelectable) {\r\n    return checkingFor == label && input.isSelected();\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(ResultsPreferences);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ResultsPreferences/ResultsPreferences.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/vapor/_Radio.scss\n// module id = 555\n// module chunks = 13 19 23 53 88","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/vapor/_FormGroup.scss\n// module id = 561\n// module chunks = 23 24 55 88","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/_ResultsPreferences.scss\n// module id = 661\n// module chunks = 23 88","import { $$ } from '../../utils/Dom';\r\nimport { IFormWidgetWithLabel, IFormWidgetSelectable } from './FormWidgets';\r\nimport 'styling/vapor/_Radio';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\n/**\r\n * A radio button widget with standard styling.\r\n */\r\nexport class RadioButton implements IFormWidgetWithLabel, IFormWidgetSelectable {\r\n  protected element: HTMLElement;\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      RadioButton: RadioButton\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `RadioButton`.\r\n   * @param onChange The function to call when the radio button value changes. This function takes the current\r\n   * `RadioButton` instance as an argument.\r\n   * @param label The label to display next to the radio button.\r\n   * @param name The value to set the `input` HTMLElement `name` attribute to.\r\n   */\r\n  constructor(\r\n    public onChange: (radioButton: RadioButton) => void = (radioButton: RadioButton) => {},\r\n    public label: string,\r\n    public name: string,\r\n    private id: string = label\r\n  ) {\r\n    this.buildContent();\r\n  }\r\n\r\n  /**\r\n   * Resets the radio button.\r\n   */\r\n  public reset() {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = false;\r\n    if (currentlySelected) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select the radio button\r\n   * @param triggerChange will trigger change event if specified and the radio button is not already selected\r\n   */\r\n  public select(triggerChange = true) {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = true;\r\n    if (!currentlySelected && triggerChange) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public build(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public getElement(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  public getValue(): string {\r\n    return this.label;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the radio button is selected.\r\n   * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\r\n   */\r\n  public isSelected(): boolean {\r\n    return this.getRadio().checked;\r\n  }\r\n\r\n  /**\r\n   * Gets the `input` element (the radio button itself).\r\n   * @returns {HTMLInputElement} The `input` element.\r\n   */\r\n  public getRadio(): HTMLInputElement {\r\n    return <HTMLInputElement>$$(this.element).find('input');\r\n  }\r\n\r\n  /**\r\n   * Gets the radio button [`label`]{@link RadioButton.label} element.\r\n   * @returns {HTMLLabelElement} The `label` element.\r\n   */\r\n  public getLabel(): HTMLLabelElement {\r\n    return <HTMLLabelElement>$$(this.element).find('label');\r\n  }\r\n\r\n  private buildContent() {\r\n    const radioOption = $$('div', { className: 'coveo-radio' });\r\n    const radioInput = $$('input', { type: 'radio', name: this.name, id: this.id });\r\n    const labelInput = $$('label', { className: 'coveo-radio-input-label', for: this.id });\r\n    labelInput.text(this.label);\r\n    radioInput.on('change', () => {\r\n      this.onChange(this);\r\n    });\r\n\r\n    radioOption.append(radioInput.el);\r\n    radioOption.append(labelInput.el);\r\n    this.element = radioOption.el;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/RadioButton.ts"],"sourceRoot":""}