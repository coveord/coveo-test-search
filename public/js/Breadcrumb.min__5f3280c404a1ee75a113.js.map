{"version":3,"sources":["Breadcrumb.min__5f3280c404a1ee75a113.js","./src/ui/Breadcrumb/Breadcrumb.ts"],"names":["webpackJsonpCoveo__temporary","239","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","Breadcrumb","ID","ComponentOptions","initComponentOptions","bind","oneRootElement","InitializationEvents","afterInitialization","handleAfterInitialization","onRootElement","BreadcrumbEvents","redrawBreadcrumb","style","display","setAttribute","addDefaultAccessibilityAttributes","_this","getBreadcrumbs","args","breadcrumbs","trigger","root","populateBreadcrumb","logger","debug","isEmpty","lastBreadcrumbs","focusFirstEnabledResultList","clearBreadcrumbs","clearBreadcrumb","usageAnalytics","logSearchEvent","analyticsActionCauseList","breadcrumbResetAll","queryController","executeQuery","drawBreadcrumb","$$","empty","length","breadcrumbItems","document","createElement","addClass","appendChild","each","bcrumb","elem","clearText","undefined","l","el","clear","className","title","AccessibleButton","withElement","withSelectAction","withOwner","withLabel","build","handleDeferredQuerySuccess","handleQueryError","QueryEvents","deferredQuerySuccess","queryError","resultLists","searchInterface","getComponents","firstEnabledResultList","find","resultList","disabled","focus","preventScroll","getAttribute","doExport","exportGlobally","Component","Initialization","registerAutoCreateComponent","597"],"mappings":"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","file":"Breadcrumb.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([75],{\n\n/***/ 239:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(597);\r\nvar underscore_1 = __webpack_require__(0);\r\nvar BreadcrumbEvents_1 = __webpack_require__(34);\r\nvar InitializationEvents_1 = __webpack_require__(17);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\n/**\r\n * The Breadcrumb component displays a summary of the currently active query filters.\r\n *\r\n * For example, when the user selects a {@link Facet} value, the breadcrumbs display this value.\r\n *\r\n * The active filters are obtained by the component by firing an event in the Breadcrumb component.\r\n *\r\n * All other components having an active state can react to this event by providing custom bits of HTML to display\r\n * inside the breadcrumbs.\r\n *\r\n * Thus, it is possible to easily extend the Breadcrumb component using custom code to display information about custom\r\n * states and filters.\r\n *\r\n * See {@link BreadcrumbEvents} for the list of events and parameters sent when a Breadcrumb component is populated.\r\n */\r\nvar Breadcrumb = /** @class */ (function (_super) {\r\n    __extends(Breadcrumb, _super);\r\n    /**\r\n     * Creates a new Breadcrumb component. Binds event on {@link QueryEvents.deferredQuerySuccess} to draw the\r\n     * breadcrumbs.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the Breadcrumb component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function Breadcrumb(element, options, bindings) {\r\n        var _this = _super.call(this, element, Breadcrumb.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Breadcrumb, options);\r\n        _this.bind.oneRootElement(InitializationEvents_1.InitializationEvents.afterInitialization, function () { return _this.handleAfterInitialization(); });\r\n        _this.bind.onRootElement(BreadcrumbEvents_1.BreadcrumbEvents.redrawBreadcrumb, function () { return _this.redrawBreadcrumb(); });\r\n        _this.element.style.display = 'none';\r\n        _this.element.setAttribute('tabindex', '-1');\r\n        _this.addDefaultAccessibilityAttributes();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Triggers the event to populate the breadcrumbs. Components such as {@link Facet} can populate the breadcrumbs.\r\n     *\r\n     * This method triggers a {@link BreadcrumbEvents.populateBreadcrumb} event with an\r\n     * {@link IPopulateBreadcrumbEventArgs} object (an array) that other components or code can populate.\r\n     * @returns {IBreadcrumbItem[]} A populated breadcrumb item list.\r\n     */\r\n    Breadcrumb.prototype.getBreadcrumbs = function () {\r\n        var args = { breadcrumbs: [] };\r\n        this.bind.trigger(this.root, BreadcrumbEvents_1.BreadcrumbEvents.populateBreadcrumb, args);\r\n        this.logger.debug('Retrieved breadcrumbs', args.breadcrumbs);\r\n        // If newly received breadcrumbs are empty, and last breadcrumbs were not.\r\n        // this means end user removed the last filter:\r\n        // We want to shift keyboard focus to the result list container in that case, for ease of use of the interface\r\n        // https://coveord.atlassian.net/browse/JSUI-3078\r\n        if (underscore_1.isEmpty(args.breadcrumbs) && !underscore_1.isEmpty(this.lastBreadcrumbs)) {\r\n            this.focusFirstEnabledResultList();\r\n        }\r\n        this.lastBreadcrumbs = args.breadcrumbs;\r\n        return args.breadcrumbs;\r\n    };\r\n    /**\r\n     * Triggers the event to clear the current breadcrumbs that components such as {@link Facet} can populate.\r\n     *\r\n     * Also triggers a new query and logs the `breadcrumbResetAll` event in the usage analytics.\r\n     */\r\n    Breadcrumb.prototype.clearBreadcrumbs = function () {\r\n        var args = {};\r\n        this.bind.trigger(this.root, BreadcrumbEvents_1.BreadcrumbEvents.clearBreadcrumb, args);\r\n        this.logger.debug('Clearing breadcrumbs');\r\n        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.breadcrumbResetAll, {});\r\n        this.queryController.executeQuery();\r\n    };\r\n    /**\r\n     * Draws the specified breadcrumb items.\r\n     * @param breadcrumbs The breadcrumb items to draw.\r\n     */\r\n    Breadcrumb.prototype.drawBreadcrumb = function (breadcrumbs) {\r\n        var _this = this;\r\n        Dom_1.$$(this.element).empty();\r\n        if (breadcrumbs.length != 0) {\r\n            this.element.style.display = '';\r\n        }\r\n        else {\r\n            this.element.style.display = 'none';\r\n        }\r\n        var breadcrumbItems = document.createElement('div');\r\n        Dom_1.$$(breadcrumbItems).addClass('coveo-breadcrumb-items');\r\n        this.element.appendChild(breadcrumbItems);\r\n        underscore_1.each(breadcrumbs, function (bcrumb) {\r\n            var elem = bcrumb.element;\r\n            Dom_1.$$(elem).addClass('coveo-breadcrumb-item');\r\n            breadcrumbItems.appendChild(elem);\r\n        });\r\n        var clearText = Dom_1.$$('div', undefined, Strings_1.l('ClearAllFilters')).el;\r\n        var clear = Dom_1.$$('div', {\r\n            className: 'coveo-breadcrumb-clear-all',\r\n            title: Strings_1.l('ClearAllFilters')\r\n        }, clearText).el;\r\n        new AccessibleButton_1.AccessibleButton()\r\n            .withElement(clear)\r\n            .withSelectAction(function () { return _this.clearBreadcrumbs(); })\r\n            .withOwner(this.bind)\r\n            .withLabel(Strings_1.l('ClearAllFilters'))\r\n            .build();\r\n        this.element.appendChild(clear);\r\n    };\r\n    Breadcrumb.prototype.redrawBreadcrumb = function () {\r\n        this.lastBreadcrumbs ? this.drawBreadcrumb(this.lastBreadcrumbs) : this.drawBreadcrumb(this.getBreadcrumbs());\r\n    };\r\n    Breadcrumb.prototype.handleDeferredQuerySuccess = function () {\r\n        this.drawBreadcrumb(this.getBreadcrumbs());\r\n    };\r\n    Breadcrumb.prototype.handleQueryError = function () {\r\n        this.drawBreadcrumb(this.getBreadcrumbs());\r\n    };\r\n    Breadcrumb.prototype.handleAfterInitialization = function () {\r\n        var _this = this;\r\n        // We must bind to these events after the initialization to make sure the breadcrumb generation\r\n        // is made with updated components. (E.G facet, facetrange, ...)\r\n        this.bind.onRootElement(QueryEvents_1.QueryEvents.deferredQuerySuccess, function () { return _this.handleDeferredQuerySuccess(); });\r\n        this.bind.onRootElement(QueryEvents_1.QueryEvents.queryError, function () { return _this.handleQueryError(); });\r\n    };\r\n    Breadcrumb.prototype.focusFirstEnabledResultList = function () {\r\n        var resultLists = this.searchInterface.getComponents('ResultList');\r\n        var firstEnabledResultList = underscore_1.find(resultLists, function (resultList) { return resultList.disabled === false; });\r\n        if (firstEnabledResultList) {\r\n            // Problem with types definition of TypeScript 2.8\r\n            // default .focus() definition is incomplete.\r\n            // force cast to any\r\n            firstEnabledResultList.element.focus({ preventScroll: true });\r\n        }\r\n    };\r\n    Breadcrumb.prototype.addDefaultAccessibilityAttributes = function () {\r\n        if (!this.element.getAttribute('role')) {\r\n            this.element.setAttribute('role', 'navigation');\r\n        }\r\n        if (!this.element.getAttribute('aria-label')) {\r\n            this.element.setAttribute('aria-label', Strings_1.l('Breadcrumb'));\r\n        }\r\n    };\r\n    Breadcrumb.ID = 'Breadcrumb';\r\n    Breadcrumb.options = {};\r\n    Breadcrumb.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Breadcrumb: Breadcrumb\r\n        });\r\n    };\r\n    return Breadcrumb;\r\n}(Component_1.Component));\r\nexports.Breadcrumb = Breadcrumb;\r\nInitialization_1.Initialization.registerAutoCreateComponent(Breadcrumb);\r\n\n\n/***/ }),\n\n/***/ 597:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Breadcrumb.min__5f3280c404a1ee75a113.js","import 'styling/_Breadcrumb';\r\nimport { each, find, isEmpty } from 'underscore';\r\nimport { BreadcrumbEvents, IBreadcrumbItem, IClearBreadcrumbEventArgs, IPopulateBreadcrumbEventArgs } from '../../events/BreadcrumbEvents';\r\nimport { InitializationEvents } from '../../events/InitializationEvents';\r\nimport { QueryEvents } from '../../events/QueryEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { l } from '../../strings/Strings';\r\nimport { AccessibleButton } from '../../utils/AccessibleButton';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { analyticsActionCauseList, IAnalyticsNoMeta } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\n\r\nexport interface IBreadcrumbOptions {}\r\n\r\n/**\r\n * The Breadcrumb component displays a summary of the currently active query filters.\r\n *\r\n * For example, when the user selects a {@link Facet} value, the breadcrumbs display this value.\r\n *\r\n * The active filters are obtained by the component by firing an event in the Breadcrumb component.\r\n *\r\n * All other components having an active state can react to this event by providing custom bits of HTML to display\r\n * inside the breadcrumbs.\r\n *\r\n * Thus, it is possible to easily extend the Breadcrumb component using custom code to display information about custom\r\n * states and filters.\r\n *\r\n * See {@link BreadcrumbEvents} for the list of events and parameters sent when a Breadcrumb component is populated.\r\n */\r\nexport class Breadcrumb extends Component {\r\n  static ID = 'Breadcrumb';\r\n  static options: IBreadcrumbOptions = {};\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Breadcrumb: Breadcrumb\r\n    });\r\n  };\r\n\r\n  private lastBreadcrumbs: IBreadcrumbItem[];\r\n\r\n  /**\r\n   * Creates a new Breadcrumb component. Binds event on {@link QueryEvents.deferredQuerySuccess} to draw the\r\n   * breadcrumbs.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Breadcrumb component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IBreadcrumbOptions, bindings?: IComponentBindings) {\r\n    super(element, Breadcrumb.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Breadcrumb, options);\r\n\r\n    this.bind.oneRootElement(InitializationEvents.afterInitialization, () => this.handleAfterInitialization());\r\n    this.bind.onRootElement(BreadcrumbEvents.redrawBreadcrumb, () => this.redrawBreadcrumb());\r\n    this.element.style.display = 'none';\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.addDefaultAccessibilityAttributes();\r\n  }\r\n\r\n  /**\r\n   * Triggers the event to populate the breadcrumbs. Components such as {@link Facet} can populate the breadcrumbs.\r\n   *\r\n   * This method triggers a {@link BreadcrumbEvents.populateBreadcrumb} event with an\r\n   * {@link IPopulateBreadcrumbEventArgs} object (an array) that other components or code can populate.\r\n   * @returns {IBreadcrumbItem[]} A populated breadcrumb item list.\r\n   */\r\n  public getBreadcrumbs(): IBreadcrumbItem[] {\r\n    const args = <IPopulateBreadcrumbEventArgs>{ breadcrumbs: [] };\r\n    this.bind.trigger(this.root, BreadcrumbEvents.populateBreadcrumb, args);\r\n    this.logger.debug('Retrieved breadcrumbs', args.breadcrumbs);\r\n\r\n    // If newly received breadcrumbs are empty, and last breadcrumbs were not.\r\n    // this means end user removed the last filter:\r\n    // We want to shift keyboard focus to the result list container in that case, for ease of use of the interface\r\n    // https://coveord.atlassian.net/browse/JSUI-3078\r\n    if (isEmpty(args.breadcrumbs) && !isEmpty(this.lastBreadcrumbs)) {\r\n      this.focusFirstEnabledResultList();\r\n    }\r\n    this.lastBreadcrumbs = args.breadcrumbs;\r\n    return args.breadcrumbs;\r\n  }\r\n\r\n  /**\r\n   * Triggers the event to clear the current breadcrumbs that components such as {@link Facet} can populate.\r\n   *\r\n   * Also triggers a new query and logs the `breadcrumbResetAll` event in the usage analytics.\r\n   */\r\n  public clearBreadcrumbs() {\r\n    const args = <IClearBreadcrumbEventArgs>{};\r\n    this.bind.trigger(this.root, BreadcrumbEvents.clearBreadcrumb, args);\r\n    this.logger.debug('Clearing breadcrumbs');\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.breadcrumbResetAll, {});\r\n    this.queryController.executeQuery();\r\n  }\r\n\r\n  /**\r\n   * Draws the specified breadcrumb items.\r\n   * @param breadcrumbs The breadcrumb items to draw.\r\n   */\r\n  public drawBreadcrumb(breadcrumbs: IBreadcrumbItem[]) {\r\n    $$(this.element).empty();\r\n    if (breadcrumbs.length != 0) {\r\n      this.element.style.display = '';\r\n    } else {\r\n      this.element.style.display = 'none';\r\n    }\r\n\r\n    const breadcrumbItems = document.createElement('div');\r\n    $$(breadcrumbItems).addClass('coveo-breadcrumb-items');\r\n    this.element.appendChild(breadcrumbItems);\r\n    each(breadcrumbs, (bcrumb: IBreadcrumbItem) => {\r\n      const elem = bcrumb.element;\r\n      $$(elem).addClass('coveo-breadcrumb-item');\r\n      breadcrumbItems.appendChild(elem);\r\n    });\r\n\r\n    const clearText = $$('div', undefined, l('ClearAllFilters')).el;\r\n    const clear = $$(\r\n      'div',\r\n      {\r\n        className: 'coveo-breadcrumb-clear-all',\r\n        title: l('ClearAllFilters')\r\n      },\r\n      clearText\r\n    ).el;\r\n\r\n    new AccessibleButton()\r\n      .withElement(clear)\r\n      .withSelectAction(() => this.clearBreadcrumbs())\r\n      .withOwner(this.bind)\r\n      .withLabel(l('ClearAllFilters'))\r\n      .build();\r\n\r\n    this.element.appendChild(clear);\r\n  }\r\n\r\n  private redrawBreadcrumb() {\r\n    this.lastBreadcrumbs ? this.drawBreadcrumb(this.lastBreadcrumbs) : this.drawBreadcrumb(this.getBreadcrumbs());\r\n  }\r\n\r\n  private handleDeferredQuerySuccess() {\r\n    this.drawBreadcrumb(this.getBreadcrumbs());\r\n  }\r\n\r\n  private handleQueryError() {\r\n    this.drawBreadcrumb(this.getBreadcrumbs());\r\n  }\r\n\r\n  private handleAfterInitialization() {\r\n    // We must bind to these events after the initialization to make sure the breadcrumb generation\r\n    // is made with updated components. (E.G facet, facetrange, ...)\r\n    this.bind.onRootElement(QueryEvents.deferredQuerySuccess, () => this.handleDeferredQuerySuccess());\r\n    this.bind.onRootElement(QueryEvents.queryError, () => this.handleQueryError());\r\n  }\r\n\r\n  private focusFirstEnabledResultList() {\r\n    const resultLists = this.searchInterface.getComponents<Component>('ResultList');\r\n    const firstEnabledResultList = find(resultLists, resultList => resultList.disabled === false);\r\n    if (firstEnabledResultList) {\r\n      // Problem with types definition of TypeScript 2.8\r\n      // default .focus() definition is incomplete.\r\n      // force cast to any\r\n      (firstEnabledResultList.element as any).focus({ preventScroll: true });\r\n    }\r\n  }\r\n\r\n  private addDefaultAccessibilityAttributes() {\r\n    if (!this.element.getAttribute('role')) {\r\n      this.element.setAttribute('role', 'navigation');\r\n    }\r\n    if (!this.element.getAttribute('aria-label')) {\r\n      this.element.setAttribute('aria-label', l('Breadcrumb'));\r\n    }\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(Breadcrumb);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Breadcrumb/Breadcrumb.ts"],"sourceRoot":""}