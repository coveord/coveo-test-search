{"version":3,"sources":["Backdrop.min__a9b0c0df44822bb24a08.js","./src/ui/YouTube/YouTubeThumbnail.ts","./src/ui/Backdrop/Backdrop.ts","./src/ui/ResultLink/ResultLink.ts"],"names":["webpackJsonpCoveo__temporary","187","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","result","ModalBox","origin","YouTubeThumbnail","ID","ComponentOptions","initComponentOptions","resultLink","$$","className","Component","computeCssClassName","ResultLink","el","thumbnailDiv","append","img","src","Utils","getFieldValue","alt","title","style","width","height","onerror","svgVideo","SVGIcons","icons","video","SVGDom","addStyleToSVGInContainer","remove","span","Initialization","automaticallyCreateComponentsInsideResult","embed","onClick","openYoutubeIframe","modalbox","AccessibleModal","searchInterface","modalContainer","overlayClose","_this","openResultLink","get","openLinkAsConfigured","iframe","extractVideoId","allowfullscreen","div","openResult","showDate","content","validation","wrapper","find","on","close","clickUri","split","doExport","exportGlobally","buildStringOption","defaultValue","buildBooleanOption","registerAutoCreateComponent","238","_window","Backdrop","window","background","overlayColor","overlayGradient","imageUrl","imageField","backgroundSize","configureSpecialBackdropActions","getBindings","AccessibleButton","withElement","withLabel","withSelectAction","e","target","hasClass","build","buildFieldOption","buildColorOption","depend","534","601","71","__assign","assign","t","s","i","n","arguments","length","call","os","logAnalytics","debounce","queryController","saveLastQuery","documentURL","getAttribute","undefined","escapedClickUri","logDocumentOpen","Defer","flush","globalOptions","originalOptionsObject","initialOptions","resultLinkOptions","componentOptionsModel","ComponentOptionsModel","attributesEnum","extend","resolveResult","openQuickview","raw","DeviceUtils","isMobileDevice","setAttribute","Assert","exists","quickviewShouldBeOpened","once","setTimeout","clearTimeout","renderUri","bindEventToOpen","test","innerHTML","getDisplayedTitle","l","getDisplayedTitleAsText","openLink","location","href","getResultUri","openLinkInNewWindow","open","openLinkInOutlook","hasOutlookField","toExecuteOnOpen","bindOnClickIfNotUndefined","bindOpenQuickviewIfNotUndefined","setHrefIfNotAlready","openLinkThatIsNotAnAnchor","titleTemplate","newTitle","StringUtils","buildStringTemplateFromResult","StreamHighlightUtils","highlightStreamText","termsToHighlight","phrasesToHighlight","HighlightUtils","highlightString","titleHighlights","container","setHtml","text","escape","enumerable","configurable","resultElement","trigger","ResultListEvents","preventDefault","elementIsAnAnchor","alwaysOpenInNewWindow","openInOutlook","isNonEmptyString","usageAnalytics","logClickEvent","analyticsActionCauseList","documentOpen","documentTitle","author","root","filterProtocol","uri","isAbsolute","isRelative","hrefTemplate","field","setField","tagName","OSUtils","OS_NAME","MACOSX","WINDOWS","isUriThatMustBeOpenedInQuickview","toLowerCase","indexOf","QueryUtils","hasHTMLVersion","buildCustomOption"],"mappings":"AAAAA,8BAA8B,GAAG,GAAG,KAE9BC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAEA,IAAIC,GAAaC,MAAQA,KAAKD,WAAc,WACxC,GAAIE,GAAgBC,OAAOC,iBACpBC,uBAA2BC,QAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIC,KAAKD,GAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,IACzE,OAAO,UAAUF,EAAGC,GAEhB,QAASG,KAAOV,KAAKW,YAAcL,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaL,OAAOW,OAAON,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,OAGvFR,QAAOY,eAAejB,EAAS,cAAgBkB,OAAO,GCjBtD,aACA,OAEA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,QAEA,QACA,SAoBA,cA0CE,WACSC,EACAC,EACAC,EACAC,EACPC,EACQC,OADR,KAAAD,MAAW,EAAAA,SALb,OAQE,YAAMJ,EAASM,EAAiBC,GAAIL,IAAS,IAPtC,GAAAF,UACA,EAAAC,UACA,EAAAC,WACA,EAAAC,SAEC,EAAAE,SAGR,EAAKJ,QAAU,EAAAO,iBAAiBC,qBAAqBT,EAASM,EAAkBL,GAEhF,EAAKS,WAAa,EAAAC,GAAG,KACnBC,UAAW,EAAAC,UAAUC,oBAAoB,EAAAC,cAGtCV,IACH,EAAKA,OAAS,EAAKK,WAAWM,GAGhC,IAAMC,GAAe,EAAAN,GAAG,OACtBC,UAAW,qCAGb,GAAKF,WAAWQ,OAAOD,EAAaD,GAEpC,IAAMG,GAAM,EAAAR,GAAG,OACbS,IAAK,EAAAC,MAAMC,cAAc,EAAKnB,OAAQ,kBACtCS,UAAW,8BACXW,IAAK,EAAKpB,OAAOqB,MACjBA,MAAO,EAAKrB,OAAOqB,OAGrBL,GAAIH,GAAGS,MAAMC,MAAQ,EAAKzB,QAAQyB,MAClCP,EAAIH,GAAGS,MAAME,OAAS,EAAK1B,QAAQ0B,OACnCR,EAAIH,GAAGY,QAAU,WACf,GAAMC,GAAW,EAAAlB,GAAG,SAAW,EAAAmB,SAASC,MAAMC,OAAOhB,EACrD,GAAAiB,OAAOC,yBAAyBL,GAC9BH,MAAO,EAAKzB,QAAQyB,QAEtB,EAAAf,GAAGQ,GAAKgB,SACRlB,EAAaC,OAAOW,IAEtBZ,EAAaC,OAAOC,EAAIH,GAExB,IAAMoB,GAAO,EAAAzB,GAAG,QACdC,UAAW,uCD7BT,OCgCJK,GAAaC,OAAOkB,EAAKpB,IAEzB,EAAAL,GAAG,EAAKX,SAASkB,OAAO,EAAKR,WAAWM,IAExC,EAAAqB,eAAeC,0CAA0CtC,EAASG,GAChEY,WAAY,EAAKd,QAAQsC,OAAUC,QAAS,WAAM,SAAKC,sBAAwB,OAEjF,EAAKC,SAAW,GAAI,GAAAC,gBAAgB,uBAAwB,EAAKC,gBAAgB3C,QAAQ4C,eAAgBzC,GACvG0C,cAAc,IDxCLC,ECqFf,MA/IsC,QA2G7B,YAAAC,eAAP,WACwC,EAAAC,IAAIjE,KAAK0B,WAAWM,IACtCkC,wBAGd,YAAAT,kBAAR,sBAEQU,EAAS,EAAAxC,GAAG,UAChBS,IAAK,iCAAiCpC,KAAKoE,iBAAgB,cAC3DC,gBAAiB,kBACjB3B,MAAO,OACPC,OAAQ,OACRH,MAAOxC,KAAKmB,OAAOqB,QAGf8B,EAAM,EAAA3C,GAAG,MAEf2C,GAAIpC,OAAOiC,EAAOnC,IAElBhC,KAAK0D,SAASa,YACZpD,OAAQnB,KAAKmB,OACbF,SAAWuD,UAAU,EAAMhC,MAAOxC,KAAKmB,OAAOqB,OAC9CtB,SAAUlB,KAAKkB,SACfuD,QAASH,EAAItC,GACb0C,WAAY,WAAM,UAClBrD,OAAQrB,KAAKqB,SAGf,EAAAM,GAAG,EAAAA,GAAG3B,KAAK0D,SAASiB,SAASC,KAAK,kCAAkCC,GAAG,QAAS,WAC9E,EAAKnB,SAASoB,WAIV,YAAAV,eAAR,WACE,MAAOpE,MAAKmB,OAAO4D,SAASC,MAAM,YAAY,IA5IzC,EAAAzD,GAAK,mBAEL,EAAA0D,SAAW,WAChB,EAAAC,gBACE5D,iBAAkBA,KAOf,EAAAL,SAMLyB,MAAO,EAAAlB,iBAAiB2D,mBAAoBC,aAAc,UAO1DzC,OAAQ,EAAAnB,iBAAiB2D,mBAAoBC,aAAc,UAU3D7B,MAAO,EAAA/B,iBAAiB6D,oBAAqBD,cAAc,KA4G/D,GA/IsC,EAAAvD,UAAzB,GAAAP,mBAgJb,EAAA+B,eAAeiC,4BAA4BhE,IDRrCiE,IACA,SAAU3F,EAAQC,EAASC,GAEjC,YAEA,IAAIC,GAAaC,MAAQA,KAAKD,WAAc,WACxC,GAAIE,GAAgBC,OAAOC,iBACpBC,uBAA2BC,QAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIC,KAAKD,GAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,IACzE,OAAO,UAAUF,EAAGC,GAEhB,QAASG,KAAOV,KAAKW,YAAcL,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaL,OAAOW,OAAON,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,OAGvFR,QAAOY,eAAejB,EAAS,cAAgBkB,OAAO,IExLtD,MACA,aACA,OAEA,OACA,OACA,OAEA,OAEA,OAEA,SACA,QAqBA,cAqDE,WACSC,EACAC,EACPC,EACOC,EACAqE,EACApE,OAAA,KAAAA,MAAW,EAAAA,SANpB,OAQE,YAAMJ,EAASyE,EAASlE,GAAIL,IAAS,IAP9B,GAAAF,UACA,EAAAC,UAEA,EAAAE,SACA,EAAAqE,UACA,EAAApE,WAGP,EAAKH,QAAU,EAAAO,iBAAiBC,qBAAqBT,EAASyE,EAAUxE,GAExE,EAAKuE,QAAU,EAAKA,SAAWE,MAE/B,IAAIC,GAAa,EF4Ib,OE3IA,GAAK1E,QAAQ2E,eACfD,GACE,mBAAmB,EAAK1E,QAAQ2E,aAAY,MAC3C,EAAK3E,QAAQ4E,gBAAkB,gBAAkB,EAAK5E,QAAQ2E,cAC/D,OAIJD,GAAc,SADM,EAAK1E,QAAQ6E,UAAY,EAAAzD,MAAMC,cAAcnB,EAAgB,EAAKF,QAAQ8E,aAC7D,mBAEjC,EAAK/E,QAAQyB,MAAMkD,WAAaA,EAChC,EAAK3E,QAAQyB,MAAMuD,eAAiB,QAEpC,EAAA3C,eAAeC,0CAA0CtC,EAASG,GAClE,EAAK8E,kCF6HMlC,EE7Ff,MAjH8B,QAoFpB,YAAAkC,gCAAR,WAEE,GAAI,EAAA5D,MAAMC,cAActC,KAAKmB,OAAQ,kBAAmB,CAGtD,GAAI,GAAmB,GAAI,GAAAG,iBACzB,EAAAK,GAAG,OAAOK,IAERuB,OAAO,GAEkBvD,KAAKkG,cAChClG,KAAKmB,OACLnB,KAAKoB,SACLpB,KAAKgB,UAGP,GAAI,GAAAmF,kBACDC,YAAYpG,KAAKgB,SACjBqF,UAAUrG,KAAKmB,OAAOqB,OACtB8D,iBAAiB,SAAAC,GAGX,EAAA5E,GAAgB4E,EAAEC,QAAQC,SAAS,oBACtC,EAAiBzC,mBAGpB0C,UA7GA,EAAAnF,GAAK,WAEL,EAAA0D,SAAW,WAChB,EAAAC,gBACEO,SAAUA,KAOP,EAAAxE,SAML6E,SAAU,EAAAtE,iBAAiB2D,oBAO3BY,WAAY,EAAAvE,iBAAiBmF,mBAS7Bf,aAAc,EAAApE,iBAAiBoF,mBAQ/Bf,gBAAiB,EAAArE,iBAAiB6D,oBAAqBD,cAAc,EAAOyB,OAAQ,kBAuExF,GAjH8B,EAAAhF,UAAjB,GAAA4D,WAmHb,EAAApC,eAAeiC,4BAA4BG,IFgKrCqB,IACA,SAAUlH,EAAQC,KAMlBkH,IACA,SAAUnH,EAAQC,KAMlBmH,GACA,SAAUpH,EAAQC,EAASC,GAEjC,YAEA,IAAIC,GAAaC,MAAQA,KAAKD,WAAc,WACxC,GAAIE,GAAgBC,OAAOC,iBACpBC,uBAA2BC,QAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIC,KAAKD,GAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,IACzE,OAAO,UAAUF,EAAGC,GAEhB,QAASG,KAAOV,KAAKW,YAAcL,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaL,OAAOW,OAAON,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,QAGnFuG,EAAYjH,MAAQA,KAAKiH,UAAa/G,OAAOgH,QAAU,SAASC,GAChE,IAAK,GAAIC,GAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAAK,CACjDD,EAAIG,UAAUF,EACd,KAAK,GAAI7G,KAAK4G,GAAOlH,OAAOU,UAAUH,eAAegH,KAAKL,EAAG5G,KACzD2G,EAAE3G,GAAK4G,EAAE5G,IAEjB,MAAO2G,GAEXjH,QAAOY,eAAejB,EAAS,cAAgBkB,OAAO,GG1VtD,YACA,OACA,QAEA,QAEA,QACA,QAEA,QACA,SACA,OACA,QACA,OACA,OACA,QACA,OACA,SACA,QACA,OACA,MAEA,OACA,aACA,QAQA,cA2OE,WACSC,EACAC,EACAC,EACAC,EACAuG,GALT,MAOE,YAAM1G,EAASe,EAAWR,GAAIL,IAAS,IANhC,GAAAF,UACA,EAAAC,UACA,EAAAC,WACA,EAAAC,SACA,EAAAuG,KAmOD,EAAAC,aAAe,EAAAC,SACrB,WACE,EAAKC,gBAAgBC,eACrB,IAAIC,GAAc,EAAApG,GAAG,EAAKX,SAASgH,aAAa,YAC7BC,IAAfF,GAA2C,IAAfA,IAC9BA,EAAc,EAAKG,iBAEjB,EAAKjH,QAAQ0G,aACf,EAAK1G,QAAQ0G,aAAaI,GAE1B,EAAKI,gBAAgBJ,GAEvB,EAAAK,MAAMC,SAER,MACA,EA9OA,IAAMC,GAAgB,EAAK1E,gBAAgB3C,QAAQsH,sBAAsBxG,EAAWR,QAC9EiH,EAAiB,EAAAhH,iBAAiBC,qBAAqBT,EAASe,EAAY,KAAKuG,EAAkBrH,IACnGwH,EAAoB,EAAKC,sBAAsBzE,IAAI,EAAA0E,sBAAsBC,eAAelH,WAa9F,IAZA,EAAKT,QAAU,EAAA4H,UAAWL,EAAgBC,GAE1C,EAAKtH,OAASA,GAAU,EAAK2H,gBAEK,MAA9B,EAAK7H,QAAQ8H,gBACf,EAAK9H,QAAQ8H,cAA+C,mBAA/B5H,EAAO6H,IAAmB,eAA0B,EAAAC,YAAYC,kBAE/F,EAAKlI,QAAQmI,aAAa,WAAY,KAEtC,EAAAC,OAAOC,OAAO,EAAKX,uBACnB,EAAAU,OAAOC,OAAO,EAAKlI,SAEd,EAAKmI,0BAA2B,CAQnC,GAAM,GAAkB,EAAAC,KAAK,WAAM,SAAK5B,gBAExC,GAAAhG,GAAGX,GAAS6D,IAAI,cAAe,QAAS,YAAa,WAAY,EACjE,IAAI,EACJ,GAAAlD,GAAGX,GAAS6D,GAAG,aAAc,WAC3B,EAAiBa,OAAO8D,WAAW,EAAiB,OAEtD,EAAA7H,GAAGX,GAAS6D,GAAG,WAAY,WACrB,GACF4E,aAAa,KHkIf,MG9HJ,GAAKC,UAAU1I,EAASG,GACxB,EAAKwI,kBH6HM5F,EGqIf,MA3hBgC,QA2RvB,YAAA2F,UAAP,SAAiB1I,EAAsBG,GACrC,GAAI,QAAQyI,KAAK5J,KAAKgB,QAAQ6I,WAAY,CACxC,GAAMrH,GAAQxC,KAAK8J,mBACnB9J,MAAKgB,QAAQ6I,UAAYrH,EACzBxC,KAAKgB,QAAQmI,aAAa,aAAc,EAAAY,EAAE,WAErC/J,KAAKgB,QAAQwB,QAChBxC,KAAKgB,QAAQwB,MAAQxC,KAAKgK,6BAQzB,YAAAC,SAAP,SAAgBtC,OAAA,KAAAA,OAAA,GACVA,GACF3H,KAAK2H,eAEPjC,OAAOwE,SAASC,KAAOnK,KAAKoK,gBAOvB,YAAAC,oBAAP,SAA2B1C,OAAA,KAAAA,OAAA,GACrBA,GACF3H,KAAK2H,eAEPjC,OAAO4E,KAAKtK,KAAKoK,eAAgB,WAW5B,YAAAG,kBAAP,SAAyB5C,OAAA,KAAAA,OAAA,GACnB3H,KAAKwK,oBACH7C,GACF3H,KAAK2H,eAEP3H,KAAKiK,aAWF,YAAA/F,qBAAP,SAA4ByD,OAAA,KAAAA,OAAA,GACtB3H,KAAKyK,kBACH9C,GACF3H,KAAK2H,eAEP3H,KAAKyK,oBAIC,YAAAd,gBAAV,WACE,MACE3J,MAAK0K,6BACL1K,KAAK2K,mCACL3K,KAAK4K,uBACL5K,KAAK6K,6BAID,YAAAf,kBAAR,WACE,GAAK9J,KAAKiB,QAAQ6J,cAIX,CACL,GAAIC,GAAW,EAAAC,YAAYC,8BAA8BjL,KAAKiB,QAAQ6J,cAAe9K,KAAKmB,OAC1F,OAAO4J,GACH,EAAAG,qBAAqBC,oBAAoBJ,EAAU/K,KAAKmB,OAAOiK,iBAAkBpL,KAAKmB,OAAOkK,oBAC7FrL,KAAKkI,gBAPT,MAAOlI,MAAKmB,OAAOqB,MACf,EAAA8I,eAAeC,gBAAgBvL,KAAKmB,OAAOqB,MAAOxC,KAAKmB,OAAOqK,gBAAiB,KAAM,mBACrFxL,KAAKkI,iBASL,YAAA8B,wBAAR,WACE,GAAMyB,GAAY,EAAA9J,GAAG,MAErB,OADA8J,GAAUC,QAAQ1L,KAAK8J,qBAChB2B,EAAUE,QAGnB,sBAAY,+BHyHN1H,IGzHN,WACE,MAAO,GAAA2H,OAAO5L,KAAKmB,OAAO4D,WH2HtB8G,YAAY,EACZC,cAAc,IGzHZ,YAAApB,0BAAR,qBACE,YAA4BzC,IAAxBjI,KAAKiB,QAAQuC,UACfxD,KAAKyK,gBAAkB,SAAClE,GACtB,EAAKtF,QAAQuC,QAAQiE,KAAK,EAAMlB,EAAG,EAAKpF,UAG1C,GAAI,GAAAgF,kBACDC,YAAYpG,KAAKgB,SACjBqF,UAAUrG,KAAKmB,OAAOqB,OACtB8D,iBAAiB,SAACC,GAAa,SAAKkE,gBAAgBlE,KACpDG,SAEI,IAMH,YAAAiE,gCAAR,qBACE,SAAI3K,KAAKsJ,4BACPtJ,KAAKyK,gBAAkB,WACrB,EAAA9I,GAAG,EAAKT,SAAS6K,eAAeC,QAAQ,EAAAC,iBAAiBlD,gBAG3D,EAAApH,GAAG3B,KAAKgB,SAAS6D,GAAG,QAAS,SAAC0B,GAC5BA,EAAE2F,iBACF,EAAKzB,qBAGA,IAMH,YAAAI,0BAAR,qBACE,QAAK7K,KAAKmM,sBACRnM,KAAKyK,gBAAkB,WACjB,EAAKxJ,QAAQmL,sBACX,EAAKnL,QAAQoL,cACf,EAAK9B,oBAEL,EAAKF,sBAGP,EAAKJ,YAIT,EAAAtI,GAAG3B,KAAKgB,SAAS6D,GAAG,QAAS,WAC3B,EAAK4F,qBAGA,IAKH,YAAAG,oBAAR,WAIE,SAAI5K,KAAKmM,qBAAwB,EAAA9J,MAAMiK,iBAAiB,EAAA3K,GAAG3B,KAAKgB,SAASgH,aAAa,YACpF,EAAArG,GAAG3B,KAAKgB,SAASmI,aAAa,OAAQnJ,KAAKoK,iBACvCpK,KAAKiB,QAAQmL,uBAA2BpM,KAAKiB,QAAQoL,eAAiBrM,KAAKwK,mBAC7E,EAAA7I,GAAG3B,KAAKgB,SAASmI,aAAa,SAAU,WAEnC,IAMH,YAAAhB,gBAAR,SAAwBgC,GACtBnK,KAAKuM,eAAeC,cAClB,EAAAC,yBAAyBC,cAEvB3E,YAAaoC,EACbwC,cAAe3M,KAAKmB,OAAOqB,MAC3BoK,OAAQ,EAAAvK,MAAMC,cAActC,KAAKmB,OAAQ,WAE3CnB,KAAKmB,OACLnB,KAAK6M,OAsBD,YAAAC,eAAR,SAAuBC,GACrB,GAAMC,GAAa,kCAAkCpD,KAAKmD,GACpDE,EAAa,oBAAoBrD,KAAKmD,EAE5C,OAAOC,IAAcC,EAAaF,EAAM,IAGlC,YAAA3C,aAAR,WACE,GAAIpK,KAAKiB,QAAQiM,aAAc,CAC7B,GAAMH,GAAM,EAAA/B,YAAYC,8BAA8BjL,KAAKiB,QAAQiM,aAAclN,KAAKmB,OACtF,OAAOnB,MAAK8M,eAAeC,GAO7B,WAJ0B9E,IAAtBjI,KAAKiB,QAAQkM,OAAsBnN,KAAKiB,QAAQoL,eAClDrM,KAAKoN,eAGmBnF,IAAtBjI,KAAKiB,QAAQkM,MACRnN,KAAK8M,eAAe,EAAAzK,MAAMC,cAActC,KAAKmB,OAAgBnB,KAAKiB,QAAQkM,QAG5EnN,KAAK8M,eAAe9M,KAAKmB,OAAO4D,WAGjC,YAAAoH,kBAAR,WACE,MAA+B,KAAxBnM,KAAKgB,QAAQqM,SAGd,YAAAD,SAAR,WACE,GAAI1F,GAAK,EAAArF,MAAMgH,OAAOrJ,KAAK0H,IAAM1H,KAAK0H,GAAK,EAAA4F,QAAQrJ,KAC/CyD,IAAM,EAAA6F,QAAQC,QAAUxN,KAAKwK,kBAC/BxK,KAAKiB,QAAQkM,MAAQ,oBACZzF,GAAM,EAAA6F,QAAQE,SAAWzN,KAAKwK,oBACvCxK,KAAKiB,QAAQkM,MAAQ,gBAIjB,YAAA3C,gBAAR,WACE,GAAI9C,GAAK,EAAArF,MAAMgH,OAAOrJ,KAAK0H,IAAM1H,KAAK0H,GAAK,EAAA4F,QAAQrJ,KACnD,OAAIyD,IAAM,EAAA6F,QAAQC,YAAiDvF,IAAvCjI,KAAKmB,OAAO6H,IAAsB,kBAEnDtB,GAAM,EAAA6F,QAAQE,aAA4CxF,IAAjCjI,KAAKmB,OAAO6H,IAAgB,YAM1D,YAAA0E,iCAAR,WACE,MAAgE,IAAzD1N,KAAKkI,gBAAgByF,cAAcC,QAAQ,YAG5C,YAAAtE,wBAAR,WACE,OAAQtJ,KAAKiB,QAAQ8H,eAAiB/I,KAAK0N,qCAAuC,EAAAG,WAAWC,eAAe9N,KAAKmB,SAxhB5G,EAAAI,GAAK,aAEL,EAAA0D,SAAW,WAChB,EAAAC,gBACEnD,WAAYA,KAQT,EAAAd,SA8BLkM,MAAO,EAAA3L,iBAAiBmF,mBAaxB0F,cAAe,EAAA7K,iBAAiB6D,oBAAqBD,cAAc,IAQnE2D,cAAe,EAAAvH,iBAAiB6D,oBAAqBD,cAAc,IAmBnEgH,sBAAuB,EAAA5K,iBAAiB6D,oBAAqBD,cAAc,IA2B3E8H,aAAc,EAAA1L,iBAAiB2D,oBAyC/B2F,cAAe,EAAAtJ,iBAAiB2D,oBA0ChC3B,QAAS,EAAAhC,iBAAiBuM,kBAA2D,WACnF,MAAO,QA2BTpG,aAAc,EAAAnG,iBAAiBuM,kBAA0C,WAAM,eA8TnF,GA3hBgC,EAAAlM,UAAnB,GAAAE,aA6hBb,EAAAsB,eAAeiC,4BAA4BvD","file":"Backdrop.min__a9b0c0df44822bb24a08.js","sourcesContent":["webpackJsonpCoveo__temporary([27,40,63],{\n\n/***/ 187:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ExternalModulesShim_1 = __webpack_require__(25);\nvar GlobalExports_1 = __webpack_require__(3);\nvar Dom_1 = __webpack_require__(1);\nvar SVGDom_1 = __webpack_require__(15);\nvar SVGIcons_1 = __webpack_require__(12);\nvar Utils_1 = __webpack_require__(4);\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar Initialization_1 = __webpack_require__(2);\nvar RegisteredNamedMethods_1 = __webpack_require__(31);\nvar ResultLink_1 = __webpack_require__(71);\nvar AccessibleModal_1 = __webpack_require__(124);\n/**\n * The YouTubeThumbnail component automatically fetches the thumbnail of a YouTube video.\n *\n * This component differs from the standard {@link Thumbnail} component because the thumbnail it outputs is always\n * clickable.\n *\n * Depending on the component configuration, clicking a YouTube thumbnail can either automatically open a modal box\n * containing the `iframe` from YouTube, or open the target URL in the current window (see\n * {@link YouTubeThumbnail.options.embed}).\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n */\nvar YouTubeThumbnail = /** @class */ (function (_super) {\n    __extends(YouTubeThumbnail, _super);\n    function YouTubeThumbnail(element, options, bindings, result, ModalBox, origin) {\n        if (ModalBox === void 0) { ModalBox = ExternalModulesShim_1.ModalBox; }\n        var _this = _super.call(this, element, YouTubeThumbnail.ID, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.bindings = bindings;\n        _this.result = result;\n        _this.origin = origin;\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, YouTubeThumbnail, options);\n        _this.resultLink = Dom_1.$$('a', {\n            className: Component_1.Component.computeCssClassName(ResultLink_1.ResultLink)\n        });\n        if (!origin) {\n            _this.origin = _this.resultLink.el;\n        }\n        var thumbnailDiv = Dom_1.$$('div', {\n            className: 'coveo-youtube-thumbnail-container'\n        });\n        _this.resultLink.append(thumbnailDiv.el);\n        var img = Dom_1.$$('img', {\n            src: Utils_1.Utils.getFieldValue(_this.result, 'ytthumbnailurl'),\n            className: 'coveo-youtube-thumbnail-img',\n            alt: _this.result.title,\n            title: _this.result.title\n        });\n        img.el.style.width = _this.options.width;\n        img.el.style.height = _this.options.height;\n        img.el.onerror = function () {\n            var svgVideo = Dom_1.$$('div', {}, SVGIcons_1.SVGIcons.icons.video).el;\n            SVGDom_1.SVGDom.addStyleToSVGInContainer(svgVideo, {\n                width: _this.options.width\n            });\n            Dom_1.$$(img).remove();\n            thumbnailDiv.append(svgVideo);\n        };\n        thumbnailDiv.append(img.el);\n        var span = Dom_1.$$('span', {\n            className: 'coveo-youtube-thumbnail-play-button'\n        });\n        thumbnailDiv.append(span.el);\n        Dom_1.$$(_this.element).append(_this.resultLink.el);\n        Initialization_1.Initialization.automaticallyCreateComponentsInsideResult(element, result, {\n            ResultLink: _this.options.embed ? { onClick: function () { return _this.openYoutubeIframe(); } } : null\n        });\n        _this.modalbox = new AccessibleModal_1.AccessibleModal('coveo-youtube-player', _this.searchInterface.options.modalContainer, ModalBox, {\n            overlayClose: true\n        });\n        return _this;\n    }\n    /**\n     * Open the result link embedded in this component.\n     *\n     * With a standard configuration of this component, this will open an iframe that automatically plays the video.\n     */\n    YouTubeThumbnail.prototype.openResultLink = function () {\n        var resultLinkComponent = RegisteredNamedMethods_1.get(this.resultLink.el);\n        resultLinkComponent.openLinkAsConfigured();\n    };\n    YouTubeThumbnail.prototype.openYoutubeIframe = function () {\n        var _this = this;\n        // need to put iframe inside div : iframe with position absolute and left:0, right : 0 , bottom: 0 is not standard/supported\n        var iframe = Dom_1.$$('iframe', {\n            src: \"https://www.youtube.com/embed/\" + this.extractVideoId() + \"?autoplay=1\",\n            allowfullscreen: 'allowfullscreen',\n            width: '100%',\n            height: '100%',\n            title: this.result.title\n        });\n        var div = Dom_1.$$('div');\n        div.append(iframe.el);\n        this.modalbox.openResult({\n            result: this.result,\n            options: { showDate: true, title: this.result.title },\n            bindings: this.bindings,\n            content: div.el,\n            validation: function () { return true; },\n            origin: this.origin\n        });\n        Dom_1.$$(Dom_1.$$(this.modalbox.wrapper).find('.coveo-quickview-close-button')).on('click', function () {\n            _this.modalbox.close();\n        });\n    };\n    YouTubeThumbnail.prototype.extractVideoId = function () {\n        return this.result.clickUri.split('watch?v=')[1];\n    };\n    YouTubeThumbnail.ID = 'YouTubeThumbnail';\n    YouTubeThumbnail.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            YouTubeThumbnail: YouTubeThumbnail\n        });\n    };\n    /**\n     * @componentOptions\n     */\n    YouTubeThumbnail.options = {\n        /**\n         * Specifies the width (in pixels) of the YouTube thumbnail.\n         *\n         * Default value is `200px`.\n         */\n        width: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '200px' }),\n        /**\n         * Specifies the height (in pixels) of the YouTube thumbnail.\n         *\n         * Default value is `112px`.\n         */\n        height: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '112px' }),\n        /**\n         * Specifies whether clicking on the YouTube thumbnail loads the video in a modal box.\n         *\n         * Setting this option to `false` causes the browser to change its current location to that of the target URL when\n         * the end user clicks the YouTube thumbnail.\n         *\n         * Default value is `true`.\n         */\n        embed: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true })\n    };\n    return YouTubeThumbnail;\n}(Component_1.Component));\nexports.YouTubeThumbnail = YouTubeThumbnail;\nInitialization_1.Initialization.registerAutoCreateComponent(YouTubeThumbnail);\n\n\n/***/ }),\n\n/***/ 238:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(601);\nvar ExternalModulesShim_1 = __webpack_require__(25);\nvar GlobalExports_1 = __webpack_require__(3);\nvar Dom_1 = __webpack_require__(1);\nvar Utils_1 = __webpack_require__(4);\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar Initialization_1 = __webpack_require__(2);\nvar YouTubeThumbnail_1 = __webpack_require__(187);\nvar AccessibleButton_1 = __webpack_require__(16);\n/**\n * The Backdrop component renders an image URL (either passed as a direct URL or contained in a result field) as a\n * background image. It is useful for displaying information in front of a dynamic background image.\n *\n * The Backdrop component will automatically initialize components embedded within itself:\n *\n * ```html\n *   <div class=\"CoveoBackdrop\" data-image-field=\"ytthumbnailurl\">\n *     <div class=\"CoveoFieldValue\" data-field=\"somefield\"></div>\n *   </div>\n * ```\n */\nvar Backdrop = /** @class */ (function (_super) {\n    __extends(Backdrop, _super);\n    /**\n     * Creates a new Backdrop component.\n     * @param element The HTMLElement on which the component will be instantiated.\n     * @param options The options for the Backdrop component.\n     * @param bindings The bindings that the component requires to function normally. If not set, it will be automatically\n     * resolved (with a slower execution time).\n     * @param result The {@link IQueryResult}.\n     */\n    function Backdrop(element, options, bindings, result, _window, ModalBox) {\n        if (ModalBox === void 0) { ModalBox = ExternalModulesShim_1.ModalBox; }\n        var _this = _super.call(this, element, Backdrop.ID, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.result = result;\n        _this._window = _window;\n        _this.ModalBox = ModalBox;\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Backdrop, options);\n        _this._window = _this._window || window;\n        var background = '';\n        if (_this.options.overlayColor) {\n            background +=\n                \"linear-gradient(\" + _this.options.overlayColor + \", \" +\n                    (_this.options.overlayGradient ? 'rgba(0,0,0,0)' : _this.options.overlayColor) +\n                    '), ';\n        }\n        var imageSource = _this.options.imageUrl || Utils_1.Utils.getFieldValue(result, _this.options.imageField);\n        background += \"url('\" + imageSource + \"') center center\";\n        _this.element.style.background = background;\n        _this.element.style.backgroundSize = 'cover';\n        Initialization_1.Initialization.automaticallyCreateComponentsInsideResult(element, result);\n        _this.configureSpecialBackdropActions();\n        return _this;\n    }\n    Backdrop.prototype.configureSpecialBackdropActions = function () {\n        // If the current backdrop is used for a youtube thumbnail, we automatically configure a component for this\n        if (Utils_1.Utils.getFieldValue(this.result, 'ytthumbnailurl')) {\n            // We create the element \"in memory\", but do not append it to the DOM.\n            // We don't want to see a duplicate of the preview for youtube : the backdrop already renders a preview.\n            var thumbnailYouTube_1 = new YouTubeThumbnail_1.YouTubeThumbnail(Dom_1.$$('div').el, {\n                embed: true\n            }, this.getBindings(), this.result, this.ModalBox, this.element);\n            new AccessibleButton_1.AccessibleButton()\n                .withElement(this.element)\n                .withLabel(this.result.title)\n                .withSelectAction(function (e) {\n                // Since the backdrop often contain a result link, we must make sure the click did no originate from one.\n                // Otherwise, we might end up opening 2 results at the same time\n                if (!Dom_1.$$(e.target).hasClass('CoveoResultLink')) {\n                    thumbnailYouTube_1.openResultLink();\n                }\n            })\n                .build();\n        }\n    };\n    Backdrop.ID = 'Backdrop';\n    Backdrop.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            Backdrop: Backdrop\n        });\n    };\n    /**\n     * @componentOptions\n     */\n    Backdrop.options = {\n        /**\n         * Specifies a direct URL from which the background image will be sourced.\n         *\n         * Has priority over {@link Backdrop.options.imageField}.\n         */\n        imageUrl: ComponentOptions_1.ComponentOptions.buildStringOption(),\n        /**\n         * Specifies the field from which the background image will be pulled.\n         *\n         * If {@link Backdrop.options.imageUrl} is specified, it will override this option.\n         */\n        imageField: ComponentOptions_1.ComponentOptions.buildFieldOption(),\n        /**\n         * Specifies the color that will be overlaid on top of the background image.\n         * This option needs to be declared as a CSS color. Be sure to use RGBA with an alpha value lower than 1 in order to\n         * be able to see the image behind the overlay color.\n         *\n         * Example value : \"`rgba(101, 123, 76, 0.5)`\"\n         */\n        overlayColor: ComponentOptions_1.ComponentOptions.buildColorOption(),\n        /**\n         * Specifies whether the overlay color should be instead be rendered as a top-to-bottom gradient from\n         * {@link Backdrop.options.overlayColor} to transparent.\n         *\n         * Default value is `false`.\n         */\n        overlayGradient: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'overlayColor' })\n    };\n    return Backdrop;\n}(Component_1.Component));\nexports.Backdrop = Backdrop;\nInitialization_1.Initialization.registerAutoCreateComponent(Backdrop);\n\n\n/***/ }),\n\n/***/ 534:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 601:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 71:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar ComponentOptionsModel_1 = __webpack_require__(28);\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\nvar ResultListEvents_1 = __webpack_require__(30);\nvar HighlightUtils_1 = __webpack_require__(69);\nvar DeviceUtils_1 = __webpack_require__(24);\nvar OSUtils_1 = __webpack_require__(178);\nvar Initialization_1 = __webpack_require__(2);\nvar QueryUtils_1 = __webpack_require__(21);\nvar Assert_1 = __webpack_require__(5);\nvar Utils_1 = __webpack_require__(4);\nvar Defer_1 = __webpack_require__(29);\nvar Dom_1 = __webpack_require__(1);\nvar StreamHighlightUtils_1 = __webpack_require__(116);\nvar StringUtils_1 = __webpack_require__(22);\nvar underscore_1 = __webpack_require__(0);\nvar GlobalExports_1 = __webpack_require__(3);\n__webpack_require__(534);\nvar AccessibleButton_1 = __webpack_require__(16);\nvar MiscModules_1 = __webpack_require__(62);\n/**\n * The `ResultLink` component automatically transform a search result title into a clickable link pointing to the\n * original item.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n */\nvar ResultLink = /** @class */ (function (_super) {\n    __extends(ResultLink, _super);\n    /**\n     * Creates a new `ResultLink` component.\n     * @param element The HTMLElement on which to instantiate the component.\n     * @param options The options for the `ResultLink` component.\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\n     * automatically resolved (with a slower execution time).\n     * @param result The result to associate the component with.\n     * @param os\n     */\n    function ResultLink(element, options, bindings, result, os) {\n        var _this = _super.call(this, element, ResultLink.ID, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.bindings = bindings;\n        _this.result = result;\n        _this.os = os;\n        _this.logAnalytics = underscore_1.debounce(function () {\n            _this.queryController.saveLastQuery();\n            var documentURL = Dom_1.$$(_this.element).getAttribute('href');\n            if (documentURL == undefined || documentURL == '') {\n                documentURL = _this.escapedClickUri;\n            }\n            if (_this.options.logAnalytics) {\n                _this.options.logAnalytics(documentURL);\n            }\n            else {\n                _this.logDocumentOpen(documentURL);\n            }\n            Defer_1.Defer.flush();\n        }, 1500, true);\n        var globalOptions = _this.searchInterface.options.originalOptionsObject[ResultLink.ID] || {};\n        var initialOptions = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ResultLink, __assign({}, globalOptions, options));\n        var resultLinkOptions = _this.componentOptionsModel.get(ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.resultLink);\n        _this.options = underscore_1.extend({}, initialOptions, resultLinkOptions);\n        _this.result = result || _this.resolveResult();\n        if (_this.options.openQuickview == null) {\n            _this.options.openQuickview = result.raw['connectortype'] == 'ExchangeCrawler' && DeviceUtils_1.DeviceUtils.isMobileDevice();\n        }\n        _this.element.setAttribute('tabindex', '0');\n        Assert_1.Assert.exists(_this.componentOptionsModel);\n        Assert_1.Assert.exists(_this.result);\n        if (!_this.quickviewShouldBeOpened()) {\n            // Bind on multiple \"click\" or \"mouse\" events.\n            // Create a function that will be executed only once, so as not to log multiple events\n            // Once a result link has been opened, and that we log at least one analytics event,\n            // it should not matter if the end user open the same link multiple times with different methods.\n            // It's still only one \"click\" event as far as UA is concerned.\n            // Also need to handle \"longpress\" on mobile (the contextual menu), which we assume to be 1 s long.\n            var executeOnlyOnce_1 = underscore_1.once(function () { return _this.logAnalytics(); });\n            Dom_1.$$(element).on(['contextmenu', 'click', 'mousedown', 'mouseup'], executeOnlyOnce_1);\n            var longPressTimer_1;\n            Dom_1.$$(element).on('touchstart', function () {\n                longPressTimer_1 = window.setTimeout(executeOnlyOnce_1, 1000);\n            });\n            Dom_1.$$(element).on('touchend', function () {\n                if (longPressTimer_1) {\n                    clearTimeout(longPressTimer_1);\n                }\n            });\n        }\n        _this.renderUri(element, result);\n        _this.bindEventToOpen();\n        return _this;\n    }\n    ResultLink.prototype.renderUri = function (element, result) {\n        if (/^\\s*$/.test(this.element.innerHTML)) {\n            var title = this.getDisplayedTitle();\n            this.element.innerHTML = title;\n            this.element.setAttribute('aria-label', MiscModules_1.l('Result'));\n            if (!this.element.title) {\n                this.element.title = this.getDisplayedTitleAsText();\n            }\n        }\n    };\n    /**\n     * Opens the result in the same window, no matter how the actual component is configured for the end user.\n     * @param logAnalytics Specifies whether the method should log an analytics event.\n     */\n    ResultLink.prototype.openLink = function (logAnalytics) {\n        if (logAnalytics === void 0) { logAnalytics = true; }\n        if (logAnalytics) {\n            this.logAnalytics();\n        }\n        window.location.href = this.getResultUri();\n    };\n    /**\n     * Opens the result in a new window, no matter how the actual component is configured for the end user.\n     * @param logAnalytics Specifies whether the method should log an analytics event.\n     */\n    ResultLink.prototype.openLinkInNewWindow = function (logAnalytics) {\n        if (logAnalytics === void 0) { logAnalytics = true; }\n        if (logAnalytics) {\n            this.logAnalytics();\n        }\n        window.open(this.getResultUri(), '_blank');\n    };\n    /**\n     * Tries to open the result in Microsoft Outlook if the result has an `outlookformacuri` or `outlookuri` field.\n     *\n     * Normally, this implies the result should be a link to an email.\n     *\n     * If the needed fields are not present, this method does nothing.\n     * @param logAnalytics Specifies whether the method should log an analytics event.\n     */\n    ResultLink.prototype.openLinkInOutlook = function (logAnalytics) {\n        if (logAnalytics === void 0) { logAnalytics = true; }\n        if (this.hasOutlookField()) {\n            if (logAnalytics) {\n                this.logAnalytics();\n            }\n            this.openLink();\n        }\n    };\n    /**\n     * Opens the link in the same manner the end user would.\n     *\n     * This essentially simulates a click on the result link.\n     *\n     * @param logAnalytics Specifies whether the method should log an analytics event.\n     */\n    ResultLink.prototype.openLinkAsConfigured = function (logAnalytics) {\n        if (logAnalytics === void 0) { logAnalytics = true; }\n        if (this.toExecuteOnOpen) {\n            if (logAnalytics) {\n                this.logAnalytics();\n            }\n            this.toExecuteOnOpen();\n        }\n    };\n    ResultLink.prototype.bindEventToOpen = function () {\n        return (this.bindOnClickIfNotUndefined() ||\n            this.bindOpenQuickviewIfNotUndefined() ||\n            this.setHrefIfNotAlready() ||\n            this.openLinkThatIsNotAnAnchor());\n    };\n    ResultLink.prototype.getDisplayedTitle = function () {\n        if (!this.options.titleTemplate) {\n            return this.result.title\n                ? HighlightUtils_1.HighlightUtils.highlightString(this.result.title, this.result.titleHighlights, null, 'coveo-highlight')\n                : this.escapedClickUri;\n        }\n        else {\n            var newTitle = StringUtils_1.StringUtils.buildStringTemplateFromResult(this.options.titleTemplate, this.result);\n            return newTitle\n                ? StreamHighlightUtils_1.StreamHighlightUtils.highlightStreamText(newTitle, this.result.termsToHighlight, this.result.phrasesToHighlight)\n                : this.escapedClickUri;\n        }\n    };\n    ResultLink.prototype.getDisplayedTitleAsText = function () {\n        var container = Dom_1.$$('div');\n        container.setHtml(this.getDisplayedTitle());\n        return container.text();\n    };\n    Object.defineProperty(ResultLink.prototype, \"escapedClickUri\", {\n        get: function () {\n            return underscore_1.escape(this.result.clickUri);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResultLink.prototype.bindOnClickIfNotUndefined = function () {\n        var _this = this;\n        if (this.options.onClick != undefined) {\n            this.toExecuteOnOpen = function (e) {\n                _this.options.onClick.call(_this, e, _this.result);\n            };\n            new AccessibleButton_1.AccessibleButton()\n                .withElement(this.element)\n                .withLabel(this.result.title)\n                .withSelectAction(function (e) { return _this.toExecuteOnOpen(e); })\n                .build();\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ResultLink.prototype.bindOpenQuickviewIfNotUndefined = function () {\n        var _this = this;\n        if (this.quickviewShouldBeOpened()) {\n            this.toExecuteOnOpen = function () {\n                Dom_1.$$(_this.bindings.resultElement).trigger(ResultListEvents_1.ResultListEvents.openQuickview);\n            };\n            Dom_1.$$(this.element).on('click', function (e) {\n                e.preventDefault();\n                _this.toExecuteOnOpen();\n            });\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ResultLink.prototype.openLinkThatIsNotAnAnchor = function () {\n        var _this = this;\n        if (!this.elementIsAnAnchor()) {\n            this.toExecuteOnOpen = function () {\n                if (_this.options.alwaysOpenInNewWindow) {\n                    if (_this.options.openInOutlook) {\n                        _this.openLinkInOutlook();\n                    }\n                    else {\n                        _this.openLinkInNewWindow();\n                    }\n                }\n                else {\n                    _this.openLink();\n                }\n            };\n            Dom_1.$$(this.element).on('click', function () {\n                _this.toExecuteOnOpen();\n            });\n            return true;\n        }\n        return false;\n    };\n    ResultLink.prototype.setHrefIfNotAlready = function () {\n        // Do not erase any value put in href by the template, etc. Allows\n        // using custom click urls while still keeping analytics recording\n        // and other behavior brought by the component.\n        if (this.elementIsAnAnchor() && !Utils_1.Utils.isNonEmptyString(Dom_1.$$(this.element).getAttribute('href'))) {\n            Dom_1.$$(this.element).setAttribute('href', this.getResultUri());\n            if (this.options.alwaysOpenInNewWindow && !(this.options.openInOutlook && this.hasOutlookField())) {\n                Dom_1.$$(this.element).setAttribute('target', '_blank');\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ResultLink.prototype.logDocumentOpen = function (href) {\n        this.usageAnalytics.logClickEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.documentOpen, {\n            documentURL: href,\n            documentTitle: this.result.title,\n            author: Utils_1.Utils.getFieldValue(this.result, 'author')\n        }, this.result, this.root);\n    };\n    ResultLink.prototype.filterProtocol = function (uri) {\n        var isAbsolute = /^(https?|ftp|file|mailto|tel):/i.test(uri);\n        var isRelative = /^(\\/|\\.\\/|\\.\\.\\/)/.test(uri);\n        return isAbsolute || isRelative ? uri : '';\n    };\n    ResultLink.prototype.getResultUri = function () {\n        if (this.options.hrefTemplate) {\n            var uri = StringUtils_1.StringUtils.buildStringTemplateFromResult(this.options.hrefTemplate, this.result);\n            return this.filterProtocol(uri);\n        }\n        if (this.options.field == undefined && this.options.openInOutlook) {\n            this.setField();\n        }\n        if (this.options.field != undefined) {\n            return this.filterProtocol(Utils_1.Utils.getFieldValue(this.result, this.options.field));\n        }\n        return this.filterProtocol(this.result.clickUri);\n    };\n    ResultLink.prototype.elementIsAnAnchor = function () {\n        return this.element.tagName == 'A';\n    };\n    ResultLink.prototype.setField = function () {\n        var os = Utils_1.Utils.exists(this.os) ? this.os : OSUtils_1.OSUtils.get();\n        if (os == OSUtils_1.OS_NAME.MACOSX && this.hasOutlookField()) {\n            this.options.field = '@outlookformacuri';\n        }\n        else if (os == OSUtils_1.OS_NAME.WINDOWS && this.hasOutlookField()) {\n            this.options.field = '@outlookuri';\n        }\n    };\n    ResultLink.prototype.hasOutlookField = function () {\n        var os = Utils_1.Utils.exists(this.os) ? this.os : OSUtils_1.OSUtils.get();\n        if (os == OSUtils_1.OS_NAME.MACOSX && this.result.raw['outlookformacuri'] != undefined) {\n            return true;\n        }\n        else if (os == OSUtils_1.OS_NAME.WINDOWS && this.result.raw['outlookuri'] != undefined) {\n            return true;\n        }\n        return false;\n    };\n    ResultLink.prototype.isUriThatMustBeOpenedInQuickview = function () {\n        return this.escapedClickUri.toLowerCase().indexOf('ldap://') == 0;\n    };\n    ResultLink.prototype.quickviewShouldBeOpened = function () {\n        return (this.options.openQuickview || this.isUriThatMustBeOpenedInQuickview()) && QueryUtils_1.QueryUtils.hasHTMLVersion(this.result);\n    };\n    ResultLink.ID = 'ResultLink';\n    ResultLink.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            ResultLink: ResultLink\n        });\n    };\n    /**\n     * The options for the ResultLink\n     * @componentOptions\n     */\n    ResultLink.options = {\n        /**\n         * Specifies the field to use to output the component `href` attribute value.\n         *\n         * **Tip:**\n         * > Instead of specifying a value for the `field` option, you can directly add an `href` attribute to the\n         * > `ResultLink` HTML element. Then, you can use a custom script to generate the `href` value.\n         *\n         * **Examples:**\n         * - With the following markup, the `ResultLink` outputs its `href` value using the `@uri` field (rather than the\n         * default field):\n         *\n         * ```html\n         * <a class=\"CoveoResultLink\" data-field=\"@uri\"></a>\n         * ```\n         *\n         * - In the following result template, the custom `getMyKBUri()` function provides the `href` value:\n         *\n         * ```html\n         * <script id=\"KnowledgeArticle\" type=\"text/underscore\" class=\"result-template\">\n         *   <div class='CoveoIcon>'></div>\n         *   <a class=\"CoveoResultLink\" href=\"<%= getMyKBUri(raw) %>\"></a>\n         *   <div class=\"CoveoExcerpt\"></div>\n         * </script>\n         * ```\n         *\n         * See also [`hrefTemplate`]{@link ResultLink.options.hrefTemplate}, which can override this option.\n         *\n         * By default, the component uses the `@clickUri` field of the item to output the value of its `href` attribute.\n         */\n        field: ComponentOptions_1.ComponentOptions.buildFieldOption(),\n        /**\n         * Specifies whether the component should try to open its link in Microsoft Outlook.\n         *\n         * Setting this option to `true` is normally useful for `ResultLink` instances related to Microsoft Exchange emails.\n         *\n         * If this option is `true`, clicking the `ResultLink` calls the\n         * [`openLinkInOutlook`]{@link ResultLink.openLinkInOutlook} method instead of the\n         * [`openLink`]{@link ResultLink.openLink} method.\n         *\n         * Default value is `false`.\n         */\n        openInOutlook: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\n        /**\n         * Specifies whether the component should open its link in the [`Quickview`]{@link Quickview} component rather than\n         * loading through the original URL.\n         *\n         * Default value is `false`.\n         */\n        openQuickview: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\n        /**\n         * Specifies whether the component should open its link in a new window instead of opening it in the current\n         * context.\n         *\n         * If this option is `true`, clicking the `ResultLink` calls the\n         * [`openLinkInNewWindow`]{@link ResultLink.openLinkInNewWindow} method instead of the\n         * [`openLink`]{@link ResultLink.openLink} method.\n         *\n         * **Note:**\n         * > If a search page contains a [`ResultPreferences`]{@link ResultsPreferences} component whose\n         * > [`enableOpenInNewWindow`]{@link ResultsPreferences.options.enableOpenInNewWindow} option is `true`, and the end\n         * > user checks the <b>Always open results in new window</b> box, `ResultLink` components in this page will always\n         * > open their links in a new window when the end user clicks them, no matter what the value of their\n         * > `alwaysOpenInNewWindow` option is.\n         *\n         * Default value is `false`.\n         */\n        alwaysOpenInNewWindow: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\n        /**\n         * Specifies a template literal from which to generate the `ResultLink` `href` attribute value (see\n         * [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).\n         *\n         * This option overrides the [`field`]{@link ResultLink.options.field} option value.\n         *\n         * The template literal can reference any number of fields from the parent result. It can also reference global\n         * scope properties.\n         *\n         * **Examples:**\n         *\n         * - The following markup generates an `href` value such as `http://uri.com?id=itemTitle`:\n         *\n         * ```html\n         * <a class='CoveoResultLink' data-href-template='${clickUri}?id=${raw.title}'></a>\n         * ```\n         *\n         * - The following markup generates an `href` value such as `localhost/fooBar`:\n         *\n         * ```html\n         * <a class='CoveoResultLink' data-href-template='${window.location.hostname}/{Foo.Bar}'></a>\n         * ```\n         *\n         * Default value is `undefined`.\n         */\n        hrefTemplate: ComponentOptions_1.ComponentOptions.buildStringOption(),\n        /**\n         * Specifies a template literal from which to generate the `ResultLink` display title (see\n         * [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).\n         *\n         * This option overrides the default `ResultLink` display title behavior.\n         *\n         * The template literal can reference any number of fields from the parent result. However, if the template literal\n         * references a key whose value is undefined in the parent result fields, the `ResultLink` title displays the\n         * name of this key instead.\n         *\n         * This option is ignored if the `ResultLink` innerHTML contains any value.\n         *\n         * **Examples:**\n         *\n         * - The following markup generates a `ResultLink` display title such as `Case number: 123456` if both the\n         * `raw.objecttype` and `raw.objectnumber` keys are defined in the parent result fields:\n         *\n         * ```html\n         * <a class=\"CoveoResultLink\" data-title-template=\"${raw.objecttype} number: ${raw.objectnumber}\"></a>\n         * ```\n         *\n         * - The following markup generates `${myField}` as a `ResultLink` display title if the `myField` key is undefined\n         * in the parent result fields:\n         *\n         * ```html\n         * <a class=\"CoveoResultLink\" data-title-template=\"${myField}\"></a>\n         * ```\n         *\n         * - The following markup generates `Foobar` as a `ResultLink` display title, because the `ResultLink` innterHTML is\n         * not empty:\n         *\n         * ```html\n         * <a class=\"CoveoResultLink\" data-title-template=\"${will} ${be} ${ignored}\">Foobar</a>\n         * ```\n         *\n         * Default value is `undefined`.\n         *\n         * @availablesince [January 2017 Release (v1.1865.9)](https://docs.coveo.com/en/396/#january-2017-release-v118659)\n         */\n        titleTemplate: ComponentOptions_1.ComponentOptions.buildStringOption(),\n        /**\n         * Specifies an event handler function to execute when the user clicks the `ResultLink` component.\n         *\n         * The handler function takes a JavaScript [`Event`](https://developer.mozilla.org/en/docs/Web/API/Event) object and\n         * an [`IQueryResult`]{@link IQueryResult} as its parameters.\n         *\n         * Overriding the default behavior of the `onClick` event can allow you to execute specific code instead.\n         *\n         * **Note:**\n         * > You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n         * > [`init`]{@link init} call of your search interface (see\n         * > [Passing Component Options in the init Call](https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call)),\n         * > or before the `init` call, using the `options` top-level function (see\n         * > [Passing Component Options Before the init Call](https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call)).\n         *\n         * **Example:**\n         * ```javascript\n         * // You can set the option in the 'init' call:\n         * Coveo.init(document.querySelector(\"#search\"), {\n         *   ResultLink : {\n         *     onClick : function(e, result) {\n         *       e.preventDefault();\n         *       // Custom code to execute with the item URI and title.\n         *       openUriInASpecialTab(result.clickUri, result.title);\n         *     }\n         *   }\n         * });\n         *\n         * // Or before the 'init' call, using the 'options' top-level function:\n         * // Coveo.options(document.querySelector('#search'), {\n         * //   ResultLink : {\n         * //     onClick : function(e, result) {\n         * //       e.preventDefault();\n         * //       // Custom code to execute with the item URI and title.\n         * //       openUriInASpecialTab(result.clickUri, result.title);\n         * //     }\n         * //   }\n         * // });\n         * ```\n         */\n        onClick: ComponentOptions_1.ComponentOptions.buildCustomOption(function () {\n            return null;\n        }),\n        /**\n         * Specify this option to log additional analytics when this result link is pressed.\n         *\n         * **Example:**\n         * ```javascript\n         * const resultLink = new Coveo.ResultLink(\n         *   linkElement,\n         *   {\n         *     logAnalytics: (href) => Coveo.logCustomEvent(\n         *         Coveo.analyticsActionCauseList.openSmartSnippetSource,\n         *         {\n         *           searchQueryUid: searchInterface.queryController.lastSearchUid,\n         *           documentTitle: result.title,\n         *           author: Utils.getFieldValue(result, 'author'),\n         *           documentURL: href\n         *         },\n         *         element\n         *       )\n         *   },\n         *   searchInterface.getBindings(),\n         *   result\n         * )\n         * ```\n         */\n        logAnalytics: ComponentOptions_1.ComponentOptions.buildCustomOption(function () { return null; })\n    };\n    return ResultLink;\n}(Component_1.Component));\nexports.ResultLink = ResultLink;\nInitialization_1.Initialization.registerAutoCreateComponent(ResultLink);\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Backdrop.min__a9b0c0df44822bb24a08.js","import { ModalBox as ModalBoxModule } from '../../ExternalModulesShim';\nimport { exportGlobally } from '../../GlobalExports';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { $$, Dom } from '../../utils/Dom';\nimport { SVGDom } from '../../utils/SVGDom';\nimport { SVGIcons } from '../../utils/SVGIcons';\nimport { Utils } from '../../utils/Utils';\nimport { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { Initialization } from '../Base/Initialization';\nimport { get } from '../Base/RegisteredNamedMethods';\nimport { IResultsComponentBindings } from '../Base/ResultsComponentBindings';\nimport { ResultLink } from '../ResultLink/ResultLink';\nimport { AccessibleModal } from '../../utils/AccessibleModal';\n\nexport interface IYouTubeThumbnailOptions {\n  width: string;\n  height: string;\n  embed: boolean;\n}\n\n/**\n * The YouTubeThumbnail component automatically fetches the thumbnail of a YouTube video.\n *\n * This component differs from the standard {@link Thumbnail} component because the thumbnail it outputs is always\n * clickable.\n *\n * Depending on the component configuration, clicking a YouTube thumbnail can either automatically open a modal box\n * containing the `iframe` from YouTube, or open the target URL in the current window (see\n * {@link YouTubeThumbnail.options.embed}).\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n */\nexport class YouTubeThumbnail extends Component {\n  static ID = 'YouTubeThumbnail';\n\n  static doExport = () => {\n    exportGlobally({\n      YouTubeThumbnail: YouTubeThumbnail\n    });\n  };\n\n  /**\n   * @componentOptions\n   */\n  static options: IYouTubeThumbnailOptions = {\n    /**\n     * Specifies the width (in pixels) of the YouTube thumbnail.\n     *\n     * Default value is `200px`.\n     */\n    width: ComponentOptions.buildStringOption({ defaultValue: '200px' }),\n\n    /**\n     * Specifies the height (in pixels) of the YouTube thumbnail.\n     *\n     * Default value is `112px`.\n     */\n    height: ComponentOptions.buildStringOption({ defaultValue: '112px' }),\n\n    /**\n     * Specifies whether clicking on the YouTube thumbnail loads the video in a modal box.\n     *\n     * Setting this option to `false` causes the browser to change its current location to that of the target URL when\n     * the end user clicks the YouTube thumbnail.\n     *\n     * Default value is `true`.\n     */\n    embed: ComponentOptions.buildBooleanOption({ defaultValue: true })\n  };\n\n  public resultLink: Dom;\n\n  private modalbox: AccessibleModal;\n\n  constructor(\n    public element: HTMLElement,\n    public options?: IYouTubeThumbnailOptions,\n    public bindings?: IResultsComponentBindings,\n    public result?: IQueryResult,\n    ModalBox = ModalBoxModule,\n    private origin?: HTMLElement\n  ) {\n    super(element, YouTubeThumbnail.ID, bindings);\n    this.options = ComponentOptions.initComponentOptions(element, YouTubeThumbnail, options);\n\n    this.resultLink = $$('a', {\n      className: Component.computeCssClassName(ResultLink)\n    });\n\n    if (!origin) {\n      this.origin = this.resultLink.el;\n    }\n\n    const thumbnailDiv = $$('div', {\n      className: 'coveo-youtube-thumbnail-container'\n    });\n\n    this.resultLink.append(thumbnailDiv.el);\n\n    const img = $$('img', {\n      src: Utils.getFieldValue(this.result, 'ytthumbnailurl'),\n      className: 'coveo-youtube-thumbnail-img',\n      alt: this.result.title,\n      title: this.result.title\n    });\n\n    img.el.style.width = this.options.width;\n    img.el.style.height = this.options.height;\n    img.el.onerror = () => {\n      const svgVideo = $$('div', {}, SVGIcons.icons.video).el;\n      SVGDom.addStyleToSVGInContainer(svgVideo, {\n        width: this.options.width\n      });\n      $$(img).remove();\n      thumbnailDiv.append(svgVideo);\n    };\n    thumbnailDiv.append(img.el);\n\n    const span = $$('span', {\n      className: 'coveo-youtube-thumbnail-play-button'\n    });\n\n    thumbnailDiv.append(span.el);\n\n    $$(this.element).append(this.resultLink.el);\n\n    Initialization.automaticallyCreateComponentsInsideResult(element, result, {\n      ResultLink: this.options.embed ? { onClick: () => this.openYoutubeIframe() } : null\n    });\n    this.modalbox = new AccessibleModal('coveo-youtube-player', this.searchInterface.options.modalContainer, ModalBox, {\n      overlayClose: true\n    });\n  }\n\n  /**\n   * Open the result link embedded in this component.\n   *\n   * With a standard configuration of this component, this will open an iframe that automatically plays the video.\n   */\n  public openResultLink() {\n    let resultLinkComponent = <ResultLink>get(this.resultLink.el);\n    resultLinkComponent.openLinkAsConfigured();\n  }\n\n  private openYoutubeIframe() {\n    // need to put iframe inside div : iframe with position absolute and left:0, right : 0 , bottom: 0 is not standard/supported\n    const iframe = $$('iframe', {\n      src: `https://www.youtube.com/embed/${this.extractVideoId()}?autoplay=1`,\n      allowfullscreen: 'allowfullscreen',\n      width: '100%',\n      height: '100%',\n      title: this.result.title\n    });\n\n    const div = $$('div');\n\n    div.append(iframe.el);\n\n    this.modalbox.openResult({\n      result: this.result,\n      options: { showDate: true, title: this.result.title },\n      bindings: this.bindings,\n      content: div.el,\n      validation: () => true,\n      origin: this.origin\n    });\n\n    $$($$(this.modalbox.wrapper).find('.coveo-quickview-close-button')).on('click', () => {\n      this.modalbox.close();\n    });\n  }\n\n  private extractVideoId() {\n    return this.result.clickUri.split('watch?v=')[1];\n  }\n}\nInitialization.registerAutoCreateComponent(YouTubeThumbnail);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/YouTube/YouTubeThumbnail.ts","import 'styling/_Backdrop';\nimport { ModalBox as ModalBoxModule } from '../../ExternalModulesShim';\nimport { exportGlobally } from '../../GlobalExports';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { $$ } from '../../utils/Dom';\nimport { Utils } from '../../utils/Utils';\nimport { Component } from '../Base/Component';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IFieldOption } from '../Base/IComponentOptions';\nimport { Initialization } from '../Base/Initialization';\nimport { IResultsComponentBindings } from '../Base/ResultsComponentBindings';\nimport { IYouTubeThumbnailOptions, YouTubeThumbnail } from '../YouTube/YouTubeThumbnail';\nimport { AccessibleButton } from '../../utils/AccessibleButton';\n\nexport interface IBackdropOptions {\n  imageUrl?: string;\n  imageField?: IFieldOption;\n  overlayColor?: string;\n  overlayGradient?: boolean;\n}\n\n/**\n * The Backdrop component renders an image URL (either passed as a direct URL or contained in a result field) as a\n * background image. It is useful for displaying information in front of a dynamic background image.\n *\n * The Backdrop component will automatically initialize components embedded within itself:\n *\n * ```html\n *   <div class=\"CoveoBackdrop\" data-image-field=\"ytthumbnailurl\">\n *     <div class=\"CoveoFieldValue\" data-field=\"somefield\"></div>\n *   </div>\n * ```\n */\nexport class Backdrop extends Component {\n  static ID = 'Backdrop';\n\n  static doExport = () => {\n    exportGlobally({\n      Backdrop: Backdrop\n    });\n  };\n\n  /**\n   * @componentOptions\n   */\n  static options: IBackdropOptions = {\n    /**\n     * Specifies a direct URL from which the background image will be sourced.\n     *\n     * Has priority over {@link Backdrop.options.imageField}.\n     */\n    imageUrl: ComponentOptions.buildStringOption(),\n\n    /**\n     * Specifies the field from which the background image will be pulled.\n     *\n     * If {@link Backdrop.options.imageUrl} is specified, it will override this option.\n     */\n    imageField: ComponentOptions.buildFieldOption(),\n\n    /**\n     * Specifies the color that will be overlaid on top of the background image.\n     * This option needs to be declared as a CSS color. Be sure to use RGBA with an alpha value lower than 1 in order to\n     * be able to see the image behind the overlay color.\n     *\n     * Example value : \"`rgba(101, 123, 76, 0.5)`\"\n     */\n    overlayColor: ComponentOptions.buildColorOption(),\n\n    /**\n     * Specifies whether the overlay color should be instead be rendered as a top-to-bottom gradient from\n     * {@link Backdrop.options.overlayColor} to transparent.\n     *\n     * Default value is `false`.\n     */\n    overlayGradient: ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'overlayColor' })\n  };\n\n  /**\n   * Creates a new Backdrop component.\n   * @param element The HTMLElement on which the component will be instantiated.\n   * @param options The options for the Backdrop component.\n   * @param bindings The bindings that the component requires to function normally. If not set, it will be automatically\n   * resolved (with a slower execution time).\n   * @param result The {@link IQueryResult}.\n   */\n  constructor(\n    public element: HTMLElement,\n    public options?: IBackdropOptions,\n    bindings?: IComponentBindings,\n    public result?: IQueryResult,\n    public _window?: Window,\n    public ModalBox = ModalBoxModule\n  ) {\n    super(element, Backdrop.ID, bindings);\n    this.options = ComponentOptions.initComponentOptions(element, Backdrop, options);\n\n    this._window = this._window || window;\n\n    let background = '';\n    if (this.options.overlayColor) {\n      background +=\n        `linear-gradient(${this.options.overlayColor}, ` +\n        (this.options.overlayGradient ? 'rgba(0,0,0,0)' : this.options.overlayColor) +\n        '), ';\n    }\n\n    const imageSource = this.options.imageUrl || Utils.getFieldValue(result, <string>this.options.imageField);\n    background += `url('${imageSource}') center center`;\n\n    this.element.style.background = background;\n    this.element.style.backgroundSize = 'cover';\n\n    Initialization.automaticallyCreateComponentsInsideResult(element, result);\n    this.configureSpecialBackdropActions();\n  }\n\n  private configureSpecialBackdropActions() {\n    // If the current backdrop is used for a youtube thumbnail, we automatically configure a component for this\n    if (Utils.getFieldValue(this.result, 'ytthumbnailurl')) {\n      // We create the element \"in memory\", but do not append it to the DOM.\n      // We don't want to see a duplicate of the preview for youtube : the backdrop already renders a preview.\n      let thumbnailYouTube = new YouTubeThumbnail(\n        $$('div').el,\n        <IYouTubeThumbnailOptions>{\n          embed: true\n        },\n        <IResultsComponentBindings>this.getBindings(),\n        this.result,\n        this.ModalBox,\n        this.element\n      );\n\n      new AccessibleButton()\n        .withElement(this.element)\n        .withLabel(this.result.title)\n        .withSelectAction(e => {\n          // Since the backdrop often contain a result link, we must make sure the click did no originate from one.\n          // Otherwise, we might end up opening 2 results at the same time\n          if (!$$(<HTMLElement>e.target).hasClass('CoveoResultLink')) {\n            thumbnailYouTube.openResultLink();\n          }\n        })\n        .build();\n    }\n  }\n}\n\nInitialization.registerAutoCreateComponent(Backdrop);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Backdrop/Backdrop.ts","import { Component } from '../Base/Component';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { ComponentOptionsModel } from '../../models/ComponentOptionsModel';\nimport { IResultsComponentBindings } from '../Base/ResultsComponentBindings';\nimport { analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\nimport { IResultLinkOptions } from './ResultLinkOptions';\nimport { ResultListEvents } from '../../events/ResultListEvents';\nimport { HighlightUtils } from '../../utils/HighlightUtils';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { DeviceUtils } from '../../utils/DeviceUtils';\nimport { OS_NAME, OSUtils } from '../../utils/OSUtils';\nimport { Initialization } from '../Base/Initialization';\nimport { QueryUtils } from '../../utils/QueryUtils';\nimport { Assert } from '../../misc/Assert';\nimport { Utils } from '../../utils/Utils';\nimport { Defer } from '../../misc/Defer';\nimport { $$ } from '../../utils/Dom';\nimport { StreamHighlightUtils } from '../../utils/StreamHighlightUtils';\nimport { StringUtils } from '../../utils/StringUtils';\nimport { once, debounce, extend, escape } from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\n\nimport 'styling/_ResultLink';\nimport { AccessibleButton } from '../../utils/AccessibleButton';\nimport { l } from '../../MiscModules';\n\n/**\n * The `ResultLink` component automatically transform a search result title into a clickable link pointing to the\n * original item.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n */\nexport class ResultLink extends Component {\n  static ID = 'ResultLink';\n\n  static doExport = () => {\n    exportGlobally({\n      ResultLink: ResultLink\n    });\n  };\n\n  /**\n   * The options for the ResultLink\n   * @componentOptions\n   */\n  static options: IResultLinkOptions = {\n    /**\n     * Specifies the field to use to output the component `href` attribute value.\n     *\n     * **Tip:**\n     * > Instead of specifying a value for the `field` option, you can directly add an `href` attribute to the\n     * > `ResultLink` HTML element. Then, you can use a custom script to generate the `href` value.\n     *\n     * **Examples:**\n     * - With the following markup, the `ResultLink` outputs its `href` value using the `@uri` field (rather than the\n     * default field):\n     *\n     * ```html\n     * <a class=\"CoveoResultLink\" data-field=\"@uri\"></a>\n     * ```\n     *\n     * - In the following result template, the custom `getMyKBUri()` function provides the `href` value:\n     *\n     * ```html\n     * <script id=\"KnowledgeArticle\" type=\"text/underscore\" class=\"result-template\">\n     *   <div class='CoveoIcon>'></div>\n     *   <a class=\"CoveoResultLink\" href=\"<%= getMyKBUri(raw) %>\"></a>\n     *   <div class=\"CoveoExcerpt\"></div>\n     * </script>\n     * ```\n     *\n     * See also [`hrefTemplate`]{@link ResultLink.options.hrefTemplate}, which can override this option.\n     *\n     * By default, the component uses the `@clickUri` field of the item to output the value of its `href` attribute.\n     */\n    field: ComponentOptions.buildFieldOption(),\n\n    /**\n     * Specifies whether the component should try to open its link in Microsoft Outlook.\n     *\n     * Setting this option to `true` is normally useful for `ResultLink` instances related to Microsoft Exchange emails.\n     *\n     * If this option is `true`, clicking the `ResultLink` calls the\n     * [`openLinkInOutlook`]{@link ResultLink.openLinkInOutlook} method instead of the\n     * [`openLink`]{@link ResultLink.openLink} method.\n     *\n     * Default value is `false`.\n     */\n    openInOutlook: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * Specifies whether the component should open its link in the [`Quickview`]{@link Quickview} component rather than\n     * loading through the original URL.\n     *\n     * Default value is `false`.\n     */\n    openQuickview: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * Specifies whether the component should open its link in a new window instead of opening it in the current\n     * context.\n     *\n     * If this option is `true`, clicking the `ResultLink` calls the\n     * [`openLinkInNewWindow`]{@link ResultLink.openLinkInNewWindow} method instead of the\n     * [`openLink`]{@link ResultLink.openLink} method.\n     *\n     * **Note:**\n     * > If a search page contains a [`ResultPreferences`]{@link ResultsPreferences} component whose\n     * > [`enableOpenInNewWindow`]{@link ResultsPreferences.options.enableOpenInNewWindow} option is `true`, and the end\n     * > user checks the <b>Always open results in new window</b> box, `ResultLink` components in this page will always\n     * > open their links in a new window when the end user clicks them, no matter what the value of their\n     * > `alwaysOpenInNewWindow` option is.\n     *\n     * Default value is `false`.\n     */\n    alwaysOpenInNewWindow: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * Specifies a template literal from which to generate the `ResultLink` `href` attribute value (see\n     * [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).\n     *\n     * This option overrides the [`field`]{@link ResultLink.options.field} option value.\n     *\n     * The template literal can reference any number of fields from the parent result. It can also reference global\n     * scope properties.\n     *\n     * **Examples:**\n     *\n     * - The following markup generates an `href` value such as `http://uri.com?id=itemTitle`:\n     *\n     * ```html\n     * <a class='CoveoResultLink' data-href-template='${clickUri}?id=${raw.title}'></a>\n     * ```\n     *\n     * - The following markup generates an `href` value such as `localhost/fooBar`:\n     *\n     * ```html\n     * <a class='CoveoResultLink' data-href-template='${window.location.hostname}/{Foo.Bar}'></a>\n     * ```\n     *\n     * Default value is `undefined`.\n     */\n    hrefTemplate: ComponentOptions.buildStringOption(),\n\n    /**\n     * Specifies a template literal from which to generate the `ResultLink` display title (see\n     * [Template literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)).\n     *\n     * This option overrides the default `ResultLink` display title behavior.\n     *\n     * The template literal can reference any number of fields from the parent result. However, if the template literal\n     * references a key whose value is undefined in the parent result fields, the `ResultLink` title displays the\n     * name of this key instead.\n     *\n     * This option is ignored if the `ResultLink` innerHTML contains any value.\n     *\n     * **Examples:**\n     *\n     * - The following markup generates a `ResultLink` display title such as `Case number: 123456` if both the\n     * `raw.objecttype` and `raw.objectnumber` keys are defined in the parent result fields:\n     *\n     * ```html\n     * <a class=\"CoveoResultLink\" data-title-template=\"${raw.objecttype} number: ${raw.objectnumber}\"></a>\n     * ```\n     *\n     * - The following markup generates `${myField}` as a `ResultLink` display title if the `myField` key is undefined\n     * in the parent result fields:\n     *\n     * ```html\n     * <a class=\"CoveoResultLink\" data-title-template=\"${myField}\"></a>\n     * ```\n     *\n     * - The following markup generates `Foobar` as a `ResultLink` display title, because the `ResultLink` innterHTML is\n     * not empty:\n     *\n     * ```html\n     * <a class=\"CoveoResultLink\" data-title-template=\"${will} ${be} ${ignored}\">Foobar</a>\n     * ```\n     *\n     * Default value is `undefined`.\n     *\n     * @availablesince [January 2017 Release (v1.1865.9)](https://docs.coveo.com/en/396/#january-2017-release-v118659)\n     */\n    titleTemplate: ComponentOptions.buildStringOption(),\n\n    /**\n     * Specifies an event handler function to execute when the user clicks the `ResultLink` component.\n     *\n     * The handler function takes a JavaScript [`Event`](https://developer.mozilla.org/en/docs/Web/API/Event) object and\n     * an [`IQueryResult`]{@link IQueryResult} as its parameters.\n     *\n     * Overriding the default behavior of the `onClick` event can allow you to execute specific code instead.\n     *\n     * **Note:**\n     * > You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\n     * > [`init`]{@link init} call of your search interface (see\n     * > [Passing Component Options in the init Call](https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call)),\n     * > or before the `init` call, using the `options` top-level function (see\n     * > [Passing Component Options Before the init Call](https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call)).\n     *\n     * **Example:**\n     * ```javascript\n     * // You can set the option in the 'init' call:\n     * Coveo.init(document.querySelector(\"#search\"), {\n     *   ResultLink : {\n     *     onClick : function(e, result) {\n     *       e.preventDefault();\n     *       // Custom code to execute with the item URI and title.\n     *       openUriInASpecialTab(result.clickUri, result.title);\n     *     }\n     *   }\n     * });\n     *\n     * // Or before the 'init' call, using the 'options' top-level function:\n     * // Coveo.options(document.querySelector('#search'), {\n     * //   ResultLink : {\n     * //     onClick : function(e, result) {\n     * //       e.preventDefault();\n     * //       // Custom code to execute with the item URI and title.\n     * //       openUriInASpecialTab(result.clickUri, result.title);\n     * //     }\n     * //   }\n     * // });\n     * ```\n     */\n    onClick: ComponentOptions.buildCustomOption<(e: Event, result: IQueryResult) => any>(() => {\n      return null;\n    }),\n\n    /**\n     * Specify this option to log additional analytics when this result link is pressed.\n     *\n     * **Example:**\n     * ```javascript\n     * const resultLink = new Coveo.ResultLink(\n     *   linkElement,\n     *   {\n     *     logAnalytics: (href) => Coveo.logCustomEvent(\n     *         Coveo.analyticsActionCauseList.openSmartSnippetSource,\n     *         {\n     *           searchQueryUid: searchInterface.queryController.lastSearchUid,\n     *           documentTitle: result.title,\n     *           author: Utils.getFieldValue(result, 'author'),\n     *           documentURL: href\n     *         },\n     *         element\n     *       )\n     *   },\n     *   searchInterface.getBindings(),\n     *   result\n     * )\n     * ```\n     */\n    logAnalytics: ComponentOptions.buildCustomOption<(href: string) => void>(() => null)\n  };\n\n  private toExecuteOnOpen: (e?: Event) => void;\n\n  /**\n   * Creates a new `ResultLink` component.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the `ResultLink` component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param result The result to associate the component with.\n   * @param os\n   */\n  constructor(\n    public element: HTMLElement,\n    public options: IResultLinkOptions,\n    public bindings?: IResultsComponentBindings,\n    public result?: IQueryResult,\n    public os?: OS_NAME\n  ) {\n    super(element, ResultLink.ID, bindings);\n\n    const globalOptions = this.searchInterface.options.originalOptionsObject[ResultLink.ID] || {};\n    const initialOptions = ComponentOptions.initComponentOptions(element, ResultLink, { ...globalOptions, ...options });\n    const resultLinkOptions = this.componentOptionsModel.get(ComponentOptionsModel.attributesEnum.resultLink);\n    this.options = extend({}, initialOptions, resultLinkOptions);\n\n    this.result = result || this.resolveResult();\n\n    if (this.options.openQuickview == null) {\n      this.options.openQuickview = result.raw['connectortype'] == 'ExchangeCrawler' && DeviceUtils.isMobileDevice();\n    }\n    this.element.setAttribute('tabindex', '0');\n\n    Assert.exists(this.componentOptionsModel);\n    Assert.exists(this.result);\n\n    if (!this.quickviewShouldBeOpened()) {\n      // Bind on multiple \"click\" or \"mouse\" events.\n      // Create a function that will be executed only once, so as not to log multiple events\n      // Once a result link has been opened, and that we log at least one analytics event,\n      // it should not matter if the end user open the same link multiple times with different methods.\n      // It's still only one \"click\" event as far as UA is concerned.\n      // Also need to handle \"longpress\" on mobile (the contextual menu), which we assume to be 1 s long.\n\n      const executeOnlyOnce = once(() => this.logAnalytics());\n\n      $$(element).on(['contextmenu', 'click', 'mousedown', 'mouseup'], executeOnlyOnce);\n      let longPressTimer: number;\n      $$(element).on('touchstart', () => {\n        longPressTimer = window.setTimeout(executeOnlyOnce, 1000);\n      });\n      $$(element).on('touchend', () => {\n        if (longPressTimer) {\n          clearTimeout(longPressTimer);\n        }\n      });\n    }\n    this.renderUri(element, result);\n    this.bindEventToOpen();\n  }\n  public renderUri(element: HTMLElement, result?: IQueryResult) {\n    if (/^\\s*$/.test(this.element.innerHTML)) {\n      const title = this.getDisplayedTitle();\n      this.element.innerHTML = title;\n      this.element.setAttribute('aria-label', l('Result'));\n\n      if (!this.element.title) {\n        this.element.title = this.getDisplayedTitleAsText();\n      }\n    }\n  }\n  /**\n   * Opens the result in the same window, no matter how the actual component is configured for the end user.\n   * @param logAnalytics Specifies whether the method should log an analytics event.\n   */\n  public openLink(logAnalytics = true) {\n    if (logAnalytics) {\n      this.logAnalytics();\n    }\n    window.location.href = this.getResultUri();\n  }\n\n  /**\n   * Opens the result in a new window, no matter how the actual component is configured for the end user.\n   * @param logAnalytics Specifies whether the method should log an analytics event.\n   */\n  public openLinkInNewWindow(logAnalytics = true) {\n    if (logAnalytics) {\n      this.logAnalytics();\n    }\n    window.open(this.getResultUri(), '_blank');\n  }\n\n  /**\n   * Tries to open the result in Microsoft Outlook if the result has an `outlookformacuri` or `outlookuri` field.\n   *\n   * Normally, this implies the result should be a link to an email.\n   *\n   * If the needed fields are not present, this method does nothing.\n   * @param logAnalytics Specifies whether the method should log an analytics event.\n   */\n  public openLinkInOutlook(logAnalytics = true) {\n    if (this.hasOutlookField()) {\n      if (logAnalytics) {\n        this.logAnalytics();\n      }\n      this.openLink();\n    }\n  }\n\n  /**\n   * Opens the link in the same manner the end user would.\n   *\n   * This essentially simulates a click on the result link.\n   *\n   * @param logAnalytics Specifies whether the method should log an analytics event.\n   */\n  public openLinkAsConfigured(logAnalytics = true) {\n    if (this.toExecuteOnOpen) {\n      if (logAnalytics) {\n        this.logAnalytics();\n      }\n      this.toExecuteOnOpen();\n    }\n  }\n\n  protected bindEventToOpen(): boolean {\n    return (\n      this.bindOnClickIfNotUndefined() ||\n      this.bindOpenQuickviewIfNotUndefined() ||\n      this.setHrefIfNotAlready() ||\n      this.openLinkThatIsNotAnAnchor()\n    );\n  }\n\n  private getDisplayedTitle() {\n    if (!this.options.titleTemplate) {\n      return this.result.title\n        ? HighlightUtils.highlightString(this.result.title, this.result.titleHighlights, null, 'coveo-highlight')\n        : this.escapedClickUri;\n    } else {\n      let newTitle = StringUtils.buildStringTemplateFromResult(this.options.titleTemplate, this.result);\n      return newTitle\n        ? StreamHighlightUtils.highlightStreamText(newTitle, this.result.termsToHighlight, this.result.phrasesToHighlight)\n        : this.escapedClickUri;\n    }\n  }\n\n  private getDisplayedTitleAsText() {\n    const container = $$('div');\n    container.setHtml(this.getDisplayedTitle());\n    return container.text();\n  }\n\n  private get escapedClickUri() {\n    return escape(this.result.clickUri);\n  }\n\n  private bindOnClickIfNotUndefined() {\n    if (this.options.onClick != undefined) {\n      this.toExecuteOnOpen = (e: MouseEvent) => {\n        this.options.onClick.call(this, e, this.result);\n      };\n\n      new AccessibleButton()\n        .withElement(this.element)\n        .withLabel(this.result.title)\n        .withSelectAction((e: Event) => this.toExecuteOnOpen(e))\n        .build();\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private bindOpenQuickviewIfNotUndefined() {\n    if (this.quickviewShouldBeOpened()) {\n      this.toExecuteOnOpen = () => {\n        $$(this.bindings.resultElement).trigger(ResultListEvents.openQuickview);\n      };\n\n      $$(this.element).on('click', (e: Event) => {\n        e.preventDefault();\n        this.toExecuteOnOpen();\n      });\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private openLinkThatIsNotAnAnchor() {\n    if (!this.elementIsAnAnchor()) {\n      this.toExecuteOnOpen = () => {\n        if (this.options.alwaysOpenInNewWindow) {\n          if (this.options.openInOutlook) {\n            this.openLinkInOutlook();\n          } else {\n            this.openLinkInNewWindow();\n          }\n        } else {\n          this.openLink();\n        }\n      };\n\n      $$(this.element).on('click', () => {\n        this.toExecuteOnOpen();\n      });\n\n      return true;\n    }\n    return false;\n  }\n\n  private setHrefIfNotAlready() {\n    // Do not erase any value put in href by the template, etc. Allows\n    // using custom click urls while still keeping analytics recording\n    // and other behavior brought by the component.\n    if (this.elementIsAnAnchor() && !Utils.isNonEmptyString($$(this.element).getAttribute('href'))) {\n      $$(this.element).setAttribute('href', this.getResultUri());\n      if (this.options.alwaysOpenInNewWindow && !(this.options.openInOutlook && this.hasOutlookField())) {\n        $$(this.element).setAttribute('target', '_blank');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private logDocumentOpen(href: string) {\n    this.usageAnalytics.logClickEvent(\n      analyticsActionCauseList.documentOpen,\n      {\n        documentURL: href,\n        documentTitle: this.result.title,\n        author: Utils.getFieldValue(this.result, 'author')\n      },\n      this.result,\n      this.root\n    );\n  }\n\n  private logAnalytics = debounce(\n    () => {\n      this.queryController.saveLastQuery();\n      let documentURL = $$(this.element).getAttribute('href');\n      if (documentURL == undefined || documentURL == '') {\n        documentURL = this.escapedClickUri;\n      }\n      if (this.options.logAnalytics) {\n        this.options.logAnalytics(documentURL);\n      } else {\n        this.logDocumentOpen(documentURL);\n      }\n      Defer.flush();\n    },\n    1500,\n    true\n  );\n\n  private filterProtocol(uri: string) {\n    const isAbsolute = /^(https?|ftp|file|mailto|tel):/i.test(uri);\n    const isRelative = /^(\\/|\\.\\/|\\.\\.\\/)/.test(uri);\n\n    return isAbsolute || isRelative ? uri : '';\n  }\n\n  private getResultUri(): string {\n    if (this.options.hrefTemplate) {\n      const uri = StringUtils.buildStringTemplateFromResult(this.options.hrefTemplate, this.result);\n      return this.filterProtocol(uri);\n    }\n\n    if (this.options.field == undefined && this.options.openInOutlook) {\n      this.setField();\n    }\n\n    if (this.options.field != undefined) {\n      return this.filterProtocol(Utils.getFieldValue(this.result, <string>this.options.field));\n    }\n\n    return this.filterProtocol(this.result.clickUri);\n  }\n\n  private elementIsAnAnchor() {\n    return this.element.tagName == 'A';\n  }\n\n  private setField() {\n    let os = Utils.exists(this.os) ? this.os : OSUtils.get();\n    if (os == OS_NAME.MACOSX && this.hasOutlookField()) {\n      this.options.field = '@outlookformacuri';\n    } else if (os == OS_NAME.WINDOWS && this.hasOutlookField()) {\n      this.options.field = '@outlookuri';\n    }\n  }\n\n  private hasOutlookField() {\n    let os = Utils.exists(this.os) ? this.os : OSUtils.get();\n    if (os == OS_NAME.MACOSX && this.result.raw['outlookformacuri'] != undefined) {\n      return true;\n    } else if (os == OS_NAME.WINDOWS && this.result.raw['outlookuri'] != undefined) {\n      return true;\n    }\n    return false;\n  }\n\n  private isUriThatMustBeOpenedInQuickview(): boolean {\n    return this.escapedClickUri.toLowerCase().indexOf('ldap://') == 0;\n  }\n\n  private quickviewShouldBeOpened() {\n    return (this.options.openQuickview || this.isUriThatMustBeOpenedInQuickview()) && QueryUtils.hasHTMLVersion(this.result);\n  }\n}\n\nInitialization.registerAutoCreateComponent(ResultLink);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ResultLink/ResultLink.ts"],"sourceRoot":""}