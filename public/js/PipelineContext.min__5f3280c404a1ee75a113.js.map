{"version":3,"sources":["PipelineContext.min__5f3280c404a1ee75a113.js","./src/ui/PipelineContext/PipelineContext.ts"],"names":["webpackJsonpCoveo__temporary","261","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","PipelineContext","ID","contextContent","ComponentOptions","initComponentOptions","setContext","$$","text","trim","bind","onRootElement","QueryEvents","buildingQuery","args","handleBuildingQuery","_this","newContext","_","isString","contextParsed","tryParseContextFromString","getContext","keys","getContextKeys","object","map","key","getContextValue","setContextValue","contextKey","contextValue","isArray","each","push","getModifiedData","queryBuilder","addContextValue","contextAsString","isEmpty","JSON","parse","Utils","decodeHTMLEntities","e","logger","error","replace","all","trimmedKey","Coveo","context","CURRENT_URL","window","location","href","doExport","exportGlobally","Component","Initialization","registerAutoCreateComponent"],"mappings":"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","file":"PipelineContext.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([79],{\n\n/***/ 261:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _ = __webpack_require__(0);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\n/**\r\n * The `PipelineContext` component injects custom contextual information into the search requests and usage analytics search events sent from a search interface.\r\n *\r\n * This component is meant to be initialized on a `script` HTML tag whose `type` attribute is set to `text/context` and whose optional JSON content defines the custom information to send (each value can be set to a string or array of strings).\r\n *\r\n * See [Sending Custom Context Information](https://docs.coveo.com/en/399/).\r\n * Note: To customize the context sent on all usage analytics events, see [Sending Custom Metadata with Search, Click, or Custom Events](https://docs.coveo.com/en/2004/javascript-search-framework/sending-custom-metadata-with-search-click-or-custom-events).\r\n */\r\nvar PipelineContext = /** @class */ (function (_super) {\r\n    __extends(PipelineContext, _super);\r\n    function PipelineContext(element, options, bindings) {\r\n        var _this = _super.call(this, element, PipelineContext.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.bindings = bindings;\r\n        _this.contextContent = {};\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, PipelineContext, options);\r\n        _this.setContext(Dom_1.$$(_this.element)\r\n            .text()\r\n            .trim());\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });\r\n        return _this;\r\n    }\r\n    /**\r\n     * **Available since the [December 2017 Release](https://docs.coveo.com/en/373).**\r\n     *\r\n     * Sets a new context, replacing the previous context if applicable.\r\n     *\r\n     * @param newContext The new context to set, which can be directly passed as a JSON, or as a stringified JSON.\r\n     */\r\n    PipelineContext.prototype.setContext = function (newContext) {\r\n        if (_.isString(newContext)) {\r\n            var contextParsed = this.tryParseContextFromString(newContext);\r\n            this.contextContent = contextParsed;\r\n        }\r\n        else {\r\n            this.contextContent = newContext;\r\n        }\r\n    };\r\n    /**\r\n     * Returns the current context\r\n     */\r\n    PipelineContext.prototype.getContext = function () {\r\n        var _this = this;\r\n        var keys = this.getContextKeys();\r\n        return _.object(keys, _.map(keys, function (key) { return _this.getContextValue(key); }));\r\n    };\r\n    /**\r\n     * **Available since the [December 2017 Release](https://docs.coveo.com/en/373).**\r\n     *\r\n     * Sets a value for a context key, replacing the previous value if applicable.\r\n     * @param contextKey\r\n     * @param contextValue\r\n     */\r\n    PipelineContext.prototype.setContextValue = function (contextKey, contextValue) {\r\n        this.contextContent[contextKey] = contextValue;\r\n    };\r\n    /**\r\n     * Return all the context keys configured for context.\r\n     * @returns {string[]}\r\n     */\r\n    PipelineContext.prototype.getContextKeys = function () {\r\n        return _.keys(this.contextContent);\r\n    };\r\n    /**\r\n     * Get the context value associated to the given key.\r\n     *\r\n     * If the global variable Coveo.context contains the requested key, this method will return the value contained in Coveo.context instead of the one contained internally.\r\n     *\r\n     * This is especially useful in a Coveo for Salesforce context, where context values can be extracted from a backend service.\r\n     * @param key\r\n     * @returns {string}\r\n     */\r\n    PipelineContext.prototype.getContextValue = function (key) {\r\n        var _this = this;\r\n        var contextValue = this.contextContent[key];\r\n        if (_.isArray(contextValue)) {\r\n            var contextValues_1 = [];\r\n            _.each(this.contextContent[key], function (value) {\r\n                contextValues_1.push(_this.getModifiedData(value));\r\n            });\r\n            return contextValues_1;\r\n        }\r\n        else if (_.isString(contextValue)) {\r\n            return this.getModifiedData(contextValue);\r\n        }\r\n        return '';\r\n    };\r\n    PipelineContext.prototype.handleBuildingQuery = function (args) {\r\n        var _this = this;\r\n        var keys = this.getContextKeys();\r\n        _.each(keys, function (key) {\r\n            args.queryBuilder.addContextValue(key, _this.getContextValue(key));\r\n        });\r\n    };\r\n    PipelineContext.prototype.tryParseContextFromString = function (contextAsString) {\r\n        if (_.isEmpty(contextAsString)) {\r\n            return {};\r\n        }\r\n        try {\r\n            // Context could be HTML encoded (eg: Coveo for Salesforce)\r\n            return JSON.parse(Utils_1.Utils.decodeHTMLEntities(contextAsString));\r\n        }\r\n        catch (e) {\r\n            try {\r\n                return JSON.parse(contextAsString);\r\n            }\r\n            catch (e) {\r\n                this.logger.error(\"Error while trying to parse context from the PipelineContext component\", e);\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    PipelineContext.prototype.getModifiedData = function (value) {\r\n        /* We need to modify the data to escape special salesforce characters. eg: {! }\r\n         If we find the matching value in the global Coveo.context variable, we return that one instead of the one present locally.\r\n         So, concretely, the component could contain :\r\n         {\r\n           \"productName\" : \"{! productValueFromSalesforce }\"\r\n         }\r\n    \r\n         This means that in those case, we would try to access Coveo.context.productValueFromSalesforce (which would in theory be a \"real\" product value from salesforce, and not a placeholder/variable)\r\n        */\r\n        return value.replace(/\\{\\!([^\\}]+)\\}/g, function (all, contextKey) {\r\n            var trimmedKey = contextKey.trim();\r\n            if (Coveo.context && trimmedKey in Coveo.context) {\r\n                return Coveo.context[trimmedKey];\r\n            }\r\n            else if (trimmedKey == PipelineContext.CURRENT_URL) {\r\n                return window.location.href;\r\n            }\r\n            return '';\r\n        });\r\n    };\r\n    PipelineContext.ID = 'PipelineContext';\r\n    PipelineContext.CURRENT_URL = 'CurrentUrl';\r\n    PipelineContext.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            PipelineContext: PipelineContext\r\n        });\r\n    };\r\n    return PipelineContext;\r\n}(Component_1.Component));\r\nexports.PipelineContext = PipelineContext;\r\nInitialization_1.Initialization.registerAutoCreateComponent(PipelineContext);\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// PipelineContext.min__5f3280c404a1ee75a113.js","import * as _ from 'underscore';\r\nimport { IBuildingQueryEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { Context, IPipelineContextProvider } from './PipelineGlobalExports';\r\n\r\ndeclare const Coveo;\r\n\r\nexport interface IPipelineContextOptions {}\r\n\r\n/**\r\n * The `PipelineContext` component injects custom contextual information into the search requests and usage analytics search events sent from a search interface.\r\n *\r\n * This component is meant to be initialized on a `script` HTML tag whose `type` attribute is set to `text/context` and whose optional JSON content defines the custom information to send (each value can be set to a string or array of strings).\r\n *\r\n * See [Sending Custom Context Information](https://docs.coveo.com/en/399/).\r\n * Note: To customize the context sent on all usage analytics events, see [Sending Custom Metadata with Search, Click, or Custom Events](https://docs.coveo.com/en/2004/javascript-search-framework/sending-custom-metadata-with-search-click-or-custom-events).\r\n */\r\nexport class PipelineContext extends Component implements IPipelineContextProvider {\r\n  static ID = 'PipelineContext';\r\n  static CURRENT_URL = 'CurrentUrl';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      PipelineContext: PipelineContext\r\n    });\r\n  };\r\n\r\n  private contextContent: Context = {};\r\n\r\n  public constructor(public element: HTMLElement, public options?: IPipelineContextOptions, public bindings?: IComponentBindings) {\r\n    super(element, PipelineContext.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, PipelineContext, options);\r\n    this.setContext(\r\n      $$(this.element)\r\n        .text()\r\n        .trim()\r\n    );\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n  }\r\n\r\n  /**\r\n   * **Available since the [December 2017 Release](https://docs.coveo.com/en/373).**\r\n   *\r\n   * Sets a new context, replacing the previous context if applicable.\r\n   *\r\n   * @param newContext The new context to set, which can be directly passed as a JSON, or as a stringified JSON.\r\n   */\r\n  public setContext(newContext: string | Context) {\r\n    if (_.isString(newContext)) {\r\n      const contextParsed = this.tryParseContextFromString(newContext);\r\n      this.contextContent = contextParsed;\r\n    } else {\r\n      this.contextContent = newContext;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current context\r\n   */\r\n  public getContext(): Context {\r\n    const keys = this.getContextKeys();\r\n    return _.object(keys, _.map(keys, key => this.getContextValue(key)));\r\n  }\r\n\r\n  /**\r\n   * **Available since the [December 2017 Release](https://docs.coveo.com/en/373).**\r\n   *\r\n   * Sets a value for a context key, replacing the previous value if applicable.\r\n   * @param contextKey\r\n   * @param contextValue\r\n   */\r\n  public setContextValue(contextKey: string, contextValue: string | string[]) {\r\n    this.contextContent[contextKey] = contextValue;\r\n  }\r\n\r\n  /**\r\n   * Return all the context keys configured for context.\r\n   * @returns {string[]}\r\n   */\r\n  public getContextKeys(): string[] {\r\n    return _.keys(this.contextContent);\r\n  }\r\n\r\n  /**\r\n   * Get the context value associated to the given key.\r\n   *\r\n   * If the global variable Coveo.context contains the requested key, this method will return the value contained in Coveo.context instead of the one contained internally.\r\n   *\r\n   * This is especially useful in a Coveo for Salesforce context, where context values can be extracted from a backend service.\r\n   * @param key\r\n   * @returns {string}\r\n   */\r\n  public getContextValue(key: string): string | string[] {\r\n    const contextValue = this.contextContent[key];\r\n    if (_.isArray(contextValue)) {\r\n      const contextValues = [];\r\n      _.each(this.contextContent[key], value => {\r\n        contextValues.push(this.getModifiedData(value));\r\n      });\r\n      return contextValues;\r\n    } else if (_.isString(contextValue)) {\r\n      return this.getModifiedData(contextValue);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\r\n    let keys = this.getContextKeys();\r\n    _.each(keys, (key: string) => {\r\n      args.queryBuilder.addContextValue(key, this.getContextValue(key));\r\n    });\r\n  }\r\n\r\n  private tryParseContextFromString(contextAsString: string): Context {\r\n    if (_.isEmpty(contextAsString)) {\r\n      return {};\r\n    }\r\n    try {\r\n      // Context could be HTML encoded (eg: Coveo for Salesforce)\r\n      return JSON.parse(Utils.decodeHTMLEntities(contextAsString));\r\n    } catch (e) {\r\n      try {\r\n        return JSON.parse(contextAsString);\r\n      } catch (e) {\r\n        this.logger.error(`Error while trying to parse context from the PipelineContext component`, e);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  private getModifiedData(value: string) {\r\n    /* We need to modify the data to escape special salesforce characters. eg: {! }\r\n     If we find the matching value in the global Coveo.context variable, we return that one instead of the one present locally.\r\n     So, concretely, the component could contain : \r\n     {\r\n       \"productName\" : \"{! productValueFromSalesforce }\"\r\n     }\r\n\r\n     This means that in those case, we would try to access Coveo.context.productValueFromSalesforce (which would in theory be a \"real\" product value from salesforce, and not a placeholder/variable)\r\n    */\r\n    return value.replace(/\\{\\!([^\\}]+)\\}/g, (all: string, contextKey: string) => {\r\n      const trimmedKey = contextKey.trim();\r\n      if (Coveo.context && trimmedKey in Coveo.context) {\r\n        return Coveo.context[trimmedKey];\r\n      } else if (trimmedKey == PipelineContext.CURRENT_URL) {\r\n        return window.location.href;\r\n      }\r\n      return '';\r\n    });\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(PipelineContext);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/PipelineContext/PipelineContext.ts"],"sourceRoot":""}