{"version":3,"sources":["AnalyticsSuggestions.min__5f3280c404a1ee75a113.js","./src/ui/AnalyticsSuggestions/AnalyticsSuggestions.ts","./src/ui/Misc/SuggestionForOmnibox.ts"],"names":["webpackJsonpCoveo__temporary","235","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","AnalyticsSuggestions","ID","partialQueries","lastSuggestions","resultsToBuildWith","_","extend","ComponentOptions","initComponentOptions","rowTemplate","toRender","rowElement","$$","className","AccessibleButton","withElement","withLabel","rawValue","build","el","innerHTML","outerHTML","onSelect","onRowSelection","suggestionStructure","row","suggestionForOmnibox","SuggestionForOmnibox","args","call","onRowTab","bind","onRootElement","OmniboxEvents","populateOmnibox","handlePopulateOmnibox","QueryEvents","querySuccess","_this","doExport","exportGlobally","selectSuggestion","suggestion","currentlyDisplayedSuggestions","isNaN","trigger","currentlySuggested","findWhere","pos","Assert","exists","promise","Promise","resolve","reject","searchPromise","usageAnalytics","getTopQueries","pageSize","numberOfSuggestions","queryText","completeQueryExpression","word","then","results","map","result","isEmpty","push","buildOmniboxElement","findAll","selectable","i","text","zIndex","omniboxZIndex","catch","undefined","rows","deferred","clear","closeOmnibox","queryStateModel","set","QueryStateModel","attributesEnum","q","logSearchEvent","getOmniboxAnalyticsEventCause","cleanCustomData","suggestionRanking","indexOf","pluck","suggestions","partialQuery","queryController","executeQuery","logCustomEvent","toClean","rejectLength","compact","filter","partial","array","replace","reducedToRejectLengthOrLess","reduceRight","memo","totalSoFar","length","reverse","join","searchInterface","StandaloneSearchInterface","analyticsActionCauseList","omniboxFromLink","omniboxAnalytics","buildNumberOption","defaultValue","min","headerTitle","buildLocalizedStringOption","localizedString","l","Component","Initialization","registerAutoCreateComponent","515","structure","onTabPress","header","buildElementHeader","appendChild","buildRowElements","each","template","title","ret","data","DomUtils","highlightElement","on"],"mappings":"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","file":"AnalyticsSuggestions.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([51],{\n\n/***/ 235:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _ = __webpack_require__(0);\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar SuggestionForOmnibox_1 = __webpack_require__(515);\r\nvar SearchInterface_1 = __webpack_require__(19);\r\n/**\r\n * The AnalyticsSuggestion component provides query suggestions based on the queries that a Coveo Analytics service most\r\n * commonly logs.\r\n *\r\n * This component orders possible query suggestions by their respective number of successful item views, thus\r\n * prioritizing the most relevant query suggestions. Consequently, when better options are available, this component\r\n * does not suggest queries resulting in no clicks from users or requiring refinements.\r\n *\r\n * The query suggestions appear in the {@link Omnibox} Component. The AnalyticsSuggestion component strongly\r\n * relates to the {@link Analytics} component. While a user is typing in a query box, the AnalyticsSuggestion component\r\n * allows them to see and select the most commonly used and relevant queries.\r\n *\r\n * @deprecated This component is exposed for legacy reasons. If possible, you should avoid using this component.\r\n * Instead, you should use the [`Omnibox`]{@link Omnibox}\r\n * [`enableQuerySuggestAddon`]{@link Omnibox.options.enableQuerySuggestAddon} option.\r\n */\r\nvar AnalyticsSuggestions = /** @class */ (function (_super) {\r\n    __extends(AnalyticsSuggestions, _super);\r\n    /**\r\n     * Creates a new AnalyticsSuggestions component.\r\n     *\r\n     * Also binds event handlers so that when a user selects a suggestion, an `omniboxFromLink` usage analytics event is\r\n     * logged if the suggestion comes from a standalone search box, or an `omniboxAnalytics` usage analytics\r\n     * event is logged otherwise.\r\n     *\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the AnalyticsSuggestions component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function AnalyticsSuggestions(element, options, bindings) {\r\n        var _this = _super.call(this, element, AnalyticsSuggestions.ID, bindings) || this;\r\n        _this.options = options;\r\n        _this.partialQueries = [];\r\n        _this.lastSuggestions = [];\r\n        _this.resultsToBuildWith = [];\r\n        if (_this.options && 'omniboxSuggestionOptions' in _this.options) {\r\n            _this.options = _.extend(_this.options, _this.options['omniboxSuggestionOptions']);\r\n        }\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, AnalyticsSuggestions, _this.options);\r\n        var rowTemplate = function (toRender) {\r\n            var rowElement = Dom_1.$$('div', {\r\n                className: 'magic-box-suggestion coveo-omnibox-selectable coveo-top-analytics-suggestion-row'\r\n            });\r\n            new AccessibleButton_1.AccessibleButton()\r\n                .withElement(rowElement)\r\n                .withLabel(toRender.rawValue)\r\n                .build();\r\n            if (toRender['data']) {\r\n                rowElement.el.innerHTML = toRender['data'];\r\n            }\r\n            return rowElement.el.outerHTML;\r\n        };\r\n        _this.options.onSelect = _this.options.onSelect || _this.onRowSelection;\r\n        var suggestionStructure = {\r\n            row: rowTemplate\r\n        };\r\n        _this.suggestionForOmnibox = new SuggestionForOmnibox_1.SuggestionForOmnibox(suggestionStructure, function (value, args) {\r\n            _this.options.onSelect.call(_this, value, args);\r\n        }, function (value, args) {\r\n            _this.onRowTab.call(_this, value, args);\r\n        });\r\n        _this.bind.onRootElement(OmniboxEvents_1.OmniboxEvents.populateOmnibox, function (args) { return _this.handlePopulateOmnibox(args); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function () { return (_this.partialQueries = []); });\r\n        return _this;\r\n    }\r\n    AnalyticsSuggestions.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            AnalyticsSuggestions: AnalyticsSuggestions\r\n        });\r\n    };\r\n    AnalyticsSuggestions.prototype.selectSuggestion = function (suggestion) {\r\n        if (this.currentlyDisplayedSuggestions) {\r\n            if (isNaN(suggestion)) {\r\n                if (this.currentlyDisplayedSuggestions[suggestion]) {\r\n                    Dom_1.$$(this.currentlyDisplayedSuggestions[suggestion].element).trigger('click');\r\n                }\r\n            }\r\n            else {\r\n                var currentlySuggested = _.findWhere(this.currentlyDisplayedSuggestions, {\r\n                    pos: suggestion\r\n                });\r\n                if (currentlySuggested) {\r\n                    Dom_1.$$(currentlySuggested.element).trigger('click');\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AnalyticsSuggestions.prototype.handlePopulateOmnibox = function (args) {\r\n        var _this = this;\r\n        Assert_1.Assert.exists(args);\r\n        var promise = new Promise(function (resolve, reject) {\r\n            var searchPromise = _this.usageAnalytics.getTopQueries({\r\n                pageSize: _this.options.numberOfSuggestions,\r\n                queryText: args.completeQueryExpression.word\r\n            });\r\n            searchPromise.then(function (results) {\r\n                _this.resultsToBuildWith = _.map(results, function (result) {\r\n                    return {\r\n                        value: result\r\n                    };\r\n                });\r\n                _this.lastSuggestions = results;\r\n                if (!_.isEmpty(_this.resultsToBuildWith) && args.completeQueryExpression.word != '') {\r\n                    _this.partialQueries.push(args.completeQueryExpression.word);\r\n                }\r\n                var element = _this.suggestionForOmnibox.buildOmniboxElement(_this.resultsToBuildWith, args);\r\n                _this.currentlyDisplayedSuggestions = {};\r\n                if (element) {\r\n                    _.map(Dom_1.$$(element).findAll('.coveo-omnibox-selectable'), function (selectable, i) {\r\n                        _this.currentlyDisplayedSuggestions[Dom_1.$$(selectable).text()] = {\r\n                            element: selectable,\r\n                            pos: i\r\n                        };\r\n                    });\r\n                }\r\n                resolve({\r\n                    element: element,\r\n                    zIndex: _this.options.omniboxZIndex\r\n                });\r\n            });\r\n            searchPromise.catch(function () {\r\n                resolve({\r\n                    element: undefined\r\n                });\r\n            });\r\n        });\r\n        args.rows.push({ deferred: promise });\r\n    };\r\n    AnalyticsSuggestions.prototype.onRowSelection = function (value, args) {\r\n        args.clear();\r\n        args.closeOmnibox();\r\n        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, value);\r\n        this.usageAnalytics.logSearchEvent(this.getOmniboxAnalyticsEventCause(), {\r\n            partialQueries: this.cleanCustomData(this.partialQueries),\r\n            suggestionRanking: _.indexOf(_.pluck(this.resultsToBuildWith, 'value'), value),\r\n            suggestions: this.cleanCustomData(this.lastSuggestions),\r\n            partialQuery: args.completeQueryExpression.word\r\n        });\r\n        this.queryController.executeQuery();\r\n    };\r\n    AnalyticsSuggestions.prototype.onRowTab = function (value, args) {\r\n        args.clear();\r\n        args.closeOmnibox();\r\n        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, \"\" + value);\r\n        this.usageAnalytics.logCustomEvent(this.getOmniboxAnalyticsEventCause(), {\r\n            partialQueries: this.cleanCustomData(this.partialQueries),\r\n            suggestionRanking: _.indexOf(_.pluck(this.resultsToBuildWith, 'value'), value),\r\n            suggestions: this.cleanCustomData(this.lastSuggestions),\r\n            partialQuery: args.completeQueryExpression.word\r\n        }, this.element);\r\n    };\r\n    AnalyticsSuggestions.prototype.cleanCustomData = function (toClean, rejectLength) {\r\n        if (rejectLength === void 0) { rejectLength = 256; }\r\n        // Filter out only consecutive values that are the identical\r\n        toClean = _.compact(_.filter(toClean, function (partial, pos, array) {\r\n            return pos === 0 || partial !== array[pos - 1];\r\n        }));\r\n        // Custom dimensions cannot be an array in analytics service: Send a string joined by ; instead.\r\n        // Need to replace ;\r\n        toClean = _.map(toClean, function (partial) {\r\n            return partial.replace(/;/g, '');\r\n        });\r\n        // Reduce right to get the last X words that adds to less then rejectLength\r\n        var reducedToRejectLengthOrLess = [];\r\n        _.reduceRight(toClean, function (memo, partial) {\r\n            var totalSoFar = memo + partial.length;\r\n            if (totalSoFar <= rejectLength) {\r\n                reducedToRejectLengthOrLess.push(partial);\r\n            }\r\n            return totalSoFar;\r\n        }, 0);\r\n        toClean = reducedToRejectLengthOrLess.reverse();\r\n        var ret = toClean.join(';');\r\n        // analytics service can store max 256 char in a custom event\r\n        // if we're over that, call cleanup again with an arbitrary 10 less char accepted\r\n        if (ret.length >= 256) {\r\n            return this.cleanCustomData(toClean, rejectLength - 10);\r\n        }\r\n        return toClean.join(';');\r\n    };\r\n    AnalyticsSuggestions.prototype.getOmniboxAnalyticsEventCause = function () {\r\n        if (this.searchInterface instanceof SearchInterface_1.StandaloneSearchInterface) {\r\n            return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFromLink;\r\n        }\r\n        return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxAnalytics;\r\n    };\r\n    AnalyticsSuggestions.ID = 'AnalyticsSuggestions';\r\n    /**\r\n     * The options for the component\r\n     * @componentOptions\r\n     */\r\n    AnalyticsSuggestions.options = {\r\n        /**\r\n         * Specifies the z-index position at which the query suggestions render themselves in the {@link Omnibox}\r\n         * component. Higher values are placed first.\r\n         *\r\n         * Default value is `52` and minimum value is `0`.\r\n         */\r\n        omniboxZIndex: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 52, min: 0 }),\r\n        /**\r\n         * Specifies the title of the query suggestions group in the {@link Omnibox} component. This option is not available\r\n         * when using the default Lightning Friendly Theme.\r\n         *\r\n         * Default value is the localized string for `\"Suggested Queries\"`.\r\n         */\r\n        headerTitle: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({\r\n            localizedString: function () { return Strings_1.l('SuggestedQueries'); }\r\n        }),\r\n        /**\r\n         * Specifies the number of query suggestions to request and display in the {@link Omnibox} component.\r\n         *\r\n         * Default value is `5` and minimum value is `1`.\r\n         */\r\n        numberOfSuggestions: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 })\r\n    };\r\n    return AnalyticsSuggestions;\r\n}(Component_1.Component));\r\nexports.AnalyticsSuggestions = AnalyticsSuggestions;\r\nInitialization_1.Initialization.registerAutoCreateComponent(AnalyticsSuggestions);\r\n\n\n/***/ }),\n\n/***/ 515:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DomUtils_1 = __webpack_require__(91);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar _ = __webpack_require__(0);\r\nvar SuggestionForOmnibox = /** @class */ (function () {\r\n    function SuggestionForOmnibox(structure, onSelect, onTabPress) {\r\n        this.structure = structure;\r\n        this.onSelect = onSelect;\r\n        this.onTabPress = onTabPress;\r\n    }\r\n    SuggestionForOmnibox.prototype.buildOmniboxElement = function (results, args) {\r\n        var element;\r\n        if (results.length != 0) {\r\n            element = Dom_1.$$('div').el;\r\n            if (this.structure.header) {\r\n                var header = this.buildElementHeader();\r\n                element.appendChild(header);\r\n            }\r\n            var rows = this.buildRowElements(results, args);\r\n            _.each(rows, function (row) {\r\n                element.appendChild(row);\r\n            });\r\n        }\r\n        return element;\r\n    };\r\n    SuggestionForOmnibox.prototype.buildElementHeader = function () {\r\n        return Dom_1.$$('div', undefined, this.structure.header.template({\r\n            headerTitle: this.structure.header.title\r\n        })).el;\r\n    };\r\n    SuggestionForOmnibox.prototype.buildRowElements = function (results, args) {\r\n        var _this = this;\r\n        var ret = [];\r\n        _.each(results, function (result) {\r\n            var row = Dom_1.$$('div', undefined, _this.structure.row({\r\n                rawValue: result.value,\r\n                data: DomUtils_1.DomUtils.highlightElement(result.value, args.completeQueryExpression.word)\r\n            })).el;\r\n            Dom_1.$$(row).on('click', function () {\r\n                _this.onSelect.call(_this, result.value, args);\r\n            });\r\n            Dom_1.$$(row).on('keyboardSelect', function () {\r\n                _this.onSelect.call(_this, result.value, args);\r\n            });\r\n            Dom_1.$$(row).on('tabSelect', function () {\r\n                _this.onTabPress.call(_this, result.value, args);\r\n            });\r\n            ret.push(row);\r\n        });\r\n        return ret;\r\n    };\r\n    return SuggestionForOmnibox;\r\n}());\r\nexports.SuggestionForOmnibox = SuggestionForOmnibox;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// AnalyticsSuggestions.min__5f3280c404a1ee75a113.js","import * as _ from 'underscore';\r\nimport { IPopulateOmniboxEventArgs, OmniboxEvents } from '../../events/OmniboxEvents';\r\nimport { QueryEvents } from '../../events/QueryEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { QueryStateModel } from '../../models/QueryStateModel';\r\nimport { IStringMap } from '../../rest/GenericParam';\r\nimport { l } from '../../strings/Strings';\r\nimport { AccessibleButton } from '../../utils/AccessibleButton';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { analyticsActionCauseList, IAnalyticsTopSuggestionMeta } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { ISuggestionForOmniboxOptions, ISuggestionForOmniboxTemplate, SuggestionForOmnibox } from '../Misc/SuggestionForOmnibox';\r\nimport { StandaloneSearchInterface } from '../SearchInterface/SearchInterface';\r\n\r\nexport interface IAnalyticsSuggestionsOptions extends ISuggestionForOmniboxOptions {}\r\n\r\n/**\r\n * The AnalyticsSuggestion component provides query suggestions based on the queries that a Coveo Analytics service most\r\n * commonly logs.\r\n *\r\n * This component orders possible query suggestions by their respective number of successful item views, thus\r\n * prioritizing the most relevant query suggestions. Consequently, when better options are available, this component\r\n * does not suggest queries resulting in no clicks from users or requiring refinements.\r\n *\r\n * The query suggestions appear in the {@link Omnibox} Component. The AnalyticsSuggestion component strongly\r\n * relates to the {@link Analytics} component. While a user is typing in a query box, the AnalyticsSuggestion component\r\n * allows them to see and select the most commonly used and relevant queries.\r\n *\r\n * @deprecated This component is exposed for legacy reasons. If possible, you should avoid using this component.\r\n * Instead, you should use the [`Omnibox`]{@link Omnibox}\r\n * [`enableQuerySuggestAddon`]{@link Omnibox.options.enableQuerySuggestAddon} option.\r\n */\r\nexport class AnalyticsSuggestions extends Component {\r\n  static ID = 'AnalyticsSuggestions';\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      AnalyticsSuggestions: AnalyticsSuggestions\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IAnalyticsSuggestionsOptions = {\r\n    /**\r\n     * Specifies the z-index position at which the query suggestions render themselves in the {@link Omnibox}\r\n     * component. Higher values are placed first.\r\n     *\r\n     * Default value is `52` and minimum value is `0`.\r\n     */\r\n    omniboxZIndex: ComponentOptions.buildNumberOption({ defaultValue: 52, min: 0 }),\r\n\r\n    /**\r\n     * Specifies the title of the query suggestions group in the {@link Omnibox} component. This option is not available\r\n     * when using the default Lightning Friendly Theme.\r\n     *\r\n     * Default value is the localized string for `\"Suggested Queries\"`.\r\n     */\r\n    headerTitle: ComponentOptions.buildLocalizedStringOption({\r\n      localizedString: () => l('SuggestedQueries')\r\n    }),\r\n\r\n    /**\r\n     * Specifies the number of query suggestions to request and display in the {@link Omnibox} component.\r\n     *\r\n     * Default value is `5` and minimum value is `1`.\r\n     */\r\n    numberOfSuggestions: ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 })\r\n  };\r\n\r\n  private suggestionForOmnibox: SuggestionForOmnibox;\r\n  private partialQueries: string[] = [];\r\n  private lastSuggestions: string[] = [];\r\n  private resultsToBuildWith = [];\r\n  private currentlyDisplayedSuggestions: { [suggestion: string]: { element: HTMLElement; pos: number } };\r\n\r\n  /**\r\n   * Creates a new AnalyticsSuggestions component.\r\n   *\r\n   * Also binds event handlers so that when a user selects a suggestion, an `omniboxFromLink` usage analytics event is\r\n   * logged if the suggestion comes from a standalone search box, or an `omniboxAnalytics` usage analytics\r\n   * event is logged otherwise.\r\n   *\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the AnalyticsSuggestions component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(element: HTMLElement, public options: IAnalyticsSuggestionsOptions, bindings?: IComponentBindings) {\r\n    super(element, AnalyticsSuggestions.ID, bindings);\r\n\r\n    if (this.options && 'omniboxSuggestionOptions' in this.options) {\r\n      this.options = _.extend(this.options, this.options['omniboxSuggestionOptions']);\r\n    }\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, AnalyticsSuggestions, this.options);\r\n\r\n    const rowTemplate = (toRender: IStringMap<any>) => {\r\n      const rowElement = $$('div', {\r\n        className: 'magic-box-suggestion coveo-omnibox-selectable coveo-top-analytics-suggestion-row'\r\n      });\r\n\r\n      new AccessibleButton()\r\n        .withElement(rowElement)\r\n        .withLabel(toRender.rawValue)\r\n        .build();\r\n\r\n      if (toRender['data']) {\r\n        rowElement.el.innerHTML = toRender['data'];\r\n      }\r\n      return rowElement.el.outerHTML;\r\n    };\r\n\r\n    this.options.onSelect = this.options.onSelect || this.onRowSelection;\r\n\r\n    const suggestionStructure: ISuggestionForOmniboxTemplate = {\r\n      row: rowTemplate\r\n    };\r\n\r\n    this.suggestionForOmnibox = new SuggestionForOmnibox(\r\n      suggestionStructure,\r\n      (value: string, args: IPopulateOmniboxEventArgs) => {\r\n        this.options.onSelect.call(this, value, args);\r\n      },\r\n      (value: string, args: IPopulateOmniboxEventArgs) => {\r\n        this.onRowTab.call(this, value, args);\r\n      }\r\n    );\r\n    this.bind.onRootElement(OmniboxEvents.populateOmnibox, (args: IPopulateOmniboxEventArgs) => this.handlePopulateOmnibox(args));\r\n    this.bind.onRootElement(QueryEvents.querySuccess, () => (this.partialQueries = []));\r\n  }\r\n\r\n  /**\r\n   * Selects a currently displayed query suggestion. This implies that at least one suggestion must have been returned\r\n   * at least once. The suggestion parameter can either be a number (0-based index position of the query suggestion to\r\n   * select) or a string that matches the suggestion.\r\n   *\r\n   * @param suggestion\r\n   */\r\n  public selectSuggestion(suggestion: number);\r\n  public selectSuggestion(suggestion: string);\r\n  public selectSuggestion(suggestion: any) {\r\n    if (this.currentlyDisplayedSuggestions) {\r\n      if (isNaN(suggestion)) {\r\n        if (this.currentlyDisplayedSuggestions[suggestion]) {\r\n          $$(this.currentlyDisplayedSuggestions[suggestion].element).trigger('click');\r\n        }\r\n      } else {\r\n        const currentlySuggested = <{ element: HTMLElement; pos: number }>_.findWhere(<any>this.currentlyDisplayedSuggestions, {\r\n          pos: suggestion\r\n        });\r\n        if (currentlySuggested) {\r\n          $$(currentlySuggested.element).trigger('click');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private handlePopulateOmnibox(args: IPopulateOmniboxEventArgs) {\r\n    Assert.exists(args);\r\n\r\n    var promise = new Promise((resolve, reject) => {\r\n      const searchPromise = this.usageAnalytics.getTopQueries({\r\n        pageSize: this.options.numberOfSuggestions,\r\n        queryText: args.completeQueryExpression.word\r\n      });\r\n\r\n      searchPromise.then((results: string[]) => {\r\n        this.resultsToBuildWith = _.map(results, result => {\r\n          return {\r\n            value: result\r\n          };\r\n        });\r\n        this.lastSuggestions = results;\r\n        if (!_.isEmpty(this.resultsToBuildWith) && args.completeQueryExpression.word != '') {\r\n          this.partialQueries.push(args.completeQueryExpression.word);\r\n        }\r\n        const element = this.suggestionForOmnibox.buildOmniboxElement(this.resultsToBuildWith, args);\r\n        this.currentlyDisplayedSuggestions = {};\r\n        if (element) {\r\n          _.map($$(element).findAll('.coveo-omnibox-selectable'), (selectable, i?) => {\r\n            this.currentlyDisplayedSuggestions[$$(selectable).text()] = {\r\n              element: selectable,\r\n              pos: i\r\n            };\r\n          });\r\n        }\r\n        resolve({\r\n          element: element,\r\n          zIndex: this.options.omniboxZIndex\r\n        });\r\n      });\r\n      searchPromise.catch(() => {\r\n        resolve({\r\n          element: undefined\r\n        });\r\n      });\r\n    });\r\n\r\n    args.rows.push({ deferred: promise });\r\n  }\r\n\r\n  private onRowSelection(value: string, args: IPopulateOmniboxEventArgs) {\r\n    args.clear();\r\n    args.closeOmnibox();\r\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, value);\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsTopSuggestionMeta>(this.getOmniboxAnalyticsEventCause(), {\r\n      partialQueries: this.cleanCustomData(this.partialQueries),\r\n      suggestionRanking: _.indexOf(_.pluck(this.resultsToBuildWith, 'value'), value),\r\n      suggestions: this.cleanCustomData(this.lastSuggestions),\r\n      partialQuery: args.completeQueryExpression.word\r\n    });\r\n    this.queryController.executeQuery();\r\n  }\r\n\r\n  private onRowTab(value: string, args: IPopulateOmniboxEventArgs) {\r\n    args.clear();\r\n    args.closeOmnibox();\r\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, `${value}`);\r\n    this.usageAnalytics.logCustomEvent<IAnalyticsTopSuggestionMeta>(\r\n      this.getOmniboxAnalyticsEventCause(),\r\n      {\r\n        partialQueries: this.cleanCustomData(this.partialQueries),\r\n        suggestionRanking: _.indexOf(_.pluck(this.resultsToBuildWith, 'value'), value),\r\n        suggestions: this.cleanCustomData(this.lastSuggestions),\r\n        partialQuery: args.completeQueryExpression.word\r\n      },\r\n      this.element\r\n    );\r\n  }\r\n\r\n  private cleanCustomData(toClean: string[], rejectLength = 256) {\r\n    // Filter out only consecutive values that are the identical\r\n    toClean = _.compact(\r\n      _.filter(toClean, (partial: string, pos?: number, array?: string[]) => {\r\n        return pos === 0 || partial !== array[pos - 1];\r\n      })\r\n    );\r\n\r\n    // Custom dimensions cannot be an array in analytics service: Send a string joined by ; instead.\r\n    // Need to replace ;\r\n    toClean = _.map(toClean, partial => {\r\n      return partial.replace(/;/g, '');\r\n    });\r\n\r\n    // Reduce right to get the last X words that adds to less then rejectLength\r\n    const reducedToRejectLengthOrLess = [];\r\n    _.reduceRight(\r\n      toClean,\r\n      (memo: number, partial: string) => {\r\n        const totalSoFar = memo + partial.length;\r\n        if (totalSoFar <= rejectLength) {\r\n          reducedToRejectLengthOrLess.push(partial);\r\n        }\r\n        return totalSoFar;\r\n      },\r\n      0\r\n    );\r\n    toClean = reducedToRejectLengthOrLess.reverse();\r\n    const ret = toClean.join(';');\r\n\r\n    // analytics service can store max 256 char in a custom event\r\n    // if we're over that, call cleanup again with an arbitrary 10 less char accepted\r\n    if (ret.length >= 256) {\r\n      return this.cleanCustomData(toClean, rejectLength - 10);\r\n    }\r\n\r\n    return toClean.join(';');\r\n  }\r\n\r\n  private getOmniboxAnalyticsEventCause() {\r\n    if (this.searchInterface instanceof StandaloneSearchInterface) {\r\n      return analyticsActionCauseList.omniboxFromLink;\r\n    }\r\n    return analyticsActionCauseList.omniboxAnalytics;\r\n  }\r\n}\r\nInitialization.registerAutoCreateComponent(AnalyticsSuggestions);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/AnalyticsSuggestions/AnalyticsSuggestions.ts","import { IPopulateOmniboxEventArgs } from '../../events/OmniboxEvents';\r\nimport { DomUtils } from '../../utils/DomUtils';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\n\r\nexport interface ISuggestionForOmniboxOptionsOnSelect {\r\n  (value: string, args: IPopulateOmniboxEventArgs): void;\r\n}\r\n\r\nexport interface ISuggestionForOmniboxOptions {\r\n  omniboxZIndex?: number;\r\n  headerTitle?: string;\r\n  onSelect?: ISuggestionForOmniboxOptionsOnSelect;\r\n  numberOfSuggestions?: number;\r\n}\r\n\r\nexport interface ISuggestionForOmniboxTemplate {\r\n  header?: {\r\n    template: (...args: any[]) => string;\r\n    title: string;\r\n  };\r\n  row: (...args: any[]) => string;\r\n}\r\n\r\nexport interface ISuggestionForOmniboxResult {\r\n  value: string;\r\n}\r\n\r\nexport class SuggestionForOmnibox {\r\n  constructor(\r\n    public structure: ISuggestionForOmniboxTemplate,\r\n    public onSelect: (value: string, args: IPopulateOmniboxEventArgs) => void,\r\n    public onTabPress: (value: string, args: IPopulateOmniboxEventArgs) => void\r\n  ) {}\r\n\r\n  public buildOmniboxElement(results: ISuggestionForOmniboxResult[], args: IPopulateOmniboxEventArgs): HTMLElement {\r\n    let element: HTMLElement;\r\n    if (results.length != 0) {\r\n      element = $$('div').el;\r\n      if (this.structure.header) {\r\n        let header = this.buildElementHeader();\r\n        element.appendChild(header);\r\n      }\r\n      let rows = this.buildRowElements(results, args);\r\n      _.each(rows, row => {\r\n        element.appendChild(row);\r\n      });\r\n    }\r\n    return element;\r\n  }\r\n\r\n  private buildElementHeader(): HTMLElement {\r\n    return $$(\r\n      'div',\r\n      undefined,\r\n      this.structure.header.template({\r\n        headerTitle: this.structure.header.title\r\n      })\r\n    ).el;\r\n  }\r\n\r\n  private buildRowElements(results: ISuggestionForOmniboxResult[], args: IPopulateOmniboxEventArgs): HTMLElement[] {\r\n    let ret = [];\r\n    _.each(results, result => {\r\n      let row = $$(\r\n        'div',\r\n        undefined,\r\n        this.structure.row({\r\n          rawValue: result.value,\r\n          data: DomUtils.highlightElement(result.value, args.completeQueryExpression.word)\r\n        })\r\n      ).el;\r\n      $$(row).on('click', () => {\r\n        this.onSelect.call(this, result.value, args);\r\n      });\r\n      $$(row).on('keyboardSelect', () => {\r\n        this.onSelect.call(this, result.value, args);\r\n      });\r\n      $$(row).on('tabSelect', () => {\r\n        this.onTabPress.call(this, result.value, args);\r\n      });\r\n      ret.push(row);\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Misc/SuggestionForOmnibox.ts"],"sourceRoot":""}