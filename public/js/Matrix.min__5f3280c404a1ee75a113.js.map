{"version":3,"sources":["Matrix.min__5f3280c404a1ee75a113.js","./src/ui/Matrix/Matrix.ts","./src/ui/Matrix/Cell.ts","./src/ui/Matrix/DefaultMatrixResultPreviewTemplate.ts"],"names":["webpackJsonpCoveo__temporary","258","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","Matrix","ID","groupByIndex","rowId","columnId","selectedRowValue","undefined","selectedColumnValue","numberOfRows","numberOfColumns","ComponentOptions","initComponentOptions","previewTemplate","DefaultMatrixResultPreviewTemplate","computedField","computedFieldFormat","previewSortField","columnFieldValues","length","columnLabels","buildMatrix","rowField","logger","error","columnField","bindEvents","initQueryState","_this","selectCell","rowNumber","columnNumber","rowValue","columnValue","getRowValue","getColumnValue","isRowFacetPresent","queryStateModel","set","isColumnFacetPresent","getSelectedColumnValue","getSelectedRowValue","getCellElement","data","getHTML","getCellValue","cell","$$","text","drawMatrix","headerRow","className","drawRow","el","numberOfRowsToDraw","enableColumnTotals","i","row","totalRow","cellFontSize","cells","findAll","_","each","c","style","fontSize","bind","onRootElement","QueryEvents","buildingQuery","args","handleBuildingQuery","doneBuildingQuery","handleDoneBuildingQuery","deferredQuerySuccess","handleDeferredQuerySuccess","QueryStateModel","getFacetId","registerNewAttribute","buildTitle","buildBody","addHeaderRow","title","titleHtml","appendChild","body","areFacetsPresent","queryBuilder","advancedExpression","addFieldExpression","addMainGroubByRequest","addColumnsGroupByRequests","reset","parseResults","results","addTotals","formatCells","groupBy","field","sortCriteria","computedFields","getComputedFields","maximumNumberOfValues","maximumNumberOfRows","push","groupByRequests","queryOverride","buildExpression","maximumNumberOfValuesInGroupBy","expression","build","constantExpression","totalQuery","operation","computedFieldOperation","getCellResult","cellResult","values","computedFieldResults","isAColumnSelected","isColumnSelected","enableRowTotals","addRowTotals","addColumnTotals","addColumn","setValue","rowTotal","computeRowTotal","toLowerCase","sort","a","getValue","addRow","columnTotal","computeColumnTotal","total","parseInt","j","cellValue","Globalize","format","columnHeader","addCellToRow","column","addClass","Cell","Utils","isNullOrUndefined","toString","isCellSelected","handleClick","queryController","executeQuery","get","selectedColumnValues","attributes","isARowSelected","isRowSelected","selectedRowValues","facet","componentStateModel","disabled","empty","mainResults","groupByResults","columnResult","find","this_1","on","num","enableHoverPreview","handleHoverIn","handleHoverOut","isHoverWorkingOnRow","isHoverWorkingOnColumn","previewTimeout","window","setTimeout","displayResultsPreview","previewDelay","clearTimeout","removePreview","query","createPreviewQuery","addPreview","previewMinWidth","previewMaxWidth","getEndpoint","search","then","isDataAvailable","instantiatedResults","map","r","instantiateTemplate","html","result","builtResultElement","outerHTML","Promise","all","updatePreview","instantiateToElement","checkCondition","responsiveComponents","searchInterface","content","initParameters","getBindings","Initialization","automaticallyCreateComponentsInside","initResult","rowFieldExpression","QueryUtils","buildFieldExpression","columnFieldExpression","getLastQuery","aq","previewSortCriteria","sortField","fieldSliced","slice","fieldsToInclude","doExport","exportGlobally","buildStringOption","buildFieldOption","required","defaultValue","buildNumberOption","min","buildBooleanOption","buildListOption","TemplateComponentOptions","buildTemplateOption","Component","registerAutoCreateComponent","627","628","previewActive","setHTML","minWidth","maxWidth","previewContainer","e","stopPropagation","container","hide","detach","template","preview","innerHTML","show","629","instantiateToString","object","instantiateOptions","raw","resolve","reject","Template"],"mappings":"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","file":"Matrix.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([36],{\n\n/***/ 258:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Globalize = __webpack_require__(23);\r\n__webpack_require__(627);\r\nvar _ = __webpack_require__(0);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar QueryUtils_1 = __webpack_require__(21);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar TemplateComponentOptions_1 = __webpack_require__(61);\r\nvar Cell_1 = __webpack_require__(628);\r\nvar DefaultMatrixResultPreviewTemplate_1 = __webpack_require__(629);\r\n/**\r\n * The Matrix component uses the values of two fields (row and column) to display the results of the specified computed\r\n * field in a table.\r\n *\r\n * The user specifies the values to use for the columns. An {@link IGroupByRequest} operation performed at the same time\r\n * as the main query retrieves the values to use for the rows.\r\n *\r\n * In a way that is similar to the {@link Facet} component, selecting a Matrix cell allows the end user to drill down\r\n * inside the results by restricting the row field and the column field to match the values of the selected cell.\r\n *\r\n * @notSupportedIn salesforcefree\r\n */\r\nvar Matrix = /** @class */ (function (_super) {\r\n    __extends(Matrix, _super);\r\n    /**\r\n     * Creates a new Matrix. Also verifies whether options are valid and coherent. Binds query events.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the Matrix component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function Matrix(element, options, bindings) {\r\n        var _this = _super.call(this, element, Matrix.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.groupByIndex = [];\r\n        _this.rowId = '';\r\n        _this.columnId = '';\r\n        /**\r\n         * The currently selected row value, or `undefined` if nothing is selected.\r\n         */\r\n        _this.selectedRowValue = undefined;\r\n        /**\r\n         * The currently selected column value, or `undefined` if nothing is selected.\r\n         */\r\n        _this.selectedColumnValue = undefined;\r\n        _this.numberOfRows = 0;\r\n        _this.numberOfColumns = 0;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Matrix, options);\r\n        if (!_this.options.previewTemplate) {\r\n            _this.options.previewTemplate = new DefaultMatrixResultPreviewTemplate_1.DefaultMatrixResultPreviewTemplate(_this.options.computedField, _this.options.computedFieldFormat);\r\n        }\r\n        if (!_this.options.previewSortField) {\r\n            _this.options.previewSortField = _this.options.computedField;\r\n        }\r\n        if (_this.options.columnFieldValues.length != _this.options.columnLabels.length) {\r\n            _this.options.columnLabels = _this.options.columnFieldValues;\r\n        }\r\n        _this.buildMatrix();\r\n        if (_this.options.rowField == null) {\r\n            _this.logger.error(\"'rowField' option is required in the Matrix component\");\r\n        }\r\n        else if (_this.options.columnField == null) {\r\n            _this.logger.error(\"'columnField' option is required in the Matrix component\");\r\n        }\r\n        else if (_this.options.computedField == null) {\r\n            _this.logger.error(\"'computedField' option is required in the Matrix component\");\r\n        }\r\n        else {\r\n            _this.bindEvents();\r\n            _this.initQueryState();\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Selects a cell by its row and column number. Does not execute a query.\r\n     * @param rowNumber The row number of the cell to select.\r\n     * @param columnNumber The column number of the cell to select.\r\n     */\r\n    Matrix.prototype.selectCell = function (rowNumber, columnNumber) {\r\n        var rowValue, columnValue;\r\n        if (rowNumber !== 0 && rowNumber !== this.numberOfRows - 1) {\r\n            rowValue = this.getRowValue(rowNumber);\r\n        }\r\n        if (columnNumber !== 0 && columnNumber !== this.numberOfColumns - 1) {\r\n            columnValue = this.getColumnValue(columnNumber);\r\n        }\r\n        if (rowValue && this.isRowFacetPresent()) {\r\n            this.queryStateModel.set(this.rowId, [rowValue]);\r\n        }\r\n        else {\r\n            this.selectedRowValue = rowValue;\r\n            this.queryStateModel.set(this.rowId, []);\r\n        }\r\n        if (columnValue && this.isColumnFacetPresent()) {\r\n            this.queryStateModel.set(this.columnId, [columnValue]);\r\n        }\r\n        else {\r\n            this.selectedColumnValue = columnValue;\r\n            this.queryStateModel.set(this.columnId, []);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the currently selected column value.\r\n     */\r\n    Matrix.prototype.getSelectedColumnValue = function () {\r\n        return this.selectedColumnValue;\r\n    };\r\n    /**\r\n     * Returns the currently selected row value.\r\n     */\r\n    Matrix.prototype.getSelectedRowValue = function () {\r\n        return this.selectedRowValue;\r\n    };\r\n    /**\r\n     * Gets the HTMLElement associated to a cell.\r\n     * @param rowNumber The row number of the cell.\r\n     * @param columnNumber The column number of the cell.\r\n     * @returns {HTMLElement} The associated HTMLElement.\r\n     */\r\n    Matrix.prototype.getCellElement = function (rowNumber, columnNumber) {\r\n        return this.data[rowNumber][columnNumber].getHTML();\r\n    };\r\n    /**\r\n     * Gets the string associated to a cell.\r\n     * @param rowNumber The row number of the cell.\r\n     * @param columnNumber The column number of the cell.\r\n     * @returns {string} The associated string.\r\n     */\r\n    Matrix.prototype.getCellValue = function (rowNumber, columnNumber) {\r\n        var cell = this.getCellElement(rowNumber, columnNumber);\r\n        return Dom_1.$$(cell).text();\r\n    };\r\n    Matrix.prototype.drawMatrix = function () {\r\n        var _this = this;\r\n        var headerRow = Dom_1.$$('div', {\r\n            className: 'coveo-matrix-row matrix-header-row'\r\n        });\r\n        this.drawRow(headerRow.el, 0);\r\n        var numberOfRowsToDraw = this.options.enableColumnTotals ? this.numberOfRows - 1 : this.numberOfRows;\r\n        for (var i = 1; i < numberOfRowsToDraw; i++) {\r\n            var row = Dom_1.$$('div', {\r\n                className: 'coveo-matrix-row'\r\n            }).el;\r\n            this.drawRow(row, i);\r\n        }\r\n        if (this.options.enableColumnTotals) {\r\n            var totalRow = Dom_1.$$('div', {\r\n                className: 'coveo-matrix-row matrix-total-row'\r\n            }).el;\r\n            this.drawRow(totalRow, this.numberOfRows - 1);\r\n        }\r\n        if (this.options.cellFontSize !== '') {\r\n            var cells = Dom_1.$$(this.element).findAll('.coveo-matrix-cell');\r\n            _.each(cells, function (c) {\r\n                c.style.fontSize = _this.options.cellFontSize;\r\n            });\r\n        }\r\n    };\r\n    Matrix.prototype.bindEvents = function () {\r\n        var _this = this;\r\n        this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });\r\n        this.bind.onRootElement(QueryEvents_1.QueryEvents.doneBuildingQuery, function (args) { return _this.handleDoneBuildingQuery(args); });\r\n        this.bind.onRootElement(QueryEvents_1.QueryEvents.deferredQuerySuccess, function (args) { return _this.handleDeferredQuerySuccess(args); });\r\n    };\r\n    Matrix.prototype.initQueryState = function () {\r\n        this.rowId = QueryStateModel_1.QueryStateModel.getFacetId(this.options.rowField);\r\n        this.columnId = QueryStateModel_1.QueryStateModel.getFacetId(this.options.columnField);\r\n        this.queryStateModel.registerNewAttribute(this.rowId, []);\r\n        this.queryStateModel.registerNewAttribute(this.columnId, []);\r\n    };\r\n    Matrix.prototype.buildMatrix = function () {\r\n        this.buildTitle();\r\n        this.buildBody();\r\n        this.data = new Array();\r\n        this.addHeaderRow();\r\n    };\r\n    Matrix.prototype.buildTitle = function () {\r\n        var title = this.options.title ? this.options.title : '';\r\n        var titleHtml = Dom_1.$$('div', {\r\n            className: 'coveo-matrix-title'\r\n        }, title).el;\r\n        this.element.appendChild(titleHtml);\r\n    };\r\n    Matrix.prototype.buildBody = function () {\r\n        var body = Dom_1.$$('div', {\r\n            className: 'coveo-matrix'\r\n        }).el;\r\n        this.element.appendChild(body);\r\n    };\r\n    Matrix.prototype.handleBuildingQuery = function (args) {\r\n        if (!this.areFacetsPresent()) {\r\n            if (this.selectedRowValue && !this.isRowFacetPresent()) {\r\n                args.queryBuilder.advancedExpression.addFieldExpression(this.options.rowField, '=', [this.selectedRowValue]);\r\n            }\r\n            if (this.selectedColumnValue && !this.isColumnFacetPresent()) {\r\n                args.queryBuilder.advancedExpression.addFieldExpression(this.options.columnField, '=', [this.selectedColumnValue]);\r\n            }\r\n        }\r\n    };\r\n    Matrix.prototype.handleDoneBuildingQuery = function (args) {\r\n        this.groupByIndex = [];\r\n        this.addMainGroubByRequest(args.queryBuilder);\r\n        this.addColumnsGroupByRequests(args.queryBuilder);\r\n    };\r\n    Matrix.prototype.handleDeferredQuerySuccess = function (args) {\r\n        this.reset();\r\n        this.parseResults(args.results);\r\n        this.addTotals();\r\n        this.drawMatrix();\r\n        this.formatCells();\r\n        this.selectedRowValue = undefined;\r\n        this.selectedColumnValue = undefined;\r\n    };\r\n    Matrix.prototype.addMainGroubByRequest = function (queryBuilder) {\r\n        var groupBy = {\r\n            field: this.options.rowField,\r\n            sortCriteria: this.options.sortCriteria,\r\n            computedFields: this.getComputedFields(),\r\n            maximumNumberOfValues: this.options.maximumNumberOfRows\r\n        };\r\n        this.groupByIndex.push(queryBuilder.groupByRequests.length);\r\n        queryBuilder.groupByRequests.push(groupBy);\r\n    };\r\n    Matrix.prototype.addColumnsGroupByRequests = function (queryBuilder) {\r\n        for (var i = 0; i < this.options.columnFieldValues.length; i++) {\r\n            var groupBy = {\r\n                field: this.options.rowField,\r\n                sortCriteria: this.options.sortCriteria,\r\n                computedFields: this.getComputedFields(),\r\n                queryOverride: '(' + this.buildExpression(queryBuilder) + ')' + '(' + this.options.columnField + \"='\" + this.options.columnFieldValues[i] + \"')\",\r\n                maximumNumberOfValues: this.options.maximumNumberOfValuesInGroupBy\r\n            };\r\n            this.groupByIndex.push(queryBuilder.groupByRequests.length);\r\n            queryBuilder.groupByRequests.push(groupBy);\r\n        }\r\n    };\r\n    Matrix.prototype.buildExpression = function (queryBuilder) {\r\n        var expression = queryBuilder.expression.build();\r\n        var advancedExpression = queryBuilder.advancedExpression.build();\r\n        var constantExpression = queryBuilder.constantExpression.build();\r\n        var totalQuery = '';\r\n        if (expression) {\r\n            totalQuery += ' ' + expression;\r\n        }\r\n        if (advancedExpression) {\r\n            totalQuery += ' ' + advancedExpression;\r\n        }\r\n        if (constantExpression) {\r\n            totalQuery += ' ' + constantExpression;\r\n        }\r\n        return totalQuery;\r\n    };\r\n    Matrix.prototype.getComputedFields = function () {\r\n        var computedFields = [\r\n            {\r\n                field: this.options.computedField,\r\n                operation: this.options.computedFieldOperation\r\n            }\r\n        ];\r\n        return computedFields;\r\n    };\r\n    Matrix.prototype.getCellResult = function (results, rowNumber, columnNumber) {\r\n        var rowValue = this.getRowValue(rowNumber);\r\n        var columnValue = this.getColumnValue(columnNumber);\r\n        var cellResult = 0;\r\n        for (var i = 0; i < results.values.length; i++) {\r\n            if (results.values[i].value === rowValue) {\r\n                cellResult = results.values[i].computedFieldResults[0];\r\n                break;\r\n            }\r\n        }\r\n        if (this.isAColumnSelected() && !this.isColumnSelected(columnValue)) {\r\n            cellResult = 0;\r\n        }\r\n        return cellResult;\r\n    };\r\n    Matrix.prototype.addTotals = function () {\r\n        if (this.options.enableRowTotals) {\r\n            this.addRowTotals();\r\n        }\r\n        if (this.options.enableColumnTotals) {\r\n            this.addColumnTotals();\r\n        }\r\n    };\r\n    Matrix.prototype.addRowTotals = function () {\r\n        var _this = this;\r\n        this.addColumn();\r\n        this.setValue('Total', 0, this.numberOfColumns - 1);\r\n        for (var i = 1; i < this.numberOfRows; i++) {\r\n            var rowTotal = this.computeRowTotal(i);\r\n            this.setValue(rowTotal, i, this.numberOfColumns - 1);\r\n        }\r\n        // Fix sort ordering when not all columns field values are present.\r\n        if (this.options.sortCriteria.toLowerCase() == 'computedfielddescending') {\r\n            this.data.sort(function (a, b) {\r\n                return b[_this.numberOfColumns - 1].getValue() - a[_this.numberOfColumns - 1].getValue();\r\n            });\r\n        }\r\n        if (this.options.sortCriteria.toLowerCase() == 'computedfieldascending') {\r\n            this.data.sort(function (a, b) {\r\n                return a[_this.numberOfColumns - 1].getValue() - b[_this.numberOfColumns - 1].getValue();\r\n            });\r\n        }\r\n    };\r\n    Matrix.prototype.addColumnTotals = function () {\r\n        this.addRow();\r\n        this.setValue('Total', this.numberOfRows - 1, 0);\r\n        for (var i = 1; i < this.numberOfColumns; i++) {\r\n            var columnTotal = this.computeColumnTotal(i);\r\n            this.setValue(columnTotal, this.numberOfRows - 1, i);\r\n        }\r\n    };\r\n    Matrix.prototype.computeRowTotal = function (rowNumber) {\r\n        var total = 0;\r\n        for (var columnNumber = 1; columnNumber < this.numberOfColumns - 1; columnNumber++) {\r\n            total += parseInt(this.getCellValue(rowNumber, columnNumber));\r\n        }\r\n        return total;\r\n    };\r\n    Matrix.prototype.computeColumnTotal = function (columnNumber) {\r\n        var total = 0;\r\n        for (var rowNumber = 1; rowNumber < this.numberOfRows - 1; rowNumber++) {\r\n            total += parseInt(this.getCellValue(rowNumber, columnNumber));\r\n        }\r\n        return total;\r\n    };\r\n    Matrix.prototype.formatCells = function () {\r\n        for (var i = 1; i < this.numberOfRows; i++) {\r\n            for (var j = 1; j < this.numberOfColumns; j++) {\r\n                var cellValue = this.getCellValue(i, j);\r\n                cellValue = Globalize.format(parseInt(cellValue), this.options.computedFieldFormat);\r\n                this.setValue(cellValue, i, j);\r\n            }\r\n        }\r\n    };\r\n    Matrix.prototype.addHeaderRow = function () {\r\n        this.addRow();\r\n        this.addColumn();\r\n        this.setValue(this.options.columnHeader, 0, 0);\r\n        for (var i = 0; i < this.options.columnLabels.length; i++) {\r\n            this.addColumn();\r\n            this.setValue(this.options.columnLabels[i], 0, i + 1);\r\n        }\r\n    };\r\n    Matrix.prototype.addRow = function () {\r\n        this.data.push(new Array());\r\n        for (var i = 0; i < this.numberOfColumns; i++) {\r\n            this.addCellToRow(this.numberOfRows, i);\r\n        }\r\n        this.numberOfRows++;\r\n    };\r\n    Matrix.prototype.addColumn = function () {\r\n        for (var i = 0; i < this.numberOfRows; i++) {\r\n            this.addCellToRow(i, this.numberOfColumns);\r\n        }\r\n        this.numberOfColumns++;\r\n    };\r\n    Matrix.prototype.addCellToRow = function (rowNumber, columnNumber) {\r\n        var column = Dom_1.$$('div', {\r\n            className: 'coveo-matrix-cell'\r\n        });\r\n        if (columnNumber == 0) {\r\n            column.addClass('matrix-first-column');\r\n        }\r\n        this.data[rowNumber].push(new Cell_1.Cell(0, column.el));\r\n    };\r\n    Matrix.prototype.setValue = function (value, rowNumber, columnNumber) {\r\n        var cell = this.getCellElement(rowNumber, columnNumber);\r\n        if (!Utils_1.Utils.isNullOrUndefined(value)) {\r\n            Dom_1.$$(cell).text(value.toString());\r\n        }\r\n        if (this.isCellSelected(this.getRowValue(rowNumber), this.getColumnValue(columnNumber))) {\r\n            Dom_1.$$(cell).addClass('coveo-matrix-selected');\r\n        }\r\n        if (this.isAColumnSelected() && !this.isColumnSelected(this.getColumnValue(columnNumber))) {\r\n            if (columnNumber != 0 && rowNumber != 0) {\r\n                Dom_1.$$(cell).addClass('coveo-matrix-unimportant');\r\n            }\r\n        }\r\n        this.data[rowNumber][columnNumber].setValue(value);\r\n    };\r\n    Matrix.prototype.handleClick = function (rowNumber, columnNumber) {\r\n        this.selectCell(rowNumber, columnNumber);\r\n        this.queryController.executeQuery();\r\n    };\r\n    Matrix.prototype.getRowValue = function (rowNumber) {\r\n        return this.data[rowNumber][0].getValue();\r\n    };\r\n    Matrix.prototype.getColumnValue = function (columnNumber) {\r\n        return this.options.columnFieldValues[columnNumber - 1];\r\n    };\r\n    Matrix.prototype.isAColumnSelected = function () {\r\n        var selectedColumnValues = this.queryStateModel.get(this.columnId) || [];\r\n        return selectedColumnValues.length !== 0 || this.selectedColumnValue != undefined;\r\n    };\r\n    Matrix.prototype.isColumnSelected = function (columnValue) {\r\n        if (this.isAColumnSelected() && columnValue) {\r\n            var selectedColumnValues = this.queryStateModel.attributes[this.columnId] || [];\r\n            for (var i = 0; i < selectedColumnValues.length; i++) {\r\n                if (selectedColumnValues[i].toLowerCase() === columnValue.toLowerCase()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return this.selectedColumnValue == columnValue;\r\n    };\r\n    Matrix.prototype.isARowSelected = function () {\r\n        var selectedRowValues = this.queryStateModel.get(this.rowId) || [];\r\n        return selectedRowValues.length !== 0 || this.selectedRowValue !== undefined;\r\n    };\r\n    Matrix.prototype.isRowSelected = function (rowValue) {\r\n        if (this.isARowSelected() && rowValue) {\r\n            var selectedRowValues = this.queryStateModel.get(this.rowId) || [];\r\n            for (var i = 0; i < selectedRowValues.length; i++) {\r\n                if (selectedRowValues[i].toLowerCase() === rowValue.toLowerCase()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return this.selectedRowValue == rowValue;\r\n    };\r\n    Matrix.prototype.isCellSelected = function (rowValue, columnValue) {\r\n        if (this.isAColumnSelected() && this.isARowSelected()) {\r\n            return this.isRowSelected(rowValue) && this.isColumnSelected(columnValue);\r\n        }\r\n        else if (this.isAColumnSelected()) {\r\n            return this.isColumnSelected(columnValue);\r\n        }\r\n        return false;\r\n    };\r\n    Matrix.prototype.areFacetsPresent = function () {\r\n        return this.isRowFacetPresent() && this.isColumnFacetPresent();\r\n    };\r\n    Matrix.prototype.isRowFacetPresent = function () {\r\n        var facet = this.componentStateModel.get(this.rowId);\r\n        return facet && !facet[0].disabled;\r\n    };\r\n    Matrix.prototype.isColumnFacetPresent = function () {\r\n        var facet = this.componentStateModel.get(this.columnId);\r\n        return facet && !facet[0].disabled;\r\n    };\r\n    Matrix.prototype.reset = function () {\r\n        Dom_1.$$(this.element).empty();\r\n        this.numberOfRows = 0;\r\n        this.numberOfColumns = 0;\r\n        this.data = new Array();\r\n        this.buildMatrix();\r\n    };\r\n    Matrix.prototype.parseResults = function (results) {\r\n        if (results) {\r\n            var mainResults = results.groupByResults[this.groupByIndex[0]];\r\n            if (mainResults) {\r\n                for (var i = 0; i < mainResults.values.length; i++) {\r\n                    var value = mainResults.values[i].value;\r\n                    this.addRow();\r\n                    this.setValue(value, i + 1, 0);\r\n                }\r\n            }\r\n            for (var i = 1; i < this.numberOfRows; i++) {\r\n                for (var j = 1; j < this.numberOfColumns; j++) {\r\n                    var columnResult = results.groupByResults[this.groupByIndex[j]];\r\n                    var cellValue = this.getCellResult(columnResult, i, j);\r\n                    this.setValue(cellValue, i, j);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Matrix.prototype.drawRow = function (row, rowNumber) {\r\n        var _this = this;\r\n        var body = Dom_1.$$(this.element).find('.coveo-matrix');\r\n        var _loop_1 = function (i) {\r\n            var cell = this_1.data[rowNumber][i].getHTML();\r\n            Dom_1.$$(cell).on('click', function () {\r\n                var handler = function (num) {\r\n                    _this.handleClick(rowNumber, num);\r\n                };\r\n                handler(i);\r\n            });\r\n            if (this_1.options.enableHoverPreview) {\r\n                (function (num) {\r\n                    Dom_1.$$(cell).on('mouseover', function () { return _this.handleHoverIn(rowNumber, num); });\r\n                    Dom_1.$$(cell).on('mouseout', function () { return _this.handleHoverOut(rowNumber, num); });\r\n                })(i);\r\n            }\r\n            row.appendChild(cell);\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.numberOfColumns; i++) {\r\n            _loop_1(i);\r\n        }\r\n        body.appendChild(row);\r\n    };\r\n    Matrix.prototype.handleHoverIn = function (rowNumber, columnNumber) {\r\n        var _this = this;\r\n        if (this.isHoverWorkingOnRow(rowNumber) && this.isHoverWorkingOnColumn(columnNumber)) {\r\n            this.previewTimeout = window.setTimeout(function () {\r\n                _this.displayResultsPreview(rowNumber, columnNumber);\r\n            }, this.options.previewDelay);\r\n        }\r\n    };\r\n    Matrix.prototype.handleHoverOut = function (rowNumber, columnNumber) {\r\n        clearTimeout(this.previewTimeout);\r\n        var cell = this.data[rowNumber][columnNumber];\r\n        cell.removePreview();\r\n    };\r\n    Matrix.prototype.displayResultsPreview = function (rowNumber, columnNumber) {\r\n        var _this = this;\r\n        var query = this.createPreviewQuery(rowNumber, columnNumber);\r\n        var cell = this.data[rowNumber][columnNumber];\r\n        cell.addPreview(this.options.previewMinWidth, this.options.previewMaxWidth);\r\n        var endpoint = this.queryController.getEndpoint();\r\n        endpoint.search(query).then(function (data) {\r\n            // During the time it take for the query to return, the matrix can change size depending\r\n            // on if another query was performed : Need to check for undefined before accessing the data\r\n            // we're trying to render;\r\n            if (!_this.isDataAvailable(rowNumber, columnNumber)) {\r\n                return;\r\n            }\r\n            var cell = _this.data[rowNumber][columnNumber];\r\n            var instantiatedResults = _.map(data.results, function (r) {\r\n                return _this.instantiateTemplate(r);\r\n            });\r\n            var html = '';\r\n            _.each(instantiatedResults, function (result) {\r\n                result.then(function (builtResultElement) {\r\n                    html += builtResultElement.outerHTML;\r\n                });\r\n            });\r\n            Promise.all(instantiatedResults).then(function () {\r\n                cell.updatePreview(html);\r\n            });\r\n        });\r\n    };\r\n    Matrix.prototype.instantiateTemplate = function (result) {\r\n        var _this = this;\r\n        return this.options.previewTemplate\r\n            .instantiateToElement(result, {\r\n            checkCondition: false,\r\n            responsiveComponents: this.searchInterface.responsiveComponents\r\n        })\r\n            .then(function (content) {\r\n            var initParameters = {\r\n                options: _this.options,\r\n                bindings: _this.getBindings(),\r\n                result: result\r\n            };\r\n            return Initialization_1.Initialization.automaticallyCreateComponentsInside(content, initParameters).initResult.then(function () {\r\n                return content;\r\n            });\r\n        });\r\n    };\r\n    Matrix.prototype.createPreviewQuery = function (rowNumber, columnNumber) {\r\n        var rowFieldExpression = '(' + QueryUtils_1.QueryUtils.buildFieldExpression(this.options.rowField, '=', [this.getRowValue(rowNumber)]) + ')';\r\n        var columnFieldExpression = '(' + QueryUtils_1.QueryUtils.buildFieldExpression(this.options.columnField, '=', [this.getColumnValue(columnNumber)]) + ')';\r\n        var query = this.queryController.getLastQuery();\r\n        query.aq = rowFieldExpression;\r\n        query.aq += columnFieldExpression;\r\n        query.sortCriteria = this.options.previewSortCriteria;\r\n        query.sortField = this.options.previewSortField;\r\n        var fieldSliced = this.options.computedField.slice(1);\r\n        var fieldExists = _.find(query.fieldsToInclude, function (field) {\r\n            return field == fieldSliced;\r\n        });\r\n        if (!fieldExists && query.fieldsToInclude) {\r\n            query.fieldsToInclude.push(fieldSliced);\r\n        }\r\n        return query;\r\n    };\r\n    Matrix.prototype.isHoverWorkingOnRow = function (rowNumber) {\r\n        if (this.options.enableColumnTotals) {\r\n            return rowNumber !== 0 && rowNumber !== this.numberOfRows - 1;\r\n        }\r\n        return rowNumber !== 0;\r\n    };\r\n    Matrix.prototype.isHoverWorkingOnColumn = function (columnNumber) {\r\n        if (this.options.enableRowTotals) {\r\n            return columnNumber !== 0 && columnNumber !== this.numberOfColumns - 1;\r\n        }\r\n        return columnNumber !== 0;\r\n    };\r\n    Matrix.prototype.isDataAvailable = function (row, column) {\r\n        return this.data[row] !== undefined && this.data[row][column] !== undefined;\r\n    };\r\n    Matrix.ID = 'Matrix';\r\n    Matrix.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Matrix: Matrix\r\n        });\r\n    };\r\n    /**\r\n     * The possible options for the component\r\n     * @componentOptions\r\n     */\r\n    Matrix.options = {\r\n        /**\r\n         * Specifies the text to display at the top of the Matrix.\r\n         */\r\n        title: ComponentOptions_1.ComponentOptions.buildStringOption(),\r\n        /**\r\n         * Specifies the field to use for the rows.\r\n         *\r\n         * Specifying a value for this options is required for this component to work.\r\n         */\r\n        rowField: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),\r\n        /**\r\n         * Specifies the field to use for the columns.\r\n         *\r\n         * Specifying a value for this options is required for this component to work.\r\n         */\r\n        columnField: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),\r\n        /**\r\n         * Specifies the criteria to use for sorting the rows.\r\n         *\r\n         * See {@link IGroupByRequest.sortCriteria} for the list of possible values.\r\n         *\r\n         * Default value is `computedfielddescending`.\r\n         */\r\n        sortCriteria: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'computedfielddescending' }),\r\n        /**\r\n         * Specifies the maximum number of rows to display in the Matrix.\r\n         *\r\n         * Default value is `10`. Minimum value is `0`.\r\n         */\r\n        maximumNumberOfRows: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 10, min: 0 }),\r\n        /**\r\n         * Specifies whether to display a **Total** column containing the sum of each row.\r\n         *\r\n         * Default value is `true`.\r\n         */\r\n        enableRowTotals: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n        /**\r\n         * Specifies the field values to use for each column.\r\n         *\r\n         * See also {@link Matrix.options.columnLabels}.\r\n         *\r\n         * Default value is `[]`, which means that the Matrix will not generate any column (except the **Total** column, if\r\n         * {@link Matrix.options.enableRowTotals} is `true`).\r\n         */\r\n        columnFieldValues: ComponentOptions_1.ComponentOptions.buildListOption({ defaultValue: [] }),\r\n        /**\r\n         * Specifies the label values to use for each column.\r\n         *\r\n         * Default value is `[]`. The array set for this options should match the {@link Matrix.options.columnFieldValues}.\r\n         */\r\n        columnLabels: ComponentOptions_1.ComponentOptions.buildListOption({ defaultValue: [] }),\r\n        /**\r\n         * Specifies the label for the first column on the left as a description of the {@link Matrix.options.columnField}.\r\n         *\r\n         * Default value is `undefined`.\r\n         */\r\n        columnHeader: ComponentOptions_1.ComponentOptions.buildStringOption(),\r\n        /**\r\n         * Specifies the maximum number of results to include in the {@link IGroupByRequest} for the columns.\r\n         *\r\n         * This value should always be greater than the {@link Matrix.options.maximumNumberOfRows}. If it is too small, some\r\n         * of the results will not be displayed in the Matrix.\r\n         *\r\n         * Default value is `100`. Minimum value is `0`.\r\n         */\r\n        maximumNumberOfValuesInGroupBy: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 100, min: 0 }),\r\n        /**\r\n         * Specifies whether to add a **Total** row containing the total of each column.\r\n         *\r\n         * Default value is `true`\r\n         */\r\n        enableColumnTotals: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n        /**\r\n         * Specifies the field whose computed values you want to display in the cells.\r\n         *\r\n         * Specifying a value for this options is required for this component to work.\r\n         */\r\n        computedField: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),\r\n        /**\r\n         * Specifies the type of aggregate operation to perform on the {@link Matrix.options.computedField}.\r\n         *\r\n         * The possible values are:\r\n         * - `sum` - Computes the sum of the computed field values.\r\n         * - `average` - Computes the average of the computed field values.\r\n         * - `minimum` - Finds the minimum value of the computed field values.\r\n         * - `maximum` - Finds the maximum value of the computed field values.\r\n         *\r\n         * Default value is `sum`.\r\n         */\r\n        computedFieldOperation: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'sum' }),\r\n        /**\r\n         * Specifies how to format the values resulting from a {@link Matrix.options.computedFieldOperation}.\r\n         *\r\n         * The Globalize library defines all available formats (see\r\n         * [Globalize](https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-)).\r\n         *\r\n         * The most commonly used formats are:\r\n         * - `c0` - Formats the value as a currency.\r\n         * - `n0` - Formats the value as an integer.\r\n         * - `n2` - Formats the value as a floating point with 2 decimal digits.\r\n         *\r\n         * Default value is `c0`.\r\n         */\r\n        computedFieldFormat: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'c0' }),\r\n        /**\r\n         * Specifies the font-size to use for displaying text inside the cells.\r\n         *\r\n         * This option is mainly useful to prevent a Matrix containing many columns from cropping some of its values.\r\n         *\r\n         * However, instead of using this option to solve this kind of issue, you could also remove some of the less\r\n         * important columns from your Matrix or modify the CSS of your page to allow the Matrix to occupy a larger space.\r\n         *\r\n         * Default value is `''`.\r\n         */\r\n        cellFontSize: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '' }),\r\n        /**\r\n         * Specifies whether to show a preview popup of cell results when hovering over a cell.\r\n         *\r\n         * See also {@link Matrix.options.previewSortCriteria}, {@link Matrix.options.previewMaxWidth},\r\n         * {@link Matrix.options.previewMinWidth}, {@link Matrix.options.previewDelay} and\r\n         * {@link Matrix.options.previewTemplate}.\r\n         *\r\n         * Default value is `true`.\r\n         */\r\n        enableHoverPreview: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n        /**\r\n         * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the criteria to use for sorting the results of\r\n         * the hover preview.\r\n         *\r\n         * The available sort criteria values are the same as those of the {@link IQuery}.\r\n         *\r\n         * The possible values are:\r\n         * - `relevancy`: Uses all configured ranking weights and any specified ranking expressions to sort the results.\r\n         * - `dateascending` / `datedescending`: Sorts the results using the `@date` field value, which is typically the\r\n         * last modification date of an item in the index.\r\n         * - `qre`: Sorts the results using only the weights applied by ranking expressions. Using `qre` is much like using\r\n         * `relevancy`, except that `qre` does not compute automatic weights, such as weights based on keyword proximity.\r\n         * - `nosort`: Does not sort the results. Using `nosort` returns the items in an essentially random order.\r\n         * - `fieldascending` / `fielddescending`: Sorts the results using the value of a custom field.\r\n         * - `fieldascending` / `fielddescending`: Sorts the results using the value of a custom field.\r\n         *\r\n         * See also {@link Matrix.options.previewSortField}.\r\n         *\r\n         * Default value is `FieldDescending`.\r\n         */\r\n        previewSortCriteria: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'FieldDescending' }),\r\n        /**\r\n         * If {@link Matrix.options.previewSortCriteria} is `fieldascending` or `fielddescending`, specifies the field to\r\n         * use for sorting the results of the hover preview.\r\n         *\r\n         * Default value is the value of {@link Matrix.options.computedField}.\r\n         */\r\n        previewSortField: ComponentOptions_1.ComponentOptions.buildFieldOption(),\r\n        /**\r\n         * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the maximum width (in pixels) of the preview\r\n         * popup.\r\n         *\r\n         * Default value is `500px`.\r\n         */\r\n        previewMaxWidth: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '500px' }),\r\n        /**\r\n         * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the minimum width (in pixels) of the preview\r\n         * popup.\r\n         *\r\n         * Default value is `0`.\r\n         */\r\n        previewMinWidth: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '0' }),\r\n        /**\r\n         * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the delay (in milliseconds) before sending the\r\n         * query to get the preview results.\r\n         *\r\n         * Default value is `500`.\r\n         */\r\n        previewDelay: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 500 }),\r\n        /**\r\n         * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the template ID or CSS selector of the template\r\n         * to use to render the results of the hover preview.\r\n         *\r\n         * You must use either `data-template-id` or `data-template-selector` in the markup to specify a value for this\r\n         * option.\r\n         *\r\n         * **Examples:**\r\n         *\r\n         * Specifying what template to use by referring to its template ID:\r\n         * ```html\r\n         * <div class='CoveoMatrix' data-template-id='TemplateId'></div>\r\n         * ```\r\n         *\r\n         * Specifying what template to use by referring to its CSS selector:\r\n         * ```html\r\n         * <div class='CoveoMatrix' data-template-selector='.templateSelector'></div>\r\n         * ```\r\n         */\r\n        previewTemplate: TemplateComponentOptions_1.TemplateComponentOptions.buildTemplateOption()\r\n    };\r\n    return Matrix;\r\n}(Component_1.Component));\r\nexports.Matrix = Matrix;\r\nInitialization_1.Initialization.registerAutoCreateComponent(Matrix);\r\n\n\n/***/ }),\n\n/***/ 627:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 628:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\nvar _ = __webpack_require__(0);\r\n/**\r\n * Represent a single cell of data in the {@link Matrix} component.\r\n */\r\nvar Cell = /** @class */ (function () {\r\n    function Cell(value, el) {\r\n        if (value === void 0) { value = 0; }\r\n        this.previewActive = false;\r\n        this.element = el;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Return the value of the cell.\r\n     * @returns {any}\r\n     */\r\n    Cell.prototype.getValue = function () {\r\n        return this.value;\r\n    };\r\n    /**\r\n     * Return the `HTMLElement` for the cell.\r\n     * @returns {HTMLElement}\r\n     */\r\n    Cell.prototype.getHTML = function () {\r\n        return this.element;\r\n    };\r\n    /**\r\n     * Set the value if the cell.\r\n     * @param value\r\n     */\r\n    Cell.prototype.setValue = function (value) {\r\n        this.value = value;\r\n    };\r\n    /**\r\n     * Set the `HTMLElement` for the cell.\r\n     * @param html\r\n     */\r\n    Cell.prototype.setHTML = function (html) {\r\n        this.element = html;\r\n    };\r\n    /**\r\n     * Show the preview of the cell.\r\n     * @param minWidth css minWidth property : eg 100px\r\n     * @param maxWidth css maxWidth property : eg 100px\r\n     */\r\n    Cell.prototype.addPreview = function (minWidth, maxWidth) {\r\n        this.previewActive = true;\r\n        var previewContainer = Dom_1.$$('div', {\r\n            className: 'matrix-results-preview-container'\r\n        });\r\n        previewContainer.el.style.minWidth = minWidth;\r\n        previewContainer.el.style.maxWidth = maxWidth;\r\n        previewContainer.on('click', function (e) {\r\n            e.stopPropagation();\r\n        });\r\n        this.element.appendChild(previewContainer.el);\r\n        var container = Dom_1.$$(this.element).findAll('.matrix-results-preview-container');\r\n        _.each(container, function (c) {\r\n            Dom_1.$$(c).hide();\r\n        });\r\n    };\r\n    /**\r\n     * Remove the preview of the cell\r\n     */\r\n    Cell.prototype.removePreview = function () {\r\n        this.previewActive = false;\r\n        var container = Dom_1.$$(this.element).find('.matrix-results-preview-container');\r\n        if (container) {\r\n            Dom_1.$$(container).detach();\r\n        }\r\n    };\r\n    /**\r\n     * Update the preview with a new template\r\n     * @param template\r\n     */\r\n    Cell.prototype.updatePreview = function (template) {\r\n        if (this.previewActive) {\r\n            var preview = Dom_1.$$(this.element).find('.matrix-results-preview-container');\r\n            preview.innerHTML += template;\r\n            Dom_1.$$(preview).show();\r\n        }\r\n    };\r\n    return Cell;\r\n}());\r\nexports.Cell = Cell;\r\n\n\n/***/ }),\n\n/***/ 629:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Template_1 = __webpack_require__(27);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Globalize = __webpack_require__(23);\r\nvar DefaultMatrixResultPreviewTemplate = /** @class */ (function (_super) {\r\n    __extends(DefaultMatrixResultPreviewTemplate, _super);\r\n    function DefaultMatrixResultPreviewTemplate(computedField, format) {\r\n        var _this = _super.call(this) || this;\r\n        _this.computedField = computedField;\r\n        _this.format = format;\r\n        return _this;\r\n    }\r\n    DefaultMatrixResultPreviewTemplate.prototype.instantiateToString = function (object, instantiateOptions) {\r\n        var preview = \"<div class='coveo-result-frame'>\" +\r\n            \"<div class='coveo-result-row'>\" +\r\n            \"<div class='coveo-result-cell' style='width: 40px; padding-right:5px;vertical-align: middle'>\" +\r\n            \"<a class='CoveoIcon' data-small='true'></a>\" +\r\n            '</div>' +\r\n            \"<div class='coveo-result-cell' style='font-size:13px;vertical-align: middle'>\" +\r\n            \"<a class='CoveoResultLink'></a>\" +\r\n            '</div>' +\r\n            \"<div class='coveo-result-cell' style='width:80px; text-align:right; font-size:13px; padding-right: 5px;vertical-align: middle'>\" +\r\n            Globalize.format(parseInt(object.raw[this.computedField.slice(1)]), this.format) +\r\n            '</div>' +\r\n            '</div>' +\r\n            '</div>';\r\n        return preview;\r\n    };\r\n    DefaultMatrixResultPreviewTemplate.prototype.instantiateToElement = function (object, instantiateOptions) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            return Dom_1.$$('div', undefined, _this.instantiateToString(object)).el;\r\n        });\r\n    };\r\n    return DefaultMatrixResultPreviewTemplate;\r\n}(Template_1.Template));\r\nexports.DefaultMatrixResultPreviewTemplate = DefaultMatrixResultPreviewTemplate;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Matrix.min__5f3280c404a1ee75a113.js","import * as Globalize from 'globalize';\r\nimport 'styling/_Matrix';\r\nimport * as _ from 'underscore';\r\nimport { IBuildingQueryEventArgs, IDoneBuildingQueryEventArgs, IQuerySuccessEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { QueryStateModel } from '../../models/QueryStateModel';\r\nimport { IGroupByRequest } from '../../rest/GroupByRequest';\r\nimport { IQuery } from '../../rest/Query';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { IQueryResults } from '../../rest/QueryResults';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { QueryUtils } from '../../utils/QueryUtils';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { IInitializationParameters, Initialization } from '../Base/Initialization';\r\nimport { QueryBuilder } from '../Base/QueryBuilder';\r\nimport { TemplateComponentOptions } from '../Base/TemplateComponentOptions';\r\nimport { Template } from '../Templates/Template';\r\nimport { Cell } from './Cell';\r\nimport { DefaultMatrixResultPreviewTemplate } from './DefaultMatrixResultPreviewTemplate';\r\n\r\nexport interface IMatrixOptions {\r\n  title?: string;\r\n\r\n  rowField: IFieldOption;\r\n  sortCriteria?: string;\r\n  maximumNumberOfRows?: number;\r\n  enableRowTotals?: boolean;\r\n\r\n  columnField: IFieldOption;\r\n  columnFieldValues?: string[];\r\n  columnLabels?: string[];\r\n  columnHeader?: string;\r\n  maximumNumberOfValuesInGroupBy?: number;\r\n  enableColumnTotals?: boolean;\r\n\r\n  computedField: IFieldOption;\r\n  computedFieldOperation?: string;\r\n  computedFieldFormat?: string;\r\n  cellFontSize?: string;\r\n\r\n  enableHoverPreview?: boolean;\r\n  previewSortCriteria?: string;\r\n  previewSortField?: IFieldOption;\r\n  previewMaxWidth?: string;\r\n  previewMinWidth?: string;\r\n  previewDelay?: number;\r\n  previewTemplate?: Template;\r\n}\r\n\r\n/**\r\n * The Matrix component uses the values of two fields (row and column) to display the results of the specified computed\r\n * field in a table.\r\n *\r\n * The user specifies the values to use for the columns. An {@link IGroupByRequest} operation performed at the same time\r\n * as the main query retrieves the values to use for the rows.\r\n *\r\n * In a way that is similar to the {@link Facet} component, selecting a Matrix cell allows the end user to drill down\r\n * inside the results by restricting the row field and the column field to match the values of the selected cell.\r\n *\r\n * @notSupportedIn salesforcefree\r\n */\r\nexport class Matrix extends Component {\r\n  static ID = 'Matrix';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Matrix: Matrix\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The possible options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IMatrixOptions = {\r\n    /**\r\n     * Specifies the text to display at the top of the Matrix.\r\n     */\r\n    title: ComponentOptions.buildStringOption(),\r\n\r\n    /**\r\n     * Specifies the field to use for the rows.\r\n     *\r\n     * Specifying a value for this options is required for this component to work.\r\n     */\r\n    rowField: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the field to use for the columns.\r\n     *\r\n     * Specifying a value for this options is required for this component to work.\r\n     */\r\n    columnField: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the criteria to use for sorting the rows.\r\n     *\r\n     * See {@link IGroupByRequest.sortCriteria} for the list of possible values.\r\n     *\r\n     * Default value is `computedfielddescending`.\r\n     */\r\n    sortCriteria: ComponentOptions.buildStringOption({ defaultValue: 'computedfielddescending' }),\r\n\r\n    /**\r\n     * Specifies the maximum number of rows to display in the Matrix.\r\n     *\r\n     * Default value is `10`. Minimum value is `0`.\r\n     */\r\n    maximumNumberOfRows: ComponentOptions.buildNumberOption({ defaultValue: 10, min: 0 }),\r\n\r\n    /**\r\n     * Specifies whether to display a **Total** column containing the sum of each row.\r\n     *\r\n     * Default value is `true`.\r\n     */\r\n    enableRowTotals: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n\r\n    /**\r\n     * Specifies the field values to use for each column.\r\n     *\r\n     * See also {@link Matrix.options.columnLabels}.\r\n     *\r\n     * Default value is `[]`, which means that the Matrix will not generate any column (except the **Total** column, if\r\n     * {@link Matrix.options.enableRowTotals} is `true`).\r\n     */\r\n    columnFieldValues: ComponentOptions.buildListOption<string>({ defaultValue: [] }),\r\n\r\n    /**\r\n     * Specifies the label values to use for each column.\r\n     *\r\n     * Default value is `[]`. The array set for this options should match the {@link Matrix.options.columnFieldValues}.\r\n     */\r\n    columnLabels: ComponentOptions.buildListOption<string>({ defaultValue: [] }),\r\n\r\n    /**\r\n     * Specifies the label for the first column on the left as a description of the {@link Matrix.options.columnField}.\r\n     *\r\n     * Default value is `undefined`.\r\n     */\r\n    columnHeader: ComponentOptions.buildStringOption(),\r\n\r\n    /**\r\n     * Specifies the maximum number of results to include in the {@link IGroupByRequest} for the columns.\r\n     *\r\n     * This value should always be greater than the {@link Matrix.options.maximumNumberOfRows}. If it is too small, some\r\n     * of the results will not be displayed in the Matrix.\r\n     *\r\n     * Default value is `100`. Minimum value is `0`.\r\n     */\r\n    maximumNumberOfValuesInGroupBy: ComponentOptions.buildNumberOption({ defaultValue: 100, min: 0 }),\r\n\r\n    /**\r\n     * Specifies whether to add a **Total** row containing the total of each column.\r\n     *\r\n     * Default value is `true`\r\n     */\r\n    enableColumnTotals: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n\r\n    /**\r\n     * Specifies the field whose computed values you want to display in the cells.\r\n     *\r\n     * Specifying a value for this options is required for this component to work.\r\n     */\r\n    computedField: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the type of aggregate operation to perform on the {@link Matrix.options.computedField}.\r\n     *\r\n     * The possible values are:\r\n     * - `sum` - Computes the sum of the computed field values.\r\n     * - `average` - Computes the average of the computed field values.\r\n     * - `minimum` - Finds the minimum value of the computed field values.\r\n     * - `maximum` - Finds the maximum value of the computed field values.\r\n     *\r\n     * Default value is `sum`.\r\n     */\r\n    computedFieldOperation: ComponentOptions.buildStringOption({ defaultValue: 'sum' }),\r\n\r\n    /**\r\n     * Specifies how to format the values resulting from a {@link Matrix.options.computedFieldOperation}.\r\n     *\r\n     * The Globalize library defines all available formats (see\r\n     * [Globalize](https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-)).\r\n     *\r\n     * The most commonly used formats are:\r\n     * - `c0` - Formats the value as a currency.\r\n     * - `n0` - Formats the value as an integer.\r\n     * - `n2` - Formats the value as a floating point with 2 decimal digits.\r\n     *\r\n     * Default value is `c0`.\r\n     */\r\n    computedFieldFormat: ComponentOptions.buildStringOption({ defaultValue: 'c0' }),\r\n\r\n    /**\r\n     * Specifies the font-size to use for displaying text inside the cells.\r\n     *\r\n     * This option is mainly useful to prevent a Matrix containing many columns from cropping some of its values.\r\n     *\r\n     * However, instead of using this option to solve this kind of issue, you could also remove some of the less\r\n     * important columns from your Matrix or modify the CSS of your page to allow the Matrix to occupy a larger space.\r\n     *\r\n     * Default value is `''`.\r\n     */\r\n    cellFontSize: ComponentOptions.buildStringOption({ defaultValue: '' }),\r\n\r\n    /**\r\n     * Specifies whether to show a preview popup of cell results when hovering over a cell.\r\n     *\r\n     * See also {@link Matrix.options.previewSortCriteria}, {@link Matrix.options.previewMaxWidth},\r\n     * {@link Matrix.options.previewMinWidth}, {@link Matrix.options.previewDelay} and\r\n     * {@link Matrix.options.previewTemplate}.\r\n     *\r\n     * Default value is `true`.\r\n     */\r\n    enableHoverPreview: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the criteria to use for sorting the results of\r\n     * the hover preview.\r\n     *\r\n     * The available sort criteria values are the same as those of the {@link IQuery}.\r\n     *\r\n     * The possible values are:\r\n     * - `relevancy`: Uses all configured ranking weights and any specified ranking expressions to sort the results.\r\n     * - `dateascending` / `datedescending`: Sorts the results using the `@date` field value, which is typically the\r\n     * last modification date of an item in the index.\r\n     * - `qre`: Sorts the results using only the weights applied by ranking expressions. Using `qre` is much like using\r\n     * `relevancy`, except that `qre` does not compute automatic weights, such as weights based on keyword proximity.\r\n     * - `nosort`: Does not sort the results. Using `nosort` returns the items in an essentially random order.\r\n     * - `fieldascending` / `fielddescending`: Sorts the results using the value of a custom field.\r\n     * - `fieldascending` / `fielddescending`: Sorts the results using the value of a custom field.\r\n     *\r\n     * See also {@link Matrix.options.previewSortField}.\r\n     *\r\n     * Default value is `FieldDescending`.\r\n     */\r\n    previewSortCriteria: ComponentOptions.buildStringOption({ defaultValue: 'FieldDescending' }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.previewSortCriteria} is `fieldascending` or `fielddescending`, specifies the field to\r\n     * use for sorting the results of the hover preview.\r\n     *\r\n     * Default value is the value of {@link Matrix.options.computedField}.\r\n     */\r\n    previewSortField: ComponentOptions.buildFieldOption(),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the maximum width (in pixels) of the preview\r\n     * popup.\r\n     *\r\n     * Default value is `500px`.\r\n     */\r\n    previewMaxWidth: ComponentOptions.buildStringOption({ defaultValue: '500px' }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the minimum width (in pixels) of the preview\r\n     * popup.\r\n     *\r\n     * Default value is `0`.\r\n     */\r\n    previewMinWidth: ComponentOptions.buildStringOption({ defaultValue: '0' }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the delay (in milliseconds) before sending the\r\n     * query to get the preview results.\r\n     *\r\n     * Default value is `500`.\r\n     */\r\n    previewDelay: ComponentOptions.buildNumberOption({ defaultValue: 500 }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the template ID or CSS selector of the template\r\n     * to use to render the results of the hover preview.\r\n     *\r\n     * You must use either `data-template-id` or `data-template-selector` in the markup to specify a value for this\r\n     * option.\r\n     *\r\n     * **Examples:**\r\n     *\r\n     * Specifying what template to use by referring to its template ID:\r\n     * ```html\r\n     * <div class='CoveoMatrix' data-template-id='TemplateId'></div>\r\n     * ```\r\n     *\r\n     * Specifying what template to use by referring to its CSS selector:\r\n     * ```html\r\n     * <div class='CoveoMatrix' data-template-selector='.templateSelector'></div>\r\n     * ```\r\n     */\r\n    previewTemplate: TemplateComponentOptions.buildTemplateOption()\r\n  };\r\n\r\n  /**\r\n   * Holds the data for the Matrix.\r\n   */\r\n  public data: Cell[][];\r\n  public groupByIndex = [];\r\n  public rowId = '';\r\n  public columnId = '';\r\n\r\n  /**\r\n   * The currently selected row value, or `undefined` if nothing is selected.\r\n   */\r\n  public selectedRowValue: string = undefined;\r\n\r\n  /**\r\n   * The currently selected column value, or `undefined` if nothing is selected.\r\n   */\r\n  public selectedColumnValue = undefined;\r\n\r\n  private numberOfRows = 0;\r\n  private numberOfColumns = 0;\r\n  private previewTimeout: number;\r\n\r\n  /**\r\n   * Creates a new Matrix. Also verifies whether options are valid and coherent. Binds query events.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Matrix component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IMatrixOptions, bindings?: IComponentBindings) {\r\n    super(element, Matrix.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, Matrix, options);\r\n\r\n    if (!this.options.previewTemplate) {\r\n      this.options.previewTemplate = new DefaultMatrixResultPreviewTemplate(\r\n        <string>this.options.computedField,\r\n        this.options.computedFieldFormat\r\n      );\r\n    }\r\n\r\n    if (!this.options.previewSortField) {\r\n      this.options.previewSortField = <string>this.options.computedField;\r\n    }\r\n\r\n    if (this.options.columnFieldValues.length != this.options.columnLabels.length) {\r\n      this.options.columnLabels = this.options.columnFieldValues;\r\n    }\r\n\r\n    this.buildMatrix();\r\n    if (this.options.rowField == null) {\r\n      this.logger.error(\"'rowField' option is required in the Matrix component\");\r\n    } else if (this.options.columnField == null) {\r\n      this.logger.error(\"'columnField' option is required in the Matrix component\");\r\n    } else if (this.options.computedField == null) {\r\n      this.logger.error(\"'computedField' option is required in the Matrix component\");\r\n    } else {\r\n      this.bindEvents();\r\n      this.initQueryState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects a cell by its row and column number. Does not execute a query.\r\n   * @param rowNumber The row number of the cell to select.\r\n   * @param columnNumber The column number of the cell to select.\r\n   */\r\n  public selectCell(rowNumber: number, columnNumber: number): void {\r\n    let rowValue, columnValue;\r\n    if (rowNumber !== 0 && rowNumber !== this.numberOfRows - 1) {\r\n      rowValue = this.getRowValue(rowNumber);\r\n    }\r\n\r\n    if (columnNumber !== 0 && columnNumber !== this.numberOfColumns - 1) {\r\n      columnValue = this.getColumnValue(columnNumber);\r\n    }\r\n\r\n    if (rowValue && this.isRowFacetPresent()) {\r\n      this.queryStateModel.set(this.rowId, [rowValue]);\r\n    } else {\r\n      this.selectedRowValue = rowValue;\r\n      this.queryStateModel.set(this.rowId, []);\r\n    }\r\n\r\n    if (columnValue && this.isColumnFacetPresent()) {\r\n      this.queryStateModel.set(this.columnId, [columnValue]);\r\n    } else {\r\n      this.selectedColumnValue = columnValue;\r\n      this.queryStateModel.set(this.columnId, []);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the currently selected column value.\r\n   */\r\n  public getSelectedColumnValue(): string {\r\n    return this.selectedColumnValue;\r\n  }\r\n\r\n  /**\r\n   * Returns the currently selected row value.\r\n   */\r\n  public getSelectedRowValue(): string {\r\n    return this.selectedRowValue;\r\n  }\r\n\r\n  /**\r\n   * Gets the HTMLElement associated to a cell.\r\n   * @param rowNumber The row number of the cell.\r\n   * @param columnNumber The column number of the cell.\r\n   * @returns {HTMLElement} The associated HTMLElement.\r\n   */\r\n  public getCellElement(rowNumber: number, columnNumber: number): HTMLElement {\r\n    return this.data[rowNumber][columnNumber].getHTML();\r\n  }\r\n\r\n  /**\r\n   * Gets the string associated to a cell.\r\n   * @param rowNumber The row number of the cell.\r\n   * @param columnNumber The column number of the cell.\r\n   * @returns {string} The associated string.\r\n   */\r\n  public getCellValue(rowNumber: number, columnNumber: number): string {\r\n    let cell = this.getCellElement(rowNumber, columnNumber);\r\n    return $$(cell).text();\r\n  }\r\n\r\n  public drawMatrix() {\r\n    let headerRow = $$('div', {\r\n      className: 'coveo-matrix-row matrix-header-row'\r\n    });\r\n    this.drawRow(headerRow.el, 0);\r\n    let numberOfRowsToDraw = this.options.enableColumnTotals ? this.numberOfRows - 1 : this.numberOfRows;\r\n    for (let i = 1; i < numberOfRowsToDraw; i++) {\r\n      let row = $$('div', {\r\n        className: 'coveo-matrix-row'\r\n      }).el;\r\n      this.drawRow(row, i);\r\n    }\r\n\r\n    if (this.options.enableColumnTotals) {\r\n      let totalRow = $$('div', {\r\n        className: 'coveo-matrix-row matrix-total-row'\r\n      }).el;\r\n\r\n      this.drawRow(totalRow, this.numberOfRows - 1);\r\n    }\r\n\r\n    if (this.options.cellFontSize !== '') {\r\n      let cells = $$(this.element).findAll('.coveo-matrix-cell');\r\n      _.each(cells, (c: HTMLElement) => {\r\n        c.style.fontSize = this.options.cellFontSize;\r\n      });\r\n    }\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.doneBuildingQuery, (args: IDoneBuildingQueryEventArgs) => this.handleDoneBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.deferredQuerySuccess, (args: IQuerySuccessEventArgs) => this.handleDeferredQuerySuccess(args));\r\n  }\r\n\r\n  private initQueryState() {\r\n    this.rowId = QueryStateModel.getFacetId(<string>this.options.rowField);\r\n    this.columnId = QueryStateModel.getFacetId(<string>this.options.columnField);\r\n\r\n    this.queryStateModel.registerNewAttribute(this.rowId, []);\r\n    this.queryStateModel.registerNewAttribute(this.columnId, []);\r\n  }\r\n\r\n  private buildMatrix() {\r\n    this.buildTitle();\r\n    this.buildBody();\r\n    this.data = new Array<Array<Cell>>();\r\n    this.addHeaderRow();\r\n  }\r\n\r\n  private buildTitle() {\r\n    let title = this.options.title ? this.options.title : '';\r\n    let titleHtml = $$(\r\n      'div',\r\n      {\r\n        className: 'coveo-matrix-title'\r\n      },\r\n      title\r\n    ).el;\r\n    this.element.appendChild(titleHtml);\r\n  }\r\n\r\n  private buildBody() {\r\n    let body = $$('div', {\r\n      className: 'coveo-matrix'\r\n    }).el;\r\n    this.element.appendChild(body);\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\r\n    if (!this.areFacetsPresent()) {\r\n      if (this.selectedRowValue && !this.isRowFacetPresent()) {\r\n        args.queryBuilder.advancedExpression.addFieldExpression(<string>this.options.rowField, '=', [this.selectedRowValue]);\r\n      }\r\n      if (this.selectedColumnValue && !this.isColumnFacetPresent()) {\r\n        args.queryBuilder.advancedExpression.addFieldExpression(<string>this.options.columnField, '=', [this.selectedColumnValue]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleDoneBuildingQuery(args: IDoneBuildingQueryEventArgs) {\r\n    this.groupByIndex = [];\r\n    this.addMainGroubByRequest(args.queryBuilder);\r\n    this.addColumnsGroupByRequests(args.queryBuilder);\r\n  }\r\n\r\n  private handleDeferredQuerySuccess(args: IQuerySuccessEventArgs) {\r\n    this.reset();\r\n    this.parseResults(args.results);\r\n    this.addTotals();\r\n    this.drawMatrix();\r\n    this.formatCells();\r\n    this.selectedRowValue = undefined;\r\n    this.selectedColumnValue = undefined;\r\n  }\r\n\r\n  private addMainGroubByRequest(queryBuilder: QueryBuilder) {\r\n    let groupBy: IGroupByRequest = {\r\n      field: <string>this.options.rowField,\r\n      sortCriteria: this.options.sortCriteria,\r\n      computedFields: this.getComputedFields(),\r\n      maximumNumberOfValues: this.options.maximumNumberOfRows\r\n    };\r\n\r\n    this.groupByIndex.push(queryBuilder.groupByRequests.length);\r\n    queryBuilder.groupByRequests.push(groupBy);\r\n  }\r\n\r\n  private addColumnsGroupByRequests(queryBuilder: QueryBuilder) {\r\n    for (let i = 0; i < this.options.columnFieldValues.length; i++) {\r\n      let groupBy = {\r\n        field: <string>this.options.rowField,\r\n        sortCriteria: this.options.sortCriteria,\r\n        computedFields: this.getComputedFields(),\r\n        queryOverride:\r\n          '(' + this.buildExpression(queryBuilder) + ')' + '(' + this.options.columnField + \"='\" + this.options.columnFieldValues[i] + \"')\",\r\n        maximumNumberOfValues: this.options.maximumNumberOfValuesInGroupBy\r\n      };\r\n\r\n      this.groupByIndex.push(queryBuilder.groupByRequests.length);\r\n      queryBuilder.groupByRequests.push(groupBy);\r\n    }\r\n  }\r\n\r\n  private buildExpression(queryBuilder: QueryBuilder) {\r\n    let expression = queryBuilder.expression.build();\r\n    let advancedExpression = queryBuilder.advancedExpression.build();\r\n    let constantExpression = queryBuilder.constantExpression.build();\r\n    let totalQuery = '';\r\n    if (expression) {\r\n      totalQuery += ' ' + expression;\r\n    }\r\n    if (advancedExpression) {\r\n      totalQuery += ' ' + advancedExpression;\r\n    }\r\n    if (constantExpression) {\r\n      totalQuery += ' ' + constantExpression;\r\n    }\r\n    return totalQuery;\r\n  }\r\n\r\n  private getComputedFields() {\r\n    let computedFields = [\r\n      {\r\n        field: <string>this.options.computedField,\r\n        operation: this.options.computedFieldOperation\r\n      }\r\n    ];\r\n    return computedFields;\r\n  }\r\n\r\n  private getCellResult(results, rowNumber: number, columnNumber: number) {\r\n    let rowValue = this.getRowValue(rowNumber);\r\n    let columnValue = this.getColumnValue(columnNumber);\r\n    let cellResult = 0;\r\n\r\n    for (let i = 0; i < results.values.length; i++) {\r\n      if (results.values[i].value === rowValue) {\r\n        cellResult = results.values[i].computedFieldResults[0];\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (this.isAColumnSelected() && !this.isColumnSelected(columnValue)) {\r\n      cellResult = 0;\r\n    }\r\n\r\n    return cellResult;\r\n  }\r\n\r\n  private addTotals() {\r\n    if (this.options.enableRowTotals) {\r\n      this.addRowTotals();\r\n    }\r\n    if (this.options.enableColumnTotals) {\r\n      this.addColumnTotals();\r\n    }\r\n  }\r\n\r\n  private addRowTotals() {\r\n    this.addColumn();\r\n    this.setValue('Total', 0, this.numberOfColumns - 1);\r\n    for (let i = 1; i < this.numberOfRows; i++) {\r\n      let rowTotal = this.computeRowTotal(i);\r\n      this.setValue(rowTotal, i, this.numberOfColumns - 1);\r\n    }\r\n\r\n    // Fix sort ordering when not all columns field values are present.\r\n    if (this.options.sortCriteria.toLowerCase() == 'computedfielddescending') {\r\n      this.data.sort((a: Cell[], b: Cell[]): number => {\r\n        return b[this.numberOfColumns - 1].getValue() - a[this.numberOfColumns - 1].getValue();\r\n      });\r\n    }\r\n\r\n    if (this.options.sortCriteria.toLowerCase() == 'computedfieldascending') {\r\n      this.data.sort((a: Cell[], b: Cell[]): number => {\r\n        return a[this.numberOfColumns - 1].getValue() - b[this.numberOfColumns - 1].getValue();\r\n      });\r\n    }\r\n  }\r\n\r\n  private addColumnTotals() {\r\n    this.addRow();\r\n    this.setValue('Total', this.numberOfRows - 1, 0);\r\n    for (let i = 1; i < this.numberOfColumns; i++) {\r\n      let columnTotal = this.computeColumnTotal(i);\r\n      this.setValue(columnTotal, this.numberOfRows - 1, i);\r\n    }\r\n  }\r\n\r\n  private computeRowTotal(rowNumber: number): number {\r\n    let total = 0;\r\n    for (let columnNumber = 1; columnNumber < this.numberOfColumns - 1; columnNumber++) {\r\n      total += parseInt(this.getCellValue(rowNumber, columnNumber));\r\n    }\r\n    return total;\r\n  }\r\n\r\n  private computeColumnTotal(columnNumber: number): number {\r\n    let total = 0;\r\n    for (let rowNumber = 1; rowNumber < this.numberOfRows - 1; rowNumber++) {\r\n      total += parseInt(this.getCellValue(rowNumber, columnNumber));\r\n    }\r\n    return total;\r\n  }\r\n\r\n  private formatCells() {\r\n    for (let i = 1; i < this.numberOfRows; i++) {\r\n      for (let j = 1; j < this.numberOfColumns; j++) {\r\n        let cellValue = this.getCellValue(i, j);\r\n        cellValue = Globalize.format(parseInt(cellValue), this.options.computedFieldFormat);\r\n        this.setValue(cellValue, i, j);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addHeaderRow() {\r\n    this.addRow();\r\n    this.addColumn();\r\n    this.setValue(this.options.columnHeader, 0, 0);\r\n    for (let i = 0; i < this.options.columnLabels.length; i++) {\r\n      this.addColumn();\r\n      this.setValue(this.options.columnLabels[i], 0, i + 1);\r\n    }\r\n  }\r\n\r\n  private addRow() {\r\n    this.data.push(new Array<Cell>());\r\n\r\n    for (let i = 0; i < this.numberOfColumns; i++) {\r\n      this.addCellToRow(this.numberOfRows, i);\r\n    }\r\n    this.numberOfRows++;\r\n  }\r\n\r\n  private addColumn() {\r\n    for (let i = 0; i < this.numberOfRows; i++) {\r\n      this.addCellToRow(i, this.numberOfColumns);\r\n    }\r\n\r\n    this.numberOfColumns++;\r\n  }\r\n\r\n  private addCellToRow(rowNumber: number, columnNumber: number) {\r\n    let column = $$('div', {\r\n      className: 'coveo-matrix-cell'\r\n    });\r\n\r\n    if (columnNumber == 0) {\r\n      column.addClass('matrix-first-column');\r\n    }\r\n    this.data[rowNumber].push(new Cell(0, column.el));\r\n  }\r\n\r\n  private setValue(value: any, rowNumber: number, columnNumber: number) {\r\n    let cell = this.getCellElement(rowNumber, columnNumber);\r\n    if (!Utils.isNullOrUndefined(value)) {\r\n      $$(cell).text(value.toString());\r\n    }\r\n\r\n    if (this.isCellSelected(this.getRowValue(rowNumber), this.getColumnValue(columnNumber))) {\r\n      $$(cell).addClass('coveo-matrix-selected');\r\n    }\r\n\r\n    if (this.isAColumnSelected() && !this.isColumnSelected(this.getColumnValue(columnNumber))) {\r\n      if (columnNumber != 0 && rowNumber != 0) {\r\n        $$(cell).addClass('coveo-matrix-unimportant');\r\n      }\r\n    }\r\n\r\n    this.data[rowNumber][columnNumber].setValue(value);\r\n  }\r\n\r\n  private handleClick(rowNumber: number, columnNumber: number) {\r\n    this.selectCell(rowNumber, columnNumber);\r\n    this.queryController.executeQuery();\r\n  }\r\n\r\n  private getRowValue(rowNumber: number): string {\r\n    return this.data[rowNumber][0].getValue();\r\n  }\r\n\r\n  private getColumnValue(columnNumber: number): string {\r\n    return this.options.columnFieldValues[columnNumber - 1];\r\n  }\r\n\r\n  private isAColumnSelected(): boolean {\r\n    let selectedColumnValues = this.queryStateModel.get(this.columnId) || [];\r\n    return selectedColumnValues.length !== 0 || this.selectedColumnValue != undefined;\r\n  }\r\n\r\n  private isColumnSelected(columnValue: string): boolean {\r\n    if (this.isAColumnSelected() && columnValue) {\r\n      let selectedColumnValues = this.queryStateModel.attributes[this.columnId] || [];\r\n      for (let i = 0; i < selectedColumnValues.length; i++) {\r\n        if (selectedColumnValues[i].toLowerCase() === columnValue.toLowerCase()) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return this.selectedColumnValue == columnValue;\r\n  }\r\n\r\n  private isARowSelected(): boolean {\r\n    let selectedRowValues = this.queryStateModel.get(this.rowId) || [];\r\n    return selectedRowValues.length !== 0 || this.selectedRowValue !== undefined;\r\n  }\r\n\r\n  private isRowSelected(rowValue: string): boolean {\r\n    if (this.isARowSelected() && rowValue) {\r\n      let selectedRowValues = this.queryStateModel.get(this.rowId) || [];\r\n      for (let i = 0; i < selectedRowValues.length; i++) {\r\n        if (selectedRowValues[i].toLowerCase() === rowValue.toLowerCase()) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return this.selectedRowValue == rowValue;\r\n  }\r\n\r\n  private isCellSelected(rowValue: string, columnValue: string): boolean {\r\n    if (this.isAColumnSelected() && this.isARowSelected()) {\r\n      return this.isRowSelected(rowValue) && this.isColumnSelected(columnValue);\r\n    } else if (this.isAColumnSelected()) {\r\n      return this.isColumnSelected(columnValue);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private areFacetsPresent() {\r\n    return this.isRowFacetPresent() && this.isColumnFacetPresent();\r\n  }\r\n\r\n  private isRowFacetPresent() {\r\n    let facet = this.componentStateModel.get(this.rowId);\r\n    return facet && !facet[0].disabled;\r\n  }\r\n\r\n  private isColumnFacetPresent() {\r\n    let facet = this.componentStateModel.get(this.columnId);\r\n    return facet && !facet[0].disabled;\r\n  }\r\n\r\n  private reset() {\r\n    $$(this.element).empty();\r\n    this.numberOfRows = 0;\r\n    this.numberOfColumns = 0;\r\n    this.data = new Array<Array<Cell>>();\r\n\r\n    this.buildMatrix();\r\n  }\r\n\r\n  private parseResults(results: IQueryResults) {\r\n    if (results) {\r\n      let mainResults = results.groupByResults[this.groupByIndex[0]];\r\n      if (mainResults) {\r\n        for (let i = 0; i < mainResults.values.length; i++) {\r\n          let value = mainResults.values[i].value;\r\n          this.addRow();\r\n          this.setValue(value, i + 1, 0);\r\n        }\r\n      }\r\n\r\n      for (let i = 1; i < this.numberOfRows; i++) {\r\n        for (let j = 1; j < this.numberOfColumns; j++) {\r\n          let columnResult = results.groupByResults[this.groupByIndex[j]];\r\n          let cellValue = this.getCellResult(columnResult, i, j);\r\n          this.setValue(cellValue, i, j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private drawRow(row: HTMLElement, rowNumber: number) {\r\n    let body = $$(this.element).find('.coveo-matrix');\r\n    for (let i = 0; i < this.numberOfColumns; i++) {\r\n      let cell = this.data[rowNumber][i].getHTML();\r\n      $$(cell).on('click', () => {\r\n        let handler = num => {\r\n          this.handleClick(rowNumber, num);\r\n        };\r\n        handler(i);\r\n      });\r\n\r\n      if (this.options.enableHoverPreview) {\r\n        ((num: number) => {\r\n          $$(cell).on('mouseover', () => this.handleHoverIn(rowNumber, num));\r\n          $$(cell).on('mouseout', () => this.handleHoverOut(rowNumber, num));\r\n        })(i);\r\n      }\r\n      row.appendChild(cell);\r\n    }\r\n    body.appendChild(row);\r\n  }\r\n\r\n  private handleHoverIn(rowNumber: number, columnNumber: number) {\r\n    if (this.isHoverWorkingOnRow(rowNumber) && this.isHoverWorkingOnColumn(columnNumber)) {\r\n      this.previewTimeout = window.setTimeout(() => {\r\n        this.displayResultsPreview(rowNumber, columnNumber);\r\n      }, this.options.previewDelay);\r\n    }\r\n  }\r\n\r\n  private handleHoverOut(rowNumber: number, columnNumber: number) {\r\n    clearTimeout(this.previewTimeout);\r\n    let cell = this.data[rowNumber][columnNumber];\r\n    cell.removePreview();\r\n  }\r\n\r\n  private displayResultsPreview(rowNumber: number, columnNumber: number) {\r\n    let query = this.createPreviewQuery(rowNumber, columnNumber);\r\n    let cell = this.data[rowNumber][columnNumber];\r\n    cell.addPreview(this.options.previewMinWidth, this.options.previewMaxWidth);\r\n\r\n    let endpoint = this.queryController.getEndpoint();\r\n    endpoint.search(query).then((data: IQueryResults) => {\r\n      // During the time it take for the query to return, the matrix can change size depending\r\n      // on if another query was performed : Need to check for undefined before accessing the data\r\n      // we're trying to render;\r\n      if (!this.isDataAvailable(rowNumber, columnNumber)) {\r\n        return;\r\n      }\r\n      let cell = this.data[rowNumber][columnNumber];\r\n      let instantiatedResults = _.map(data.results, (r: IQueryResult) => {\r\n        return this.instantiateTemplate(r);\r\n      });\r\n      let html = '';\r\n      _.each(instantiatedResults, result => {\r\n        result.then((builtResultElement: HTMLElement) => {\r\n          html += builtResultElement.outerHTML;\r\n        });\r\n      });\r\n      Promise.all(instantiatedResults).then(() => {\r\n        cell.updatePreview(html);\r\n      });\r\n    });\r\n  }\r\n\r\n  private instantiateTemplate(result: IQueryResult): Promise<HTMLElement> {\r\n    return this.options.previewTemplate\r\n      .instantiateToElement(result, {\r\n        checkCondition: false,\r\n        responsiveComponents: this.searchInterface.responsiveComponents\r\n      })\r\n      .then((content: HTMLElement) => {\r\n        let initParameters: IInitializationParameters = {\r\n          options: this.options,\r\n          bindings: this.getBindings(),\r\n          result: result\r\n        };\r\n\r\n        return Initialization.automaticallyCreateComponentsInside(content, initParameters).initResult.then(() => {\r\n          return content;\r\n        });\r\n      });\r\n  }\r\n\r\n  private createPreviewQuery(rowNumber: number, columnNumber: number): IQuery {\r\n    let rowFieldExpression = '(' + QueryUtils.buildFieldExpression(<string>this.options.rowField, '=', [this.getRowValue(rowNumber)]) + ')';\r\n    let columnFieldExpression =\r\n      '(' + QueryUtils.buildFieldExpression(<string>this.options.columnField, '=', [this.getColumnValue(columnNumber)]) + ')';\r\n    let query = this.queryController.getLastQuery();\r\n    query.aq = rowFieldExpression;\r\n    query.aq += columnFieldExpression;\r\n    query.sortCriteria = this.options.previewSortCriteria;\r\n    query.sortField = <string>this.options.previewSortField;\r\n    let fieldSliced = this.options.computedField.slice(1);\r\n    let fieldExists = _.find(query.fieldsToInclude, (field: string) => {\r\n      return field == fieldSliced;\r\n    });\r\n    if (!fieldExists && query.fieldsToInclude) {\r\n      query.fieldsToInclude.push(fieldSliced);\r\n    }\r\n    return query;\r\n  }\r\n\r\n  private isHoverWorkingOnRow(rowNumber: number) {\r\n    if (this.options.enableColumnTotals) {\r\n      return rowNumber !== 0 && rowNumber !== this.numberOfRows - 1;\r\n    }\r\n    return rowNumber !== 0;\r\n  }\r\n\r\n  private isHoverWorkingOnColumn(columnNumber: number) {\r\n    if (this.options.enableRowTotals) {\r\n      return columnNumber !== 0 && columnNumber !== this.numberOfColumns - 1;\r\n    }\r\n    return columnNumber !== 0;\r\n  }\r\n\r\n  private isDataAvailable(row: number, column: number) {\r\n    return this.data[row] !== undefined && this.data[row][column] !== undefined;\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(Matrix);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Matrix/Matrix.ts","import { $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\n\r\n/**\r\n * Represent a single cell of data in the {@link Matrix} component.\r\n */\r\nexport class Cell {\r\n  private value: any;\r\n  private element: HTMLElement;\r\n  private previewActive = false;\r\n\r\n  constructor(value: any = 0, el?: HTMLElement) {\r\n    this.element = el;\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Return the value of the cell.\r\n   * @returns {any}\r\n   */\r\n  public getValue(): any {\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Return the `HTMLElement` for the cell.\r\n   * @returns {HTMLElement}\r\n   */\r\n  public getHTML(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Set the value if the cell.\r\n   * @param value\r\n   */\r\n  public setValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Set the `HTMLElement` for the cell.\r\n   * @param html\r\n   */\r\n  public setHTML(html: HTMLElement) {\r\n    this.element = html;\r\n  }\r\n\r\n  /**\r\n   * Show the preview of the cell.\r\n   * @param minWidth css minWidth property : eg 100px\r\n   * @param maxWidth css maxWidth property : eg 100px\r\n   */\r\n  public addPreview(minWidth: string, maxWidth: string) {\r\n    this.previewActive = true;\r\n    let previewContainer = $$('div', {\r\n      className: 'matrix-results-preview-container'\r\n    });\r\n    previewContainer.el.style.minWidth = minWidth;\r\n    previewContainer.el.style.maxWidth = maxWidth;\r\n    previewContainer.on('click', (e: MouseEvent) => {\r\n      e.stopPropagation();\r\n    });\r\n    this.element.appendChild(previewContainer.el);\r\n    let container = $$(this.element).findAll('.matrix-results-preview-container');\r\n    _.each(container, (c: HTMLElement) => {\r\n      $$(c).hide();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the preview of the cell\r\n   */\r\n  public removePreview() {\r\n    this.previewActive = false;\r\n    let container = $$(this.element).find('.matrix-results-preview-container');\r\n    if (container) {\r\n      $$(container).detach();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the preview with a new template\r\n   * @param template\r\n   */\r\n  public updatePreview(template: string) {\r\n    if (this.previewActive) {\r\n      let preview = $$(this.element).find('.matrix-results-preview-container');\r\n      preview.innerHTML += template;\r\n      $$(preview).show();\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Matrix/Cell.ts","import { Template, IInstantiateTemplateOptions } from '../Templates/Template';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as Globalize from 'globalize';\r\n\r\nexport class DefaultMatrixResultPreviewTemplate extends Template {\r\n  constructor(private computedField: string, private format: string) {\r\n    super();\r\n  }\r\n\r\n  instantiateToString(object?: IQueryResult, instantiateOptions?: IInstantiateTemplateOptions): string {\r\n    var preview =\r\n      \"<div class='coveo-result-frame'>\" +\r\n      \"<div class='coveo-result-row'>\" +\r\n      \"<div class='coveo-result-cell' style='width: 40px; padding-right:5px;vertical-align: middle'>\" +\r\n      \"<a class='CoveoIcon' data-small='true'></a>\" +\r\n      '</div>' +\r\n      \"<div class='coveo-result-cell' style='font-size:13px;vertical-align: middle'>\" +\r\n      \"<a class='CoveoResultLink'></a>\" +\r\n      '</div>' +\r\n      \"<div class='coveo-result-cell' style='width:80px; text-align:right; font-size:13px; padding-right: 5px;vertical-align: middle'>\" +\r\n      Globalize.format(parseInt(object.raw[this.computedField.slice(1)]), this.format) +\r\n      '</div>' +\r\n      '</div>' +\r\n      '</div>';\r\n    return preview;\r\n  }\r\n\r\n  instantiateToElement(object?: IQueryResult, instantiateOptions?: IInstantiateTemplateOptions): Promise<HTMLElement> {\r\n    return new Promise((resolve, reject) => {\r\n      return $$('div', undefined, this.instantiateToString(object)).el;\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Matrix/DefaultMatrixResultPreviewTemplate.ts"],"sourceRoot":""}