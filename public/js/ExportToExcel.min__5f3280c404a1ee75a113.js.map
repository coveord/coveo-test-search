{"version":3,"sources":["ExportToExcel.min__5f3280c404a1ee75a113.js","./src/ui/ExportToExcel/ExportToExcel.ts"],"names":["webpackJsonpCoveo__temporary","250","module","exports","__webpack_require__","fn","createAnchor","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","defineProperty","value","document","createElement","element","options","bindings","_window","ExportToExcel","ID","window","ComponentOptions","initComponentOptions","bind","onRootElement","SettingsEvents","settingsPopulateMenu","args","menuData","push","text","l","className","tooltip","onOpen","download","svgIcon","SVGIcons","icons","dropdownExport","svgIconClassName","_this","query","buildExcelQuery","logger","debug","endpoint","queryController","getEndpoint","usageAnalytics","logCustomEvent","analyticsActionCauseList","exportToExcel","fetchBinary","then","content","downloadExcelFile","getLastQuery","_","omit","fieldsToInclude","format","numberOfResults","blob","Blob","type","url","URL","createObjectURL","a","href","buildExcelFileName","click","revokeObjectURL","utc","moment","root","get","SearchInterface","getBindings","doExport","exportGlobally","buildNumberOption","defaultValue","min","buildFieldsOption","Component","Initialization","registerAutoCreateComponent","607"],"mappings":"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","file":"ExportToExcel.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([70],{\n\n/***/ 250:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar SettingsEvents_1 = __webpack_require__(53);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar _ = __webpack_require__(0);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\n__webpack_require__(607);\r\nvar SVGIcons_1 = __webpack_require__(12);\r\nvar SearchInterface_1 = __webpack_require__(19);\r\nvar RegisteredNamedMethods_1 = __webpack_require__(30);\r\nvar moment = __webpack_require__(140);\r\nvar createAnchor = function () { return document.createElement('a'); };\r\nfunction setCreateAnchor(fn) {\r\n    createAnchor = fn;\r\n}\r\nexports.setCreateAnchor = setCreateAnchor;\r\n/**\r\n * The ExportToExcel component renders an item in the {@link Settings} menu to allow the end user to export the current\r\n * search results to the Microsoft Excel format (.xlsx).\r\n *\r\n * @availablesince [November 2015 Release (v1.0.139)](https://docs.coveo.com/en/289/#november-2015-release-v10139)\r\n */\r\nvar ExportToExcel = /** @class */ (function (_super) {\r\n    __extends(ExportToExcel, _super);\r\n    /**\r\n     * Creates a new ExportToExcel component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the ExportToExcel component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     * @param _window The global Window object (used to download the Excel link).\r\n     */\r\n    function ExportToExcel(element, options, bindings, _window) {\r\n        var _this = _super.call(this, element, ExportToExcel.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.bindings = bindings;\r\n        _this._window = _window;\r\n        _this._window = _this._window || window;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ExportToExcel, options);\r\n        _this.bind.onRootElement(SettingsEvents_1.SettingsEvents.settingsPopulateMenu, function (args) {\r\n            args.menuData.push({\r\n                text: Strings_1.l('ExportToExcel'),\r\n                className: 'coveo-export-to-excel',\r\n                tooltip: Strings_1.l('ExportToExcelDescription'),\r\n                onOpen: function () { return _this.download(); },\r\n                svgIcon: SVGIcons_1.SVGIcons.icons.dropdownExport,\r\n                svgIconClassName: 'coveo-export-to-excel-svg'\r\n            });\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Downloads the Excel representation of the current query.\r\n     *\r\n     * Also logs an `exportToExcel` event in the usage analytics.\r\n     */\r\n    ExportToExcel.prototype.download = function () {\r\n        var _this = this;\r\n        var query = this.buildExcelQuery();\r\n        this.logger.debug(\"Performing query following 'Export to Excel' click\");\r\n        var endpoint = this.queryController.getEndpoint();\r\n        this.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.exportToExcel, {}, this.element);\r\n        endpoint.fetchBinary(query).then(function (content) { return _this.downloadExcelFile(content); });\r\n    };\r\n    ExportToExcel.prototype.buildExcelQuery = function () {\r\n        var query = this.queryController.getLastQuery();\r\n        query = _.omit(query, ['numberOfResults', 'fieldsToInclude']);\r\n        if (this.options.fieldsToInclude) {\r\n            query.fieldsToInclude = this.options.fieldsToInclude;\r\n        }\r\n        return __assign({}, query, { format: 'xlsx', numberOfResults: this.options.numberOfResults });\r\n    };\r\n    ExportToExcel.prototype.downloadExcelFile = function (content) {\r\n        var blob = new Blob([content], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n        var url = URL.createObjectURL(blob);\r\n        var a = createAnchor();\r\n        a.href = url;\r\n        a.download = this.buildExcelFileName();\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n    };\r\n    ExportToExcel.prototype.buildExcelFileName = function () {\r\n        var utc = moment().utc();\r\n        var year = utc.format('YYYY');\r\n        var month = utc.format('MM');\r\n        var day = utc.format('DD');\r\n        var hour = utc.format('HH');\r\n        var minute = utc.format('mm');\r\n        var second = utc.format('ss');\r\n        return \"query--\" + year + \"-\" + month + \"-\" + day + \"--\" + hour + \"-\" + minute + \"-\" + second + \".xlsx\";\r\n    };\r\n    ExportToExcel.create = function (element, options, root) {\r\n        return new ExportToExcel(element, options, RegisteredNamedMethods_1.get(root, SearchInterface_1.SearchInterface).getBindings());\r\n    };\r\n    ExportToExcel.ID = 'ExportToExcel';\r\n    ExportToExcel.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            ExportToExcel: ExportToExcel\r\n        });\r\n    };\r\n    /**\r\n     * The options for the ExportToExcel\r\n     * @componentOptions\r\n     */\r\n    ExportToExcel.options = {\r\n        /**\r\n         * Specifies the number of results to include in the resulting Excel file.\r\n         *\r\n         * Generating and downloading the Excel file should take a reasonably short amount of time when using the default\r\n         * value. However, this amount of time will increase exponentially as you set the value higher.\r\n         *\r\n         * Consequently, you should avoid setting this value above the default index limit of 1000 search results.\r\n         *\r\n         * Default value is `100`. Minimum value is `1`.\r\n         *\r\n         * @availablesince [February 2016 Release (v1.0.318)](https://docs.coveo.com/en/309/#february-2016-release-v10318)\r\n         */\r\n        numberOfResults: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 100, min: 1 }),\r\n        /**\r\n         * Specifies the fields to include in the CSV output.\r\n         *\r\n         * Note that this does not affect top level properties such as the title, clickUri, printableUri and sysUri, for example.\r\n         *\r\n         * Default value is `undefined`, meaning all fields will be exported.\r\n         */\r\n        fieldsToInclude: ComponentOptions_1.ComponentOptions.buildFieldsOption()\r\n    };\r\n    return ExportToExcel;\r\n}(Component_1.Component));\r\nexports.ExportToExcel = ExportToExcel;\r\nInitialization_1.Initialization.registerAutoCreateComponent(ExportToExcel);\r\n\n\n/***/ }),\n\n/***/ 607:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// ExportToExcel.min__5f3280c404a1ee75a113.js","import { Component } from '../Base/Component';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { SettingsEvents } from '../../events/SettingsEvents';\r\nimport { ISettingsPopulateMenuArgs } from '../Settings/Settings';\r\nimport { IAnalyticsNoMeta, analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { l } from '../../strings/Strings';\r\nimport * as _ from 'underscore';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport 'styling/_ExportToExcel';\r\nimport { SVGIcons } from '../../utils/SVGIcons';\r\nimport { SearchInterface } from '../SearchInterface/SearchInterface';\r\nimport { get } from '../Base/RegisteredNamedMethods';\r\nimport * as moment from 'moment';\r\nimport { IQuery } from '../../rest/Query';\r\n\r\nlet createAnchor = () => document.createElement('a');\r\n\r\nexport function setCreateAnchor(fn: () => HTMLAnchorElement) {\r\n  createAnchor = fn;\r\n}\r\n\r\nexport interface IExportToExcelOptions {\r\n  numberOfResults?: number;\r\n  fieldsToInclude?: IFieldOption[];\r\n}\r\n\r\n/**\r\n * The ExportToExcel component renders an item in the {@link Settings} menu to allow the end user to export the current\r\n * search results to the Microsoft Excel format (.xlsx).\r\n *\r\n * @availablesince [November 2015 Release (v1.0.139)](https://docs.coveo.com/en/289/#november-2015-release-v10139)\r\n */\r\nexport class ExportToExcel extends Component {\r\n  static ID = 'ExportToExcel';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      ExportToExcel: ExportToExcel\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the ExportToExcel\r\n   * @componentOptions\r\n   */\r\n  static options: IExportToExcelOptions = {\r\n    /**\r\n     * Specifies the number of results to include in the resulting Excel file.\r\n     *\r\n     * Generating and downloading the Excel file should take a reasonably short amount of time when using the default\r\n     * value. However, this amount of time will increase exponentially as you set the value higher.\r\n     *\r\n     * Consequently, you should avoid setting this value above the default index limit of 1000 search results.\r\n     *\r\n     * Default value is `100`. Minimum value is `1`.\r\n     *\r\n     * @availablesince [February 2016 Release (v1.0.318)](https://docs.coveo.com/en/309/#february-2016-release-v10318)\r\n     */\r\n    numberOfResults: ComponentOptions.buildNumberOption({ defaultValue: 100, min: 1 }),\r\n    /**\r\n     * Specifies the fields to include in the CSV output.\r\n     *\r\n     * Note that this does not affect top level properties such as the title, clickUri, printableUri and sysUri, for example.\r\n     *\r\n     * Default value is `undefined`, meaning all fields will be exported.\r\n     */\r\n    fieldsToInclude: ComponentOptions.buildFieldsOption()\r\n  };\r\n\r\n  /**\r\n   * Creates a new ExportToExcel component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the ExportToExcel component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   * @param _window The global Window object (used to download the Excel link).\r\n   */\r\n  constructor(\r\n    public element: HTMLElement,\r\n    public options: IExportToExcelOptions,\r\n    public bindings?: IComponentBindings,\r\n    public _window?: Window\r\n  ) {\r\n    super(element, ExportToExcel.ID, bindings);\r\n    this._window = this._window || window;\r\n    this.options = ComponentOptions.initComponentOptions(element, ExportToExcel, options);\r\n    this.bind.onRootElement(SettingsEvents.settingsPopulateMenu, (args: ISettingsPopulateMenuArgs) => {\r\n      args.menuData.push({\r\n        text: l('ExportToExcel'),\r\n        className: 'coveo-export-to-excel',\r\n        tooltip: l('ExportToExcelDescription'),\r\n        onOpen: () => this.download(),\r\n        svgIcon: SVGIcons.icons.dropdownExport,\r\n        svgIconClassName: 'coveo-export-to-excel-svg'\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Downloads the Excel representation of the current query.\r\n   *\r\n   * Also logs an `exportToExcel` event in the usage analytics.\r\n   */\r\n  public download() {\r\n    const query = this.buildExcelQuery();\r\n    this.logger.debug(\"Performing query following 'Export to Excel' click\");\r\n\r\n    const endpoint = this.queryController.getEndpoint();\r\n    this.usageAnalytics.logCustomEvent<IAnalyticsNoMeta>(analyticsActionCauseList.exportToExcel, {}, this.element);\r\n\r\n    endpoint.fetchBinary(query).then(content => this.downloadExcelFile(content));\r\n  }\r\n\r\n  private buildExcelQuery(): IQuery {\r\n    let query = this.queryController.getLastQuery();\r\n    query = _.omit(query, ['numberOfResults', 'fieldsToInclude']);\r\n\r\n    if (this.options.fieldsToInclude) {\r\n      query.fieldsToInclude = <string[]>this.options.fieldsToInclude;\r\n    }\r\n\r\n    return {\r\n      ...query,\r\n      format: 'xlsx',\r\n      numberOfResults: this.options.numberOfResults\r\n    };\r\n  }\r\n\r\n  private downloadExcelFile(content: ArrayBuffer) {\r\n    const blob = new Blob([content], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = createAnchor();\r\n    a.href = url;\r\n    a.download = this.buildExcelFileName();\r\n    a.click();\r\n\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  private buildExcelFileName() {\r\n    const utc = moment().utc();\r\n    const year = utc.format('YYYY');\r\n    const month = utc.format('MM');\r\n    const day = utc.format('DD');\r\n    const hour = utc.format('HH');\r\n    const minute = utc.format('mm');\r\n    const second = utc.format('ss');\r\n\r\n    return `query--${year}-${month}-${day}--${hour}-${minute}-${second}.xlsx`;\r\n  }\r\n\r\n  static create(element: HTMLElement, options?: IExportToExcelOptions, root?: HTMLElement): ExportToExcel {\r\n    return new ExportToExcel(element, options, (<SearchInterface>get(root, SearchInterface)).getBindings());\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(ExportToExcel);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ExportToExcel/ExportToExcel.ts"],"sourceRoot":""}