{"version":3,"sources":["FieldSuggestions.min__5f3280c404a1ee75a113.js","./src/ui/FieldSuggestions/FieldSuggestions.ts","./src/ui/Misc/SuggestionForOmnibox.ts"],"names":["webpackJsonpCoveo__temporary","251","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","FieldSuggestions","ID","_","extend","ComponentOptions","initComponentOptions","Assert","check","Utils","isCoveoField","field","onSelect","onRowSelection","suggestionStructure","rowTemplate","toRender","rowElement","$$","className","el","innerHTML","outerHTML","headerTitle","row","header","template","headerElement","iconElement","captionElement","text","append","title","suggestionForOmnibox","SuggestionForOmnibox","args","call","onRowTab","bind","onRootElement","OmniboxEvents","populateOmnibox","handlePopulateOmnibox","_this","selectSuggestion","suggestion","currentlyDisplayedSuggestions","isNaN","trigger","currentlySuggested","findWhere","pos","exists","valueToSearch","completeQueryExpression","word","promise","Promise","resolve","queryController","getEndpoint","listFieldValues","buildListFieldValueRequest","then","results","buildOmniboxElement","map","findAll","selectable","i","zIndex","omniboxZIndex","undefined","catch","rows","push","deferred","closeOmnibox","queryStateModel","set","QueryStateModel","attributesEnum","q","usageAnalytics","logSearchEvent","analyticsActionCauseList","omniboxField","executeQuery","clear","logCustomEvent","ignoreAccents","sortCriteria","maximumNumberOfValues","numberOfSuggestions","patternType","pattern","queryOverride","doExport","exportGlobally","buildFieldOption","required","buildQueryExpressionOption","defaultValue","buildNumberOption","min","buildLocalizedStringOption","buildCustomOption","Component","Initialization","registerAutoCreateComponent","515","structure","onTabPress","length","buildElementHeader","appendChild","buildRowElements","each","ret","result","rawValue","data","DomUtils","highlightElement","on","516"],"mappings":"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","file":"FieldSuggestions.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([44],{\n\n/***/ 251:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(516);\r\nvar _ = __webpack_require__(0);\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar SuggestionForOmnibox_1 = __webpack_require__(515);\r\n/**\r\n * The `FieldSuggestions` component provides query suggestions based on a particular facet field. For example, you could\r\n * use this component to provide auto-complete suggestions while the end user is typing the title of an item.\r\n *\r\n * The query suggestions provided by this component appear in the [`Omnibox`]{@link Omnibox} component.\r\n *\r\n * **Note:** Consider [providing Coveo ML query suggestions](https://docs.coveo.com/en/340/#providing-coveo-machine-learning-query-suggestions)\r\n * rather than field suggestions, as the former yields better performance and relevance.\r\n */\r\nvar FieldSuggestions = /** @class */ (function (_super) {\r\n    __extends(FieldSuggestions, _super);\r\n    /**\r\n     * Creates a new `FieldSuggestions` component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the `FieldSuggestions` component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function FieldSuggestions(element, options, bindings) {\r\n        var _this = _super.call(this, element, FieldSuggestions.ID, bindings) || this;\r\n        _this.options = options;\r\n        if (_this.options && 'omniboxSuggestionOptions' in _this.options) {\r\n            _this.options = _.extend(_this.options, _this.options['omniboxSuggestionOptions']);\r\n        }\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, FieldSuggestions, options);\r\n        Assert_1.Assert.check(Utils_1.Utils.isCoveoField(_this.options.field), _this.options.field + ' is not a valid field');\r\n        _this.options.onSelect = _this.options.onSelect || _this.onRowSelection;\r\n        var rowTemplate = function (toRender) {\r\n            var rowElement = Dom_1.$$('div', {\r\n                className: 'magic-box-suggestion coveo-omnibox-selectable coveo-top-field-suggestion-row'\r\n            });\r\n            if (toRender['data']) {\r\n                rowElement.el.innerHTML = toRender['data'];\r\n            }\r\n            return rowElement.el.outerHTML;\r\n        };\r\n        var suggestionStructure;\r\n        if (_this.options.headerTitle == null) {\r\n            suggestionStructure = {\r\n                row: rowTemplate\r\n            };\r\n        }\r\n        else {\r\n            var headerTemplate = function () {\r\n                var headerElement = Dom_1.$$('div', {\r\n                    className: 'coveo-top-field-suggestion-header'\r\n                });\r\n                var iconElement = Dom_1.$$('span', {\r\n                    className: 'coveo-icon-top-field'\r\n                });\r\n                var captionElement = Dom_1.$$('span', {\r\n                    className: 'coveo-caption'\r\n                });\r\n                if (_this.options.headerTitle) {\r\n                    captionElement.text(_this.options.headerTitle);\r\n                }\r\n                headerElement.append(iconElement.el);\r\n                headerElement.append(captionElement.el);\r\n                return headerElement.el.outerHTML;\r\n            };\r\n            suggestionStructure = {\r\n                header: { template: headerTemplate, title: _this.options.headerTitle },\r\n                row: rowTemplate\r\n            };\r\n        }\r\n        _this.suggestionForOmnibox = new SuggestionForOmnibox_1.SuggestionForOmnibox(suggestionStructure, function (value, args) {\r\n            _this.options.onSelect.call(_this, value, args);\r\n        }, function (value, args) {\r\n            _this.onRowTab(value, args);\r\n        });\r\n        _this.bind.onRootElement(OmniboxEvents_1.OmniboxEvents.populateOmnibox, function (args) { return _this.handlePopulateOmnibox(args); });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Selects a currently displayed query suggestion. This implies that at least one suggestion must have been returned\r\n     * at least once.\r\n     * @param suggestion Either a number (0-based index position of the query suggestion to select) or a string that\r\n     * matches the suggestion to select.\r\n     */\r\n    FieldSuggestions.prototype.selectSuggestion = function (suggestion) {\r\n        if (this.currentlyDisplayedSuggestions) {\r\n            if (isNaN(suggestion)) {\r\n                if (this.currentlyDisplayedSuggestions[suggestion]) {\r\n                    Dom_1.$$(this.currentlyDisplayedSuggestions[suggestion].element).trigger('click');\r\n                }\r\n            }\r\n            else {\r\n                var currentlySuggested = _.findWhere(this.currentlyDisplayedSuggestions, {\r\n                    pos: suggestion\r\n                });\r\n                if (currentlySuggested) {\r\n                    Dom_1.$$(currentlySuggested.element).trigger('click');\r\n                }\r\n            }\r\n        }\r\n    };\r\n    FieldSuggestions.prototype.handlePopulateOmnibox = function (args) {\r\n        var _this = this;\r\n        Assert_1.Assert.exists(args);\r\n        var valueToSearch = args.completeQueryExpression.word;\r\n        var promise = new Promise(function (resolve) {\r\n            _this.queryController\r\n                .getEndpoint()\r\n                .listFieldValues(_this.buildListFieldValueRequest(valueToSearch))\r\n                .then(function (results) {\r\n                var element = _this.suggestionForOmnibox.buildOmniboxElement(results, args);\r\n                _this.currentlyDisplayedSuggestions = {};\r\n                if (element) {\r\n                    _.map(Dom_1.$$(element).findAll('.coveo-omnibox-selectable'), function (selectable, i) {\r\n                        _this.currentlyDisplayedSuggestions[Dom_1.$$(selectable).text()] = {\r\n                            element: selectable,\r\n                            pos: i\r\n                        };\r\n                    });\r\n                    resolve({\r\n                        element: element,\r\n                        zIndex: _this.options.omniboxZIndex\r\n                    });\r\n                }\r\n                else {\r\n                    resolve({\r\n                        element: undefined\r\n                    });\r\n                }\r\n            })\r\n                .catch(function () {\r\n                resolve({\r\n                    element: undefined\r\n                });\r\n            });\r\n        });\r\n        args.rows.push({\r\n            deferred: promise\r\n        });\r\n    };\r\n    FieldSuggestions.prototype.onRowSelection = function (value, args) {\r\n        args.closeOmnibox();\r\n        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, value);\r\n        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxField, {});\r\n        this.queryController.executeQuery();\r\n    };\r\n    FieldSuggestions.prototype.onRowTab = function (value, args) {\r\n        args.clear();\r\n        args.closeOmnibox();\r\n        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, \"\" + value);\r\n        this.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxField, {}, this.element);\r\n    };\r\n    FieldSuggestions.prototype.buildListFieldValueRequest = function (valueToSearch) {\r\n        return {\r\n            field: this.options.field,\r\n            ignoreAccents: true,\r\n            sortCriteria: 'occurrences',\r\n            maximumNumberOfValues: this.options.numberOfSuggestions,\r\n            patternType: 'Wildcards',\r\n            pattern: '*' + valueToSearch + '*',\r\n            queryOverride: this.options.queryOverride\r\n        };\r\n    };\r\n    FieldSuggestions.ID = 'FieldSuggestions';\r\n    FieldSuggestions.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            FieldSuggestions: FieldSuggestions\r\n        });\r\n    };\r\n    /**\r\n     * @componentOptions\r\n     */\r\n    FieldSuggestions.options = {\r\n        /**\r\n         * Specifies the facet field from which to provide suggestions.\r\n         *\r\n         * Specifying a value for this option is required for the `FieldSuggestions` component to work.\r\n         */\r\n        field: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),\r\n        /**\r\n         * Specifies a query override to apply when retrieving suggestions. You can use any valid query expression (see\r\n         * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).\r\n         *\r\n         * Default value is the empty string, and the component applies no query override.\r\n         */\r\n        queryOverride: ComponentOptions_1.ComponentOptions.buildQueryExpressionOption({ defaultValue: '' }),\r\n        /**\r\n         * Specifies the z-index position at which the suggestions render themselves in the [`Omnibox`]{@link Omnibox}.\r\n         *\r\n         * When there are multiple suggestion providers, components with higher `omniboxZIndex` values render themselves\r\n         * first.\r\n         *\r\n         * Default value is `51`. Minimum value is `0`.\r\n         */\r\n        omniboxZIndex: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 51, min: 0 }),\r\n        /**\r\n         * Specifies the title of the result suggestions group in the [`Omnibox`]{@link Omnibox} component.\r\n         * If not provided, the component will simply not output any title.\r\n         *\r\n         * Default value is `null`.\r\n         */\r\n        headerTitle: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption(),\r\n        /**\r\n         * Specifies the number of suggestions to render in the [`Omnibox`]{@link Omnibox}.\r\n         *\r\n         * Default value is `5`. Minimum value is `1`.\r\n         */\r\n        numberOfSuggestions: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 }),\r\n        /**\r\n         * Specifies the event handler function to execute when the end user selects a suggested value in the\r\n         * [`Omnibox`]{@link Omnibox}. By default, the query box text is replaced by what the end user selected and a new\r\n         * query is executed. You can, however, replace this default behavior by providing a callback function to execute\r\n         * when the value is selected.\r\n         *\r\n         * **Note:**\r\n         * > You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\r\n         * > [`init`]{@link init} call of your search interface (see\r\n         * > [Passing Component Options in the init Call](https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call)),\r\n         * > or before the `init` call, using the `options` top-level function (see\r\n         * > [Passing Component Options Before the init Call](https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call)).\r\n         *\r\n         * **Example:**\r\n         *\r\n         * ```javascript\r\n         *\r\n         * var myOnSelectFunction = function(selectedValue, populateOmniboxEventArgs) {\r\n         *\r\n         *   // Close the suggestion list when the user clicks a suggestion.\r\n         *   populateOmniboxEventArgs.closeOmnibox();\r\n         *\r\n         *   // Search for matching title results in the default endpoint.\r\n         *   Coveo.SearchEndpoint.endpoints[\"default\"].search({\r\n         *     q: \"@title==\" + selectedValue\r\n         *   }).done(function(results) {\r\n         *\r\n         *     // If more than one result is found, select a result that matches the selected title.\r\n         *     var foundResult = Coveo._.find(results.results, function(result) {\r\n         *       return selectedValue == result.raw.title;\r\n         *     });\r\n         *\r\n         *     // Open the found result in the current window, or log an error.\r\n         *     if (foundResult) {\r\n         *       window.location = foundResult.clickUri;\r\n         *     }\r\n         *     else {\r\n         *       new Coveo.Logger.warn(\"Selected suggested result '\" + selectedValue + \"' not found.\");\r\n         *     }\r\n         *   });\r\n         * };\r\n         *\r\n         * // You can set the option in the 'init' call:\r\n         * Coveo.init(document.querySelector(\"#search\"), {\r\n         *    FieldSuggestions : {\r\n         *      onSelect : myOnSelectFunction\r\n         *    }\r\n         * });\r\n         *\r\n         * // Or before the 'init' call, using the 'options' top-level function:\r\n         * // Coveo.options(document.querySelector(\"#search\"), {\r\n         * //   FieldSuggestions : {\r\n         * //     onSelect : myOnSelectFunction\r\n         * //   }\r\n         * // });\r\n         * ```\r\n         */\r\n        onSelect: ComponentOptions_1.ComponentOptions.buildCustomOption(function () {\r\n            return null;\r\n        })\r\n    };\r\n    return FieldSuggestions;\r\n}(Component_1.Component));\r\nexports.FieldSuggestions = FieldSuggestions;\r\nInitialization_1.Initialization.registerAutoCreateComponent(FieldSuggestions);\r\n\n\n/***/ }),\n\n/***/ 515:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar DomUtils_1 = __webpack_require__(91);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar _ = __webpack_require__(0);\r\nvar SuggestionForOmnibox = /** @class */ (function () {\r\n    function SuggestionForOmnibox(structure, onSelect, onTabPress) {\r\n        this.structure = structure;\r\n        this.onSelect = onSelect;\r\n        this.onTabPress = onTabPress;\r\n    }\r\n    SuggestionForOmnibox.prototype.buildOmniboxElement = function (results, args) {\r\n        var element;\r\n        if (results.length != 0) {\r\n            element = Dom_1.$$('div').el;\r\n            if (this.structure.header) {\r\n                var header = this.buildElementHeader();\r\n                element.appendChild(header);\r\n            }\r\n            var rows = this.buildRowElements(results, args);\r\n            _.each(rows, function (row) {\r\n                element.appendChild(row);\r\n            });\r\n        }\r\n        return element;\r\n    };\r\n    SuggestionForOmnibox.prototype.buildElementHeader = function () {\r\n        return Dom_1.$$('div', undefined, this.structure.header.template({\r\n            headerTitle: this.structure.header.title\r\n        })).el;\r\n    };\r\n    SuggestionForOmnibox.prototype.buildRowElements = function (results, args) {\r\n        var _this = this;\r\n        var ret = [];\r\n        _.each(results, function (result) {\r\n            var row = Dom_1.$$('div', undefined, _this.structure.row({\r\n                rawValue: result.value,\r\n                data: DomUtils_1.DomUtils.highlightElement(result.value, args.completeQueryExpression.word)\r\n            })).el;\r\n            Dom_1.$$(row).on('click', function () {\r\n                _this.onSelect.call(_this, result.value, args);\r\n            });\r\n            Dom_1.$$(row).on('keyboardSelect', function () {\r\n                _this.onSelect.call(_this, result.value, args);\r\n            });\r\n            Dom_1.$$(row).on('tabSelect', function () {\r\n                _this.onTabPress.call(_this, result.value, args);\r\n            });\r\n            ret.push(row);\r\n        });\r\n        return ret;\r\n    };\r\n    return SuggestionForOmnibox;\r\n}());\r\nexports.SuggestionForOmnibox = SuggestionForOmnibox;\r\n\n\n/***/ }),\n\n/***/ 516:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// FieldSuggestions.min__5f3280c404a1ee75a113.js","import 'styling/_FieldSuggestions';\r\nimport * as _ from 'underscore';\r\nimport { IPopulateOmniboxEventArgs, OmniboxEvents } from '../../events/OmniboxEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { QueryStateModel } from '../../models/QueryStateModel';\r\nimport { IIndexFieldValue } from '../../rest/FieldValue';\r\nimport { IStringMap } from '../../rest/GenericParam';\r\nimport { IListFieldValuesRequest } from '../../rest/ListFieldValuesRequest';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { analyticsActionCauseList, IAnalyticsNoMeta } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption, IQueryExpression } from '../Base/IComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport {\r\n  ISuggestionForOmniboxOptions,\r\n  ISuggestionForOmniboxOptionsOnSelect,\r\n  ISuggestionForOmniboxTemplate,\r\n  SuggestionForOmnibox\r\n} from '../Misc/SuggestionForOmnibox';\r\n\r\nexport interface IFieldSuggestionsOptions extends ISuggestionForOmniboxOptions {\r\n  field?: IFieldOption;\r\n  queryOverride?: IQueryExpression;\r\n}\r\n\r\n/**\r\n * The `FieldSuggestions` component provides query suggestions based on a particular facet field. For example, you could\r\n * use this component to provide auto-complete suggestions while the end user is typing the title of an item.\r\n *\r\n * The query suggestions provided by this component appear in the [`Omnibox`]{@link Omnibox} component.\r\n *\r\n * **Note:** Consider [providing Coveo ML query suggestions](https://docs.coveo.com/en/340/#providing-coveo-machine-learning-query-suggestions)\r\n * rather than field suggestions, as the former yields better performance and relevance.\r\n */\r\nexport class FieldSuggestions extends Component {\r\n  static ID = 'FieldSuggestions';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      FieldSuggestions: FieldSuggestions\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @componentOptions\r\n   */\r\n  static options: IFieldSuggestionsOptions = {\r\n    /**\r\n     * Specifies the facet field from which to provide suggestions.\r\n     *\r\n     * Specifying a value for this option is required for the `FieldSuggestions` component to work.\r\n     */\r\n    field: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies a query override to apply when retrieving suggestions. You can use any valid query expression (see\r\n     * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).\r\n     *\r\n     * Default value is the empty string, and the component applies no query override.\r\n     */\r\n    queryOverride: ComponentOptions.buildQueryExpressionOption({ defaultValue: '' }),\r\n\r\n    /**\r\n     * Specifies the z-index position at which the suggestions render themselves in the [`Omnibox`]{@link Omnibox}.\r\n     *\r\n     * When there are multiple suggestion providers, components with higher `omniboxZIndex` values render themselves\r\n     * first.\r\n     *\r\n     * Default value is `51`. Minimum value is `0`.\r\n     */\r\n    omniboxZIndex: ComponentOptions.buildNumberOption({ defaultValue: 51, min: 0 }),\r\n\r\n    /**\r\n     * Specifies the title of the result suggestions group in the [`Omnibox`]{@link Omnibox} component.\r\n     * If not provided, the component will simply not output any title.\r\n     *\r\n     * Default value is `null`.\r\n     */\r\n    headerTitle: ComponentOptions.buildLocalizedStringOption(),\r\n\r\n    /**\r\n     * Specifies the number of suggestions to render in the [`Omnibox`]{@link Omnibox}.\r\n     *\r\n     * Default value is `5`. Minimum value is `1`.\r\n     */\r\n    numberOfSuggestions: ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1 }),\r\n\r\n    /**\r\n     * Specifies the event handler function to execute when the end user selects a suggested value in the\r\n     * [`Omnibox`]{@link Omnibox}. By default, the query box text is replaced by what the end user selected and a new\r\n     * query is executed. You can, however, replace this default behavior by providing a callback function to execute\r\n     * when the value is selected.\r\n     *\r\n     * **Note:**\r\n     * > You cannot set this option directly in the component markup as an HTML attribute. You must either set it in the\r\n     * > [`init`]{@link init} call of your search interface (see\r\n     * > [Passing Component Options in the init Call](https://docs.coveo.com/en/346/#passing-component-options-in-the-init-call)),\r\n     * > or before the `init` call, using the `options` top-level function (see\r\n     * > [Passing Component Options Before the init Call](https://docs.coveo.com/en/346/#passing-component-options-before-the-init-call)).\r\n     *\r\n     * **Example:**\r\n     *\r\n     * ```javascript\r\n     *\r\n     * var myOnSelectFunction = function(selectedValue, populateOmniboxEventArgs) {\r\n     *\r\n     *   // Close the suggestion list when the user clicks a suggestion.\r\n     *   populateOmniboxEventArgs.closeOmnibox();\r\n     *\r\n     *   // Search for matching title results in the default endpoint.\r\n     *   Coveo.SearchEndpoint.endpoints[\"default\"].search({\r\n     *     q: \"@title==\" + selectedValue\r\n     *   }).done(function(results) {\r\n     *\r\n     *     // If more than one result is found, select a result that matches the selected title.\r\n     *     var foundResult = Coveo._.find(results.results, function(result) {\r\n     *       return selectedValue == result.raw.title;\r\n     *     });\r\n     *\r\n     *     // Open the found result in the current window, or log an error.\r\n     *     if (foundResult) {\r\n     *       window.location = foundResult.clickUri;\r\n     *     }\r\n     *     else {\r\n     *       new Coveo.Logger.warn(\"Selected suggested result '\" + selectedValue + \"' not found.\");\r\n     *     }\r\n     *   });\r\n     * };\r\n     *\r\n     * // You can set the option in the 'init' call:\r\n     * Coveo.init(document.querySelector(\"#search\"), {\r\n     *    FieldSuggestions : {\r\n     *      onSelect : myOnSelectFunction\r\n     *    }\r\n     * });\r\n     *\r\n     * // Or before the 'init' call, using the 'options' top-level function:\r\n     * // Coveo.options(document.querySelector(\"#search\"), {\r\n     * //   FieldSuggestions : {\r\n     * //     onSelect : myOnSelectFunction\r\n     * //   }\r\n     * // });\r\n     * ```\r\n     */\r\n    onSelect: ComponentOptions.buildCustomOption<ISuggestionForOmniboxOptionsOnSelect>(() => {\r\n      return null;\r\n    })\r\n  };\r\n\r\n  private suggestionForOmnibox: SuggestionForOmnibox;\r\n  private currentlyDisplayedSuggestions: { [suggestion: string]: { element: HTMLElement; pos: number } };\r\n\r\n  /**\r\n   * Creates a new `FieldSuggestions` component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the `FieldSuggestions` component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(element: HTMLElement, public options: IFieldSuggestionsOptions, bindings?: IComponentBindings) {\r\n    super(element, FieldSuggestions.ID, bindings);\r\n\r\n    if (this.options && 'omniboxSuggestionOptions' in this.options) {\r\n      this.options = _.extend(this.options, this.options['omniboxSuggestionOptions']);\r\n    }\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, FieldSuggestions, options);\r\n\r\n    Assert.check(Utils.isCoveoField(<string>this.options.field), this.options.field + ' is not a valid field');\r\n\r\n    this.options.onSelect = this.options.onSelect || this.onRowSelection;\r\n\r\n    let rowTemplate = (toRender: IStringMap<string>) => {\r\n      let rowElement = $$('div', {\r\n        className: 'magic-box-suggestion coveo-omnibox-selectable coveo-top-field-suggestion-row'\r\n      });\r\n      if (toRender['data']) {\r\n        rowElement.el.innerHTML = toRender['data'];\r\n      }\r\n      return rowElement.el.outerHTML;\r\n    };\r\n\r\n    let suggestionStructure: ISuggestionForOmniboxTemplate;\r\n    if (this.options.headerTitle == null) {\r\n      suggestionStructure = {\r\n        row: rowTemplate\r\n      };\r\n    } else {\r\n      let headerTemplate = () => {\r\n        let headerElement = $$('div', {\r\n          className: 'coveo-top-field-suggestion-header'\r\n        });\r\n\r\n        let iconElement = $$('span', {\r\n          className: 'coveo-icon-top-field'\r\n        });\r\n\r\n        let captionElement = $$('span', {\r\n          className: 'coveo-caption'\r\n        });\r\n\r\n        if (this.options.headerTitle) {\r\n          captionElement.text(this.options.headerTitle);\r\n        }\r\n\r\n        headerElement.append(iconElement.el);\r\n        headerElement.append(captionElement.el);\r\n\r\n        return headerElement.el.outerHTML;\r\n      };\r\n\r\n      suggestionStructure = {\r\n        header: { template: headerTemplate, title: this.options.headerTitle },\r\n        row: rowTemplate\r\n      };\r\n    }\r\n\r\n    this.suggestionForOmnibox = new SuggestionForOmnibox(\r\n      suggestionStructure,\r\n      (value: string, args: IPopulateOmniboxEventArgs) => {\r\n        this.options.onSelect.call(this, value, args);\r\n      },\r\n      (value: string, args: IPopulateOmniboxEventArgs) => {\r\n        this.onRowTab(value, args);\r\n      }\r\n    );\r\n    this.bind.onRootElement(OmniboxEvents.populateOmnibox, (args: IPopulateOmniboxEventArgs) => this.handlePopulateOmnibox(args));\r\n  }\r\n\r\n  public selectSuggestion(suggestion: number);\r\n  public selectSuggestion(suggestion: string);\r\n\r\n  /**\r\n   * Selects a currently displayed query suggestion. This implies that at least one suggestion must have been returned\r\n   * at least once.\r\n   * @param suggestion Either a number (0-based index position of the query suggestion to select) or a string that\r\n   * matches the suggestion to select.\r\n   */\r\n  public selectSuggestion(suggestion: any) {\r\n    if (this.currentlyDisplayedSuggestions) {\r\n      if (isNaN(suggestion)) {\r\n        if (this.currentlyDisplayedSuggestions[suggestion]) {\r\n          $$(this.currentlyDisplayedSuggestions[suggestion].element).trigger('click');\r\n        }\r\n      } else {\r\n        let currentlySuggested = <{ element: HTMLElement; pos: number }>_.findWhere(<any>this.currentlyDisplayedSuggestions, {\r\n          pos: suggestion\r\n        });\r\n        if (currentlySuggested) {\r\n          $$(currentlySuggested.element).trigger('click');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private handlePopulateOmnibox(args: IPopulateOmniboxEventArgs) {\r\n    Assert.exists(args);\r\n\r\n    let valueToSearch = args.completeQueryExpression.word;\r\n    let promise = new Promise(resolve => {\r\n      this.queryController\r\n        .getEndpoint()\r\n        .listFieldValues(this.buildListFieldValueRequest(valueToSearch))\r\n        .then((results: IIndexFieldValue[]) => {\r\n          let element = this.suggestionForOmnibox.buildOmniboxElement(results, args);\r\n          this.currentlyDisplayedSuggestions = {};\r\n          if (element) {\r\n            _.map($$(element).findAll('.coveo-omnibox-selectable'), (selectable, i?) => {\r\n              this.currentlyDisplayedSuggestions[$$(selectable).text()] = {\r\n                element: selectable,\r\n                pos: i\r\n              };\r\n            });\r\n            resolve({\r\n              element: element,\r\n              zIndex: this.options.omniboxZIndex\r\n            });\r\n          } else {\r\n            resolve({\r\n              element: undefined\r\n            });\r\n          }\r\n        })\r\n        .catch(() => {\r\n          resolve({\r\n            element: undefined\r\n          });\r\n        });\r\n    });\r\n    args.rows.push({\r\n      deferred: promise\r\n    });\r\n  }\r\n\r\n  private onRowSelection(value: string, args: IPopulateOmniboxEventArgs) {\r\n    args.closeOmnibox();\r\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, value);\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.omniboxField, {});\r\n    this.queryController.executeQuery();\r\n  }\r\n\r\n  private onRowTab(value: string, args: IPopulateOmniboxEventArgs) {\r\n    args.clear();\r\n    args.closeOmnibox();\r\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, `${value}`);\r\n    this.usageAnalytics.logCustomEvent(analyticsActionCauseList.omniboxField, {}, this.element);\r\n  }\r\n\r\n  private buildListFieldValueRequest(valueToSearch: string): IListFieldValuesRequest {\r\n    return {\r\n      field: <string>this.options.field,\r\n      ignoreAccents: true,\r\n      sortCriteria: 'occurrences',\r\n      maximumNumberOfValues: this.options.numberOfSuggestions,\r\n      patternType: 'Wildcards',\r\n      pattern: '*' + valueToSearch + '*',\r\n      queryOverride: this.options.queryOverride\r\n    };\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(FieldSuggestions);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldSuggestions/FieldSuggestions.ts","import { IPopulateOmniboxEventArgs } from '../../events/OmniboxEvents';\r\nimport { DomUtils } from '../../utils/DomUtils';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\n\r\nexport interface ISuggestionForOmniboxOptionsOnSelect {\r\n  (value: string, args: IPopulateOmniboxEventArgs): void;\r\n}\r\n\r\nexport interface ISuggestionForOmniboxOptions {\r\n  omniboxZIndex?: number;\r\n  headerTitle?: string;\r\n  onSelect?: ISuggestionForOmniboxOptionsOnSelect;\r\n  numberOfSuggestions?: number;\r\n}\r\n\r\nexport interface ISuggestionForOmniboxTemplate {\r\n  header?: {\r\n    template: (...args: any[]) => string;\r\n    title: string;\r\n  };\r\n  row: (...args: any[]) => string;\r\n}\r\n\r\nexport interface ISuggestionForOmniboxResult {\r\n  value: string;\r\n}\r\n\r\nexport class SuggestionForOmnibox {\r\n  constructor(\r\n    public structure: ISuggestionForOmniboxTemplate,\r\n    public onSelect: (value: string, args: IPopulateOmniboxEventArgs) => void,\r\n    public onTabPress: (value: string, args: IPopulateOmniboxEventArgs) => void\r\n  ) {}\r\n\r\n  public buildOmniboxElement(results: ISuggestionForOmniboxResult[], args: IPopulateOmniboxEventArgs): HTMLElement {\r\n    let element: HTMLElement;\r\n    if (results.length != 0) {\r\n      element = $$('div').el;\r\n      if (this.structure.header) {\r\n        let header = this.buildElementHeader();\r\n        element.appendChild(header);\r\n      }\r\n      let rows = this.buildRowElements(results, args);\r\n      _.each(rows, row => {\r\n        element.appendChild(row);\r\n      });\r\n    }\r\n    return element;\r\n  }\r\n\r\n  private buildElementHeader(): HTMLElement {\r\n    return $$(\r\n      'div',\r\n      undefined,\r\n      this.structure.header.template({\r\n        headerTitle: this.structure.header.title\r\n      })\r\n    ).el;\r\n  }\r\n\r\n  private buildRowElements(results: ISuggestionForOmniboxResult[], args: IPopulateOmniboxEventArgs): HTMLElement[] {\r\n    let ret = [];\r\n    _.each(results, result => {\r\n      let row = $$(\r\n        'div',\r\n        undefined,\r\n        this.structure.row({\r\n          rawValue: result.value,\r\n          data: DomUtils.highlightElement(result.value, args.completeQueryExpression.word)\r\n        })\r\n      ).el;\r\n      $$(row).on('click', () => {\r\n        this.onSelect.call(this, result.value, args);\r\n      });\r\n      $$(row).on('keyboardSelect', () => {\r\n        this.onSelect.call(this, result.value, args);\r\n      });\r\n      $$(row).on('tabSelect', () => {\r\n        this.onTabPress.call(this, result.value, args);\r\n      });\r\n      ret.push(row);\r\n    });\r\n    return ret;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Misc/SuggestionForOmnibox.ts"],"sourceRoot":""}