{"version":3,"sources":["RadioButton.min__5f3280c404a1ee75a113.js","./src/ui/FormWidgets/RadioButton.ts"],"names":["webpackJsonpCoveo__temporary","555","module","exports","94","__webpack_require__","Object","defineProperty","value","onChange","label","name","id","radioButton","this","buildContent","doExport","exportGlobally","RadioButton","reset","currentlySelected","isSelected","getRadio","checked","select","triggerChange","build","element","getElement","getValue","$$","find","getLabel","radioOption","className","radioInput","type","labelInput","for","text","on","append","el"],"mappings":"AAAAA,8BAA8B,KAExBC,IACA,SAAUC,EAAQC,KAMlBC,GACA,SAAUF,EAAQC,EAASE,GAEjC,YAEAC,QAAOC,eAAeJ,EAAS,cAAgBK,OAAO,GCdtD,WAEA,OACA,YAKA,aAgBE,WACSC,EACAC,EACAC,EACCC,OAHD,KAAAH,MAAA,SAAgDI,UAG/C,KAAAD,MAAA,GAHD,KAAAH,WACA,KAAAC,QACA,KAAAC,OACC,KAAAC,KAERE,KAAKC,eAmFT,MAtGS,GAAAC,SAAP,WACE,EAAAC,gBACEC,YAAaA,KAuBV,YAAAC,MAAP,WACE,GAAMC,GAAoBN,KAAKO,YAC/BP,MAAKQ,WAAWC,SAAU,EACtBH,GACFN,KAAKL,SAASK,OAQX,YAAAU,OAAP,SAAcC,OAAA,KAAAA,OAAA,EACZ,IAAML,GAAoBN,KAAKO,YAC/BP,MAAKQ,WAAWC,SAAU,GACrBH,GAAqBK,GACxBX,KAAKL,SAASK,OAQX,YAAAY,MAAP,WACE,MAAOZ,MAAKa,SAOP,YAAAC,WAAP,WACE,MAAOd,MAAKa,SAGP,YAAAE,SAAP,WACE,MAAOf,MAAKJ,OAOP,YAAAW,WAAP,WACE,MAAOP,MAAKQ,WAAWC,SAOlB,YAAAD,SAAP,WACE,MAAyB,GAAAQ,GAAGhB,KAAKa,SAASI,KAAK,UAO1C,YAAAC,SAAP,WACE,MAAyB,GAAAF,GAAGhB,KAAKa,SAASI,KAAK,UAGzC,YAAAhB,aAAR,sBACQkB,EAAc,EAAAH,GAAG,OAASI,UAAW,gBACrCC,EAAa,EAAAL,GAAG,SAAWM,KAAM,QAASzB,KAAMG,KAAKH,KAAMC,GAAIE,KAAKF,KACpEyB,EAAa,EAAAP,GAAG,SAAWI,UAAW,0BAA2BI,IAAKxB,KAAKF,IACjFyB,GAAWE,KAAKzB,KAAKJ,OACrByB,EAAWK,GAAG,SAAU,WACtB,EAAK/B,SAAS,KAGhBwB,EAAYQ,OAAON,EAAWO,IAC9BT,EAAYQ,OAAOJ,EAAWK,IAC9B5B,KAAKa,QAAUM,EAAYS,IAE/B,IAzGa,GAAAxB","file":"RadioButton.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([53],{\n\n/***/ 555:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 94:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\n__webpack_require__(555);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\n/**\r\n * A radio button widget with standard styling.\r\n */\r\nvar RadioButton = /** @class */ (function () {\r\n    /**\r\n     * Creates a new `RadioButton`.\r\n     * @param onChange The function to call when the radio button value changes. This function takes the current\r\n     * `RadioButton` instance as an argument.\r\n     * @param label The label to display next to the radio button.\r\n     * @param name The value to set the `input` HTMLElement `name` attribute to.\r\n     */\r\n    function RadioButton(onChange, label, name, id) {\r\n        if (onChange === void 0) { onChange = function (radioButton) { }; }\r\n        if (id === void 0) { id = label; }\r\n        this.onChange = onChange;\r\n        this.label = label;\r\n        this.name = name;\r\n        this.id = id;\r\n        this.buildContent();\r\n    }\r\n    RadioButton.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            RadioButton: RadioButton\r\n        });\r\n    };\r\n    /**\r\n     * Resets the radio button.\r\n     */\r\n    RadioButton.prototype.reset = function () {\r\n        var currentlySelected = this.isSelected();\r\n        this.getRadio().checked = false;\r\n        if (currentlySelected) {\r\n            this.onChange(this);\r\n        }\r\n    };\r\n    /**\r\n     * Select the radio button\r\n     * @param triggerChange will trigger change event if specified and the radio button is not already selected\r\n     */\r\n    RadioButton.prototype.select = function (triggerChange) {\r\n        if (triggerChange === void 0) { triggerChange = true; }\r\n        var currentlySelected = this.isSelected();\r\n        this.getRadio().checked = true;\r\n        if (!currentlySelected && triggerChange) {\r\n            this.onChange(this);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the element on which the radio button is bound.\r\n     * @returns {HTMLElement} The radio button element.\r\n     */\r\n    RadioButton.prototype.build = function () {\r\n        return this.element;\r\n    };\r\n    /**\r\n     * Gets the element on which the radio button is bound.\r\n     * @returns {HTMLElement} The radio button element.\r\n     */\r\n    RadioButton.prototype.getElement = function () {\r\n        return this.element;\r\n    };\r\n    RadioButton.prototype.getValue = function () {\r\n        return this.label;\r\n    };\r\n    /**\r\n     * Indicates whether the radio button is selected.\r\n     * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\r\n     */\r\n    RadioButton.prototype.isSelected = function () {\r\n        return this.getRadio().checked;\r\n    };\r\n    /**\r\n     * Gets the `input` element (the radio button itself).\r\n     * @returns {HTMLInputElement} The `input` element.\r\n     */\r\n    RadioButton.prototype.getRadio = function () {\r\n        return Dom_1.$$(this.element).find('input');\r\n    };\r\n    /**\r\n     * Gets the radio button [`label`]{@link RadioButton.label} element.\r\n     * @returns {HTMLLabelElement} The `label` element.\r\n     */\r\n    RadioButton.prototype.getLabel = function () {\r\n        return Dom_1.$$(this.element).find('label');\r\n    };\r\n    RadioButton.prototype.buildContent = function () {\r\n        var _this = this;\r\n        var radioOption = Dom_1.$$('div', { className: 'coveo-radio' });\r\n        var radioInput = Dom_1.$$('input', { type: 'radio', name: this.name, id: this.id });\r\n        var labelInput = Dom_1.$$('label', { className: 'coveo-radio-input-label', for: this.id });\r\n        labelInput.text(this.label);\r\n        radioInput.on('change', function () {\r\n            _this.onChange(_this);\r\n        });\r\n        radioOption.append(radioInput.el);\r\n        radioOption.append(labelInput.el);\r\n        this.element = radioOption.el;\r\n    };\r\n    return RadioButton;\r\n}());\r\nexports.RadioButton = RadioButton;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// RadioButton.min__5f3280c404a1ee75a113.js","import { $$ } from '../../utils/Dom';\r\nimport { IFormWidgetWithLabel, IFormWidgetSelectable } from './FormWidgets';\r\nimport 'styling/vapor/_Radio';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\n/**\r\n * A radio button widget with standard styling.\r\n */\r\nexport class RadioButton implements IFormWidgetWithLabel, IFormWidgetSelectable {\r\n  protected element: HTMLElement;\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      RadioButton: RadioButton\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `RadioButton`.\r\n   * @param onChange The function to call when the radio button value changes. This function takes the current\r\n   * `RadioButton` instance as an argument.\r\n   * @param label The label to display next to the radio button.\r\n   * @param name The value to set the `input` HTMLElement `name` attribute to.\r\n   */\r\n  constructor(\r\n    public onChange: (radioButton: RadioButton) => void = (radioButton: RadioButton) => {},\r\n    public label: string,\r\n    public name: string,\r\n    private id: string = label\r\n  ) {\r\n    this.buildContent();\r\n  }\r\n\r\n  /**\r\n   * Resets the radio button.\r\n   */\r\n  public reset() {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = false;\r\n    if (currentlySelected) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select the radio button\r\n   * @param triggerChange will trigger change event if specified and the radio button is not already selected\r\n   */\r\n  public select(triggerChange = true) {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = true;\r\n    if (!currentlySelected && triggerChange) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public build(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public getElement(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  public getValue(): string {\r\n    return this.label;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the radio button is selected.\r\n   * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\r\n   */\r\n  public isSelected(): boolean {\r\n    return this.getRadio().checked;\r\n  }\r\n\r\n  /**\r\n   * Gets the `input` element (the radio button itself).\r\n   * @returns {HTMLInputElement} The `input` element.\r\n   */\r\n  public getRadio(): HTMLInputElement {\r\n    return <HTMLInputElement>$$(this.element).find('input');\r\n  }\r\n\r\n  /**\r\n   * Gets the radio button [`label`]{@link RadioButton.label} element.\r\n   * @returns {HTMLLabelElement} The `label` element.\r\n   */\r\n  public getLabel(): HTMLLabelElement {\r\n    return <HTMLLabelElement>$$(this.element).find('label');\r\n  }\r\n\r\n  private buildContent() {\r\n    const radioOption = $$('div', { className: 'coveo-radio' });\r\n    const radioInput = $$('input', { type: 'radio', name: this.name, id: this.id });\r\n    const labelInput = $$('label', { className: 'coveo-radio-input-label', for: this.id });\r\n    labelInput.text(this.label);\r\n    radioInput.on('change', () => {\r\n      this.onChange(this);\r\n    });\r\n\r\n    radioOption.append(radioInput.el);\r\n    radioOption.append(labelInput.el);\r\n    this.element = radioOption.el;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/RadioButton.ts"],"sourceRoot":""}