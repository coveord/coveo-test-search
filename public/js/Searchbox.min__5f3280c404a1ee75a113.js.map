{"version":3,"sources":["Searchbox.min__5f3280c404a1ee75a113.js","./src/magicbox/Grammars/Basic.ts","./src/ui/Querybox/Querybox.ts","./src/magicbox/Grammar.ts","./src/ui/Omnibox/Omnibox.ts","./src/ui/SearchButton/SearchButton.ts","./src/magicbox/Expression/ExpressionEndOfInput.ts","./src/magicbox/Expression/ExpressionConstant.ts","./src/magicbox/Grammars/Field.ts","./src/magicbox/SuggestionsManager.ts","./src/magicbox/MagicBox.ts","./src/magicbox/MagicBoxUtils.ts","./src/ui/Searchbox/Searchbox.ts","./src/magicbox/Expression/ExpressionRef.ts","./src/magicbox/Result/RefResult.ts","./src/magicbox/Expression/ExpressionOptions.ts","./src/magicbox/Result/OptionResult.ts","./src/magicbox/Expression/ExpressionRegExp.ts","./src/magicbox/Expression/ExpressionFunction.ts","./src/magicbox/Result/Result.ts","./src/magicbox/Expression/ExpressionList.ts","./src/magicbox/Grammars/NestedQuery.ts","./src/magicbox/Grammars/Date.ts","./src/magicbox/Grammars/QueryExtension.ts","./src/magicbox/Grammars/SubExpression.ts","./src/magicbox/InputManager.ts","./src/magicbox/QueryProcessor.ts","./src/magicbox/Grammars/Complete.ts","./src/magicbox/Grammars/Expressions.ts","./src/events/ResultPreviewsManagerEvents.ts","./src/ui/Querybox/QueryboxOptionsProcessing.ts","./src/ui/Querybox/QueryboxQueryParameters.ts","./src/magicbox/doMagicBoxExport.ts","./src/magicbox/Grammars/Grammars.ts","./src/magicbox/ResultPreviewsManager.ts","./src/magicbox/MagicBoxClear.ts","./src/ui/Omnibox/FieldAddon.ts","./src/ui/Omnibox/OldOmniboxAddon.ts","./src/ui/Omnibox/QueryExtensionAddon.ts","./src/ui/Omnibox/QuerySuggestAddon.ts","./src/utils/SearchBoxResize.ts"],"names":["webpackJsonpCoveo__temporary","128","module","exports","__webpack_require__","Object","defineProperty","value","notWordStart","notInWord","Basic","basicExpressions","grammars","DoubleQuoted","NotDoubleQuote","SingleQuoted","NotSingleQuote","Number","Word","input","end","expression","regex","RegExp","replace","groups","match","index","result","Result","isSuccess","length","EndOfInputResult","135","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","element","options","bindings","Querybox","ID","HTMLInputElement","logger","error","ComponentOptions","initComponentOptions","QueryboxOptionsProcessing","postProcess","$$","toggleClass","enableQuerySyntax","magicBox","createMagicBox","Grammar","Query","Term","Spaces","inline","find","setAttribute","placeholder","l","bind","onRootElement","QueryEvents","buildingQuery","args","handleBuildingQuery","StandaloneSearchInterfaceEvents","beforeRedirect","updateQueryState","onQueryState","MODEL_EVENTS","CHANGE_ONE","QUERY_STATE_ATTRIBUTES","Q","handleQueryStateChanged","enableSearchAsYouType","addClass","onchange","searchAsYouType","onsubmit","submit","onblur","onclear","triggerQueryOnClear","usageAnalytics","logSearchEvent","analyticsActionCauseList","searchboxClear","triggerNewQuery","_this","clearSuggestion","searchboxSubmit","setText","text","clear","getText","getResult","getDisplayedResult","getCursor","resultAtCursor","Assert","exists","queryBuilder","lastQuery","QueryboxQueryParameters","addParameters","clearTimeout","searchAsYouTypeTimeout","queryController","executeQuery","logInActionsHistory","queryStateModel","set","QueryStateModel","attributesEnum","q","window","setTimeout","logSearchAsYouType","searchboxAsYouType","searchAsYouTypeDelay","doExport","exportGlobally","buildBooleanOption","defaultValue","section","buildNumberOption","min","enableWildcards","enableQuestionMarks","depend","enableLowercaseOperators","enablePartialMatch","partialMatchKeywords","partialMatchThreshold","buildStringOption","Component","Initialization","registerAutoCreateComponent","176","start","expressions","ExpressionRef","addExpressions","_","each","basicExpression","id","addExpression","Error","buildExpression","getExpression","parse","grammar","isString","buildStringExpression","isArray","ExpressionOptions","map","v","i","isRegExp","ExpressionRegExp","isFunction","ExpressionFunction","matchs","stringMatch","spliter","ref","occurrence","ExpressionConstant","ExpressionList","str","re","cloneRegExp","source","group","exec","push","189","__assign","assign","t","s","n","arguments","call","Omnibox","lastSuggestions","movedOnce","skipAutoSuggest","originalValueForQuerySyntax","omniboxAnalytics","searchInterface","getOmniboxAnalytics","suggestionAddon","enableQuerySuggestAddon","QuerySuggestAddon","VoidQuerySuggestAddon","OldOmniboxAddon","newQuery","handleNewQuery","handleBeforeRedirect","querySuccess","handleQuerySuccess","isAutoSuggestion","duringQuery","handleDuringQuery","onComponentOptions","COMPONENT_OPTIONS_ATTRIBUTES","SEARCH_BOX","updateGrammar","OmniboxEvents","querySuggestGetFocus","handleQuerySuggestGetFocus","logSearchBoxSubmitEvent","blur","getInput","querySelector","createGrammar","Expressions","Complete","enableFieldAddon","FieldAddon","fieldAlias","listOfFields","concat","keys","enableQueryExtensionAddon","QueryExtensionAddon","Any","selectableSuggestionClass","selectedSuggestionClass","suggestionTimeout","omniboxTimeout","setupMagicBox","onmove","modifyEventTo","getOmniboxAnalyticsEventCause","onfocus","onSuggestions","suggestions","Utils","isEmptyString","partialQueries","undefined","onselect","suggestion","indexOf","compact","handleAutoSuggestionWithKeyboard","handleAutoSuggestionsWithMouse","cancelAllPendingEvents","buildCustomDataForPartialQueries","getQuery","sendAllPendingEvents","ontabpress","handleTabPress","getSuggestions","handleSuggestions","modifyCustomDataOnPending","modifyQueryContentOnPending","clearSearchAsYouType","pendingEvt","getPendingSearchEvent","PendingSearchAsYouTypeSearchEvent","k","modifyCustomData","queryContent","modifyQueryContent","updateOmniboxAnalytics","ranking","findWhere","suggestionRanking","querySuggestCharacterThreshold","suggestionsEventArgs","omnibox","triggerOmniboxSuggestions","isNullOrEmptyString","trigger","populateOmniboxSuggestions","isDescendant","root","data","clone","clean","preprocessResultForQueryArgs","notQuotedValues","findAll","fieldNames","alias","toLowerCase","triggerOmniboxPreprocessResultForQuery","query","toString","omniboxPreprocessResultForQuery","clearFiltersOnNewQuery","clearFiltersIfNewQuery","origin","firstQuery","validOrigins","type","getLastQuery","BreadcrumbEvents","clearBreadcrumb","handleTabPressForSuggestions","handleTabPressForOldOmniboxAddon","logCustomEvent","domSuggestions","filter","dom","selected","findAllElementsWithClass","selectable","elements","className","reduce","total","analyticsEvent","shouldExecuteQuery","cancel","wordCompletion","getWordCompletion","currentOmniboxSuggestion","getFirstSuggestion","textSuggestion","promise","then","pendingEvent","beforeResolve","evt","modifyEventCause","forceExecuteQuery","suggestionShouldTriggerQuery","allowQueriesWithoutKeywords","isNonEmptyString","executableConfidence","StandaloneSearchInterface","omniboxFromLink","postProcessing","enableSimpleFieldAddon","buildFieldsOption","buildLocalizedStringOption","numberOfSuggestions","191","SearchButton","AccessibleButton","withElement","withOwner","withLabel","withSelectAction","handleClick","build","trim","svgMagnifierContainer","SVGIcons","icons","search","el","SVGDom","addClassToSVGInContainer","svgLoadingAnimationContainer","loading","appendChild","click","debug","updateQueryStateModelWithSearchboxQuery","searchbox","214","ExpressionEndOfInput","215","success","216","Field","FieldQuery","FieldQueryOperation","FieldQueryValue","FieldQueryNumeric","FieldSimpleQuery","FieldName","FieldOperator","FieldOperatorNumeric","FieldValue","FieldValueNumeric","FieldValueString","FieldValueList","FieldValueStringList","FieldValueSeparator","FieldValueNotQuoted","NumberRange","include","Date","217","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","apply","__generator","body","verb","op","f","TypeError","y","label","ops","pop","trys","g","sent","throw","return","Symbol","iterator","Direction","magicBoxContainer","inputManager","suggestionListboxID","QueryUtils","createGuid","suggestionListboxClassName","resolveRoot","defaults","suggestionClass","selectedClass","timeout","on","handleMouseOver","handleMouseOut","suggestionsProcessor","QueryProcessor","resultPreviewsManager","ResultPreviewsManager","suggestionsListbox","buildSuggestionsContainer","append","addAccessibilityProperties","appendEmptySuggestionOption","get","currentSuggestions","enumerable","configurable","findClass","hasPreviews","classList","contains","target","parents","hasClass","processMouseSelection","targetParents","relatedTarget","isValid","relatedTargetParents","removeSelectedStatus","querySuggestLoseFocus","moveDown","_a","move","Down","moveUp","Up","moveLeft","Left","moveRight","Right","selectAndReturnKeyboardFocusedElement","keyboardFocusedElement","clearKeyboardFocusedElement","receiveSuggestions","results","status","_b","processQueries","ProcessingStatus","Overriden","updateSuggestions","clearSuggestions","empty","activeDescendant","hasSuggestions","expanded","displaySearchResultPreviewsForSuggestion","sort","a","forEach","modifyDomFromExistingSuggestion","createDomFromSuggestion","querySuggestRendered","htmlElementIsSuggestion","returnMoved","processKeyboardSelection","addSelectedStatus","updateSelectedSuggestion","focusedSuggestion","processKeyboardPreviewSelection","preview","role","ariaLabel","selectSuggestion","html","innerHTML","separator","suggestionLabel","onSelect","querySuggestSelection","found","direction","firstPreview","focusedPreviewElement","moveWithinPreview","previewElements","moveWithinSuggestion","currentlySelected","selectables","currentIndex","selectQuerySuggest","removeAttribute","newFocusedPreview","getElementInDirection","previewsOwner","HTMLElement","getElementsByClassName","elem","item","updateAreaSelectedIfDefined","removeClass","getAttribute","addAccessibilityPropertiesForMagicBox","addAccessibilityPropertiesForInput","omniboxSelectables","SuggestionsManager","218","MagicBoxInstance","callback","requestAnimationFrame","isUndefined","displayedResult","inputContainer","document","createElement","InputManager","firstSuggestionWithText","addSuggestions","existingValue","getValue","setResult","suggestionsContainer","suggestionsManager","magicBoxClear","MagicBoxClear","setupHandler","toggleTabindexAndAriaHidden","setCursor","resultAt","onkeydown","key","shouldMoveInSuggestions","KEYBOARD","ENTER","ESCAPE","onchangecursor","onkeyup","UP_ARROW","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","selectedSuggestion","focusOnSuggestion","addSelectEventHandlers","setWordCompletion","firstSuggestionText","hasFocus","focus","doMagicBoxExport","219","escapeRegExp","highlightText","highligth","ignoreCase","matchClass","doNotMatchClass","escaped","stringRegex","notmatch","escapeText","classname","escape","MagicBoxUtils","278","Searchbox","initSearchBox","initSearchButton","applyMagicBoxIcon","applyCustomHeight","div","enableOmnibox","addSearchButton","anchor","searchButton","magicBoxIcon","mainClear","height","SearchBoxResize","resize","parent","extend","484","parseOnce","parseMany","refResult","RefResult","all","getBestExpect","expect","subResult","subResults","subInput","substr","getLength","requiredOccurance","isNumber","last","endOfInput","485","lastResult","failAttempt","getExpect","path","first","initial","rest","486","parts","OptionResult","487","488","489","func","49","until","findParent","subResultFind","expects","groupBy","bestResults","chain","sortBy","pluck","getHumanReadableExpect","getHumanReadable","join","JSON","stringify","before","after","toHtmlElement","createTextNode","nextIndex","subresult","490","491","NestedQuery","NestedField","492","DateYear","DateMonth","DateDay","DateRange","DateRelative","DateRelativeTerm","DateRelativeNegative","DateRelativeNegativeRef","493","QueryExtension","QueryExtensionName","QueryExtensionArguments","QueryExtensionArgumentList","QueryExtensionArgument","QueryExtensionArgumentName","QueryExtensionArgumentValue","494","SubExpression","495","underlay","highlightContainer","ghostTextContainer","insertBefore","addAccessibilitiesProperties","isExpanded","updateInput","updateHighlight","updateWordCompletion","updateScroll","createTextRange","range","select","selectionStart","setSelectionRange","defer","clientWidth","scrollWidth","style","visibility","scrollLeft","scrollTop","updateScrollDefer","keydown","keyup","oncut","onInputChange","onpaste","keyCode","which","TAB","tabPress","stopPropagation","preventDefault","handleLeftRightArrow","computeCssClassNameForType","496","racePromises","promises","queries","asyncQueries","overrideIfProcessing","processedResults","accumulateResultsChronologically","buildProcessResults","Finished","waitForOverride","waitForTimeout","TimedOut","override","flatten","orderedResults","output","items","499","500","loadSubGrammar","subGrammar","expressionDef","BasicExpression","Start","ExpressionsList","Expression","OptionalSpaces","Empty","subGrammars","501","buildingResultPreviewsQuery","updateResultPreviewsManagerOptions","populateSearchResultPreviews","ResultPreviewsManagerEvents","502","owner","componentOptionsModel","ComponentOptionsModel","searchBox","processQueryOnClearVersusEmptyQuery","processQueryOnClearVersusSearchAsYouType","warn","503","queryIsBlocked","queryIsCurrentlyBlocked","Defer","allowDuplicateQuery","isEmpty","add","556","MagicBox","Grammars","Instance","GrammarsImportedLocally","557","ExpressionsGrammar","558","previewHeaderText","previewHeaderFieldText","previewClass","previewsProcessor","lastDisplayedSuggestion","suggestionsPreviewContainer","focusedElement","previewSelectables","firstVerticalOffset","offsetTop","firstIndexOnNextRow","findIndex","previewSelectable","externalOptions","currentDelay","isQueryForSuggestionOngoing","arePreviewsForSuggestionCurrentlyDisplayed","getExternalOptions","lastDelay","resolveAfter","isNullOrUndefined","displayAfterDuration","lastQueriedSuggestion","getSearchResultPreviewsQuery","displaySuggestionPreviews","focusedIndex","getIncrementInDirection","numberOfResultsPerRow","setHasPreviews","shouldHavePreviews","initPreviewForSuggestions","revertPreviewForSuggestions","buildPreviewContainer","previewContainerId","remove","resultPreviewsContainer","optionsEventArgs","populateEventArgs","previewsQueries","appendSearchResultPreview","position","elementDom","appendSearchResultPreviews","previews","toggle","559","clearIcon","insertAfter","hasText","tabindex","560","568","569","cache","getSuggestion","hash","getHash","hashString","hashToString","hashValueToSuggestion","values","current","fieldValues","field","simpleFieldNames","catch","fieldName","currentField","fieldValue","fieldQuery","word","INDEX","getFields","fields","getEndpoint","listFields","fieldDescriptions","fieldDescription","includeInQuery","groupByField","name","withAt","fieldNameLC","matchFields","fieldNameBeginsWithAt","listFieldValues","pattern","patternType","sortCriteria","maximumNumberOfValues","570","eventArgs","buildPopulateOmniboxEventArgs","populateOmnibox","rowsToSuggestions","rows","getCurrentQueryExpression","cursorPos","substring","getRegexToSearch","strValue","escapeRegexCharacter","getQueryExpressionBreakDown","ret","queryWords","split","searchValue","newValue","clearCurrentExpression","insertAt","at","toInsert","oldValue","slice","replaceCurrentExpression","currentQueryExpression","completeQueryExpression","allQueryExpressions","cursorPosition","closeOmnibox","row","deferred","zIndex","571","names","attributeNames","used","queryExtension","queryExtensionArgumentResults","getExtensions","extensions","extensionName","matchExtensions","extension","difference","argumentNames","argumentName","572","suggestiontHtml","highlighted","part","notMatched","matched","corrected","outerHTML","isPartialMatch","StringUtils","firstFail","every","getQuerySuggest","payload","completions","locale","searchHub","pipeline","enableWordCompletion","context","count","tab","referrer","actionsHistory","timezone","visitorId","isGuestUser","getBindings","buildingQuerySuggest","querySuggestSuccess","completion","partial","T","String","getQueryContext","historyStore","buildHistoryStore","historyFromStore","getHistory","AnalyticsInformation","664","665","size","getSearchbox","elementToResize","getElementsToResize","magicboxInput","searchboxStyle","inputChangeStyle","magicboxInputStyle","applyStyle","HtmlElement","cssText"],"mappings":"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","file":"Searchbox.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([8,9,10,78],{\n\n/***/ 128:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result_1 = __webpack_require__(49);\r\nvar Result_2 = __webpack_require__(49);\r\nexports.notWordStart = ' ()[],$@\\'\"';\r\nexports.notInWord = ' ()[],:';\r\nexports.Basic = {\r\n    basicExpressions: ['Word', 'DoubleQuoted'],\r\n    grammars: {\r\n        DoubleQuoted: '\"[NotDoubleQuote]\"',\r\n        NotDoubleQuote: /[^\"]*/,\r\n        SingleQuoted: \"'[NotSingleQuote]'\",\r\n        NotSingleQuote: /[^']*/,\r\n        Number: /-?(0|[1-9]\\d*)(\\.\\d+)?/,\r\n        Word: function (input, end, expression) {\r\n            var regex = new RegExp('[^' + exports.notWordStart.replace(/(.)/g, '\\\\$1') + '][^' + exports.notInWord.replace(/(.)/g, '\\\\$1') + ']*');\r\n            var groups = input.match(regex);\r\n            if (groups != null && groups.index != 0) {\r\n                groups = null;\r\n            }\r\n            var result = new Result_1.Result(groups != null ? groups[0] : null, expression, input);\r\n            if (result.isSuccess() && end && input.length > result.value.length) {\r\n                return new Result_2.EndOfInputResult(result);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n};\r\n\n\n/***/ }),\n\n/***/ 135:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(560);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar StandaloneSearchInterfaceEvents_1 = __webpack_require__(95);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Grammar_1 = __webpack_require__(176);\r\nvar MagicBox_1 = __webpack_require__(218);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar Model_1 = __webpack_require__(18);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar QueryboxOptionsProcessing_1 = __webpack_require__(502);\r\nvar QueryboxQueryParameters_1 = __webpack_require__(503);\r\n/**\r\n * The `Querybox` component renders an input which the end user can interact with to enter and submit queries.\r\n *\r\n * When the end user submits a search request, the `Querybox` component triggers a query and logs the corresponding\r\n * usage analytics data.\r\n *\r\n * For technical reasons, it is necessary to instantiate this component on a `div` element rather than on an `input`\r\n * element.\r\n *\r\n * See also the [`Searchbox`]{@link Searchbox} component, which can automatically instantiate a `Querybox` along with an\r\n * optional [`SearchButton`]{@link SearchButton} component.\r\n */\r\nvar Querybox = /** @class */ (function (_super) {\r\n    __extends(Querybox, _super);\r\n    /**\r\n     * Creates a new `Querybox component`. Creates a new `Coveo.Magicbox` instance and wraps the Magicbox methods\r\n     * (`onblur`, `onsubmit` etc.). Binds event on `buildingQuery` and before redirection (for standalone box).\r\n     * @param element The HTMLElement on which to instantiate the component. This cannot be an HTMLInputElement for\r\n     * technical reasons.\r\n     * @param options The options for the `Querybox` component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function Querybox(element, options, bindings) {\r\n        var _this = _super.call(this, element, Querybox.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.bindings = bindings;\r\n        if (element instanceof HTMLInputElement) {\r\n            _this.logger.error('Querybox cannot be used on an HTMLInputElement');\r\n        }\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Querybox, options);\r\n        new QueryboxOptionsProcessing_1.QueryboxOptionsProcessing(_this).postProcess();\r\n        Dom_1.$$(_this.element).toggleClass('coveo-query-syntax-disabled', _this.options.enableQuerySyntax == false);\r\n        _this.magicBox = MagicBox_1.createMagicBox(element, new Grammar_1.Grammar('Query', {\r\n            Query: '[Term*][Spaces?]',\r\n            Term: '[Spaces?][Word]',\r\n            Spaces: / +/,\r\n            Word: /[^ ]+/\r\n        }), {\r\n            inline: true\r\n        });\r\n        var input = Dom_1.$$(_this.magicBox.element).find('input');\r\n        if (input) {\r\n            Dom_1.$$(input).setAttribute('aria-label', _this.options.placeholder || Strings_1.l('Search'));\r\n        }\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });\r\n        _this.bind.onRootElement(StandaloneSearchInterfaceEvents_1.StandaloneSearchInterfaceEvents.beforeRedirect, function () { return _this.updateQueryState(); });\r\n        _this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE_ONE, QueryStateModel_1.QUERY_STATE_ATTRIBUTES.Q, function (args) {\r\n            return _this.handleQueryStateChanged(args);\r\n        });\r\n        if (_this.options.enableSearchAsYouType) {\r\n            Dom_1.$$(_this.element).addClass('coveo-search-as-you-type');\r\n            _this.magicBox.onchange = function () {\r\n                _this.searchAsYouType();\r\n            };\r\n        }\r\n        _this.magicBox.onsubmit = function () {\r\n            _this.submit();\r\n        };\r\n        _this.magicBox.onblur = function () {\r\n            _this.updateQueryState();\r\n        };\r\n        _this.magicBox.onclear = function () {\r\n            _this.updateQueryState();\r\n            if (_this.options.triggerQueryOnClear) {\r\n                _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxClear, {});\r\n                _this.triggerNewQuery(false);\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds the current content of the input to the query and triggers a query if the current content of the input has\r\n     * changed since last submit.\r\n     *\r\n     * Also logs the `serachboxSubmit` event in the usage analytics.\r\n     */\r\n    Querybox.prototype.submit = function () {\r\n        this.magicBox.clearSuggestion();\r\n        this.updateQueryState();\r\n        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit, {});\r\n        this.triggerNewQuery(false);\r\n    };\r\n    /**\r\n     * Sets the content of the input.\r\n     *\r\n     * @param text The string to set in the input.\r\n     */\r\n    Querybox.prototype.setText = function (text) {\r\n        this.magicBox.setText(text);\r\n        this.updateQueryState();\r\n    };\r\n    /**\r\n     * Clears the content of the input.\r\n     *\r\n     * See also the [`triggerQueryOnClear`]{@link Querybox.options.triggerQueryOnClear} option.\r\n     */\r\n    Querybox.prototype.clear = function () {\r\n        this.magicBox.clear();\r\n    };\r\n    /**\r\n     * Gets the content of the input.\r\n     *\r\n     * @returns {string} The content of the input.\r\n     */\r\n    Querybox.prototype.getText = function () {\r\n        return this.magicBox.getText();\r\n    };\r\n    /**\r\n     * Gets the result from the input.\r\n     *\r\n     * @returns {Result} The result.\r\n     */\r\n    Querybox.prototype.getResult = function () {\r\n        return this.magicBox.getResult();\r\n    };\r\n    /**\r\n     * Gets the displayed result from the input.\r\n     *\r\n     * @returns {Result} The displayed result.\r\n     */\r\n    Querybox.prototype.getDisplayedResult = function () {\r\n        return this.magicBox.getDisplayedResult();\r\n    };\r\n    /**\r\n     * Gets the current cursor position in the input.\r\n     *\r\n     * @returns {number} The cursor position (index starts at 0).\r\n     */\r\n    Querybox.prototype.getCursor = function () {\r\n        return this.magicBox.getCursor();\r\n    };\r\n    /**\r\n     * Gets the result at cursor position.\r\n     *\r\n     * @param match {string | { (result): boolean }} The match condition.\r\n     *\r\n     * @returns {Result[]} The result.\r\n     */\r\n    Querybox.prototype.resultAtCursor = function (match) {\r\n        return this.magicBox.resultAtCursor(match);\r\n    };\r\n    Querybox.prototype.handleBuildingQuery = function (args) {\r\n        Assert_1.Assert.exists(args);\r\n        Assert_1.Assert.exists(args.queryBuilder);\r\n        this.updateQueryState();\r\n        this.lastQuery = this.magicBox.getText();\r\n        new QueryboxQueryParameters_1.QueryboxQueryParameters(this.options).addParameters(args.queryBuilder, this.lastQuery);\r\n    };\r\n    Querybox.prototype.triggerNewQuery = function (searchAsYouType) {\r\n        clearTimeout(this.searchAsYouTypeTimeout);\r\n        var text = this.magicBox.getText();\r\n        if (this.lastQuery != text && text != null) {\r\n            this.lastQuery = text;\r\n            this.queryController.executeQuery({\r\n                searchAsYouType: searchAsYouType,\r\n                logInActionsHistory: true\r\n            });\r\n        }\r\n    };\r\n    Querybox.prototype.updateQueryState = function () {\r\n        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, this.magicBox.getText());\r\n    };\r\n    Querybox.prototype.handleQueryStateChanged = function (args) {\r\n        Assert_1.Assert.exists(args);\r\n        var q = args.value;\r\n        if (q != this.magicBox.getText()) {\r\n            this.magicBox.setText(q);\r\n        }\r\n    };\r\n    Querybox.prototype.searchAsYouType = function () {\r\n        var _this = this;\r\n        clearTimeout(this.searchAsYouTypeTimeout);\r\n        this.searchAsYouTypeTimeout = window.setTimeout(function () {\r\n            _this.usageAnalytics.logSearchAsYouType(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxAsYouType, {});\r\n            _this.triggerNewQuery(true);\r\n        }, this.options.searchAsYouTypeDelay);\r\n    };\r\n    Querybox.ID = 'Querybox';\r\n    Querybox.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Querybox: Querybox,\r\n            QueryboxQueryParameters: QueryboxQueryParameters_1.QueryboxQueryParameters\r\n        });\r\n    };\r\n    /**\r\n     * The options for the Querybox.\r\n     * @componentOptions\r\n     */\r\n    Querybox.options = {\r\n        /**\r\n         * Whether to enable the search-as-you-type feature.\r\n         *\r\n         * **Note:** Enabling this feature can consume lots of queries per month (QPM), especially if the [`searchAsYouTypeDelay`]{@link Querybox.options.searchAsYouTypeDelay} option is set to a low value.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableSearchAsYouType: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n        /**\r\n         * If the [`enableSearchAsYouType`]{@link Querybox.options.enableSearchAsYouType} option is `true`, specifies how\r\n         * long to wait (in milliseconds) between each key press before triggering a new query.\r\n         *\r\n         * Default value is `50`. Minimum value is `0`\r\n         */\r\n        searchAsYouTypeDelay: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 50, min: 0, section: 'Advanced Options' }),\r\n        /**\r\n         * Specifies whether to interpret special query syntax (e.g., `@objecttype=message`) when the end user types\r\n         * a query in the `Querybox` (see\r\n         * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)). Setting this\r\n         * option to `true` also causes the `Querybox` to highlight any query syntax.\r\n         *\r\n         * Regardless of the value of this option, the Coveo Cloud REST Search API always interprets expressions surrounded\r\n         * by double quotes (`\"`) as exact phrase match requests.\r\n         *\r\n         * See also [`enableLowercaseOperators`]{@link Querybox.options.enableLowercaseOperators}.\r\n         *\r\n         * **Notes:**\r\n         * > * End user preferences can override the value you specify for this option.\r\n         * >\r\n         * > If the end user selects a value other than **Automatic** for the **Enable query syntax** setting (see\r\n         * > the [`enableQuerySyntax`]{@link ResultsPreferences.options.enableQuerySyntax} option of the\r\n         * > [`ResultsPreferences`]{@link ResultsPreferences} component), the end user preference takes precedence over this\r\n         * > option.\r\n         * >\r\n         * > * On-premises versions of the Coveo Search API require this option to be set to `true` in order to interpret\r\n         * > expressions surrounded by double quotes (`\"`) as exact phrase match requests.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableQuerySyntax: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n        /**\r\n         * Specifies whether to expand basic expression keywords containing wildcards characters (`*`) to the possible\r\n         * matching keywords in order to broaden the query (see\r\n         * [Using Wildcards in Queries](https://docs.coveo.com/en/1580/)).\r\n         *\r\n         * See also [`enableQuestionMarks`]{@link Querybox.options.enableQuestionMarks}.\r\n         *\r\n         *  **Note:**\r\n         * > If you are using an on-premises version of the Coveo Search API, you need to set the\r\n         * > [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option to `true` to be able to set\r\n         * > `enableWildcards` to `true`.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableWildcards: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n        /**\r\n         * If [`enableWildcards`]{@link Querybox.options.enableWildcards} is `true`, specifies whether to expand basic\r\n         * expression keywords containing question mark characters (`?`) to the possible matching keywords in order to\r\n         * broaden the query (see\r\n         * [Using Wildcards in Queries](https://docs.coveo.com/en/1580/)).\r\n         *\r\n         * **Note:**\r\n         * > If you are using an on-premises version of the Coveo Search API, you also need to set the\r\n         * > [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option to `true` in order to be able to set\r\n         * > `enableQuestionMarks` to `true`.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableQuestionMarks: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableWildcards' }),\r\n        /**\r\n         * If the [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option is `true`, specifies whether to\r\n         * interpret the `AND`, `NOT`, `OR`, and `NEAR` keywords in the `Querybox` as query operators in the query, even if\r\n         * the end user types those keywords in lowercase.\r\n         *\r\n         * This option applies to all query operators (see\r\n         * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).\r\n         *\r\n         * **Example:**\r\n         * > If this option and the `enableQuerySyntax` option are both `true`, the Coveo Platform interprets the `near`\r\n         * > keyword in a query such as `service center near me` as the `NEAR` query operator (not as a query term).\r\n         *\r\n         * > Otherwise, if the `enableQuerySyntax` option is `true` and this option is `false`, the end user has to type the\r\n         * > `NEAR` keyword in uppercase for the Coveo Platform to interpret it as a query operator.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableLowercaseOperators: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableQuerySyntax' }),\r\n        /**\r\n         * Whether to convert a basic expression containing at least a certain number of keywords (see the\r\n         * [`partialMatchKeywords`]{@link Querybox.options.partialMatchKeywords} option) to *partial match expression*, so\r\n         * that items containing at least a certain number of those keywords (see the\r\n         * [`partialMatchThreshold`]{@link Querybox.options.partialMatchThreshold} option) will match the expression.\r\n         *\r\n         * **Notes:**\r\n         * - Only the basic expression of the query (see [`q`]{@link q}) can be converted to a partial match expression.\r\n         * - When the [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option is set to `true`, this feature has no effect if the basic expression contains advanced query syntax (field expressions, operators, etc.).\r\n         *\r\n         * @notSupportedIn salesforcefree\r\n         */\r\n        enablePartialMatch: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n        /**\r\n         * The minimum number of keywords that need to be present in the basic expression to convert it to a partial match expression.\r\n         *\r\n         * See also the [`partialMatchThreshold`]{@link Querybox.options.partialMatchThreshold} option.\r\n         *\r\n         * **Notes:**\r\n         *\r\n         * - Repeated keywords count as a single keyword.\r\n         * - Thesaurus expansions count towards the `partialMatchKeywords` count.\r\n         * - Stemming expansions **do not** count towards the `partialMatchKeywords` count.\r\n         *\r\n         * @notSupportedIn salesforcefree\r\n         */\r\n        partialMatchKeywords: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1, depend: 'enablePartialMatch' }),\r\n        /**\r\n         * An absolute or relative value indicating the minimum number of partial match expression keywords an item must contain to match the expression.\r\n         *\r\n         * See also the [`partialMatchKeywords`]{@link Querybox.options.partialMatchKeywords} option.\r\n         *\r\n         * **Notes:**\r\n         * - A keyword and its stemming expansions count as a single keyword when evaluating whether an item meets the `partialMatchThreshold`.\r\n         * - When a relative `partialMatchThreshold` does not yield a whole integer, the fractional part is truncated (e.g., `3.6` becomes `3`).\r\n         *\r\n         * @notSupportedIn salesforcefree\r\n         */\r\n        partialMatchThreshold: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: '50%', depend: 'enablePartialMatch' }),\r\n        /**\r\n         * Whether to trigger a query when clearing the `Querybox`.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        triggerQueryOnClear: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n    };\r\n    return Querybox;\r\n}(Component_1.Component));\r\nexports.Querybox = Querybox;\r\nInitialization_1.Initialization.registerAutoCreateComponent(Querybox);\r\n\n\n/***/ }),\n\n/***/ 176:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ExpressionRef_1 = __webpack_require__(484);\r\nvar ExpressionOptions_1 = __webpack_require__(486);\r\nvar ExpressionRegExp_1 = __webpack_require__(488);\r\nvar _ = __webpack_require__(0);\r\nvar ExpressionFunction_1 = __webpack_require__(489);\r\nvar ExpressionConstant_1 = __webpack_require__(215);\r\nvar ExpressionList_1 = __webpack_require__(490);\r\nvar Grammar = /** @class */ (function () {\r\n    function Grammar(start, expressions) {\r\n        if (expressions === void 0) { expressions = {}; }\r\n        this.expressions = {};\r\n        this.start = new ExpressionRef_1.ExpressionRef(start, null, 'start', this);\r\n        this.addExpressions(expressions);\r\n    }\r\n    Grammar.prototype.addExpressions = function (expressions) {\r\n        var _this = this;\r\n        _.each(expressions, function (basicExpression, id) {\r\n            _this.addExpression(id, basicExpression);\r\n        });\r\n    };\r\n    Grammar.prototype.addExpression = function (id, basicExpression) {\r\n        if (id in this.expressions) {\r\n            throw new Error('Grammar already contain the id:' + id);\r\n        }\r\n        this.expressions[id] = Grammar.buildExpression(basicExpression, id, this);\r\n    };\r\n    Grammar.prototype.getExpression = function (id) {\r\n        return this.expressions[id];\r\n    };\r\n    Grammar.prototype.parse = function (value) {\r\n        return this.start.parse(value, true);\r\n    };\r\n    Grammar.buildExpression = function (value, id, grammar) {\r\n        var type = typeof value;\r\n        if (type == 'undefined') {\r\n            throw new Error('Invalid Expression: ' + value);\r\n        }\r\n        if (_.isString(value)) {\r\n            return this.buildStringExpression(value, id, grammar);\r\n        }\r\n        if (_.isArray(value)) {\r\n            return new ExpressionOptions_1.ExpressionOptions(_.map(value, function (v, i) { return new ExpressionRef_1.ExpressionRef(v, null, id + '_' + i, grammar); }), id);\r\n        }\r\n        if (_.isRegExp(value)) {\r\n            return new ExpressionRegExp_1.ExpressionRegExp(value, id, grammar);\r\n        }\r\n        if (_.isFunction(value)) {\r\n            return new ExpressionFunction_1.ExpressionFunction(value, id, grammar);\r\n        }\r\n        throw new Error('Invalid Expression: ' + value);\r\n    };\r\n    Grammar.buildStringExpression = function (value, id, grammar) {\r\n        var matchs = Grammar.stringMatch(value, Grammar.spliter);\r\n        var expressions = _.map(matchs, function (match, i) {\r\n            if (match[1]) {\r\n                // Ref\r\n                var ref = match[1];\r\n                var occurrence = match[3] ? Number(match[3]) : match[2] || null;\r\n                return new ExpressionRef_1.ExpressionRef(ref, occurrence, id + '_' + i, grammar);\r\n            }\r\n            else {\r\n                // Constant\r\n                return new ExpressionConstant_1.ExpressionConstant(match[4], id + '_' + i);\r\n            }\r\n        });\r\n        if (expressions.length == 1) {\r\n            var expression = expressions[0];\r\n            expression.id = id;\r\n            return expression;\r\n        }\r\n        else {\r\n            return new ExpressionList_1.ExpressionList(expressions, id);\r\n        }\r\n    };\r\n    Grammar.stringMatch = function (str, re) {\r\n        var groups = [];\r\n        var cloneRegExp = new RegExp(re.source, 'g');\r\n        var group = cloneRegExp.exec(str);\r\n        while (group !== null) {\r\n            groups.push(group);\r\n            group = cloneRegExp.exec(str);\r\n        }\r\n        return groups;\r\n    };\r\n    Grammar.spliter = /\\[(\\w+)(\\*|\\+|\\?|\\{([1-9][0-9]*)\\})?\\]|(.[^\\[]*)/;\r\n    return Grammar;\r\n}());\r\nexports.Grammar = Grammar;\r\n\n\n/***/ }),\n\n/***/ 189:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n///<reference path=\"FieldAddon.ts\" />\r\n///<reference path=\"QueryExtensionAddon.ts\" />\r\n///<reference path=\"QuerySuggestAddon.ts\" />\r\n///<reference path=\"OldOmniboxAddon.ts\" />\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(568);\r\nvar _ = __webpack_require__(0);\r\nvar underscore_1 = __webpack_require__(0);\r\nvar BreadcrumbEvents_1 = __webpack_require__(34);\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar StandaloneSearchInterfaceEvents_1 = __webpack_require__(95);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Grammar_1 = __webpack_require__(176);\r\nvar Complete_1 = __webpack_require__(499);\r\nvar Expressions_1 = __webpack_require__(500);\r\nvar MagicBox_1 = __webpack_require__(218);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar ComponentOptionsModel_1 = __webpack_require__(28);\r\nvar Model_1 = __webpack_require__(18);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar PendingSearchAsYouTypeSearchEvent_1 = __webpack_require__(123);\r\nvar SharedAnalyticsCalls_1 = __webpack_require__(119);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar Querybox_1 = __webpack_require__(135);\r\nvar QueryboxOptionsProcessing_1 = __webpack_require__(502);\r\nvar QueryboxQueryParameters_1 = __webpack_require__(503);\r\nvar SearchInterface_1 = __webpack_require__(19);\r\nvar FieldAddon_1 = __webpack_require__(569);\r\nvar OldOmniboxAddon_1 = __webpack_require__(570);\r\nvar QueryExtensionAddon_1 = __webpack_require__(571);\r\nvar QuerySuggestAddon_1 = __webpack_require__(572);\r\nvar MINIMUM_EXECUTABLE_CONFIDENCE = 0.8;\r\n/**\r\n * The `Omnibox` component extends the [`Querybox`]{@link Querybox}, and thus provides the same basic options and\r\n * behaviors. Furthermore, the `Omnibox` adds a type-ahead capability to the search input.\r\n *\r\n * You can configure the type-ahead feature by enabling or disabling certain addons, which the Coveo JavaScript Search\r\n * Framework provides out-of-the-box (see the [`enableFieldAddon`]{@link Omnibox.options.enableFieldAddon},\r\n * [`enableQueryExtension`]{@link Omnibox.options.enableQueryExtensionAddon}, and\r\n * [`enableQuerySuggestAddon`]{@link Omnibox.options.enableQuerySuggestAddon} options).\r\n *\r\n * Custom components and external code can also extend or customize the type-ahead feature and the query completion\r\n * suggestions it provides by attaching their own handlers to the\r\n * [`populateOmniboxSuggestions`]{@link OmniboxEvents.populateOmniboxSuggestions} event.\r\n *\r\n * See also the [`Searchbox`]{@link Searchbox} component, which can automatically instantiate an `Omnibox` along with an\r\n * optional {@link SearchButton}.\r\n */\r\nvar Omnibox = /** @class */ (function (_super) {\r\n    __extends(Omnibox, _super);\r\n    /**\r\n     * Creates a new Omnibox component. Also enables necessary addons and binds events on various query events.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the Omnibox component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function Omnibox(element, options, bindings) {\r\n        var _this = _super.call(this, element, Omnibox.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.lastSuggestions = [];\r\n        _this.movedOnce = false;\r\n        _this.skipAutoSuggest = false;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Omnibox, options);\r\n        var originalValueForQuerySyntax = _this.options.enableQuerySyntax;\r\n        new QueryboxOptionsProcessing_1.QueryboxOptionsProcessing(_this).postProcess();\r\n        _this.omniboxAnalytics = _this.searchInterface.getOmniboxAnalytics();\r\n        Dom_1.$$(_this.element).toggleClass('coveo-query-syntax-disabled', _this.options.enableQuerySyntax == false);\r\n        _this.suggestionAddon = _this.options.enableQuerySuggestAddon ? new QuerySuggestAddon_1.QuerySuggestAddon(_this) : new QuerySuggestAddon_1.VoidQuerySuggestAddon();\r\n        new OldOmniboxAddon_1.OldOmniboxAddon(_this);\r\n        _this.createMagicBox();\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.newQuery, function (args) { return _this.handleNewQuery(args); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });\r\n        _this.bind.onRootElement(StandaloneSearchInterfaceEvents_1.StandaloneSearchInterfaceEvents.beforeRedirect, function () { return _this.handleBeforeRedirect(); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function () { return _this.handleQuerySuccess(); });\r\n        _this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE_ONE, QueryStateModel_1.QUERY_STATE_ATTRIBUTES.Q, function (args) {\r\n            return _this.handleQueryStateChanged(args);\r\n        });\r\n        if (_this.isAutoSuggestion()) {\r\n            _this.bind.onRootElement(QueryEvents_1.QueryEvents.duringQuery, function (args) { return _this.handleDuringQuery(args); });\r\n        }\r\n        _this.bind.onComponentOptions(Model_1.MODEL_EVENTS.CHANGE_ONE, ComponentOptionsModel_1.COMPONENT_OPTIONS_ATTRIBUTES.SEARCH_BOX, function (args) {\r\n            if (args.value.enableQuerySyntax != null) {\r\n                _this.options.enableQuerySyntax = args.value.enableQuerySyntax;\r\n            }\r\n            else {\r\n                _this.options.enableQuerySyntax = originalValueForQuerySyntax;\r\n            }\r\n            _this.updateGrammar();\r\n        });\r\n        _this.bind.onRootElement(OmniboxEvents_1.OmniboxEvents.querySuggestGetFocus, function (args) { return _this.handleQuerySuggestGetFocus(args); });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds the current content of the input to the query and triggers a query if the current content of the input has\r\n     * changed since last submit.\r\n     *\r\n     * Also logs a `searchboxSubmit` event in the usage analytics.\r\n     */\r\n    Omnibox.prototype.submit = function () {\r\n        var _this = this;\r\n        this.magicBox.clearSuggestion();\r\n        this.updateQueryState();\r\n        this.triggerNewQuery(false, function () {\r\n            SharedAnalyticsCalls_1.logSearchBoxSubmitEvent(_this.usageAnalytics);\r\n        });\r\n        this.magicBox.blur();\r\n    };\r\n    /**\r\n     * Gets the current content of the input.\r\n     * @returns {string} The current content of the input.\r\n     */\r\n    Omnibox.prototype.getText = function () {\r\n        return this.magicBox.getText();\r\n    };\r\n    /**\r\n     * Sets the content of the input\r\n     * @param text The string to set in the input.\r\n     */\r\n    Omnibox.prototype.setText = function (text) {\r\n        this.magicBox.setText(text);\r\n        this.updateQueryState();\r\n    };\r\n    /**\r\n     * Clears the content of the input.\r\n     */\r\n    Omnibox.prototype.clear = function () {\r\n        this.magicBox.clear();\r\n    };\r\n    /**\r\n     * Gets the `HTMLInputElement` of the Omnibox.\r\n     */\r\n    Omnibox.prototype.getInput = function () {\r\n        return this.magicBox.element.querySelector('input');\r\n    };\r\n    Omnibox.prototype.getResult = function () {\r\n        return this.magicBox.getResult();\r\n    };\r\n    Omnibox.prototype.getDisplayedResult = function () {\r\n        return this.magicBox.getDisplayedResult();\r\n    };\r\n    Omnibox.prototype.getCursor = function () {\r\n        return this.magicBox.getCursor();\r\n    };\r\n    Omnibox.prototype.resultAtCursor = function (match) {\r\n        return this.magicBox.resultAtCursor(match);\r\n    };\r\n    Omnibox.prototype.createGrammar = function () {\r\n        var grammar = null;\r\n        if (this.options.enableQuerySyntax) {\r\n            grammar = Expressions_1.Expressions(Complete_1.Complete);\r\n            if (this.options.enableFieldAddon) {\r\n                new FieldAddon_1.FieldAddon(this);\r\n            }\r\n            if (this.options.fieldAlias != null) {\r\n                this.options.listOfFields = this.options.listOfFields || [];\r\n                this.options.listOfFields = this.options.listOfFields.concat(_.keys(this.options.fieldAlias));\r\n            }\r\n            if (this.options.enableQueryExtensionAddon) {\r\n                new QueryExtensionAddon_1.QueryExtensionAddon(this);\r\n            }\r\n        }\r\n        else {\r\n            grammar = { start: 'Any', expressions: { Any: /.*/ } };\r\n        }\r\n        if (this.options.grammar != null) {\r\n            grammar = this.options.grammar(grammar);\r\n        }\r\n        return grammar;\r\n    };\r\n    Omnibox.prototype.updateGrammar = function () {\r\n        var grammar = this.createGrammar();\r\n        this.magicBox.grammar = new Grammar_1.Grammar(grammar.start, grammar.expressions);\r\n        this.magicBox.setText(this.magicBox.getText());\r\n    };\r\n    Omnibox.prototype.createMagicBox = function () {\r\n        var grammar = this.createGrammar();\r\n        this.magicBox = MagicBox_1.createMagicBox(this.element, new Grammar_1.Grammar(grammar.start, grammar.expressions), {\r\n            inline: this.options.inline,\r\n            selectableSuggestionClass: 'coveo-omnibox-selectable',\r\n            selectedSuggestionClass: 'coveo-omnibox-selected',\r\n            suggestionTimeout: this.options.omniboxTimeout\r\n        });\r\n        var input = Dom_1.$$(this.magicBox.element).find('input');\r\n        if (input) {\r\n            Dom_1.$$(input).setAttribute('aria-label', Strings_1.l('Search'));\r\n        }\r\n        this.setupMagicBox();\r\n    };\r\n    Omnibox.prototype.setupMagicBox = function () {\r\n        var _this = this;\r\n        this.magicBox.onmove = function () {\r\n            // We assume that once the user has moved its selection, it becomes an explicit omnibox analytics event\r\n            if (_this.isAutoSuggestion()) {\r\n                _this.modifyEventTo = _this.getOmniboxAnalyticsEventCause();\r\n            }\r\n            _this.movedOnce = true;\r\n        };\r\n        this.magicBox.onfocus = function () {\r\n            if (_this.isAutoSuggestion()) {\r\n                // This flag is used to block the automatic query when the UI is loaded with a query (#q=foo)\r\n                // and then the input is focused. We want to block that query, even if it match the suggestion\r\n                // Only when there is an actual change in the input (user typing something) is when we want the automatic query to kick in\r\n                _this.skipAutoSuggest = true;\r\n            }\r\n        };\r\n        this.magicBox.onSuggestions = function (suggestions) {\r\n            // If text is empty, this can mean that user selected text from the search box\r\n            // and hit \"delete\" : Reset the partial queries in this case\r\n            if (Utils_1.Utils.isEmptyString(_this.getText())) {\r\n                _this.omniboxAnalytics.partialQueries = [];\r\n            }\r\n            _this.movedOnce = false;\r\n            _this.lastSuggestions = suggestions;\r\n            if (_this.isAutoSuggestion() && !_this.skipAutoSuggest) {\r\n                _this.searchAsYouType();\r\n            }\r\n        };\r\n        if (this.options.enableSearchAsYouType) {\r\n            Dom_1.$$(this.element).addClass('coveo-magicbox-search-as-you-type');\r\n        }\r\n        this.magicBox.onchange = function () {\r\n            _this.skipAutoSuggest = false;\r\n            var text = _this.getText();\r\n            if (text != undefined && text != '') {\r\n                if (_this.isAutoSuggestion()) {\r\n                    if (_this.movedOnce) {\r\n                        _this.searchAsYouType(true);\r\n                    }\r\n                }\r\n                else if (_this.options.enableSearchAsYouType) {\r\n                    _this.searchAsYouType(true);\r\n                }\r\n            }\r\n            else {\r\n                _this.clear();\r\n            }\r\n        };\r\n        if (this.options.placeholder) {\r\n            this.magicBox.element.querySelector('input').placeholder = this.options.placeholder;\r\n        }\r\n        this.magicBox.onsubmit = function () { return _this.submit(); };\r\n        this.magicBox.onselect = function (suggestion) {\r\n            var index = _.indexOf(_this.lastSuggestions, suggestion);\r\n            var suggestions = _.compact(_.map(_this.lastSuggestions, function (suggestion) { return suggestion.text; }));\r\n            _this.magicBox.clearSuggestion();\r\n            _this.updateQueryState();\r\n            // A bit tricky here : When it's machine learning auto suggestions\r\n            // the mouse selection and keyboard selection acts differently :\r\n            // keyboard selection will automatically do the query (which will log a search as you type event -> further modified by this.modifyEventTo if needed)\r\n            // mouse selection will not \"auto\" send the query.\r\n            // the movedOnce variable detect the keyboard movement, and is used to differentiate mouse vs keyboard\r\n            if (!_this.isAutoSuggestion()) {\r\n                _this.usageAnalytics.cancelAllPendingEvents();\r\n                _this.triggerNewQuery(false, function () {\r\n                    _this.usageAnalytics.logSearchEvent(_this.getOmniboxAnalyticsEventCause(), _this.buildCustomDataForPartialQueries(index, suggestions));\r\n                });\r\n            }\r\n            else if (_this.isAutoSuggestion() && _this.movedOnce) {\r\n                _this.handleAutoSuggestionWithKeyboard(index, suggestions);\r\n            }\r\n            else if (_this.isAutoSuggestion() && !_this.movedOnce) {\r\n                _this.handleAutoSuggestionsWithMouse(index, suggestions);\r\n            }\r\n            // Consider a selection like a reset of the partial queries (it's the end of a suggestion pattern)\r\n            if (_this.isAutoSuggestion()) {\r\n                _this.omniboxAnalytics.partialQueries = [];\r\n            }\r\n        };\r\n        this.magicBox.onblur = function () {\r\n            if (_this.isAutoSuggestion()) {\r\n                _this.setText(_this.getQuery(true));\r\n                _this.usageAnalytics.sendAllPendingEvents();\r\n            }\r\n        };\r\n        this.magicBox.onclear = function () {\r\n            _this.updateQueryState();\r\n            if (_this.options.triggerQueryOnClear || _this.options.enableSearchAsYouType) {\r\n                _this.triggerNewQuery(false, function () {\r\n                    _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxClear, {});\r\n                });\r\n            }\r\n        };\r\n        this.magicBox.ontabpress = function () {\r\n            _this.handleTabPress();\r\n        };\r\n        this.magicBox.getSuggestions = function () { return _this.handleSuggestions(); };\r\n    };\r\n    Omnibox.prototype.handleAutoSuggestionWithKeyboard = function (index, suggestions) {\r\n        var _this = this;\r\n        if (this.searchAsYouTypeTimeout) {\r\n            // Here, there is currently a search as you typed queued up :\r\n            // Think : user typed very quickly, then very quickly selected a suggestion (without waiting for the search as you type)\r\n            // Cancel the search as you type query, then immediately do the query with the selection (+analytics event with the selection)\r\n            this.usageAnalytics.cancelAllPendingEvents();\r\n            clearTimeout(this.searchAsYouTypeTimeout);\r\n            this.searchAsYouTypeTimeout = undefined;\r\n            this.triggerNewQuery(false, function () {\r\n                _this.usageAnalytics.logSearchEvent(_this.getOmniboxAnalyticsEventCause(), _this.buildCustomDataForPartialQueries(index, suggestions));\r\n            });\r\n        }\r\n        else {\r\n            // Here, the search as you type query has returned, but the analytics event has not ye been sent.\r\n            // Think : user typed slowly, the query returned, and then the user selected a suggestion.\r\n            // Since the analytics event has not yet been sent (search as you type event have a 5 sec delay)\r\n            // modify the pending event, then send the newly modified analytics event immediately.\r\n            this.modifyEventTo = this.getOmniboxAnalyticsEventCause();\r\n            this.modifyCustomDataOnPending(index, suggestions);\r\n            this.modifyQueryContentOnPending();\r\n            this.usageAnalytics.sendAllPendingEvents();\r\n        }\r\n    };\r\n    Omnibox.prototype.handleAutoSuggestionsWithMouse = function (index, suggestions) {\r\n        var _this = this;\r\n        if (this.searchAsYouTypeTimeout || index != 0) {\r\n            // Here : the user either very quickly chose the first suggestion, and the search as you type is still queued up.\r\n            // OR\r\n            // the user chose something different then the first suggestion.\r\n            // Remove the search as you type if it's there, and do the query with the suggestion directly.\r\n            this.clearSearchAsYouType();\r\n            this.usageAnalytics.cancelAllPendingEvents();\r\n            this.triggerNewQuery(false, function () {\r\n                _this.usageAnalytics.logSearchEvent(_this.getOmniboxAnalyticsEventCause(), _this.buildCustomDataForPartialQueries(index, suggestions));\r\n            });\r\n        }\r\n        else {\r\n            // Here : the user either very slowly chose a suggestion, and there is no search as you typed queued up\r\n            // AND\r\n            // the user chose the first suggestion.\r\n            // this means the query is already returned, but the analytics event is still queued up.\r\n            // modify the analytics event, and send it.\r\n            this.modifyEventTo = this.getOmniboxAnalyticsEventCause();\r\n            this.modifyCustomDataOnPending(index, suggestions);\r\n            this.modifyQueryContentOnPending();\r\n            this.usageAnalytics.sendAllPendingEvents();\r\n            // This should happen if :\r\n            // users did a (short) query first, which does not match the first suggestion. (eg: typed \"t\", then search)\r\n            // then, refocus the search box. The same suggestion(s) will re-appear.\r\n            // By selecting the first one with the mouse, we need to retrigger a query because this means the search as you type could not\r\n            // kick in and do the query automatically.\r\n            if (this.lastQuery != this.getText()) {\r\n                this.triggerNewQuery(false, function () {\r\n                    _this.usageAnalytics.logSearchEvent(_this.getOmniboxAnalyticsEventCause(), _this.buildCustomDataForPartialQueries(index, suggestions));\r\n                });\r\n            }\r\n        }\r\n    };\r\n    Omnibox.prototype.modifyCustomDataOnPending = function (index, suggestions) {\r\n        var pendingEvt = this.usageAnalytics.getPendingSearchEvent();\r\n        if (pendingEvt instanceof PendingSearchAsYouTypeSearchEvent_1.PendingSearchAsYouTypeSearchEvent) {\r\n            var newCustomData_1 = this.buildCustomDataForPartialQueries(index, suggestions);\r\n            _.each(_.keys(newCustomData_1), function (k) {\r\n                pendingEvt.modifyCustomData(k, newCustomData_1[k]);\r\n            });\r\n        }\r\n    };\r\n    Omnibox.prototype.modifyQueryContentOnPending = function () {\r\n        var pendingEvt = this.usageAnalytics.getPendingSearchEvent();\r\n        if (pendingEvt instanceof PendingSearchAsYouTypeSearchEvent_1.PendingSearchAsYouTypeSearchEvent) {\r\n            var queryContent = this.getQuery(this.options.enableSearchAsYouType);\r\n            pendingEvt.modifyQueryContent(queryContent);\r\n        }\r\n    };\r\n    Omnibox.prototype.buildCustomDataForPartialQueries = function (index, suggestions) {\r\n        this.updateOmniboxAnalytics(suggestions, index);\r\n        return this.omniboxAnalytics.buildCustomDataForPartialQueries();\r\n    };\r\n    Omnibox.prototype.handleQuerySuggestGetFocus = function (_a) {\r\n        var suggestion = _a.suggestion;\r\n        var suggestions = _.compact(_.map(this.lastSuggestions, function (suggestion) { return suggestion.text; }));\r\n        var ranking = this.lastSuggestions.indexOf(underscore_1.findWhere(this.lastSuggestions, { text: suggestion }));\r\n        this.updateOmniboxAnalytics(suggestions, ranking);\r\n    };\r\n    Omnibox.prototype.updateOmniboxAnalytics = function (suggestions, suggestionRanking) {\r\n        this.omniboxAnalytics.suggestions = suggestions;\r\n        this.omniboxAnalytics.suggestionRanking = suggestionRanking;\r\n    };\r\n    Omnibox.prototype.handleSuggestions = function () {\r\n        var text = this.getText();\r\n        if (this.options.querySuggestCharacterThreshold <= text.length) {\r\n            var suggestionsEventArgs = {\r\n                suggestions: [],\r\n                omnibox: this\r\n            };\r\n            this.triggerOmniboxSuggestions(suggestionsEventArgs);\r\n            if (!Utils_1.Utils.isNullOrEmptyString(text)) {\r\n                this.omniboxAnalytics.partialQueries.push(text);\r\n            }\r\n            return _.compact(suggestionsEventArgs.suggestions);\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    Omnibox.prototype.triggerOmniboxSuggestions = function (args) {\r\n        this.bind.trigger(this.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, args);\r\n        if (!Dom_1.$$(this.element).isDescendant(this.root)) {\r\n            this.bind.trigger(this.root, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, args);\r\n        }\r\n    };\r\n    Omnibox.prototype.handleBeforeRedirect = function () {\r\n        this.updateQueryState();\r\n    };\r\n    Omnibox.prototype.handleBuildingQuery = function (data) {\r\n        var _this = this;\r\n        Assert_1.Assert.exists(data);\r\n        Assert_1.Assert.exists(data.queryBuilder);\r\n        this.updateQueryState();\r\n        this.lastQuery = this.getQuery(data.searchAsYouType);\r\n        var result = this.lastQuery == this.magicBox.getDisplayedResult().input\r\n            ? this.magicBox.getDisplayedResult().clone()\r\n            : this.magicBox.grammar.parse(this.lastQuery).clean();\r\n        var preprocessResultForQueryArgs = {\r\n            result: result\r\n        };\r\n        if (this.options.enableQuerySyntax) {\r\n            var notQuotedValues = preprocessResultForQueryArgs.result.findAll('FieldValueNotQuoted');\r\n            _.each(notQuotedValues, function (value) { return (value.value = '\"' + value.value.replace(/\"|\\u00A0/g, ' ') + '\"'); });\r\n            if (this.options.fieldAlias) {\r\n                var fieldNames = preprocessResultForQueryArgs.result.findAll(function (result) { return result.expression.id == 'FieldName' && result.isSuccess(); });\r\n                _.each(fieldNames, function (result) {\r\n                    var alias = _.find(_.keys(_this.options.fieldAlias), function (alias) { return alias.toLowerCase() == result.value.toLowerCase(); });\r\n                    if (alias != null) {\r\n                        result.value = _this.options.fieldAlias[alias];\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        this.triggerOmniboxPreprocessResultForQuery(preprocessResultForQueryArgs);\r\n        var query = preprocessResultForQueryArgs.result.toString();\r\n        new QueryboxQueryParameters_1.QueryboxQueryParameters(this.options).addParameters(data.queryBuilder, query);\r\n    };\r\n    Omnibox.prototype.triggerOmniboxPreprocessResultForQuery = function (args) {\r\n        this.bind.trigger(this.element, OmniboxEvents_1.OmniboxEvents.omniboxPreprocessResultForQuery, args);\r\n        if (!Dom_1.$$(this.element).isDescendant(this.root)) {\r\n            this.bind.trigger(this.root, OmniboxEvents_1.OmniboxEvents.omniboxPreprocessResultForQuery, args);\r\n        }\r\n    };\r\n    Omnibox.prototype.handleNewQuery = function (data) {\r\n        Assert_1.Assert.exists(data);\r\n        this.options.clearFiltersOnNewQuery && this.clearFiltersIfNewQuery(data);\r\n    };\r\n    Omnibox.prototype.clearFiltersIfNewQuery = function (_a) {\r\n        var origin = _a.origin, searchAsYouType = _a.searchAsYouType;\r\n        if (this.queryController.firstQuery) {\r\n            return;\r\n        }\r\n        // Prevent queries triggered by unrelated components to clear the the filters\r\n        // e.g., a facet selection\r\n        var validOrigins = [Omnibox.ID, 'SearchButton'];\r\n        if (!origin || validOrigins.indexOf(origin.type) === -1) {\r\n            return;\r\n        }\r\n        var lastQuery = this.queryController.getLastQuery().q || '';\r\n        var newQuery = this.getQuery(searchAsYouType);\r\n        if (lastQuery !== newQuery) {\r\n            this.bind.trigger(this.root, BreadcrumbEvents_1.BreadcrumbEvents.clearBreadcrumb);\r\n        }\r\n    };\r\n    Omnibox.prototype.handleTabPress = function () {\r\n        if (this.options.enableQuerySuggestAddon) {\r\n            this.handleTabPressForSuggestions();\r\n        }\r\n        this.handleTabPressForOldOmniboxAddon();\r\n    };\r\n    Omnibox.prototype.handleTabPressForSuggestions = function () {\r\n        if (!this.options.enableSearchAsYouType) {\r\n            var suggestions = _.compact(_.map(this.lastSuggestions, function (suggestion) { return suggestion.text; }));\r\n            this.usageAnalytics.logCustomEvent(this.getOmniboxAnalyticsEventCause(), this.buildCustomDataForPartialQueries(0, suggestions), this.element);\r\n        }\r\n        else {\r\n            this.setText(this.getQuery(true));\r\n        }\r\n    };\r\n    Omnibox.prototype.handleTabPressForOldOmniboxAddon = function () {\r\n        var domSuggestions = this.lastSuggestions.filter(function (suggestions) { return suggestions.dom; }).map(function (suggestions) { return Dom_1.$$(suggestions.dom); });\r\n        var selected = this.findAllElementsWithClass(domSuggestions, '.coveo-omnibox-selected');\r\n        if (selected.length > 0) {\r\n            Dom_1.$$(selected[0]).trigger('tabSelect');\r\n        }\r\n        else if (!this.options.enableQuerySuggestAddon) {\r\n            var selectable = this.findAllElementsWithClass(domSuggestions, '.coveo-omnibox-selectable');\r\n            if (selectable.length > 0) {\r\n                Dom_1.$$(selectable[0]).trigger('tabSelect');\r\n            }\r\n        }\r\n    };\r\n    Omnibox.prototype.findAllElementsWithClass = function (elements, className) {\r\n        return elements\r\n            .map(function (element) { return element.find(className); })\r\n            .filter(function (s) { return s; })\r\n            .reduce(function (total, s) { return total.concat(s); }, []);\r\n    };\r\n    Omnibox.prototype.triggerNewQuery = function (searchAsYouType, analyticsEvent) {\r\n        clearTimeout(this.searchAsYouTypeTimeout);\r\n        var shouldExecuteQuery = this.shouldExecuteQuery(searchAsYouType);\r\n        this.lastQuery = this.getQuery(searchAsYouType);\r\n        shouldExecuteQuery && analyticsEvent();\r\n        this.queryController.executeQuery({\r\n            searchAsYouType: searchAsYouType,\r\n            logInActionsHistory: true,\r\n            cancel: !shouldExecuteQuery,\r\n            origin: this\r\n        });\r\n    };\r\n    Omnibox.prototype.getQuery = function (searchAsYouType) {\r\n        if (this.lastQuery == this.magicBox.getText()) {\r\n            return this.lastQuery;\r\n        }\r\n        if (!searchAsYouType) {\r\n            return this.magicBox.getText();\r\n        }\r\n        var wordCompletion = this.magicBox.getWordCompletion();\r\n        if (wordCompletion != null) {\r\n            return wordCompletion;\r\n        }\r\n        var currentOmniboxSuggestion = this.magicBox.getWordCompletion() || this.getFirstSuggestion();\r\n        if (currentOmniboxSuggestion) {\r\n            return currentOmniboxSuggestion;\r\n        }\r\n        if (this.isAutoSuggestion()) {\r\n            return this.lastQuery || this.magicBox.getText();\r\n        }\r\n        return this.magicBox.getText();\r\n    };\r\n    Omnibox.prototype.getFirstSuggestion = function () {\r\n        if (this.lastSuggestions == null) {\r\n            return '';\r\n        }\r\n        if (this.lastSuggestions.length <= 0) {\r\n            return '';\r\n        }\r\n        var textSuggestion = _.find(this.lastSuggestions, function (suggestion) { return suggestion.text != null; });\r\n        if (textSuggestion == null) {\r\n            return '';\r\n        }\r\n        return textSuggestion.text;\r\n    };\r\n    Omnibox.prototype.updateQueryState = function () {\r\n        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, this.magicBox.getText());\r\n    };\r\n    Omnibox.prototype.handleQueryStateChanged = function (args) {\r\n        Assert_1.Assert.exists(args);\r\n        var q = args.value;\r\n        if (q != this.magicBox.getText()) {\r\n            this.magicBox.setText(q);\r\n        }\r\n    };\r\n    Omnibox.prototype.handleQuerySuccess = function () {\r\n        if (!this.isAutoSuggestion()) {\r\n            this.omniboxAnalytics.partialQueries = [];\r\n        }\r\n    };\r\n    Omnibox.prototype.handleDuringQuery = function (args) {\r\n        var _this = this;\r\n        // When the query results returns ... (args.promise)\r\n        args.promise.then(function () {\r\n            // Get a handle on a pending search as you type (those events are delayed, not sent instantly)\r\n            var pendingEvent = _this.usageAnalytics.getPendingSearchEvent();\r\n            if (pendingEvent instanceof PendingSearchAsYouTypeSearchEvent_1.PendingSearchAsYouTypeSearchEvent) {\r\n                pendingEvent.beforeResolve.then(function (evt) {\r\n                    // Check if we need to modify the event type beforeResolving it\r\n                    args.promise.then(function () {\r\n                        if (_this.modifyEventTo) {\r\n                            evt.modifyEventCause(_this.modifyEventTo);\r\n                            _this.modifyEventTo = null;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n    Omnibox.prototype.searchAsYouType = function (forceExecuteQuery) {\r\n        var _this = this;\r\n        if (forceExecuteQuery === void 0) { forceExecuteQuery = false; }\r\n        this.clearSearchAsYouType();\r\n        if (this.shouldExecuteQuery(true)) {\r\n            this.searchAsYouTypeTimeout = window.setTimeout(function () {\r\n                if (_this.suggestionShouldTriggerQuery() || forceExecuteQuery) {\r\n                    var suggestions_1 = _.map(_this.lastSuggestions, function (suggestion) { return suggestion.text; });\r\n                    var index_1 = _.indexOf(suggestions_1, _this.magicBox.getWordCompletion());\r\n                    _this.triggerNewQuery(true, function () {\r\n                        _this.usageAnalytics.logSearchAsYouType(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxAsYouType, _this.buildCustomDataForPartialQueries(index_1, suggestions_1));\r\n                    });\r\n                    _this.clearSearchAsYouType();\r\n                }\r\n            }, this.options.searchAsYouTypeDelay);\r\n        }\r\n    };\r\n    Omnibox.prototype.isAutoSuggestion = function () {\r\n        return this.options.enableSearchAsYouType && this.options.enableQuerySuggestAddon;\r\n    };\r\n    Omnibox.prototype.shouldExecuteQuery = function (searchAsYouType) {\r\n        var text = this.getQuery(searchAsYouType);\r\n        if (this.searchInterface.options.allowQueriesWithoutKeywords === false) {\r\n            return this.lastQuery != text && Utils_1.Utils.isNonEmptyString(text);\r\n        }\r\n        return this.lastQuery != text && text != null;\r\n    };\r\n    Omnibox.prototype.suggestionShouldTriggerQuery = function (suggestions) {\r\n        if (suggestions === void 0) { suggestions = this.lastSuggestions; }\r\n        if (this.shouldExecuteQuery(true)) {\r\n            if (suggestions && suggestions[0]) {\r\n                var suggestion = suggestions[0];\r\n                // If we have access to a confidence level, return true if we are equal or above the minimum confidence level.\r\n                if (suggestion && suggestion.executableConfidence != undefined) {\r\n                    return suggestion.executableConfidence >= MINIMUM_EXECUTABLE_CONFIDENCE;\r\n                }\r\n                // If we don't have access to a confidence level, return true only if it \"starts with\" the content of the search box\r\n                if (suggestion.text && suggestion.text.indexOf(this.magicBox.getText()) == 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Omnibox.prototype.clearSearchAsYouType = function () {\r\n        clearTimeout(this.searchAsYouTypeTimeout);\r\n        this.searchAsYouTypeTimeout = undefined;\r\n    };\r\n    Omnibox.prototype.getOmniboxAnalyticsEventCause = function () {\r\n        if (this.searchInterface instanceof SearchInterface_1.StandaloneSearchInterface) {\r\n            return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxFromLink;\r\n        }\r\n        return AnalyticsActionListMeta_1.analyticsActionCauseList.omniboxAnalytics;\r\n    };\r\n    Omnibox.ID = 'Omnibox';\r\n    Omnibox.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Omnibox: Omnibox,\r\n            QueryboxQueryParameters: QueryboxQueryParameters_1.QueryboxQueryParameters\r\n        });\r\n    };\r\n    /**\r\n     * The options for the omnibox\r\n     * @componentOptions\r\n     */\r\n    Omnibox.options = {\r\n        /**\r\n         * Specifies whether query completion suggestions appearing in the `Omnibox` should push the result list and facets\r\n         * down, rather than rendering themselves over them (and partially hiding them).\r\n         *\r\n         * Set this option as well as {@link Omnibox.options.enableSearchAsYouType} and\r\n         * {@link Omnibox.options.enableQuerySuggestAddon} to `true` for a cool effect!\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        inline: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n        /**\r\n         * Whether to automatically trigger a new query whenever the end user types additional text in the search box input.\r\n         *\r\n         * See also the [`searchAsYouTypeDelay`]{@link Omnibox.options.searchAsYouTypeDelay} option.\r\n         *\r\n         * **Note:**\r\n         * > If you set this option and the [`enableQuerySuggestAddon`]{@link Omnibox.options.enableQuerySuggestAddon}\r\n         * > option to `true`, the query suggestion feature returns the auto-completion of the currently typed keyword as\r\n         * > its first suggestion.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableSearchAsYouType: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n        /**\r\n         * If {@link Omnibox.options.enableSearchAsYouType} is `true`, specifies the delay (in milliseconds) before\r\n         * triggering a new query when the end user types in the `Omnibox`.\r\n         *\r\n         * Default value is `2000`. Minimum value is `0`.\r\n         */\r\n        searchAsYouTypeDelay: ComponentOptions_1.ComponentOptions.buildNumberOption({\r\n            defaultValue: 2000,\r\n            min: 0,\r\n            depend: 'enableSearchAsYouType',\r\n            section: 'Advanced Options'\r\n        }),\r\n        /**\r\n         * The `field` addon makes the `Omnibox` highlight and complete field syntax. Setting this option to `true` automatically sets\r\n         * the [enableQuerySyntax]{@link Querybox.options.enableQuerySyntax} option to `true` as a side effect.\r\n         *\r\n         * **Example:**\r\n         * > Suppose you want to search for PDF files. You start typing `@f` in the search box. The `Omnibox` provides\r\n         * > you with several matching fields. You select the `@filetype` field. Then, you start typing `=p` in the input.\r\n         * > This time, the `Omnibox` provides you with several matching values for the `@filetype` field. You select the\r\n         * > `pdf` suggestion, and submit your search request. Since the `enableQuerySyntax` option is set to `true`, the\r\n         * > Coveo Search API interprets the basic expression as query syntax and returns the items whose `@filetype` field\r\n         * > matches the `pdf` value.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableFieldAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({\r\n            defaultValue: false,\r\n            depend: 'enableQuerySyntax',\r\n            postProcessing: function (value, options) {\r\n                if (value) {\r\n                    options.enableQuerySyntax = true;\r\n                }\r\n                return value;\r\n            },\r\n            section: 'Advanced Options'\r\n        }),\r\n        enableSimpleFieldAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableFieldAddon' }),\r\n        listOfFields: ComponentOptions_1.ComponentOptions.buildFieldsOption({ depend: 'enableFieldAddon' }),\r\n        /**\r\n         * Whether to display Coveo Machine Learning (Coveo ML) query suggestions in the `Omnibox`.\r\n         *\r\n         * A Coveo ML query suggestions (QS) model must be properly configured in your Coveo Cloud organization, otherwise this\r\n         * option has no effect (see\r\n         * [Create a QS Model](https://docs.coveo.com/en/1832/#create-a-qs-model)).\r\n         *\r\n         * **Note:**\r\n         * > When you set this option and the [`enableSearchAsYouType`]{@link Omnibox.options.enableSearchAsYouType} option\r\n         * > to `true`, the query suggestion feature returns the auto-completion of the currently typed keyword as its first\r\n         * > query suggestion.\r\n         *\r\n         * @availablesince [December 2015 Release (v1.0.273)](https://docs.coveo.com/en/289/#december-2015-release-v10273)\r\n         */\r\n        enableQuerySuggestAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({\r\n            defaultValue: true,\r\n            alias: ['enableTopQueryAddon', 'enableRevealQuerySuggestAddon']\r\n        }),\r\n        /**\r\n         * If {@link Querybox.options.enableQuerySyntax} is `true`, specifies whether to enable the `query extension` addon.\r\n         *\r\n         * The `query extension` addon allows the Omnibox to complete the syntax for query extensions.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableQueryExtensionAddon: ComponentOptions_1.ComponentOptions.buildBooleanOption({\r\n            defaultValue: false,\r\n            depend: 'enableQuerySyntax',\r\n            postProcessing: function (value, options) {\r\n                if (value) {\r\n                    options.enableQuerySyntax = true;\r\n                }\r\n                return value;\r\n            },\r\n            section: 'Advanced Options'\r\n        }),\r\n        /**\r\n         * Specifies a placeholder for the input.\r\n         *\r\n         * @availablesince [July 2016 Release (v1.667.24)](https://docs.coveo.com/en/309/#july-2016-release-v166724)\r\n         */\r\n        placeholder: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption(),\r\n        /**\r\n         * Specifies a timeout (in milliseconds) before rejecting suggestions in the Omnibox.\r\n         *\r\n         * Default value is `2000`. Minimum value is `0`.\r\n         */\r\n        omniboxTimeout: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 2000, min: 0 }),\r\n        /**\r\n         * Specifies whether the Coveo Platform should try to interpret special query syntax such as field references in the\r\n         * query that the user enters in the Querybox (see\r\n         * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).\r\n         *\r\n         * Setting this option to `true` also causes the query syntax in the Querybox to highlight.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        enableQuerySyntax: ComponentOptions_1.ComponentOptions.buildBooleanOption({\r\n            defaultValue: false,\r\n            section: 'Advanced Options'\r\n        }),\r\n        /**\r\n         * Specifies the number of suggestions that should appear in standard ML-powered query suggestions.\r\n         *\r\n         * This option only affects the number of suggestions that appear with the {@link Omnibox.options.enableQuerySuggestAddon} option.\r\n         *\r\n         * This options does not affect the {@link AnalyticsSuggestions} or the {@link FieldSuggestions} component, which expose their own dedicated options for this parameter.\r\n         *\r\n         * Default value is `5`.\r\n         *\r\n         * Minimum value is `1`.\r\n         */\r\n        numberOfSuggestions: ComponentOptions_1.ComponentOptions.buildNumberOption({\r\n            defaultValue: 5,\r\n            min: 1\r\n        }),\r\n        /**\r\n         * The minimum number of characters required in the in the text input before displaying available query suggestions when focus is on the component.\r\n         *\r\n         * Note: Only effective when [enableQuerySuggestAddon]{@link Omnibox.options.enableQuerySuggestAddon} is true.\r\n         *\r\n         * depend: 'enableQuerySuggestAddon'\r\n         *\r\n         * Default (and minimum): 0, meaning that trending query suggestions are displayed when focus is on the component, even if its text input is empty.\r\n         *\r\n         * @availablesince [July 2019 Release (v2.6459)](https://docs.coveo.com/en/2938/)\r\n         */\r\n        querySuggestCharacterThreshold: ComponentOptions_1.ComponentOptions.buildNumberOption({\r\n            defaultValue: 0,\r\n            min: 0\r\n        }),\r\n        /**\r\n         * Whether to clear all active query filters when the end user submits a new query from the search box.\r\n         *\r\n         * Note: This does not include the filter expression enforced by the currently selected tab, if any.\r\n         *\r\n         * @availablesince [September 2019 Release (v2.7023)](https://docs.coveo.com/en/2990/)\r\n         */\r\n        clearFiltersOnNewQuery: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n    };\r\n    return Omnibox;\r\n}(Component_1.Component));\r\nexports.Omnibox = Omnibox;\r\nOmnibox.options = __assign({}, Omnibox.options, Querybox_1.Querybox.options);\r\nInitialization_1.Initialization.registerAutoCreateComponent(Omnibox);\r\n\n\n/***/ }),\n\n/***/ 191:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar SVGDom_1 = __webpack_require__(16);\r\nvar SVGIcons_1 = __webpack_require__(12);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\n/**\r\n * The SearchButton component renders a search icon that the end user can click to trigger a new query.\r\n *\r\n * See also the {@link Searchbox} component, which can automatically instantiate a SearchButton component along with a\r\n * {@link Querybox} component or an {@link Omnibox} component.\r\n */\r\nvar SearchButton = /** @class */ (function (_super) {\r\n    __extends(SearchButton, _super);\r\n    /**\r\n     * Creates a new SearchButton. Binds a `click` event on the element. Adds a search icon on the element.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the SearchButton component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function SearchButton(element, options, bindings) {\r\n        var _this = _super.call(this, element, SearchButton.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        new AccessibleButton_1.AccessibleButton()\r\n            .withElement(element)\r\n            .withOwner(_this.bind)\r\n            .withLabel(Strings_1.l('Search'))\r\n            .withSelectAction(function () { return _this.handleClick(); })\r\n            .build();\r\n        // Provide a magnifier icon if element contains nothing\r\n        if (Utils_1.Utils.trim(Dom_1.$$(_this.element).text()) == '') {\r\n            var svgMagnifierContainer = Dom_1.$$('span', { className: 'coveo-search-button' }, SVGIcons_1.SVGIcons.icons.search).el;\r\n            SVGDom_1.SVGDom.addClassToSVGInContainer(svgMagnifierContainer, 'coveo-search-button-svg');\r\n            var svgLoadingAnimationContainer = Dom_1.$$('span', { className: 'coveo-search-button-loading' }, SVGIcons_1.SVGIcons.icons.loading).el;\r\n            SVGDom_1.SVGDom.addClassToSVGInContainer(svgLoadingAnimationContainer, 'coveo-search-button-loading-svg');\r\n            element.appendChild(svgMagnifierContainer);\r\n            element.appendChild(svgLoadingAnimationContainer);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Triggers the `click` event handler, which logs a `searchboxSubmit` event in the usage analytics and executes a\r\n     * query.\r\n     */\r\n    SearchButton.prototype.click = function () {\r\n        this.handleClick();\r\n    };\r\n    SearchButton.prototype.handleClick = function () {\r\n        this.logger.debug('Performing query following button click');\r\n        this.updateQueryStateModelWithSearchboxQuery();\r\n        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.searchboxSubmit, {});\r\n        this.queryController.executeQuery({ origin: this });\r\n    };\r\n    SearchButton.prototype.updateQueryStateModelWithSearchboxQuery = function () {\r\n        var searchbox = this.options && this.options.searchbox;\r\n        searchbox && this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.q, searchbox.getText());\r\n    };\r\n    SearchButton.ID = 'SearchButton';\r\n    SearchButton.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            SearchButton: SearchButton\r\n        });\r\n    };\r\n    SearchButton.options = {};\r\n    return SearchButton;\r\n}(Component_1.Component));\r\nexports.SearchButton = SearchButton;\r\nInitialization_1.Initialization.registerAutoCreateComponent(SearchButton);\r\n\n\n/***/ }),\n\n/***/ 214:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ExpressionEndOfInput = {\r\n    id: 'end of input',\r\n    parse: null\r\n};\r\n\n\n/***/ }),\n\n/***/ 215:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result_1 = __webpack_require__(49);\r\nvar Result_2 = __webpack_require__(49);\r\nvar ExpressionConstant = /** @class */ (function () {\r\n    function ExpressionConstant(value, id) {\r\n        this.value = value;\r\n        this.id = id;\r\n    }\r\n    ExpressionConstant.prototype.parse = function (input, end) {\r\n        // the value must be at the start of the input\r\n        var success = input.indexOf(this.value) == 0;\r\n        var result = new Result_1.Result(success ? this.value : null, this, input);\r\n        // if is successful and we require the end but the length of parsed is\r\n        // lower than the input length, return a EndOfInputExpected Result\r\n        if (success && end && input.length > this.value.length) {\r\n            return new Result_2.EndOfInputResult(result);\r\n        }\r\n        return result;\r\n    };\r\n    ExpressionConstant.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    return ExpressionConstant;\r\n}());\r\nexports.ExpressionConstant = ExpressionConstant;\r\n\n\n/***/ }),\n\n/***/ 216:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Basic_1 = __webpack_require__(128);\r\nvar Date_1 = __webpack_require__(492);\r\nexports.Field = {\r\n    basicExpressions: ['FieldSimpleQuery', 'FieldQuery', 'Field'],\r\n    grammars: {\r\n        FieldQuery: '[Field][OptionalSpaces][FieldQueryOperation]',\r\n        FieldQueryOperation: ['FieldQueryValue', 'FieldQueryNumeric'],\r\n        FieldQueryValue: '[FieldOperator][OptionalSpaces][FieldValue]',\r\n        FieldQueryNumeric: '[FieldOperatorNumeric][OptionalSpaces][FieldValueNumeric]',\r\n        FieldSimpleQuery: '[FieldName]:[OptionalSpaces][FieldValue]',\r\n        Field: '@[FieldName]',\r\n        FieldName: /[a-zA-Z][a-zA-Z0-9\\.\\_]*/,\r\n        FieldOperator: /==|=|<>/,\r\n        FieldOperatorNumeric: /<=|>=|<|>/,\r\n        FieldValue: ['DateRange', 'NumberRange', 'DateRelative', 'Date', 'Number', 'FieldValueList', 'FieldValueString'],\r\n        FieldValueNumeric: ['DateRelative', 'Date', 'Number'],\r\n        FieldValueString: ['DoubleQuoted', 'FieldValueNotQuoted'],\r\n        FieldValueList: '([FieldValueString][FieldValueStringList*])',\r\n        FieldValueStringList: '[FieldValueSeparator][FieldValueString]',\r\n        FieldValueSeparator: / *, */,\r\n        FieldValueNotQuoted: /[^ \\(\\)\\[\\],]+/,\r\n        NumberRange: '[Number][Spaces?]..[Spaces?][Number]'\r\n    },\r\n    include: [Date_1.Date, Basic_1.Basic]\r\n};\r\n\n\n/***/ }),\n\n/***/ 217:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar underscore_1 = __webpack_require__(0);\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar Component_1 = __webpack_require__(7);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar ResultPreviewsManager_1 = __webpack_require__(558);\r\nvar QueryProcessor_1 = __webpack_require__(496);\r\nvar QueryUtils_1 = __webpack_require__(21);\r\nvar Direction;\r\n(function (Direction) {\r\n    Direction[\"Up\"] = \"Up\";\r\n    Direction[\"Down\"] = \"Down\";\r\n    Direction[\"Left\"] = \"Left\";\r\n    Direction[\"Right\"] = \"Right\";\r\n})(Direction = exports.Direction || (exports.Direction = {}));\r\nvar SuggestionsManager = /** @class */ (function () {\r\n    function SuggestionsManager(element, magicBoxContainer, inputManager, options) {\r\n        var _this = this;\r\n        this.element = element;\r\n        this.magicBoxContainer = magicBoxContainer;\r\n        this.inputManager = inputManager;\r\n        this.suggestionListboxID = \"coveo-magicbox-suggestions-\" + QueryUtils_1.QueryUtils.createGuid();\r\n        this.suggestionListboxClassName = \"coveo-magicbox-suggestions\";\r\n        this.root = Component_1.Component.resolveRoot(element);\r\n        this.options = underscore_1.defaults(options, {\r\n            suggestionClass: 'magic-box-suggestion',\r\n            selectedClass: 'magic-box-selected'\r\n        });\r\n        // Put in a sane default, so as to not reject every suggestions if not set on initialization\r\n        if (this.options.timeout == undefined) {\r\n            this.options.timeout = 500;\r\n        }\r\n        Dom_1.$$(this.element).on('mouseover', function (e) {\r\n            _this.handleMouseOver(e);\r\n        });\r\n        Dom_1.$$(this.element).on('mouseout', function (e) {\r\n            _this.handleMouseOut(e);\r\n        });\r\n        this.suggestionsProcessor = new QueryProcessor_1.QueryProcessor({ timeout: this.options.timeout });\r\n        this.resultPreviewsManager = new ResultPreviewsManager_1.ResultPreviewsManager(element, {\r\n            selectedClass: this.options.selectedClass,\r\n            timeout: this.options.timeout\r\n        });\r\n        this.suggestionsListbox = this.buildSuggestionsContainer();\r\n        Dom_1.$$(this.element).append(this.suggestionsListbox.el);\r\n        this.addAccessibilityProperties();\r\n        this.appendEmptySuggestionOption();\r\n    }\r\n    Object.defineProperty(SuggestionsManager.prototype, \"hasSuggestions\", {\r\n        get: function () {\r\n            return this.currentSuggestions && this.currentSuggestions.length > 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SuggestionsManager.prototype, \"hasFocus\", {\r\n        get: function () {\r\n            return Dom_1.$$(this.element).findClass(this.options.selectedClass).length > 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SuggestionsManager.prototype, \"hasPreviews\", {\r\n        get: function () {\r\n            return this.resultPreviewsManager.hasPreviews;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SuggestionsManager.prototype, \"focusedSuggestion\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return underscore_1.find(this.currentSuggestions, function (suggestion) { return suggestion.dom.classList.contains(_this.options.selectedClass); });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SuggestionsManager.prototype.handleMouseOver = function (e) {\r\n        var target = Dom_1.$$(e.target);\r\n        var parents = target.parents(this.options.suggestionClass);\r\n        if (target.hasClass(this.options.suggestionClass)) {\r\n            this.processMouseSelection(target.el);\r\n        }\r\n        else if (parents.length > 0 && this.element.contains(parents[0])) {\r\n            this.processMouseSelection(parents[0]);\r\n        }\r\n    };\r\n    SuggestionsManager.prototype.handleMouseOut = function (e) {\r\n        var target = Dom_1.$$(e.target);\r\n        var targetParents = target.parents(this.options.suggestionClass);\r\n        //e.relatedTarget is not available if moving off the browser window or is an empty object `{}` when moving out of namespace in LockerService.\r\n        if (e.relatedTarget && Dom_1.$$(e.relatedTarget).isValid()) {\r\n            var relatedTargetParents = Dom_1.$$(e.relatedTarget).parents(this.options.suggestionClass);\r\n            if (target.hasClass(this.options.selectedClass) && !Dom_1.$$(e.relatedTarget).hasClass(this.options.suggestionClass)) {\r\n                this.removeSelectedStatus(target.el);\r\n            }\r\n            else if (relatedTargetParents.length == 0 && targetParents.length > 0) {\r\n                this.removeSelectedStatus(targetParents[0]);\r\n            }\r\n        }\r\n        else {\r\n            if (target.hasClass(this.options.selectedClass)) {\r\n                this.removeSelectedStatus(target.el);\r\n            }\r\n            else if (targetParents.length > 0) {\r\n                this.removeSelectedStatus(targetParents[0]);\r\n            }\r\n        }\r\n        Dom_1.$$(this.root).trigger(OmniboxEvents_1.OmniboxEvents.querySuggestLoseFocus);\r\n    };\r\n    SuggestionsManager.prototype.moveDown = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.move(Direction.Down)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.moveUp = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.move(Direction.Up)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.moveLeft = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.move(Direction.Left)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.moveRight = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.move(Direction.Right)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.selectAndReturnKeyboardFocusedElement = function () {\r\n        var selected = this.keyboardFocusedElement;\r\n        if (selected) {\r\n            Dom_1.$$(selected).trigger('keyboardSelect');\r\n            // By definition, once an element has been \"selected\" with the keyboard,\r\n            // it is not longer \"active\" since the event has been processed.\r\n            this.keyboardFocusedElement = null;\r\n            this.inputManager.blur();\r\n        }\r\n        return selected;\r\n    };\r\n    SuggestionsManager.prototype.clearKeyboardFocusedElement = function () {\r\n        this.keyboardFocusedElement = null;\r\n    };\r\n    SuggestionsManager.prototype.receiveSuggestions = function (suggestions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, results, status;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0: return [4 /*yield*/, this.suggestionsProcessor.processQueries(suggestions)];\r\n                    case 1:\r\n                        _a = _b.sent(), results = _a.results, status = _a.status;\r\n                        if (status === QueryProcessor_1.ProcessingStatus.Overriden) {\r\n                            return [2 /*return*/, []];\r\n                        }\r\n                        this.updateSuggestions(results);\r\n                        return [2 /*return*/, results];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.clearSuggestions = function () {\r\n        this.updateSuggestions([]);\r\n    };\r\n    SuggestionsManager.prototype.updateSuggestions = function (suggestions) {\r\n        var _this = this;\r\n        this.suggestionsListbox.empty();\r\n        this.inputManager.activeDescendant = null;\r\n        this.currentSuggestions = suggestions;\r\n        Dom_1.$$(this.element).toggleClass('magic-box-hasSuggestion', this.hasSuggestions);\r\n        this.inputManager.expanded = this.hasSuggestions;\r\n        this.resultPreviewsManager.displaySearchResultPreviewsForSuggestion(null);\r\n        if (!this.hasSuggestions) {\r\n            this.appendEmptySuggestionOption();\r\n            Dom_1.$$(this.root).trigger(OmniboxEvents_1.OmniboxEvents.querySuggestLoseFocus);\r\n            return;\r\n        }\r\n        suggestions\r\n            .sort(function (a, b) { return (b.index || 0) - (a.index || 0); })\r\n            .forEach(function (suggestion) {\r\n            var dom = suggestion.dom ? _this.modifyDomFromExistingSuggestion(suggestion.dom) : _this.createDomFromSuggestion(suggestion);\r\n            dom.setAttribute('id', \"magic-box-suggestion-\" + underscore_1.indexOf(suggestions, suggestion));\r\n            dom.setAttribute('role', 'option');\r\n            dom.setAttribute('aria-selected', 'false');\r\n            dom.setAttribute('aria-label', dom.text());\r\n            dom['suggestion'] = suggestion;\r\n            _this.suggestionsListbox.append(dom.el);\r\n        });\r\n        Dom_1.$$(this.root).trigger(OmniboxEvents_1.OmniboxEvents.querySuggestRendered);\r\n    };\r\n    Object.defineProperty(SuggestionsManager.prototype, \"selectedSuggestion\", {\r\n        get: function () {\r\n            if (this.htmlElementIsSuggestion(this.keyboardFocusedElement)) {\r\n                return this.returnMoved(this.keyboardFocusedElement);\r\n            }\r\n            return null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    SuggestionsManager.prototype.processKeyboardSelection = function (suggestion) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        this.addSelectedStatus(suggestion);\r\n                        this.keyboardFocusedElement = suggestion;\r\n                        return [4 /*yield*/, this.updateSelectedSuggestion(this.focusedSuggestion)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.processKeyboardPreviewSelection = function (preview) {\r\n        this.addSelectedStatus(preview);\r\n        this.keyboardFocusedElement = preview;\r\n    };\r\n    SuggestionsManager.prototype.processMouseSelection = function (suggestion) {\r\n        this.addSelectedStatus(suggestion);\r\n        this.updateSelectedSuggestion(this.focusedSuggestion);\r\n        this.keyboardFocusedElement = null;\r\n    };\r\n    SuggestionsManager.prototype.buildSuggestionsContainer = function () {\r\n        return Dom_1.$$('div', {\r\n            className: this.suggestionListboxClassName,\r\n            id: this.suggestionListboxID,\r\n            role: 'listbox',\r\n            ariaLabel: 'Search Suggestions'\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.createDomFromSuggestion = function (suggestion) {\r\n        var _this = this;\r\n        var dom = Dom_1.$$('div', {\r\n            className: \"magic-box-suggestion \" + this.options.suggestionClass\r\n        });\r\n        suggestion.dom = dom.el;\r\n        dom.on('click', function () {\r\n            _this.selectSuggestion(suggestion);\r\n        });\r\n        dom.on('keyboardSelect', function () {\r\n            _this.selectSuggestion(suggestion);\r\n        });\r\n        if (suggestion.html) {\r\n            dom.el.innerHTML = suggestion.html;\r\n            return dom;\r\n        }\r\n        if (suggestion.text) {\r\n            dom.text(suggestion.text);\r\n            return dom;\r\n        }\r\n        if (suggestion.separator) {\r\n            dom.addClass('magic-box-suggestion-seperator');\r\n            var suggestionLabel = Dom_1.$$('div', {\r\n                className: 'magic-box-suggestion-seperator-label'\r\n            }, suggestion.separator);\r\n            dom.append(suggestionLabel.el);\r\n            return dom;\r\n        }\r\n        return dom;\r\n    };\r\n    SuggestionsManager.prototype.selectSuggestion = function (suggestion) {\r\n        suggestion.onSelect();\r\n        Dom_1.$$(this.root).trigger(OmniboxEvents_1.OmniboxEvents.querySuggestSelection, { suggestion: suggestion.text });\r\n    };\r\n    SuggestionsManager.prototype.appendEmptySuggestionOption = function () {\r\n        // Accessibility tools reports that a listbox element must always have at least one child with an option\r\n        // Even if there is no suggestions to show.\r\n        this.suggestionsListbox.append(Dom_1.$$('div', { role: 'option' }).el);\r\n    };\r\n    SuggestionsManager.prototype.modifyDomFromExistingSuggestion = function (dom) {\r\n        // this need to be done if the selection is in cache and the dom is set in the suggestion\r\n        this.removeSelectedStatus(dom);\r\n        var found = dom.classList.contains(this.options.suggestionClass) ? dom : Dom_1.$$(dom).find('.' + this.options.suggestionClass);\r\n        this.removeSelectedStatus(found);\r\n        return Dom_1.$$(dom);\r\n    };\r\n    SuggestionsManager.prototype.move = function (direction) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var firstPreview;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!this.resultPreviewsManager.focusedPreviewElement) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.moveWithinPreview(direction)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 2:\r\n                        if (direction === Direction.Right || direction === Direction.Left) {\r\n                            firstPreview = this.resultPreviewsManager.previewElements[0];\r\n                            if (firstPreview) {\r\n                                this.processKeyboardPreviewSelection(firstPreview);\r\n                                return [2 /*return*/];\r\n                            }\r\n                        }\r\n                        return [4 /*yield*/, this.moveWithinSuggestion(direction)];\r\n                    case 3:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.moveWithinSuggestion = function (direction) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var currentlySelected, selectables, currentIndex, index;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        currentlySelected = Dom_1.$$(this.element).find(\".\" + this.options.selectedClass);\r\n                        selectables = Dom_1.$$(this.element).findAll(\".\" + this.options.suggestionClass);\r\n                        currentIndex = underscore_1.indexOf(selectables, currentlySelected);\r\n                        index = direction === Direction.Up ? currentIndex - 1 : currentIndex + 1;\r\n                        index = (index + selectables.length) % selectables.length;\r\n                        return [4 /*yield*/, this.selectQuerySuggest(selectables[index])];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.selectQuerySuggest = function (suggestion) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (!suggestion) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.processKeyboardSelection(suggestion)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        this.keyboardFocusedElement = null;\r\n                        this.inputManager.input.removeAttribute('aria-activedescendant');\r\n                        _a.label = 3;\r\n                    case 3: return [2 /*return*/, suggestion];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.moveWithinPreview = function (direction) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var newFocusedPreview;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        newFocusedPreview = this.resultPreviewsManager.getElementInDirection(direction);\r\n                        if (!!newFocusedPreview) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, this.selectQuerySuggest(this.resultPreviewsManager.previewsOwner.dom)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 2:\r\n                        this.processKeyboardPreviewSelection(newFocusedPreview);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.returnMoved = function (selected) {\r\n        if (selected) {\r\n            if (selected['suggestion']) {\r\n                return selected['suggestion'];\r\n            }\r\n            if (selected['no-text-suggestion']) {\r\n                return null;\r\n            }\r\n            if (selected instanceof HTMLElement) {\r\n                return {\r\n                    text: Dom_1.$$(selected).text()\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    SuggestionsManager.prototype.addSelectedStatus = function (element) {\r\n        var selected = this.element.getElementsByClassName(this.options.selectedClass);\r\n        for (var i = 0; i < selected.length; i++) {\r\n            var elem = selected.item(i);\r\n            this.removeSelectedStatus(elem);\r\n        }\r\n        Dom_1.$$(element).addClass(this.options.selectedClass);\r\n        this.updateAreaSelectedIfDefined(element, 'true');\r\n    };\r\n    SuggestionsManager.prototype.updateSelectedSuggestion = function (suggestion) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        Dom_1.$$(this.root).trigger(OmniboxEvents_1.OmniboxEvents.querySuggestGetFocus, {\r\n                            suggestion: suggestion.text\r\n                        });\r\n                        return [4 /*yield*/, this.resultPreviewsManager.displaySearchResultPreviewsForSuggestion(suggestion)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    SuggestionsManager.prototype.removeSelectedStatus = function (suggestion) {\r\n        Dom_1.$$(suggestion).removeClass(this.options.selectedClass);\r\n        this.updateAreaSelectedIfDefined(suggestion, 'false');\r\n    };\r\n    SuggestionsManager.prototype.updateAreaSelectedIfDefined = function (element, value) {\r\n        if (Dom_1.$$(element).getAttribute('aria-selected')) {\r\n            this.inputManager.activeDescendant = element;\r\n            Dom_1.$$(element).setAttribute('aria-selected', value);\r\n        }\r\n    };\r\n    SuggestionsManager.prototype.addAccessibilityProperties = function () {\r\n        this.addAccessibilityPropertiesForMagicBox();\r\n        this.addAccessibilityPropertiesForInput();\r\n    };\r\n    SuggestionsManager.prototype.addAccessibilityPropertiesForMagicBox = function () {\r\n        var magicBox = Dom_1.$$(this.magicBoxContainer);\r\n        magicBox.setAttribute('role', 'search');\r\n        magicBox.setAttribute('aria-haspopup', 'listbox');\r\n    };\r\n    SuggestionsManager.prototype.addAccessibilityPropertiesForInput = function () {\r\n        var input = Dom_1.$$(this.inputManager.input);\r\n        this.inputManager.activeDescendant = null;\r\n        this.inputManager.expanded = false;\r\n        input.setAttribute('aria-owns', this.suggestionListboxID);\r\n        input.setAttribute('aria-controls', this.suggestionListboxID);\r\n    };\r\n    SuggestionsManager.prototype.htmlElementIsSuggestion = function (selected) {\r\n        var omniboxSelectables = Dom_1.$$(this.element).findAll(\".\" + this.options.suggestionClass);\r\n        return underscore_1.indexOf(omniboxSelectables, selected) > -1;\r\n    };\r\n    return SuggestionsManager;\r\n}());\r\nexports.SuggestionsManager = SuggestionsManager;\r\n\n\n/***/ }),\n\n/***/ 218:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar underscore_1 = __webpack_require__(0);\r\nvar Core_1 = __webpack_require__(20);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar doMagicBoxExport_1 = __webpack_require__(556);\r\nvar InputManager_1 = __webpack_require__(495);\r\nvar MagicBoxClear_1 = __webpack_require__(559);\r\nvar SuggestionsManager_1 = __webpack_require__(217);\r\nvar MagicBoxInstance = /** @class */ (function () {\r\n    function MagicBoxInstance(element, grammar, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = this;\r\n        this.element = element;\r\n        this.grammar = grammar;\r\n        this.options = options;\r\n        this.lastSuggestions = [];\r\n        if (underscore_1.isUndefined(this.options.inline)) {\r\n            this.options.inline = false;\r\n        }\r\n        Dom_1.$$(element).addClass('magic-box');\r\n        if (this.options.inline) {\r\n            Dom_1.$$(element).addClass('magic-box-inline');\r\n        }\r\n        this.result = this.grammar.parse('');\r\n        this.displayedResult = this.result.clean();\r\n        var inputContainer = Dom_1.$$(element).find('.magic-box-input');\r\n        if (!inputContainer) {\r\n            inputContainer = document.createElement('div');\r\n            inputContainer.className = 'magic-box-input';\r\n            element.appendChild(inputContainer);\r\n        }\r\n        this.inputManager = new InputManager_1.InputManager(inputContainer, function (text, wordCompletion) {\r\n            if (!wordCompletion) {\r\n                _this.setText(text);\r\n                _this.addSuggestions();\r\n                _this.onchange && _this.onchange();\r\n            }\r\n            else {\r\n                _this.setText(text);\r\n                _this.onselect && _this.onselect(_this.firstSuggestionWithText);\r\n            }\r\n        }, this);\r\n        this.inputManager.ontabpress = function () {\r\n            _this.ontabpress && _this.ontabpress();\r\n        };\r\n        var existingValue = this.inputManager.getValue();\r\n        if (existingValue) {\r\n            this.displayedResult.input = existingValue;\r\n        }\r\n        this.inputManager.setResult(this.displayedResult);\r\n        var suggestionsContainer = document.createElement('div');\r\n        suggestionsContainer.className = 'magic-box-suggestions';\r\n        this.element.appendChild(suggestionsContainer);\r\n        this.suggestionsManager = new SuggestionsManager_1.SuggestionsManager(suggestionsContainer, this.element, this.inputManager, {\r\n            suggestionClass: this.options.selectableSuggestionClass,\r\n            selectedClass: this.options.selectedSuggestionClass,\r\n            timeout: this.options.suggestionTimeout\r\n        });\r\n        this.magicBoxClear = new MagicBoxClear_1.MagicBoxClear(this);\r\n        this.setupHandler();\r\n    }\r\n    Object.defineProperty(MagicBoxInstance.prototype, \"firstSuggestionWithText\", {\r\n        get: function () {\r\n            return underscore_1.find(this.lastSuggestions, function (suggestion) { return suggestion.text; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MagicBoxInstance.prototype, \"firstSuggestionText\", {\r\n        get: function () {\r\n            var firstSuggestionWithText = this.firstSuggestionWithText;\r\n            return firstSuggestionWithText ? firstSuggestionWithText.text : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MagicBoxInstance.prototype.getResult = function () {\r\n        return this.result;\r\n    };\r\n    MagicBoxInstance.prototype.getDisplayedResult = function () {\r\n        return this.displayedResult;\r\n    };\r\n    MagicBoxInstance.prototype.setText = function (text) {\r\n        Dom_1.$$(this.element).toggleClass('magic-box-notEmpty', text.length > 0);\r\n        this.magicBoxClear.toggleTabindexAndAriaHidden(text.length > 0);\r\n        this.result = this.grammar.parse(text);\r\n        this.displayedResult = this.result.clean();\r\n        this.inputManager.setResult(this.displayedResult);\r\n    };\r\n    MagicBoxInstance.prototype.setCursor = function (index) {\r\n        this.inputManager.setCursor(index);\r\n    };\r\n    MagicBoxInstance.prototype.getCursor = function () {\r\n        return this.inputManager.getCursor();\r\n    };\r\n    MagicBoxInstance.prototype.resultAtCursor = function (match) {\r\n        return this.displayedResult.resultAt(this.getCursor(), match);\r\n    };\r\n    MagicBoxInstance.prototype.setupHandler = function () {\r\n        var _this = this;\r\n        this.inputManager.onblur = function () {\r\n            Dom_1.$$(_this.element).removeClass('magic-box-hasFocus');\r\n            _this.onblur && _this.onblur();\r\n            if (!_this.options.inline) {\r\n                _this.clearSuggestion();\r\n            }\r\n        };\r\n        this.inputManager.onfocus = function () {\r\n            Dom_1.$$(_this.element).addClass('magic-box-hasFocus');\r\n            _this.addSuggestions();\r\n            _this.onfocus && _this.onfocus();\r\n        };\r\n        this.inputManager.onkeydown = function (key) {\r\n            if (_this.shouldMoveInSuggestions(key)) {\r\n                return false;\r\n            }\r\n            if (key === Core_1.KEYBOARD.ENTER) {\r\n                var suggestion = _this.suggestionsManager.selectAndReturnKeyboardFocusedElement();\r\n                if (suggestion == null) {\r\n                    _this.onsubmit && _this.onsubmit();\r\n                }\r\n                return false;\r\n            }\r\n            else if (key === Core_1.KEYBOARD.ESCAPE) {\r\n                _this.clearSuggestion();\r\n                _this.blur();\r\n            }\r\n            else {\r\n                _this.suggestionsManager.clearKeyboardFocusedElement();\r\n            }\r\n            return true;\r\n        };\r\n        this.inputManager.onchangecursor = function () {\r\n            _this.addSuggestions();\r\n        };\r\n        this.inputManager.onkeyup = function (key) {\r\n            _this.onmove && _this.onmove();\r\n            if (!_this.shouldMoveInSuggestions(key)) {\r\n                return true;\r\n            }\r\n            switch (key) {\r\n                case Core_1.KEYBOARD.UP_ARROW:\r\n                    _this.suggestionsManager.moveUp();\r\n                    break;\r\n                case Core_1.KEYBOARD.DOWN_ARROW:\r\n                    _this.suggestionsManager.moveDown();\r\n                    break;\r\n                case Core_1.KEYBOARD.LEFT_ARROW:\r\n                    _this.suggestionsManager.moveLeft();\r\n                    break;\r\n                case Core_1.KEYBOARD.RIGHT_ARROW:\r\n                    _this.suggestionsManager.moveRight();\r\n                    break;\r\n            }\r\n            if (_this.suggestionsManager.selectedSuggestion) {\r\n                _this.focusOnSuggestion(_this.suggestionsManager.selectedSuggestion);\r\n            }\r\n            _this.onchange && _this.onchange();\r\n            return false;\r\n        };\r\n    };\r\n    MagicBoxInstance.prototype.addSuggestions = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var suggestions;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.suggestionsManager.receiveSuggestions(this.getSuggestions != null ? this.getSuggestions() : [])];\r\n                    case 1:\r\n                        suggestions = _a.sent();\r\n                        this.addSelectEventHandlers(suggestions);\r\n                        this.inputManager.setWordCompletion(this.firstSuggestionText);\r\n                        this.onSuggestions(suggestions);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MagicBoxInstance.prototype.shouldMoveInSuggestions = function (key) {\r\n        switch (key) {\r\n            case Core_1.KEYBOARD.UP_ARROW:\r\n            case Core_1.KEYBOARD.DOWN_ARROW:\r\n                return true;\r\n            case Core_1.KEYBOARD.LEFT_ARROW:\r\n            case Core_1.KEYBOARD.RIGHT_ARROW:\r\n                if (this.suggestionsManager.hasFocus && this.suggestionsManager.hasPreviews) {\r\n                    return true;\r\n                }\r\n        }\r\n        return false;\r\n    };\r\n    MagicBoxInstance.prototype.addSelectEventHandlers = function (suggestions) {\r\n        var _this = this;\r\n        underscore_1.each(suggestions, function (suggestion) {\r\n            if (suggestion.onSelect == null && suggestion.text != null) {\r\n                suggestion.onSelect = function () {\r\n                    _this.setText(suggestion.text);\r\n                    _this.onselect && _this.onselect(suggestion);\r\n                };\r\n            }\r\n        });\r\n    };\r\n    MagicBoxInstance.prototype.focus = function () {\r\n        Dom_1.$$(this.element).addClass('magic-box-hasFocus');\r\n        this.inputManager.focus();\r\n    };\r\n    MagicBoxInstance.prototype.blur = function () {\r\n        this.inputManager.blur();\r\n    };\r\n    MagicBoxInstance.prototype.clearSuggestion = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                this.inputManager.setWordCompletion(null);\r\n                this.suggestionsManager.clearSuggestions();\r\n                this.onSuggestions([]);\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    MagicBoxInstance.prototype.focusOnSuggestion = function (suggestion) {\r\n        if (suggestion == null || suggestion.text == null) {\r\n            this.inputManager.setResult(this.displayedResult, this.firstSuggestionText);\r\n        }\r\n        else {\r\n            this.inputManager.setResult(this.grammar.parse(suggestion.text).clean(), suggestion.text);\r\n        }\r\n    };\r\n    MagicBoxInstance.prototype.getText = function () {\r\n        return this.inputManager.getValue();\r\n    };\r\n    MagicBoxInstance.prototype.getWordCompletion = function () {\r\n        return this.inputManager.getWordCompletion();\r\n    };\r\n    MagicBoxInstance.prototype.clear = function () {\r\n        this.setText('');\r\n        this.clearSuggestion();\r\n        this.focus();\r\n        this.onclear && this.onclear();\r\n    };\r\n    MagicBoxInstance.prototype.hasSuggestions = function () {\r\n        return this.suggestionsManager.hasSuggestions;\r\n    };\r\n    return MagicBoxInstance;\r\n}());\r\nexports.MagicBoxInstance = MagicBoxInstance;\r\nfunction createMagicBox(element, grammar, options) {\r\n    return new MagicBoxInstance(element, grammar, options);\r\n}\r\nexports.createMagicBox = createMagicBox;\r\nfunction requestAnimationFrame(callback) {\r\n    if ('requestAnimationFrame' in window) {\r\n        return window.requestAnimationFrame(callback);\r\n    }\r\n    return setTimeout(callback);\r\n}\r\nexports.requestAnimationFrame = requestAnimationFrame;\r\ndoMagicBoxExport_1.doMagicBoxExport();\r\n\n\n/***/ }),\n\n/***/ 219:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _ = __webpack_require__(0);\r\nvar MagicBoxUtils = /** @class */ (function () {\r\n    function MagicBoxUtils() {\r\n    }\r\n    MagicBoxUtils.escapeRegExp = function (str) {\r\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n    };\r\n    MagicBoxUtils.highlightText = function (text, highligth, ignoreCase, matchClass, doNotMatchClass) {\r\n        var _this = this;\r\n        if (ignoreCase === void 0) { ignoreCase = false; }\r\n        if (matchClass === void 0) { matchClass = 'magic-box-hightlight'; }\r\n        if (doNotMatchClass === void 0) { doNotMatchClass = ''; }\r\n        if (highligth.length == 0) {\r\n            return text;\r\n        }\r\n        var escaped = this.escapeRegExp(highligth);\r\n        var stringRegex = '(' + escaped + ')|(.*?(?=' + escaped + ')|.+)';\r\n        var regex = new RegExp(stringRegex, ignoreCase ? 'gi' : 'g');\r\n        return text.replace(regex, function (text, match, notmatch) { return _this.escapeText(match != null ? matchClass : doNotMatchClass, text); });\r\n    };\r\n    MagicBoxUtils.escapeText = function (classname, text) {\r\n        return \"<span class=\\\"\" + classname + \"\\\">\" + _.escape(text) + \"</span>\";\r\n    };\r\n    return MagicBoxUtils;\r\n}());\r\nexports.MagicBoxUtils = MagicBoxUtils;\r\n\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(664);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar SVGDom_1 = __webpack_require__(16);\r\nvar SVGIcons_1 = __webpack_require__(12);\r\nvar SearchBoxResize_1 = __webpack_require__(665);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar Omnibox_1 = __webpack_require__(189);\r\nvar Querybox_1 = __webpack_require__(135);\r\nvar SearchButton_1 = __webpack_require__(191);\r\nvar underscore_1 = __webpack_require__(0);\r\n/**\r\n * The `Searchbox` component allows you to conveniently instantiate two components which end users frequently use to\r\n * enter and submit queries.\r\n *\r\n * This component attaches itself to a `div` element and takes care of instantiating either a\r\n * [`Querybox`]{@link Querybox} or an [`Omnibox`]{@link Omnibox} component (see the\r\n * [`enableOmnibox`]{@link Searchbox.options.enableOmnibox} option). Optionally, the `Searchbox` can also instantiate a\r\n * [`SearchButton`]{@link SearchButton} component, and append it inside the same `div` (see the\r\n * [`addSearchButton`]{@link Searchbox.options.addSearchButton} option).\r\n */\r\nvar Searchbox = /** @class */ (function (_super) {\r\n    __extends(Searchbox, _super);\r\n    /**\r\n     * Creates a new `Searchbox` component. Creates a new `Coveo.Magicbox` instance and wraps magic box methods (`onblur`,\r\n     * `onsubmit`, etc.). Binds event on `buildingQuery` and on redirection (for standalone box).\r\n     * @param element The HTMLElement on which to instantiate the component. This cannot be an HTMLInputElement for\r\n     * technical reasons.\r\n     * @param options The options for the `Searchbox component`. These will merge with the options from the component set\r\n     * directly on the `HTMLElement`.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function Searchbox(element, options, bindings) {\r\n        var _this = _super.call(this, element, Searchbox.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.bindings = bindings;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Searchbox, options);\r\n        if (_this.options.inline) {\r\n            Dom_1.$$(element).addClass('coveo-inline');\r\n        }\r\n        _this.initSearchBox();\r\n        _this.initSearchButton();\r\n        _this.applyMagicBoxIcon();\r\n        _this.applyCustomHeight();\r\n        return _this;\r\n    }\r\n    Searchbox.prototype.initSearchBox = function () {\r\n        var div = document.createElement('div');\r\n        this.element.appendChild(div);\r\n        if (this.options.enableOmnibox) {\r\n            this.searchbox = new Omnibox_1.Omnibox(div, this.options, this.bindings);\r\n        }\r\n        else {\r\n            this.searchbox = new Querybox_1.Querybox(div, this.options, this.bindings);\r\n        }\r\n    };\r\n    Searchbox.prototype.initSearchButton = function () {\r\n        if (!this.options.addSearchButton) {\r\n            return;\r\n        }\r\n        var anchor = Dom_1.$$('a');\r\n        this.element.appendChild(anchor.el);\r\n        this.searchButton = new SearchButton_1.SearchButton(anchor.el, { searchbox: this.searchbox }, this.bindings);\r\n    };\r\n    Searchbox.prototype.applyMagicBoxIcon = function () {\r\n        var magicBoxIcon = Dom_1.$$(this.element).find('.magic-box-icon');\r\n        magicBoxIcon.innerHTML = SVGIcons_1.SVGIcons.icons.mainClear;\r\n        SVGDom_1.SVGDom.addClassToSVGInContainer(magicBoxIcon, 'magic-box-clear-svg');\r\n    };\r\n    Searchbox.prototype.applyCustomHeight = function () {\r\n        if (!this.options.height) {\r\n            return;\r\n        }\r\n        Dom_1.$$(this.element).addClass('coveo-custom-height');\r\n        SearchBoxResize_1.SearchBoxResize.resize(this.element, this.options.height);\r\n    };\r\n    Searchbox.ID = 'Searchbox';\r\n    Searchbox.parent = Omnibox_1.Omnibox;\r\n    Searchbox.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Searchbox: Searchbox,\r\n            SearchButton: SearchButton_1.SearchButton,\r\n            Omnibox: Omnibox_1.Omnibox,\r\n            Querybox: Querybox_1.Querybox\r\n        });\r\n    };\r\n    /**\r\n     * Possible options for the {@link Searchbox}\r\n     * @componentOptions\r\n     */\r\n    Searchbox.options = {\r\n        /**\r\n         * Specifies whether to instantiate a [`SearchButton`]{@link SearchButton} component.\r\n         *\r\n         * Default value is `true`.\r\n         */\r\n        addSearchButton: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n        /**\r\n         * A custom height for the search box (in pixels).\r\n         *\r\n         * Note: Avoid setting this option if you want to modify the search box styling through custom CSS.\r\n         *\r\n         * Minimum value is `25`\r\n         *\r\n         * Default behavior: The most specific CSS rules targeting HTML elements generated by the Searchbox component are used\r\n         * (e.g., if you are only using the default CoveoFullSearch.css stylesheet with no further styling customizations,\r\n         * the search box height will be set to 50 pixels by default).\r\n         *\r\n         * @availablesince [July 2019 Release (v2.6459)](https://docs.coveo.com/en/2938/)\r\n         */\r\n        height: ComponentOptions_1.ComponentOptions.buildNumberOption({ min: 25 }),\r\n        /**\r\n         * Specifies whether to instantiate an [`Omnibox`]{@link Omnibox} component.\r\n         *\r\n         * When this option is `false`, the `Searchbox` instantiates a [`Querybox`]{@link Querybox} component instead.\r\n         *\r\n         * **Note:**\r\n         * > You can use configuration options specific to the component you choose to instantiate with the `Searchbox`.\r\n         *\r\n         * **Examples:**\r\n         *\r\n         * In this first case, the `Searchbox` instantiates a `Querybox` component. You can configure this `Querybox`\r\n         * instance using any of the `Querybox` component options, such as\r\n         * [`triggerQueryOnClear`]{@link Querybox.options.triggerQueryOnClear}.\r\n         * ```html\r\n         * <div class='CoveoSearchbox' data-trigger-query-on-clear='true'></div>\r\n         * ```\r\n         *\r\n         * In this second case, the `Searchbox` instantiates an `Omnibox` component. You can configure this `Omnibox`\r\n         * instance using any of the `Omnibox` component options, such as\r\n         * [`placeholder`]{@link Omnibox.options.placeholder}.\r\n         * Moreover, since the `Omnibox` component inherits all of the `Querybox` component options, the\r\n         * `data-trigger-query-on-clear` option from the previous example would also work on this `Omnibox` instance.\r\n         * ```html\r\n         * <div class='CoveoSearchbox' data-enable-omnibox='true' data-placeholder='Please enter a query'></div>\r\n         * ```\r\n         *\r\n         * Default value is `true`.\r\n         */\r\n        enableOmnibox: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true })\r\n    };\r\n    return Searchbox;\r\n}(Component_1.Component));\r\nexports.Searchbox = Searchbox;\r\nSearchbox.options = __assign({}, Searchbox.options, Omnibox_1.Omnibox.options, Querybox_1.Querybox.options);\r\n// Only parse omnibox option if omnibox is enabled\r\nunderscore_1.each(Searchbox.options, function (value, key) {\r\n    if (key in Omnibox_1.Omnibox.options && !(key in Querybox_1.Querybox.options)) {\r\n        Searchbox.options[key] = underscore_1.extend({ depend: 'enableOmnibox' }, value);\r\n    }\r\n});\r\nInitialization_1.Initialization.registerAutoCreateComponent(Searchbox);\r\n\n\n/***/ }),\n\n/***/ 484:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result_1 = __webpack_require__(49);\r\nvar RefResult_1 = __webpack_require__(485);\r\nvar ExpressionEndOfInput_1 = __webpack_require__(214);\r\nvar _ = __webpack_require__(0);\r\nvar ExpressionRef = /** @class */ (function () {\r\n    function ExpressionRef(ref, occurrence, id, grammar) {\r\n        this.ref = ref;\r\n        this.occurrence = occurrence;\r\n        this.id = id;\r\n        this.grammar = grammar;\r\n    }\r\n    ExpressionRef.prototype.parse = function (input, end) {\r\n        var ref = this.grammar.getExpression(this.ref);\r\n        if (ref == null) {\r\n            throw new Error('Expression not found:' + this.ref);\r\n        }\r\n        if (this.occurrence == '?' || this.occurrence == null) {\r\n            return this.parseOnce(input, end, ref);\r\n        }\r\n        else {\r\n            return this.parseMany(input, end, ref);\r\n        }\r\n    };\r\n    ExpressionRef.prototype.parseOnce = function (input, end, ref) {\r\n        var refResult = ref.parse(input, end);\r\n        var success = refResult.isSuccess();\r\n        if (!success && this.occurrence == '?') {\r\n            if (end) {\r\n                // if end was found\r\n                if (input.length == 0) {\r\n                    return new RefResult_1.RefResult([], this, input, refResult);\r\n                }\r\n                // if end was not found and all error expression are EndOfInput, reparse with end = false.\r\n                if (_.all(refResult.getBestExpect(), function (expect) { return expect.expression == ExpressionEndOfInput_1.ExpressionEndOfInput; })) {\r\n                    return new RefResult_1.RefResult([new Result_1.Result(null, ExpressionEndOfInput_1.ExpressionEndOfInput, input)], this, input, refResult);\r\n                }\r\n                return refResult;\r\n            }\r\n            // the ref is not required and it do not need to end the input\r\n            return new RefResult_1.RefResult([], this, input, null);\r\n        }\r\n        return new RefResult_1.RefResult([refResult], this, input, success ? null : refResult);\r\n    };\r\n    ExpressionRef.prototype.parseMany = function (input, end, ref) {\r\n        var subResults = [];\r\n        var subResult;\r\n        var subInput = input;\r\n        var success;\r\n        // try to parse until it do not match, do not manage the end yet\r\n        do {\r\n            subResult = ref.parse(subInput, false);\r\n            success = subResult.isSuccess();\r\n            if (success) {\r\n                subResults.push(subResult);\r\n                subInput = subInput.substr(subResult.getLength());\r\n            }\r\n        } while (success && subResult.input != subInput);\r\n        // minimal occurance of a ref\r\n        var requiredOccurance = _.isNumber(this.occurrence) ? this.occurrence : this.occurrence == '+' ? 1 : 0;\r\n        // if the minimal occurance is not reached add the fail result to the list\r\n        if (subResults.length < requiredOccurance) {\r\n            subResults.push(subResult);\r\n        }\r\n        else if (end) {\r\n            // if there is at least one match, check if the last match is at the end\r\n            if (subResults.length > 0) {\r\n                var last = _.last(subResults);\r\n                subResult = ref.parse(last.input, true);\r\n                if (subResult.isSuccess()) {\r\n                    // if successful, replace the last subResult by the one with end\r\n                    subResults[subResults.length - 1] = subResult;\r\n                }\r\n                else {\r\n                    // if not successful, we keep the last successful result and we add a endOfInputExpected Result after it\r\n                    subResults.push(new Result_1.Result(null, ExpressionEndOfInput_1.ExpressionEndOfInput, last.input.substr(last.getLength())));\r\n                    // we parse back the last with the length of the successful Result (at the same place we put the endOfInputExpected) and put it in failAttempt\r\n                    subResult = ref.parse(last.input.substr(last.getLength()), true);\r\n                }\r\n            }\r\n            else if (input.length != 0) {\r\n                // if there is no result at all and we are not at the end, return a endOfInputExpected Result\r\n                var endOfInput = new Result_1.Result(null, ExpressionEndOfInput_1.ExpressionEndOfInput, input);\r\n                return new RefResult_1.RefResult([endOfInput], this, input, subResult);\r\n            }\r\n        }\r\n        return new RefResult_1.RefResult(subResults, this, input, subResult);\r\n    };\r\n    ExpressionRef.prototype.toString = function () {\r\n        return this.id;\r\n    };\r\n    return ExpressionRef;\r\n}());\r\nexports.ExpressionRef = ExpressionRef;\r\n\n\n/***/ }),\n\n/***/ 485:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result_1 = __webpack_require__(49);\r\nvar _ = __webpack_require__(0);\r\nvar RefResult = /** @class */ (function (_super) {\r\n    __extends(RefResult, _super);\r\n    function RefResult(results, expression, input, lastResult) {\r\n        var _this = _super.call(this, results, expression, input) || this;\r\n        _this.expression = expression;\r\n        _this.input = input;\r\n        if (_.last(results) != lastResult) {\r\n            _this.failAttempt = lastResult;\r\n            if (_this.failAttempt != null) {\r\n                _this.failAttempt.parent = _this;\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Return all fail result.\r\n     */\r\n    RefResult.prototype.getExpect = function () {\r\n        var expect = _super.prototype.getExpect.call(this);\r\n        // add the failAttempt to the expect\r\n        if (this.failAttempt != null) {\r\n            return expect.concat(this.failAttempt.getExpect());\r\n        }\r\n        return expect;\r\n    };\r\n    /**\r\n     * Clean the result to have the most relevant result. If the result is successful just return a clone of it.\r\n     */\r\n    RefResult.prototype.clean = function (path) {\r\n        // if there is no failAttempt, we will use the default clean\r\n        if (this.failAttempt != null && (path != null || !this.isSuccess())) {\r\n            path = path || _.last(this.getBestExpect()).path(this);\r\n            var next = _.first(path);\r\n            // if the next is in the subResults, not the failAttempt, do the default clean;\r\n            if (next != null && next == this.failAttempt) {\r\n                var last = _.last(this.subResults);\r\n                // if the last is not successful, remove it because we want the failAttempt path\r\n                var subResults = _.map(last != null && last.isSuccess() ? this.subResults : _.initial(this.subResults), function (subResult) {\r\n                    return subResult.clean();\r\n                });\r\n                subResults.push(next.clean(_.rest(path)));\r\n                return new Result_1.Result(subResults, this.expression, this.input);\r\n            }\r\n        }\r\n        return _super.prototype.clean.call(this, path);\r\n    };\r\n    return RefResult;\r\n}(Result_1.Result));\r\nexports.RefResult = RefResult;\r\n\n\n/***/ }),\n\n/***/ 486:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar OptionResult_1 = __webpack_require__(487);\r\nvar ExpressionOptions = /** @class */ (function () {\r\n    function ExpressionOptions(parts, id) {\r\n        this.parts = parts;\r\n        this.id = id;\r\n    }\r\n    ExpressionOptions.prototype.parse = function (input, end) {\r\n        var failAttempt = [];\r\n        for (var i = 0; i < this.parts.length; i++) {\r\n            var subResult = this.parts[i].parse(input, end);\r\n            if (subResult.isSuccess()) {\r\n                return new OptionResult_1.OptionResult(subResult, this, input, failAttempt);\r\n            }\r\n            failAttempt.push(subResult);\r\n        }\r\n        return new OptionResult_1.OptionResult(null, this, input, failAttempt);\r\n    };\r\n    ExpressionOptions.prototype.toString = function () {\r\n        return this.id;\r\n    };\r\n    return ExpressionOptions;\r\n}());\r\nexports.ExpressionOptions = ExpressionOptions;\r\n\n\n/***/ }),\n\n/***/ 487:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result_1 = __webpack_require__(49);\r\nvar _ = __webpack_require__(0);\r\nvar OptionResult = /** @class */ (function (_super) {\r\n    __extends(OptionResult, _super);\r\n    function OptionResult(result, expression, input, failAttempt) {\r\n        var _this = _super.call(this, result != null ? [result] : null, expression, input) || this;\r\n        _this.result = result;\r\n        _this.expression = expression;\r\n        _this.input = input;\r\n        _this.failAttempt = failAttempt;\r\n        _.forEach(_this.failAttempt, function (subResult) {\r\n            subResult.parent = _this;\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Return all fail result.\r\n     */\r\n    OptionResult.prototype.getExpect = function () {\r\n        var _this = this;\r\n        var expect = [];\r\n        if (this.result != null) {\r\n            expect = this.result.getExpect();\r\n        }\r\n        expect = _.reduce(this.failAttempt, function (expect, result) { return expect.concat(result.getExpect()); }, expect);\r\n        if (expect.length > 0 && _.all(expect, function (result) { return result.input == _this.input; })) {\r\n            return [this];\r\n        }\r\n        return expect;\r\n    };\r\n    /**\r\n     * Clean the result to have the most relevant result. If the result is successful just return a clone of it.\r\n     */\r\n    OptionResult.prototype.clean = function (path) {\r\n        if (path != null || !this.isSuccess()) {\r\n            // Result will be a ref. We skip it for cleaner tree.\r\n            path = _.rest(path || _.last(this.getBestExpect()).path(this));\r\n            // next can be Result or one of the failAttempt. In both case we have only one child\r\n            var next = _.first(path);\r\n            if (next == null) {\r\n                return new Result_1.Result(null, this.expression, this.input);\r\n            }\r\n            return new Result_1.Result([next.clean(_.rest(path))], this.expression, this.input);\r\n        }\r\n        // Result will be a ref. We skip it for cleaner tree.\r\n        return new Result_1.Result(_.map(this.result.subResults, function (subResult) { return subResult.clean(); }), this.expression, this.input);\r\n    };\r\n    return OptionResult;\r\n}(Result_1.Result));\r\nexports.OptionResult = OptionResult;\r\n\n\n/***/ }),\n\n/***/ 488:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result_1 = __webpack_require__(49);\r\nvar Result_2 = __webpack_require__(49);\r\nvar ExpressionRegExp = /** @class */ (function () {\r\n    function ExpressionRegExp(value, id, grammar) {\r\n        this.value = value;\r\n        this.id = id;\r\n    }\r\n    ExpressionRegExp.prototype.parse = function (input, end) {\r\n        var groups = input.match(this.value);\r\n        // if the RegExp do not match at the start, ignore it\r\n        if (groups != null && groups.index != 0) {\r\n            groups = null;\r\n        }\r\n        var result = new Result_1.Result(groups != null ? groups[0] : null, this, input);\r\n        // if is successful and we require the end but the length of parsed is\r\n        // lower than the input length, return a EndOfInputExpected Result\r\n        if (result.isSuccess() && end && input.length > result.value.length) {\r\n            return new Result_2.EndOfInputResult(result);\r\n        }\r\n        return result;\r\n    };\r\n    ExpressionRegExp.prototype.toString = function () {\r\n        return this.id;\r\n    };\r\n    return ExpressionRegExp;\r\n}());\r\nexports.ExpressionRegExp = ExpressionRegExp;\r\n\n\n/***/ }),\n\n/***/ 489:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ExpressionFunction = /** @class */ (function () {\r\n    function ExpressionFunction(func, id, grammar) {\r\n        this.func = func;\r\n        this.id = id;\r\n        this.grammar = grammar;\r\n    }\r\n    ExpressionFunction.prototype.parse = function (input, end) {\r\n        return this.func(input, end, this);\r\n    };\r\n    ExpressionFunction.prototype.toString = function () {\r\n        return this.id;\r\n    };\r\n    return ExpressionFunction;\r\n}());\r\nexports.ExpressionFunction = ExpressionFunction;\r\n\n\n/***/ }),\n\n/***/ 49:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ExpressionEndOfInput_1 = __webpack_require__(214);\r\nvar ExpressionConstant_1 = __webpack_require__(215);\r\nvar _ = __webpack_require__(0);\r\nvar Result = /** @class */ (function () {\r\n    function Result(value, expression, input) {\r\n        var _this = this;\r\n        this.expression = expression;\r\n        this.input = input;\r\n        if (_.isString(value)) {\r\n            this.value = value;\r\n        }\r\n        else if (_.isArray(value)) {\r\n            this.subResults = value;\r\n            _.forEach(this.subResults, function (subResult) {\r\n                subResult.parent = _this;\r\n            });\r\n        }\r\n    }\r\n    Result.prototype.isSuccess = function () {\r\n        // if null is the value, this mean the expression could not parse this input\r\n        return this.value != null || (this.subResults != null && _.all(this.subResults, function (subResult) { return subResult.isSuccess(); }));\r\n    };\r\n    /**\r\n     * Return path to this result ([parent.parent, parent, this])\r\n     */\r\n    Result.prototype.path = function (until) {\r\n        var path = this.parent != null && this.parent != until ? this.parent.path(until) : [];\r\n        path.push(this);\r\n        return path;\r\n    };\r\n    /**\r\n     * Return the closest parent that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n     */\r\n    Result.prototype.findParent = function (match) {\r\n        var parent = this;\r\n        var iterator = _.isString(match) ? function (result) { return match == result.expression.id; } : match;\r\n        while (parent != null && !iterator(parent)) {\r\n            parent = parent.parent;\r\n        }\r\n        return parent;\r\n    };\r\n    /**\r\n     * Return the first child that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n     */\r\n    Result.prototype.find = function (match) {\r\n        var iterator = _.isString(match) ? function (result) { return match == result.expression.id; } : match;\r\n        if (iterator(this)) {\r\n            return this;\r\n        }\r\n        if (this.subResults) {\r\n            for (var i = 0; i < this.subResults.length; i++) {\r\n                var subResultFind = this.subResults[i].find(iterator);\r\n                if (subResultFind) {\r\n                    return subResultFind;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Return all children that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n     */\r\n    Result.prototype.findAll = function (match) {\r\n        var results = [];\r\n        var iterator = _.isString(match) ? function (result) { return match == result.expression.id; } : match;\r\n        if (iterator(this)) {\r\n            results.push(this);\r\n        }\r\n        if (this.subResults) {\r\n            results = _.reduce(this.subResults, function (results, subResult) { return results.concat(subResult.findAll(iterator)); }, results);\r\n        }\r\n        return results;\r\n    };\r\n    /**\r\n     * Return the first child that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n     */\r\n    Result.prototype.resultAt = function (index, match) {\r\n        if (index < 0 || index > this.getLength()) {\r\n            return [];\r\n        }\r\n        if (match != null) {\r\n            if (_.isString(match)) {\r\n                if (match == this.expression.id) {\r\n                    return [this];\r\n                }\r\n            }\r\n            else {\r\n                if (match(this)) {\r\n                    return [this];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var value = this.value == null && this.subResults == null ? this.input : this.value;\r\n            if (value != null) {\r\n                return [this];\r\n            }\r\n        }\r\n        if (this.subResults != null) {\r\n            var results = [];\r\n            for (var i = 0; i < this.subResults.length; i++) {\r\n                var subResult = this.subResults[i];\r\n                results = results.concat(subResult.resultAt(index, match));\r\n                index -= subResult.getLength();\r\n                if (index < 0) {\r\n                    break;\r\n                }\r\n            }\r\n            return results;\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Return all fail result.\r\n     */\r\n    Result.prototype.getExpect = function () {\r\n        if (this.value == null && this.subResults == null) {\r\n            return [this];\r\n        }\r\n        if (this.subResults != null) {\r\n            return _.reduce(this.subResults, function (expect, result) { return expect.concat(result.getExpect()); }, []);\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Return the best fail result (The farthest result who got parsed). We also remove duplicate and always return the simplest result of a kind\r\n     */\r\n    Result.prototype.getBestExpect = function () {\r\n        var expects = this.getExpect();\r\n        var groups = _.groupBy(expects, function (expect) { return expect.input; });\r\n        var key = _.last(_.keys(groups).sort(function (a, b) {\r\n            return b.length - a.length;\r\n        }));\r\n        var bestResults = groups[key];\r\n        var groups = _.groupBy(bestResults, function (expect) { return expect.expression.id; });\r\n        return _.map(groups, function (bestResults) {\r\n            return _.chain(bestResults)\r\n                .map(function (result) {\r\n                return {\r\n                    path: result.path().length,\r\n                    result: result\r\n                };\r\n            })\r\n                .sortBy('path')\r\n                .pluck('result')\r\n                .first()\r\n                .value();\r\n        });\r\n    };\r\n    Result.prototype.getHumanReadableExpect = function () {\r\n        var expect = this.getBestExpect();\r\n        var input = expect.length > 0 ? _.last(expect).input : '';\r\n        return ('Expected ' +\r\n            _.map(expect, function (result) { return result.getHumanReadable(); }).join(' or ') +\r\n            ' but ' +\r\n            (input.length > 0 ? JSON.stringify(input[0]) : 'end of input') +\r\n            ' found.');\r\n    };\r\n    /**\r\n     * Return a string that represent what is before this result\r\n     */\r\n    Result.prototype.before = function () {\r\n        if (this.parent == null) {\r\n            return '';\r\n        }\r\n        var index = _.indexOf(this.parent.subResults, this);\r\n        return (this.parent.before() +\r\n            _.chain(this.parent.subResults)\r\n                .first(index)\r\n                .map(function (subResult) { return subResult.toString(); })\r\n                .join('')\r\n                .value());\r\n    };\r\n    /**\r\n     * Return a string that represent what is after this result\r\n     */\r\n    Result.prototype.after = function () {\r\n        if (this.parent == null) {\r\n            return '';\r\n        }\r\n        var index = _.indexOf(this.parent.subResults, this);\r\n        return (_.chain(this.parent.subResults)\r\n            .last(this.parent.subResults.length - index - 1)\r\n            .map(function (subResult) { return subResult.toString(); })\r\n            .join('')\r\n            .value() + this.parent.after());\r\n    };\r\n    /**\r\n     * Return the length of the result\r\n     */\r\n    Result.prototype.getLength = function () {\r\n        if (this.value != null) {\r\n            return this.value.length;\r\n        }\r\n        if (this.subResults != null) {\r\n            return _.reduce(this.subResults, function (length, subResult) { return length + subResult.getLength(); }, 0);\r\n        }\r\n        return this.input.length;\r\n    };\r\n    Result.prototype.toHtmlElement = function () {\r\n        var element = document.createElement('span');\r\n        var id = this.expression != null ? this.expression.id : null;\r\n        if (id != null) {\r\n            element.setAttribute('data-id', id);\r\n        }\r\n        element.setAttribute('data-success', this.isSuccess().toString());\r\n        if (this.value != null) {\r\n            element.appendChild(document.createTextNode(this.value));\r\n            element.setAttribute('data-value', this.value);\r\n        }\r\n        else if (this.subResults != null) {\r\n            _.each(this.subResults, function (subResult) {\r\n                element.appendChild(subResult.toHtmlElement());\r\n            });\r\n        }\r\n        else {\r\n            element.appendChild(document.createTextNode(this.input));\r\n            element.setAttribute('data-input', this.input);\r\n            element.className = 'magic-box-error' + (this.input.length > 0 ? '' : ' magic-box-error-empty');\r\n        }\r\n        element['result'] = this;\r\n        return element;\r\n    };\r\n    /**\r\n     * Clean the result to have the most relevant result. If the result is successful just return a clone of it.\r\n     */\r\n    Result.prototype.clean = function (path) {\r\n        if (path != null || !this.isSuccess()) {\r\n            path = path || _.last(this.getBestExpect()).path(this);\r\n            var next = _.first(path);\r\n            if (next != null) {\r\n                var nextIndex = _.indexOf(this.subResults, next);\r\n                var subResults = nextIndex == -1 ? [] : _.map(_.first(this.subResults, nextIndex), function (subResult) { return subResult.clean(); });\r\n                subResults.push(next.clean(_.rest(path)));\r\n                return new Result(subResults, this.expression, this.input);\r\n            }\r\n            else {\r\n                return new Result(null, this.expression, this.input);\r\n            }\r\n        }\r\n        if (this.value != null) {\r\n            return new Result(this.value, this.expression, this.input);\r\n        }\r\n        if (this.subResults != null) {\r\n            return new Result(_.map(this.subResults, function (subResult) { return subResult.clean(); }), this.expression, this.input);\r\n        }\r\n    };\r\n    Result.prototype.clone = function () {\r\n        if (this.value != null) {\r\n            return new Result(this.value, this.expression, this.input);\r\n        }\r\n        if (this.subResults != null) {\r\n            return new Result(_.map(this.subResults, function (subResult) { return subResult.clone(); }), this.expression, this.input);\r\n        }\r\n        return new Result(null, this.expression, this.input);\r\n    };\r\n    Result.prototype.toString = function () {\r\n        if (this.value != null) {\r\n            return this.value;\r\n        }\r\n        if (this.subResults != null) {\r\n            return _.map(this.subResults, function (subresult) { return subresult.toString(); }).join('');\r\n        }\r\n        return this.input;\r\n    };\r\n    Result.prototype.getHumanReadable = function () {\r\n        if (this.expression instanceof ExpressionConstant_1.ExpressionConstant) {\r\n            return JSON.stringify(this.expression.value);\r\n        }\r\n        return this.expression.id;\r\n    };\r\n    return Result;\r\n}());\r\nexports.Result = Result;\r\nvar EndOfInputResult = /** @class */ (function (_super) {\r\n    __extends(EndOfInputResult, _super);\r\n    function EndOfInputResult(result) {\r\n        var _this = _super.call(this, [result], ExpressionEndOfInput_1.ExpressionEndOfInput, result.input) || this;\r\n        var endOfInput = new Result(null, ExpressionEndOfInput_1.ExpressionEndOfInput, result.input.substr(result.getLength()));\r\n        endOfInput.parent = _this;\r\n        _this.subResults.push(endOfInput);\r\n        return _this;\r\n    }\r\n    return EndOfInputResult;\r\n}(Result));\r\nexports.EndOfInputResult = EndOfInputResult;\r\n\n\n/***/ }),\n\n/***/ 490:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Result_1 = __webpack_require__(49);\r\nvar ExpressionList = /** @class */ (function () {\r\n    function ExpressionList(parts, id) {\r\n        this.parts = parts;\r\n        this.id = id;\r\n        if (parts.length == 0) {\r\n            throw new Error(JSON.stringify(id) + ' should have at least 1 parts');\r\n        }\r\n    }\r\n    ExpressionList.prototype.parse = function (input, end) {\r\n        var subResults = [];\r\n        var subResult;\r\n        var subInput = input;\r\n        for (var i = 0; i < this.parts.length; i++) {\r\n            var part = this.parts[i];\r\n            subResult = part.parse(subInput, end && i == this.parts.length - 1);\r\n            subResults.push(subResult);\r\n            // if the subResult do not succeed, stop the parsing\r\n            if (!subResult.isSuccess()) {\r\n                break;\r\n            }\r\n            else {\r\n                subInput = subInput.substr(subResult.getLength());\r\n            }\r\n        }\r\n        return new Result_1.Result(subResults, this, input);\r\n    };\r\n    ExpressionList.prototype.toString = function () {\r\n        return this.id;\r\n    };\r\n    return ExpressionList;\r\n}());\r\nexports.ExpressionList = ExpressionList;\r\n\n\n/***/ }),\n\n/***/ 491:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Field_1 = __webpack_require__(216);\r\nexports.NestedQuery = {\r\n    basicExpressions: ['NestedQuery'],\r\n    grammars: {\r\n        NestedQuery: '[[NestedField][OptionalSpaces][Expressions]]',\r\n        NestedField: '[[Field]]',\r\n        FieldValue: ['NestedQuery']\r\n    },\r\n    include: [Field_1.Field]\r\n};\r\n\n\n/***/ }),\n\n/***/ 492:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Basic_1 = __webpack_require__(128);\r\nexports.Date = {\r\n    grammars: {\r\n        Date: '[DateYear]/[DateMonth]/[DateDay]',\r\n        DateYear: /([0-9]{4})/,\r\n        DateMonth: /(1[0-2]|0?[1-9])/,\r\n        DateDay: /([1-2][0-9]|3[0-1]|0?[1-9])/,\r\n        DateRange: '[Date][Spaces?]..[Spaces?][Date]',\r\n        DateRelative: ['DateRelativeNegative', 'DateRelativeTerm'],\r\n        DateRelativeTerm: /now|today|yesterday/,\r\n        DateRelativeNegative: '[DateRelativeTerm][DateRelativeNegativeRef]',\r\n        DateRelativeNegativeRef: /([\\-\\+][0-9]+(s|m|h|d|mo|y))/\r\n    },\r\n    include: [Basic_1.Basic]\r\n};\r\n\n\n/***/ }),\n\n/***/ 493:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Basic_1 = __webpack_require__(128);\r\nexports.QueryExtension = {\r\n    basicExpressions: ['QueryExtension'],\r\n    grammars: {\r\n        QueryExtension: '$[QueryExtensionName]([QueryExtensionArguments])',\r\n        QueryExtensionName: /\\w+/,\r\n        QueryExtensionArguments: '[QueryExtensionArgumentList*][QueryExtensionArgument]',\r\n        QueryExtensionArgumentList: '[QueryExtensionArgument][Spaces?],[Spaces?]',\r\n        QueryExtensionArgument: '[QueryExtensionArgumentName]:[Spaces?][QueryExtensionArgumentValue]',\r\n        QueryExtensionArgumentName: /\\w+/,\r\n        QueryExtensionArgumentValue: ['SingleQuoted', 'Expressions']\r\n    },\r\n    include: [Basic_1.Basic]\r\n};\r\n\n\n/***/ }),\n\n/***/ 494:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SubExpression = {\r\n    basicExpressions: ['SubExpression'],\r\n    grammars: {\r\n        SubExpression: '([Expressions])'\r\n    }\r\n};\r\n\n\n/***/ }),\n\n/***/ 495:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _ = __webpack_require__(0);\r\nvar Core_1 = __webpack_require__(20);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar KeyboardUtils_1 = __webpack_require__(25);\r\nvar InputManager = /** @class */ (function () {\r\n    function InputManager(element, onchange, magicBox) {\r\n        this.onchange = onchange;\r\n        this.magicBox = magicBox;\r\n        this.hasFocus = false;\r\n        this.root = Core_1.Component.resolveRoot(element);\r\n        this.underlay = document.createElement('div');\r\n        this.underlay.className = 'magic-box-underlay';\r\n        this.highlightContainer = document.createElement('span');\r\n        this.highlightContainer.className = 'magic-box-highlight-container';\r\n        this.underlay.appendChild(this.highlightContainer);\r\n        this.ghostTextContainer = document.createElement('span');\r\n        this.ghostTextContainer.className = 'magic-box-ghost-text';\r\n        this.underlay.appendChild(this.ghostTextContainer);\r\n        this.input = Dom_1.$$(element).find('input');\r\n        if (!this.input) {\r\n            this.input = document.createElement('input');\r\n            element.appendChild(this.underlay);\r\n            element.appendChild(this.input);\r\n        }\r\n        else {\r\n            element.insertBefore(this.underlay, this.input);\r\n        }\r\n        this.setupHandler();\r\n        this.addAccessibilitiesProperties();\r\n    }\r\n    Object.defineProperty(InputManager.prototype, \"expanded\", {\r\n        set: function (isExpanded) {\r\n            this.input.setAttribute('aria-expanded', isExpanded.toString());\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InputManager.prototype, \"activeDescendant\", {\r\n        set: function (element) {\r\n            if (element) {\r\n                this.input.setAttribute('aria-activedescendant', element.id);\r\n            }\r\n            else {\r\n                this.input.removeAttribute('aria-activedescendant');\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Update the input with the result value\r\n     */\r\n    InputManager.prototype.updateInput = function () {\r\n        if (this.input.value != this.result.input) {\r\n            this.input.value = this.result.input;\r\n            if (this.hasFocus) {\r\n                this.setCursor(this.getValue().length);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Update the highlight with the result value\r\n     */\r\n    InputManager.prototype.updateHighlight = function () {\r\n        Dom_1.$$(this.highlightContainer).empty();\r\n        this.highlightContainer.appendChild(this.result.toHtmlElement());\r\n    };\r\n    /**\r\n     * Update the ghostText with the wordCompletion\r\n     */\r\n    InputManager.prototype.updateWordCompletion = function () {\r\n        Dom_1.$$(this.ghostTextContainer).empty();\r\n        this.ghostTextContainer.innerHTML = '';\r\n        if (this.wordCompletion != null) {\r\n            this.ghostTextContainer.appendChild(document.createTextNode(this.wordCompletion.substr(this.result.input.length)));\r\n        }\r\n    };\r\n    /**\r\n     * Set the result and update visual if needed\r\n     */\r\n    InputManager.prototype.setResult = function (result, wordCompletion) {\r\n        this.result = result;\r\n        this.updateInput();\r\n        this.updateHighlight();\r\n        // reuse last wordCompletion for a better visual\r\n        if (_.isUndefined(wordCompletion) && this.wordCompletion != null && this.wordCompletion.indexOf(this.result.input) == 0) {\r\n            this.updateWordCompletion();\r\n        }\r\n        else {\r\n            this.setWordCompletion(wordCompletion);\r\n        }\r\n        this.updateScroll();\r\n    };\r\n    /**\r\n     * Set the word completion. will be ignore if the word completion do not start with the result input\r\n     */\r\n    InputManager.prototype.setWordCompletion = function (wordCompletion) {\r\n        if (wordCompletion != null && wordCompletion.toLowerCase().indexOf(this.result.input.toLowerCase()) != 0) {\r\n            wordCompletion = null;\r\n        }\r\n        this.wordCompletion = wordCompletion;\r\n        this.updateWordCompletion();\r\n        this.updateScroll();\r\n    };\r\n    /**\r\n     * Set cursor position\r\n     */\r\n    InputManager.prototype.setCursor = function (index) {\r\n        this.input.focus();\r\n        if (this.input.createTextRange) {\r\n            var range = this.input.createTextRange();\r\n            range.move('character', index);\r\n            range.select();\r\n        }\r\n        else if (this.input.selectionStart != null) {\r\n            this.input.focus();\r\n            this.input.setSelectionRange(index, index);\r\n        }\r\n    };\r\n    InputManager.prototype.getCursor = function () {\r\n        return this.input.selectionStart;\r\n    };\r\n    InputManager.prototype.updateScroll = function (defer) {\r\n        var _this = this;\r\n        if (defer === void 0) { defer = true; }\r\n        var callback = function () {\r\n            // this is the cheapest call we can do before update scroll\r\n            if (_this.underlay.clientWidth < _this.underlay.scrollWidth) {\r\n                _this.underlay.style.visibility = 'hidden';\r\n                _this.underlay.scrollLeft = _this.input.scrollLeft;\r\n                _this.underlay.scrollTop = _this.input.scrollTop;\r\n                _this.underlay.style.visibility = 'visible';\r\n            }\r\n            _this.updateScrollDefer = null;\r\n            // one day we will have to remove this\r\n            if (_this.hasFocus) {\r\n                _this.updateScroll();\r\n            }\r\n        };\r\n        // sometime we want it to be updated as soon as posible to have no flickering\r\n        if (!defer) {\r\n            callback();\r\n        }\r\n        else if (this.updateScrollDefer == null) {\r\n            this.updateScrollDefer = requestAnimationFrame(callback);\r\n        }\r\n    };\r\n    InputManager.prototype.setupHandler = function () {\r\n        var _this = this;\r\n        this.input.onblur = function () {\r\n            _this.hasFocus = false;\r\n            setTimeout(function () {\r\n                if (!_this.hasFocus) {\r\n                    _this.onblur && _this.onblur();\r\n                }\r\n            }, 300);\r\n            _this.updateScroll();\r\n        };\r\n        this.input.onfocus = function () {\r\n            if (!_this.hasFocus) {\r\n                _this.hasFocus = true;\r\n                _this.updateScroll();\r\n                _this.onfocus && _this.onfocus();\r\n            }\r\n        };\r\n        this.input.onkeydown = function (e) {\r\n            _this.keydown(e);\r\n        };\r\n        this.input.onkeyup = function (e) {\r\n            _this.keyup(e);\r\n        };\r\n        this.input.oncut = function () {\r\n            setTimeout(function () {\r\n                _this.onInputChange();\r\n            });\r\n        };\r\n        this.input.onpaste = function () {\r\n            setTimeout(function () {\r\n                _this.onInputChange();\r\n            });\r\n        };\r\n    };\r\n    InputManager.prototype.addAccessibilitiesProperties = function () {\r\n        this.input.setAttribute('autocomplete', 'off');\r\n        this.input.setAttribute('type', 'text');\r\n        this.input.setAttribute('role', 'combobox');\r\n        this.input.setAttribute('form', 'coveo-dummy-form');\r\n        this.input.setAttribute('aria-autocomplete', 'list');\r\n        this.input.setAttribute('title', Strings_1.l('InsertAQuery') + \". \" + Strings_1.l('PressEnterToSend'));\r\n    };\r\n    InputManager.prototype.focus = function () {\r\n        var _this = this;\r\n        // neet a timeout for IE8-9\r\n        setTimeout(function () {\r\n            _this.input.focus();\r\n            _this.setCursor(_this.getValue().length);\r\n        });\r\n    };\r\n    InputManager.prototype.blur = function () {\r\n        if (this.hasFocus) {\r\n            this.input.blur();\r\n        }\r\n    };\r\n    InputManager.prototype.keydown = function (e) {\r\n        var _this = this;\r\n        switch (e.keyCode || e.which) {\r\n            case KeyboardUtils_1.KEYBOARD.TAB:\r\n                // Take care of not \"preventing\" the default event behaviour : For accessibility reasons, it is much simpler\r\n                // to simply let the browser do it's standard action (which is to focus out of the input).\r\n                // Instead, handle \"tabPress\" immediately instead of \"keyup\".\r\n                // The focus will be on the next element in the page when the key is released, so keyup on the input will never be triggered.\r\n                this.tabPress();\r\n                this.magicBox.clearSuggestion();\r\n                break;\r\n            default:\r\n                e.stopPropagation();\r\n                if (this.onkeydown == null || this.onkeydown(e.keyCode || e.which)) {\r\n                    requestAnimationFrame(function () {\r\n                        _this.onInputChange();\r\n                    });\r\n                }\r\n                else {\r\n                    e.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    InputManager.prototype.keyup = function (e) {\r\n        switch (e.keyCode || e.which) {\r\n            case KeyboardUtils_1.KEYBOARD.LEFT_ARROW:\r\n            case KeyboardUtils_1.KEYBOARD.RIGHT_ARROW:\r\n                this.handleLeftRightArrow(e);\r\n                break;\r\n            default:\r\n                if (this.onkeydown == null || this.onkeyup(e.keyCode || e.which)) {\r\n                    this.onInputChange();\r\n                }\r\n                else {\r\n                    e.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    InputManager.prototype.handleLeftRightArrow = function (e) {\r\n        var querySuggestPreview = Dom_1.$$(this.root).find(\".\" + Core_1.Component.computeCssClassNameForType('QuerySuggestPreview'));\r\n        if (!querySuggestPreview) {\r\n            this.onchangecursor();\r\n        }\r\n        var inputChanged = this.onkeydown == null || this.onkeyup(e.keyCode || e.which);\r\n        inputChanged ? this.onInputChange() : e.preventDefault();\r\n    };\r\n    InputManager.prototype.tabPress = function () {\r\n        this.ontabpress && this.ontabpress();\r\n        this.onblur && this.onblur();\r\n    };\r\n    InputManager.prototype.onInputChange = function () {\r\n        if (this.result.input != this.input.value) {\r\n            this.onchange(this.input.value, false);\r\n        }\r\n    };\r\n    InputManager.prototype.getValue = function () {\r\n        return this.input.value;\r\n    };\r\n    InputManager.prototype.getWordCompletion = function () {\r\n        return this.wordCompletion;\r\n    };\r\n    return InputManager;\r\n}());\r\nexports.InputManager = InputManager;\r\n\n\n/***/ }),\n\n/***/ 496:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar underscore_1 = __webpack_require__(0);\r\nvar ProcessingStatus;\r\n(function (ProcessingStatus) {\r\n    ProcessingStatus[ProcessingStatus[\"Finished\"] = 0] = \"Finished\";\r\n    ProcessingStatus[ProcessingStatus[\"TimedOut\"] = 1] = \"TimedOut\";\r\n    ProcessingStatus[ProcessingStatus[\"Overriden\"] = 2] = \"Overriden\";\r\n})(ProcessingStatus = exports.ProcessingStatus || (exports.ProcessingStatus = {}));\r\n/**\r\n * IE11 equivalent of Promise.race\r\n * Adapted from Promise.race(iterable) polyfill on https://www.promisejs.org/api/\r\n */\r\nfunction racePromises(promises) {\r\n    return new Promise(function (resolve, reject) { return promises.forEach(function (value) { return Promise.resolve(value).then(resolve, reject); }); });\r\n}\r\nvar QueryProcessor = /** @class */ (function () {\r\n    function QueryProcessor(options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.options = __assign({ timeout: 500 }, options);\r\n    }\r\n    /**\r\n     * Overrides the previous queries and accumulates the result of promise arrays with a timeout.\r\n     */\r\n    QueryProcessor.prototype.processQueries = function (queries) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var asyncQueries;\r\n            return __generator(this, function (_a) {\r\n                this.overrideIfProcessing();\r\n                this.processedResults = new Array(queries.length);\r\n                asyncQueries = queries.map(function (query) { return (query instanceof Promise ? query : Promise.resolve(query)); });\r\n                return [2 /*return*/, racePromises([\r\n                        this.accumulateResultsChronologically(asyncQueries).then(function () { return _this.buildProcessResults(ProcessingStatus.Finished); }),\r\n                        this.waitForOverride().then(function () { return _this.buildProcessResults(ProcessingStatus.Overriden); }),\r\n                        this.waitForTimeout().then(function () { return _this.buildProcessResults(ProcessingStatus.TimedOut); })\r\n                    ])];\r\n            });\r\n        });\r\n    };\r\n    QueryProcessor.prototype.overrideIfProcessing = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                if (this.override) {\r\n                    this.override();\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    Object.defineProperty(QueryProcessor.prototype, \"orderedResults\", {\r\n        get: function () {\r\n            return underscore_1.flatten(this.processedResults.filter(function (result) { return !!result; }), true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    QueryProcessor.prototype.buildProcessResults = function (status) {\r\n        return {\r\n            status: status,\r\n            results: status !== ProcessingStatus.Overriden ? this.orderedResults : []\r\n        };\r\n    };\r\n    QueryProcessor.prototype.accumulateResultsChronologically = function (queries) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var output;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        output = this.processedResults;\r\n                        return [4 /*yield*/, Promise.all(queries.map(function (query, i) { return query.then(function (items) { return (output[i] = items); }); }))];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    QueryProcessor.prototype.waitForOverride = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.override = function () {\r\n                _this.override = null;\r\n                resolve();\r\n            };\r\n        });\r\n    };\r\n    QueryProcessor.prototype.waitForTimeout = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, _this.options.timeout); });\r\n    };\r\n    return QueryProcessor;\r\n}());\r\nexports.QueryProcessor = QueryProcessor;\r\n\n\n/***/ }),\n\n/***/ 499:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NestedQuery_1 = __webpack_require__(491);\r\nvar QueryExtension_1 = __webpack_require__(493);\r\nvar Basic_1 = __webpack_require__(128);\r\nvar Field_1 = __webpack_require__(216);\r\nvar SubExpression_1 = __webpack_require__(494);\r\nexports.Complete = {\r\n    include: [NestedQuery_1.NestedQuery, QueryExtension_1.QueryExtension, SubExpression_1.SubExpression, Field_1.Field, Basic_1.Basic]\r\n};\r\n\n\n/***/ }),\n\n/***/ 500:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Grammar_1 = __webpack_require__(176);\r\nvar _ = __webpack_require__(0);\r\nfunction loadSubGrammar(expressions, basicExpressions, grammars, subGrammar) {\r\n    _.each(subGrammar.expressions, function (expression) {\r\n        if (!_.contains(expressions, expression)) {\r\n            expressions.push(expression);\r\n        }\r\n    });\r\n    _.each(subGrammar.basicExpressions, function (expression) {\r\n        if (!_.contains(basicExpressions, expression)) {\r\n            basicExpressions.push(expression);\r\n        }\r\n    });\r\n    _.each(subGrammar.grammars, function (expressionDef, id) {\r\n        if (!(id in grammars)) {\r\n            grammars[id] = expressionDef;\r\n        }\r\n        else {\r\n            if (_.isArray(grammars[id]) && _.isArray(expressionDef)) {\r\n                _.each(expressionDef, function (value) {\r\n                    grammars[id].push(value);\r\n                });\r\n            }\r\n            else {\r\n                _.each(expressionDef, function (value) {\r\n                    grammars[id].push(value);\r\n                });\r\n                throw new Error('Can not merge ' + id + '(' + JSON.stringify(expressionDef) + ' => ' + JSON.stringify(grammars[id]) + ')');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction Expressions() {\r\n    var subGrammars = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        subGrammars[_i] = arguments[_i];\r\n    }\r\n    var expressions = [];\r\n    var BasicExpression = [];\r\n    var grammars = {\r\n        Start: ['Expressions', 'Empty'],\r\n        Expressions: '[OptionalSpaces][Expression][ExpressionsList*][OptionalSpaces]',\r\n        ExpressionsList: '[Spaces][Expression]',\r\n        Expression: expressions,\r\n        BasicExpression: BasicExpression,\r\n        OptionalSpaces: / */,\r\n        Spaces: / +/,\r\n        Empty: /(?!.)/\r\n    };\r\n    for (var i = 0; i < subGrammars.length; i++) {\r\n        loadSubGrammar(expressions, BasicExpression, grammars, subGrammars[i]);\r\n        _.each(subGrammars[i].include, function (subGrammar) {\r\n            if (!_.contains(subGrammars, subGrammar)) {\r\n                subGrammars.push(subGrammar);\r\n            }\r\n        });\r\n    }\r\n    expressions.push('BasicExpression');\r\n    return {\r\n        start: 'Start',\r\n        expressions: grammars\r\n    };\r\n}\r\nexports.Expressions = Expressions;\r\nfunction ExpressionsGrammar() {\r\n    var subGrammars = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        subGrammars[_i] = arguments[_i];\r\n    }\r\n    var grammar = Expressions.apply(this, subGrammars);\r\n    return new Grammar_1.Grammar(grammar.start, grammar.expressions);\r\n}\r\nexports.ExpressionsGrammar = ExpressionsGrammar;\r\n\n\n/***/ }),\n\n/***/ 501:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Those are the string definitions of events for ResultPreviewsManager.\r\n *\r\n * Those events should be bound to the element returned by `resolveRoot`.\r\n */\r\nvar ResultPreviewsManagerEvents = /** @class */ (function () {\r\n    function ResultPreviewsManagerEvents() {\r\n    }\r\n    /**\r\n     * Executed when building a query to fetch result previews.\r\n     * This always receives {@link IBuildingResultPreviewsQueryEventArgs} as arguments.\r\n     */\r\n    ResultPreviewsManagerEvents.buildingResultPreviewsQuery = 'buildingResultPreviewsQuery';\r\n    /**\r\n     * Executed when a {@link Suggestion} is focused before {@link PopulateSearchResultPreviews} is called to fetch more options.\r\n     * This always receives {@link IUpdateResultPreviewsManagerOptionsEventArgs} as arguments.\r\n     */\r\n    ResultPreviewsManagerEvents.updateResultPreviewsManagerOptions = 'updateResultPreviewsManagerOptions';\r\n    /**\r\n     * Executed when a {@link Suggestion} is focused and waiting for search result previews.\r\n     * This always receives {@link IPopulateSearchResultPreviewsEventArgs} as arguments.\r\n     */\r\n    ResultPreviewsManagerEvents.populateSearchResultPreviews = 'populateSearchResultPreviews';\r\n    return ResultPreviewsManagerEvents;\r\n}());\r\nexports.ResultPreviewsManagerEvents = ResultPreviewsManagerEvents;\r\n\n\n/***/ }),\n\n/***/ 502:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ComponentOptionsModel_1 = __webpack_require__(28);\r\nvar QueryboxOptionsProcessing = /** @class */ (function () {\r\n    function QueryboxOptionsProcessing(owner) {\r\n        this.owner = owner;\r\n    }\r\n    Object.defineProperty(QueryboxOptionsProcessing.prototype, \"options\", {\r\n        get: function () {\r\n            return this.owner.options;\r\n        },\r\n        set: function (options) {\r\n            this.owner.options = options;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    QueryboxOptionsProcessing.prototype.postProcess = function () {\r\n        this.options = __assign({}, this.options, this.owner.componentOptionsModel.get(ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.searchBox));\r\n        this.processQueryOnClearVersusEmptyQuery();\r\n        this.processQueryOnClearVersusSearchAsYouType();\r\n    };\r\n    QueryboxOptionsProcessing.prototype.processQueryOnClearVersusEmptyQuery = function () {\r\n        if (this.options.triggerQueryOnClear && this.owner.searchInterface.options.allowQueriesWithoutKeywords === false) {\r\n            this.owner.logger.warn('Forcing option triggerQueryOnClear to false, as it is not supported when the search interface is configured to not allow queries without keywords (data-allow-queries-without-keywords=\"false\")', this.owner);\r\n            this.options.triggerQueryOnClear = false;\r\n        }\r\n    };\r\n    QueryboxOptionsProcessing.prototype.processQueryOnClearVersusSearchAsYouType = function () {\r\n        if (this.owner.searchInterface.options.allowQueriesWithoutKeywords === true &&\r\n            this.options.triggerQueryOnClear === false &&\r\n            this.options.enableSearchAsYouType === true) {\r\n            this.owner.logger.warn('Forcing option triggerQueryOnClear to true, since search-as-you-type is enabled', this.owner);\r\n            this.options.triggerQueryOnClear = true;\r\n        }\r\n    };\r\n    return QueryboxOptionsProcessing;\r\n}());\r\nexports.QueryboxOptionsProcessing = QueryboxOptionsProcessing;\r\n\n\n/***/ }),\n\n/***/ 503:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar _ = __webpack_require__(0);\r\nvar MiscModules_1 = __webpack_require__(71);\r\nvar QueryboxQueryParameters = /** @class */ (function () {\r\n    function QueryboxQueryParameters(options) {\r\n        this.options = options;\r\n    }\r\n    QueryboxQueryParameters.queryIsBlocked = function () {\r\n        // This code runs on some assumption :\r\n        // Since all \"buildingQuery\" events would have to be run in the same call stack\r\n        // We can add a static flag to block 2 or more query box/omnibox from trying to modify the query inside the same event.\r\n        // If 2 query box are activated, we get duplicate terms in the query, or duplicate term correction with did you mean.\r\n        // This means that only one query box/searchbox would be able to modify the query in a single search page.\r\n        // This also means that if there is 2 search box enabled, the first one in the markup in the page would be able to do the job correctly as far as the query is concerned.\r\n        // The second one is inactive as far as the query is concerned.\r\n        // The flag gets reset in \"defer\" (setTimeout 0) so that it gets reset correctly when the query event has finished executing\r\n        if (!QueryboxQueryParameters.queryIsCurrentlyBlocked) {\r\n            QueryboxQueryParameters.queryIsCurrentlyBlocked = true;\r\n            MiscModules_1.Defer.defer(function () { return QueryboxQueryParameters.allowDuplicateQuery(); });\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    QueryboxQueryParameters.allowDuplicateQuery = function () {\r\n        QueryboxQueryParameters.queryIsCurrentlyBlocked = false;\r\n    };\r\n    QueryboxQueryParameters.prototype.addParameters = function (queryBuilder, lastQuery) {\r\n        if (!QueryboxQueryParameters.queryIsBlocked()) {\r\n            if (this.options.enableWildcards) {\r\n                queryBuilder.enableWildcards = true;\r\n            }\r\n            if (this.options.enableQuestionMarks) {\r\n                queryBuilder.enableQuestionMarks = true;\r\n            }\r\n            if (this.options.enableLowercaseOperators) {\r\n                queryBuilder.enableLowercaseOperators = true;\r\n            }\r\n            if (!_.isEmpty(lastQuery)) {\r\n                queryBuilder.enableQuerySyntax = this.options.enableQuerySyntax;\r\n                queryBuilder.expression.add(lastQuery);\r\n                if (this.options.enablePartialMatch) {\r\n                    queryBuilder.enablePartialMatch = this.options.enablePartialMatch;\r\n                    if (this.options.partialMatchKeywords) {\r\n                        queryBuilder.partialMatchKeywords = this.options.partialMatchKeywords;\r\n                    }\r\n                    if (this.options.partialMatchThreshold) {\r\n                        queryBuilder.partialMatchThreshold = this.options.partialMatchThreshold;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    QueryboxQueryParameters.queryIsCurrentlyBlocked = false;\r\n    return QueryboxQueryParameters;\r\n}());\r\nexports.QueryboxQueryParameters = QueryboxQueryParameters;\r\n\n\n/***/ }),\n\n/***/ 556:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar ExpressionConstant_1 = __webpack_require__(215);\r\nvar ExpressionEndOfInput_1 = __webpack_require__(214);\r\nvar ExpressionFunction_1 = __webpack_require__(489);\r\nvar ExpressionList_1 = __webpack_require__(490);\r\nvar ExpressionOptions_1 = __webpack_require__(486);\r\nvar ExpressionRef_1 = __webpack_require__(484);\r\nvar ExpressionRegExp_1 = __webpack_require__(488);\r\nvar Grammar_1 = __webpack_require__(176);\r\nvar Grammars_1 = __webpack_require__(557);\r\nvar InputManager_1 = __webpack_require__(495);\r\nvar MagicBox_1 = __webpack_require__(218);\r\nvar MagicBoxUtils_1 = __webpack_require__(219);\r\nvar OptionResult_1 = __webpack_require__(487);\r\nvar RefResult_1 = __webpack_require__(485);\r\nvar Result_1 = __webpack_require__(49);\r\nvar SuggestionsManager_1 = __webpack_require__(217);\r\nexports.GrammarsImportedLocally = Grammars_1.Grammars;\r\nfunction doMagicBoxExport() {\r\n    GlobalExports_1.exportGlobally({\r\n        MagicBox: {\r\n            EndOfInputResult: Result_1.EndOfInputResult,\r\n            ExpressionConstant: ExpressionConstant_1.ExpressionConstant,\r\n            ExpressionEndOfInput: ExpressionEndOfInput_1.ExpressionEndOfInput,\r\n            ExpressionFunction: ExpressionFunction_1.ExpressionFunction,\r\n            ExpressionList: ExpressionList_1.ExpressionList,\r\n            ExpressionOptions: ExpressionOptions_1.ExpressionOptions,\r\n            ExpressionRef: ExpressionRef_1.ExpressionRef,\r\n            ExpressionRegExp: ExpressionRegExp_1.ExpressionRegExp,\r\n            Grammar: Grammar_1.Grammar,\r\n            Grammars: Grammars_1.Grammars,\r\n            InputManager: InputManager_1.InputManager,\r\n            Instance: MagicBox_1.MagicBoxInstance,\r\n            OptionResult: OptionResult_1.OptionResult,\r\n            RefResult: RefResult_1.RefResult,\r\n            Result: Result_1.Result,\r\n            SuggestionsManager: SuggestionsManager_1.SuggestionsManager,\r\n            Utils: MagicBoxUtils_1.MagicBoxUtils,\r\n            create: MagicBox_1.createMagicBox,\r\n            requestAnimationFrame: MagicBox_1.requestAnimationFrame\r\n        }\r\n    });\r\n}\r\nexports.doMagicBoxExport = doMagicBoxExport;\r\n\n\n/***/ }),\n\n/***/ 557:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Basic_1 = __webpack_require__(128);\r\nvar Complete_1 = __webpack_require__(499);\r\nvar Date_1 = __webpack_require__(492);\r\nvar Expressions_1 = __webpack_require__(500);\r\nvar Field_1 = __webpack_require__(216);\r\nvar NestedQuery_1 = __webpack_require__(491);\r\nvar QueryExtension_1 = __webpack_require__(493);\r\nvar SubExpression_1 = __webpack_require__(494);\r\nexports.Grammars = {\r\n    Basic: Basic_1.Basic,\r\n    notInWord: Basic_1.notInWord,\r\n    notWordStart: Basic_1.notWordStart,\r\n    Complete: Complete_1.Complete,\r\n    Date: Date_1.Date,\r\n    Expressions: Expressions_1.Expressions,\r\n    ExpressionsGrammar: Expressions_1.ExpressionsGrammar,\r\n    Field: Field_1.Field,\r\n    NestedQuery: NestedQuery_1.NestedQuery,\r\n    QueryExtension: QueryExtension_1.QueryExtension,\r\n    SubExpression: SubExpression_1.SubExpression\r\n};\r\n\n\n/***/ }),\n\n/***/ 558:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar underscore_1 = __webpack_require__(0);\r\nvar Component_1 = __webpack_require__(7);\r\nvar SuggestionsManager_1 = __webpack_require__(217);\r\nvar ResultPreviewsManagerEvents_1 = __webpack_require__(501);\r\nvar QueryProcessor_1 = __webpack_require__(496);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar ResultPreviewsManager = /** @class */ (function () {\r\n    function ResultPreviewsManager(element, options) {\r\n        if (options === void 0) { options = {}; }\r\n        this.element = element;\r\n        this.options = underscore_1.defaults(options, {\r\n            previewHeaderText: Strings_1.l('QuerySuggestPreview'),\r\n            previewHeaderFieldText: Strings_1.l('QuerySuggestPreviewWithField'),\r\n            previewClass: 'coveo-preview-selectable',\r\n            selectedClass: 'magic-box-selected'\r\n        });\r\n        this.root = Component_1.Component.resolveRoot(element);\r\n        this.previewsProcessor = new QueryProcessor_1.QueryProcessor({ timeout: this.options.timeout });\r\n    }\r\n    Object.defineProperty(ResultPreviewsManager.prototype, \"previewsOwner\", {\r\n        get: function () {\r\n            return this.lastDisplayedSuggestion;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResultPreviewsManager.prototype, \"hasPreviews\", {\r\n        get: function () {\r\n            return !!this.suggestionsPreviewContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResultPreviewsManager.prototype, \"focusedPreviewElement\", {\r\n        get: function () {\r\n            if (!this.hasPreviews) {\r\n                return null;\r\n            }\r\n            var focusedElement = this.suggestionsPreviewContainer.findClass(this.options.selectedClass)[0];\r\n            if (!focusedElement || !focusedElement.classList.contains(this.options.previewClass)) {\r\n                return null;\r\n            }\r\n            return focusedElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResultPreviewsManager.prototype, \"previewElements\", {\r\n        get: function () {\r\n            if (!this.hasPreviews) {\r\n                return [];\r\n            }\r\n            return this.suggestionsPreviewContainer.findClass(this.options.previewClass);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResultPreviewsManager.prototype, \"suggestionsListbox\", {\r\n        get: function () {\r\n            return Dom_1.$$(Dom_1.$$(this.element).findClass('coveo-magicbox-suggestions')[0]);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResultPreviewsManager.prototype, \"numberOfResultsPerRow\", {\r\n        get: function () {\r\n            var previewSelectables = this.suggestionsPreviewContainer.findClass(this.options.previewClass);\r\n            if (previewSelectables.length === 0) {\r\n                return 0;\r\n            }\r\n            var firstVerticalOffset = previewSelectables[0].offsetTop;\r\n            var firstIndexOnNextRow = underscore_1.findIndex(previewSelectables, function (previewSelectable) { return previewSelectable.offsetTop !== firstVerticalOffset; });\r\n            return firstIndexOnNextRow !== -1 ? firstIndexOnNextRow : previewSelectables.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResultPreviewsManager.prototype, \"previewContainerId\", {\r\n        get: function () {\r\n            return \"coveo-previews-for-\" + this.lastDisplayedSuggestion.dom.id;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ResultPreviewsManager.prototype.displaySearchResultPreviewsForSuggestion = function (suggestion) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var externalOptions, currentDelay, isQueryForSuggestionOngoing, arePreviewsForSuggestionCurrentlyDisplayed, _a, status, results;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        externalOptions = this.getExternalOptions();\r\n                        currentDelay = (this.lastDelay = Utils_1.Utils.resolveAfter(Utils_1.Utils.isNullOrUndefined(externalOptions.displayAfterDuration) ? 200 : externalOptions.displayAfterDuration));\r\n                        return [4 /*yield*/, currentDelay];\r\n                    case 1:\r\n                        _b.sent();\r\n                        if (currentDelay !== this.lastDelay) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        isQueryForSuggestionOngoing = suggestion && this.lastQueriedSuggestion === suggestion;\r\n                        if (isQueryForSuggestionOngoing) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        arePreviewsForSuggestionCurrentlyDisplayed = this.lastDisplayedSuggestion === suggestion;\r\n                        if (arePreviewsForSuggestionCurrentlyDisplayed) {\r\n                            this.previewsProcessor.overrideIfProcessing();\r\n                            this.lastQueriedSuggestion = null;\r\n                            return [2 /*return*/];\r\n                        }\r\n                        this.lastQueriedSuggestion = suggestion;\r\n                        if (!suggestion) {\r\n                            this.displaySuggestionPreviews(null, []);\r\n                            return [2 /*return*/];\r\n                        }\r\n                        return [4 /*yield*/, this.getSearchResultPreviewsQuery(suggestion)];\r\n                    case 2:\r\n                        _a = _b.sent(), status = _a.status, results = _a.results;\r\n                        if (status === QueryProcessor_1.ProcessingStatus.Overriden) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        this.lastQueriedSuggestion = null;\r\n                        this.displaySuggestionPreviews(suggestion, results);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ResultPreviewsManager.prototype.getElementInDirection = function (direction) {\r\n        var previewElements = this.previewElements;\r\n        var focusedIndex = previewElements.indexOf(this.focusedPreviewElement);\r\n        if (focusedIndex === -1) {\r\n            return null;\r\n        }\r\n        if (focusedIndex === 0 && direction === SuggestionsManager_1.Direction.Left) {\r\n            return null;\r\n        }\r\n        return previewElements[(focusedIndex + this.getIncrementInDirection(direction)) % previewElements.length];\r\n    };\r\n    ResultPreviewsManager.prototype.getIncrementInDirection = function (direction) {\r\n        switch (direction) {\r\n            case SuggestionsManager_1.Direction.Left:\r\n                return -1;\r\n            case SuggestionsManager_1.Direction.Right:\r\n                return 1;\r\n            case SuggestionsManager_1.Direction.Up:\r\n                return -this.numberOfResultsPerRow;\r\n            case SuggestionsManager_1.Direction.Down:\r\n                return this.numberOfResultsPerRow;\r\n        }\r\n    };\r\n    ResultPreviewsManager.prototype.setHasPreviews = function (shouldHavePreviews) {\r\n        if (this.hasPreviews === !!shouldHavePreviews) {\r\n            return;\r\n        }\r\n        if (shouldHavePreviews) {\r\n            this.initPreviewForSuggestions();\r\n        }\r\n        else {\r\n            this.revertPreviewForSuggestions();\r\n        }\r\n    };\r\n    ResultPreviewsManager.prototype.initPreviewForSuggestions = function () {\r\n        this.suggestionsPreviewContainer = Dom_1.$$('div', {\r\n            className: 'coveo-suggestion-container'\r\n        }, this.suggestionsListbox.el, this.buildPreviewContainer());\r\n        this.element.appendChild(this.suggestionsPreviewContainer.el);\r\n        this.suggestionsListbox.setAttribute('aria-controls', this.previewContainerId);\r\n    };\r\n    ResultPreviewsManager.prototype.revertPreviewForSuggestions = function () {\r\n        this.element.appendChild(this.suggestionsListbox.el);\r\n        this.suggestionsPreviewContainer.remove();\r\n        this.suggestionsPreviewContainer = null;\r\n    };\r\n    ResultPreviewsManager.prototype.buildPreviewContainer = function () {\r\n        return Dom_1.$$('div', {\r\n            className: 'coveo-preview-container',\r\n            id: this.previewContainerId\r\n        }, (this.resultPreviewsContainer = Dom_1.$$('div', {\r\n            className: 'coveo-preview-results',\r\n            role: 'listbox',\r\n            'aria-orientation': 'horizontal'\r\n        }))).el;\r\n    };\r\n    ResultPreviewsManager.prototype.getExternalOptions = function () {\r\n        var optionsEventArgs = {};\r\n        Dom_1.$$(this.root).trigger(ResultPreviewsManagerEvents_1.ResultPreviewsManagerEvents.updateResultPreviewsManagerOptions, optionsEventArgs);\r\n        return optionsEventArgs;\r\n    };\r\n    ResultPreviewsManager.prototype.getSearchResultPreviewsQuery = function (suggestion) {\r\n        var populateEventArgs = {\r\n            suggestion: suggestion,\r\n            previewsQueries: []\r\n        };\r\n        Dom_1.$$(this.root).trigger(ResultPreviewsManagerEvents_1.ResultPreviewsManagerEvents.populateSearchResultPreviews, populateEventArgs);\r\n        return this.previewsProcessor.processQueries(populateEventArgs.previewsQueries);\r\n    };\r\n    ResultPreviewsManager.prototype.appendSearchResultPreview = function (preview, position) {\r\n        this.resultPreviewsContainer.append(preview.element);\r\n        preview.element.id = \"coveo-result-preview-\" + position;\r\n        var elementDom = Dom_1.$$(preview.element);\r\n        elementDom.setAttribute('aria-selected', 'false');\r\n        elementDom.setAttribute('role', 'option');\r\n        elementDom.on('click', function () { return preview.onSelect(); });\r\n        elementDom.on('keyboardSelect', function () { return preview.onSelect(); });\r\n    };\r\n    ResultPreviewsManager.prototype.appendSearchResultPreviews = function (previews) {\r\n        var _this = this;\r\n        this.resultPreviewsContainer.empty();\r\n        previews.forEach(function (preview, i) { return _this.appendSearchResultPreview(preview, i); });\r\n    };\r\n    ResultPreviewsManager.prototype.displaySuggestionPreviews = function (suggestion, previews) {\r\n        this.lastDisplayedSuggestion = suggestion;\r\n        this.setHasPreviews(previews && previews.length > 0);\r\n        this.element.classList.toggle('magic-box-hasPreviews', this.hasPreviews);\r\n        if (!this.hasPreviews) {\r\n            return;\r\n        }\r\n        this.appendSearchResultPreviews(previews);\r\n    };\r\n    return ResultPreviewsManager;\r\n}());\r\nexports.ResultPreviewsManager = ResultPreviewsManager;\r\n\n\n/***/ }),\n\n/***/ 559:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nvar MagicBoxClear = /** @class */ (function () {\r\n    function MagicBoxClear(magicBox) {\r\n        this.element = Dom_1.$$('div', {\r\n            className: 'magic-box-clear'\r\n        });\r\n        var clearIcon = Dom_1.$$('div', {\r\n            className: 'magic-box-icon'\r\n        });\r\n        this.element.append(clearIcon.el);\r\n        this.element.insertAfter(Dom_1.$$(magicBox.element).find('input'));\r\n        new AccessibleButton_1.AccessibleButton()\r\n            .withElement(this.element)\r\n            .withLabel(Strings_1.l('Clear'))\r\n            .withSelectAction(function () { return magicBox.clear(); })\r\n            .build();\r\n        this.toggleTabindexAndAriaHidden(false);\r\n    }\r\n    MagicBoxClear.prototype.toggleTabindexAndAriaHidden = function (hasText) {\r\n        var tabindex = hasText ? '0' : '-1';\r\n        this.element.setAttribute('tabindex', tabindex);\r\n        this.element.setAttribute('aria-hidden', \"\" + !hasText);\r\n    };\r\n    return MagicBoxClear;\r\n}());\r\nexports.MagicBoxClear = MagicBoxClear;\r\n\n\n/***/ }),\n\n/***/ 560:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 568:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 569:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar _ = __webpack_require__(0);\r\nvar MagicBoxUtils_1 = __webpack_require__(219);\r\nvar FieldAddon = /** @class */ (function () {\r\n    function FieldAddon(omnibox) {\r\n        var _this = this;\r\n        this.omnibox = omnibox;\r\n        this.cache = {};\r\n        this.omnibox.bind.on(this.omnibox.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (args) {\r\n            args.suggestions.push(_this.getSuggestion());\r\n        });\r\n    }\r\n    FieldAddon.prototype.getSuggestion = function () {\r\n        var _this = this;\r\n        var hash = this.getHash();\r\n        if (hash == null) {\r\n            return null;\r\n        }\r\n        var hashString = this.hashToString(hash);\r\n        if (this.cache[hashString] != null) {\r\n            return this.hashValueToSuggestion(hash, this.cache[hashString]);\r\n        }\r\n        var values;\r\n        if (hash.type == 'FieldName') {\r\n            values = this.fieldNames(hash.current);\r\n        }\r\n        if (hash.type == 'FieldValue') {\r\n            values = this.fieldValues(hash.field, hash.current);\r\n        }\r\n        if (hash.type == 'SimpleFieldName') {\r\n            values = this.simpleFieldNames(hash.current);\r\n        }\r\n        this.cache[hashString] = values;\r\n        values.catch(function () {\r\n            delete _this.cache[hashString];\r\n        });\r\n        return this.hashValueToSuggestion(hash, values);\r\n    };\r\n    FieldAddon.prototype.getHash = function () {\r\n        var fieldName = _.last(this.omnibox.resultAtCursor('FieldName'));\r\n        if (fieldName != null) {\r\n            fieldName = fieldName.findParent('Field') || fieldName;\r\n            var currentField = fieldName.toString();\r\n            var before = fieldName.before();\r\n            var after = fieldName.after();\r\n            return { type: 'FieldName', current: currentField, before: before, after: after };\r\n        }\r\n        var fieldValue = _.last(this.omnibox.resultAtCursor('FieldValue'));\r\n        if (fieldValue) {\r\n            var fieldQuery = fieldValue.findParent('FieldQuery') || (this.omnibox.options.enableSimpleFieldAddon && fieldValue.findParent('FieldSimpleQuery'));\r\n            if (fieldQuery) {\r\n                var field = fieldQuery.find('FieldName').toString();\r\n                if (this.omnibox.options.fieldAlias) {\r\n                    if (field in this.omnibox.options.fieldAlias) {\r\n                        field = this.omnibox.options.fieldAlias[field];\r\n                    }\r\n                }\r\n                var value = fieldValue.toString();\r\n                var before = fieldValue.before();\r\n                var after = fieldValue.after();\r\n                return { type: 'FieldValue', field: field, current: value, before: before, after: after };\r\n            }\r\n        }\r\n        if (this.omnibox.options.enableSimpleFieldAddon) {\r\n            var word = _.last(this.omnibox.resultAtCursor('Word'));\r\n            if (word != null) {\r\n                var current = word.toString();\r\n                var before = word.before();\r\n                var after = word.after();\r\n                return { type: 'SimpleFieldName', current: current, before: before, after: after };\r\n            }\r\n        }\r\n    };\r\n    FieldAddon.prototype.hashToString = function (hash) {\r\n        if (hash == null) {\r\n            return null;\r\n        }\r\n        return hash.type + hash.current + (hash.field || '');\r\n    };\r\n    FieldAddon.prototype.hashValueToSuggestion = function (hash, promise) {\r\n        return promise.then(function (values) {\r\n            var suggestions = _.map(values, function (value, i) {\r\n                var suggestion = {\r\n                    text: hash.before +\r\n                        (hash.current.toLowerCase().indexOf(value.toLowerCase()) == 0 ? hash.current + value.substr(hash.current.length) : value) +\r\n                        hash.after,\r\n                    html: MagicBoxUtils_1.MagicBoxUtils.highlightText(value, hash.current, true),\r\n                    index: FieldAddon.INDEX - i / values.length\r\n                };\r\n                return suggestion;\r\n            });\r\n            return suggestions;\r\n        });\r\n    };\r\n    FieldAddon.prototype.getFields = function () {\r\n        var _this = this;\r\n        if (this.fields == null) {\r\n            this.fields = new Promise(function (resolve, reject) {\r\n                if (_this.omnibox.options.listOfFields != null) {\r\n                    resolve(_this.omnibox.options.listOfFields);\r\n                }\r\n                else {\r\n                    var promise = _this.omnibox.queryController.getEndpoint().listFields();\r\n                    promise\r\n                        .then(function (fieldDescriptions) {\r\n                        var fieldNames = _.chain(fieldDescriptions)\r\n                            .filter(function (fieldDescription) { return fieldDescription.includeInQuery && fieldDescription.groupByField; })\r\n                            .map(function (fieldDescription) { return fieldDescription.name.substr(1); })\r\n                            .value();\r\n                        resolve(fieldNames);\r\n                    })\r\n                        .catch(function () {\r\n                        reject();\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return this.fields;\r\n    };\r\n    FieldAddon.prototype.fieldNames = function (current) {\r\n        var withAt = current.length > 0 && current[0] == '@';\r\n        var fieldName = withAt ? current.substr(1) : current;\r\n        var fieldNameLC = fieldName.toLowerCase();\r\n        return this.getFields().then(function (fields) {\r\n            var matchFields = _.chain(fields)\r\n                .map(function (fieldName) {\r\n                var fieldNameBeginsWithAt = fieldName.length > 0 && fieldName[0] == '@';\r\n                return {\r\n                    index: fieldName.toLowerCase().indexOf(fieldNameLC),\r\n                    field: fieldNameBeginsWithAt ? fieldName : '@' + fieldName\r\n                };\r\n            })\r\n                .filter(function (field) {\r\n                return field.index != -1 && field.field.length > current.length;\r\n            })\r\n                .sortBy('index')\r\n                .map(function (field) { return field.field; })\r\n                .value();\r\n            matchFields = _.first(matchFields, 5);\r\n            return matchFields;\r\n        });\r\n    };\r\n    FieldAddon.prototype.fieldValues = function (field, current) {\r\n        return this.omnibox.queryController\r\n            .getEndpoint()\r\n            .listFieldValues({\r\n            pattern: '.*' + current + '.*',\r\n            patternType: 'RegularExpression',\r\n            sortCriteria: 'occurrences',\r\n            field: '@' + field,\r\n            maximumNumberOfValues: 5\r\n        })\r\n            .then(function (values) {\r\n            return _.chain(values)\r\n                .map(function (value) {\r\n                return {\r\n                    index: value.value.toLowerCase().indexOf(current),\r\n                    value: value.value\r\n                };\r\n            })\r\n                .filter(function (value) {\r\n                return value.value.length > current.length;\r\n            })\r\n                .sortBy('index')\r\n                .map(function (value) {\r\n                return value.value.replace(/ /g, '\\u00A0');\r\n            })\r\n                .value();\r\n        });\r\n    };\r\n    FieldAddon.prototype.simpleFieldNames = function (current) {\r\n        var fieldName = current;\r\n        var fieldNameLC = fieldName.toLowerCase();\r\n        return this.getFields().then(function (fields) {\r\n            var matchFields = _.chain(fields)\r\n                .map(function (field) {\r\n                return {\r\n                    index: field.toLowerCase().indexOf(fieldNameLC),\r\n                    field: field + ':'\r\n                };\r\n            })\r\n                .filter(function (field) {\r\n                return field.index != -1 && field.field.length > current.length;\r\n            })\r\n                .sortBy('index')\r\n                .map(function (field) { return field.field; })\r\n                .value();\r\n            matchFields = _.first(matchFields, 5);\r\n            return matchFields;\r\n        });\r\n    };\r\n    FieldAddon.INDEX = 64;\r\n    return FieldAddon;\r\n}());\r\nexports.FieldAddon = FieldAddon;\r\n\n\n/***/ }),\n\n/***/ 570:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar _ = __webpack_require__(0);\r\nvar OldOmniboxAddon = /** @class */ (function () {\r\n    function OldOmniboxAddon(omnibox) {\r\n        var _this = this;\r\n        this.omnibox = omnibox;\r\n        this.omnibox.bind.on(this.omnibox.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (args) {\r\n            _.each(_this.getSuggestion(), function (suggestion) {\r\n                args.suggestions.push(suggestion);\r\n            });\r\n        });\r\n    }\r\n    OldOmniboxAddon.prototype.getSuggestion = function () {\r\n        var text = this.omnibox.magicBox.getText();\r\n        if (text.length == 0) {\r\n            return null;\r\n        }\r\n        var eventArgs = this.buildPopulateOmniboxEventArgs();\r\n        Dom_1.$$(this.omnibox.root).trigger(OmniboxEvents_1.OmniboxEvents.populateOmnibox, eventArgs);\r\n        return this.rowsToSuggestions(eventArgs.rows);\r\n    };\r\n    OldOmniboxAddon.prototype.getCurrentQueryExpression = function () {\r\n        var cursorPos = this.omnibox.getCursor();\r\n        var value = this.omnibox.getText();\r\n        var length = value.length;\r\n        var start = cursorPos;\r\n        var end = cursorPos;\r\n        if (value[start] == ' ') {\r\n            start--;\r\n        }\r\n        while (start > 0 && value[start] != ' ') {\r\n            start--;\r\n        }\r\n        while (end < length && value[end] != ' ') {\r\n            end++;\r\n        }\r\n        return value.substring(start, end);\r\n    };\r\n    OldOmniboxAddon.prototype.getRegexToSearch = function (strValue) {\r\n        if (strValue == null) {\r\n            strValue = this.omnibox.getText();\r\n        }\r\n        return new RegExp(Utils_1.Utils.escapeRegexCharacter(strValue), 'i');\r\n    };\r\n    OldOmniboxAddon.prototype.getQueryExpressionBreakDown = function () {\r\n        var _this = this;\r\n        var ret = [];\r\n        var queryWords = this.omnibox.getText().split(' ');\r\n        _.each(queryWords, function (word) {\r\n            ret.push({\r\n                word: word,\r\n                regex: _this.getRegexToSearch(word)\r\n            });\r\n        });\r\n        return ret;\r\n    };\r\n    OldOmniboxAddon.prototype.replace = function (searchValue, newValue) {\r\n        this.omnibox.setText(this.omnibox.getText().replace(searchValue, newValue));\r\n    };\r\n    OldOmniboxAddon.prototype.clearCurrentExpression = function () {\r\n        this.replace(this.getCurrentQueryExpression(), '');\r\n    };\r\n    OldOmniboxAddon.prototype.insertAt = function (at, toInsert) {\r\n        var oldValue = this.omnibox.getText();\r\n        var newValue = [oldValue.slice(0, at), toInsert, oldValue.slice(at)].join('');\r\n        this.omnibox.setText(newValue);\r\n    };\r\n    OldOmniboxAddon.prototype.replaceCurrentExpression = function (newValue) {\r\n        this.replace(this.getCurrentQueryExpression(), newValue);\r\n    };\r\n    OldOmniboxAddon.prototype.buildPopulateOmniboxEventArgs = function () {\r\n        var _this = this;\r\n        var currentQueryExpression = this.getCurrentQueryExpression();\r\n        var ret = {\r\n            rows: [],\r\n            completeQueryExpression: {\r\n                word: this.omnibox.getText(),\r\n                regex: this.getRegexToSearch()\r\n            },\r\n            currentQueryExpression: {\r\n                word: currentQueryExpression,\r\n                regex: this.getRegexToSearch(currentQueryExpression)\r\n            },\r\n            allQueryExpressions: this.getQueryExpressionBreakDown(),\r\n            cursorPosition: this.omnibox.getCursor(),\r\n            clear: function () {\r\n                _this.omnibox.clear();\r\n            },\r\n            clearCurrentExpression: function () {\r\n                _this.clearCurrentExpression();\r\n            },\r\n            replace: function (searchValue, newValue) {\r\n                _this.replace(searchValue, newValue);\r\n            },\r\n            replaceCurrentExpression: function (newValue) {\r\n                _this.replaceCurrentExpression(newValue);\r\n            },\r\n            insertAt: function (at, toInsert) {\r\n                _this.insertAt(at, toInsert);\r\n            },\r\n            closeOmnibox: function () {\r\n                _this.omnibox.magicBox.blur();\r\n            }\r\n        };\r\n        return ret;\r\n    };\r\n    OldOmniboxAddon.prototype.rowsToSuggestions = function (rows) {\r\n        return _.map(rows, function (row) {\r\n            if (!Utils_1.Utils.isNullOrUndefined(row.element)) {\r\n                return new Promise(function (resolve) {\r\n                    resolve([\r\n                        {\r\n                            dom: row.element,\r\n                            index: row.zIndex\r\n                        }\r\n                    ]);\r\n                });\r\n            }\r\n            else if (!Utils_1.Utils.isNullOrUndefined(row.deferred)) {\r\n                return new Promise(function (resolve) {\r\n                    row.deferred.then(function (row) {\r\n                        if (row.element != null) {\r\n                            resolve([\r\n                                {\r\n                                    dom: row.element,\r\n                                    index: row.zIndex\r\n                                }\r\n                            ]);\r\n                        }\r\n                        else {\r\n                            resolve(null);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        });\r\n    };\r\n    return OldOmniboxAddon;\r\n}());\r\nexports.OldOmniboxAddon = OldOmniboxAddon;\r\n\n\n/***/ }),\n\n/***/ 571:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///<reference path='Omnibox.ts'/>\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar _ = __webpack_require__(0);\r\nvar MagicBoxUtils_1 = __webpack_require__(219);\r\nvar QueryExtensionAddon = /** @class */ (function () {\r\n    function QueryExtensionAddon(omnibox) {\r\n        var _this = this;\r\n        this.omnibox = omnibox;\r\n        this.cache = {};\r\n        this.omnibox.bind.on(this.omnibox.element, OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (args) {\r\n            args.suggestions.push(_this.getSuggestion());\r\n        });\r\n    }\r\n    QueryExtensionAddon.prototype.getSuggestion = function () {\r\n        var _this = this;\r\n        var hash = this.getHash(this.omnibox.magicBox);\r\n        if (hash == null) {\r\n            return null;\r\n        }\r\n        var hashString = this.hashToString(hash);\r\n        if (this.cache[hashString] != null) {\r\n            return this.hashValueToSuggestion(hash, this.cache[hashString]);\r\n        }\r\n        var values = hash.type == 'QueryExtensionName' ? this.names(hash.current) : this.attributeNames(hash.name, hash.current, hash.used);\r\n        this.cache[hashString] = values;\r\n        values.catch(function () {\r\n            delete _this.cache[hashString];\r\n        });\r\n        return this.hashValueToSuggestion(hash, values);\r\n    };\r\n    QueryExtensionAddon.prototype.getHash = function (magicBox) {\r\n        var queryExtension = _.last(magicBox.resultAtCursor('QueryExtension'));\r\n        if (queryExtension != null) {\r\n            var queryExtensionArgumentResults = queryExtension.findAll('QueryExtensionArgument');\r\n            var current = _.last(magicBox.resultAtCursor('QueryExtensionName'));\r\n            if (current != null) {\r\n                return {\r\n                    type: 'QueryExtensionName',\r\n                    current: current.toString(),\r\n                    before: current.before(),\r\n                    after: current.after()\r\n                };\r\n            }\r\n            current = _.last(magicBox.resultAtCursor('QueryExtensionArgumentName'));\r\n            if (current != null) {\r\n                var used = _.chain(queryExtensionArgumentResults)\r\n                    .map(function (result) {\r\n                    var name = result.find('QueryExtensionArgumentName');\r\n                    return name && name.toString();\r\n                })\r\n                    .compact()\r\n                    .value();\r\n                var name = queryExtension.find('QueryExtensionName').toString();\r\n                return {\r\n                    type: 'QueryExtensionArgumentName',\r\n                    current: current.toString(),\r\n                    before: current.before(),\r\n                    after: current.after(),\r\n                    name: name,\r\n                    used: used\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    QueryExtensionAddon.prototype.hashToString = function (hash) {\r\n        if (hash == null) {\r\n            return null;\r\n        }\r\n        return [hash.type, hash.current, hash.name || '', hash.used ? hash.used.join() : ''].join();\r\n    };\r\n    QueryExtensionAddon.prototype.hashValueToSuggestion = function (hash, promise) {\r\n        return promise.then(function (values) {\r\n            var suggestions = _.map(values, function (value, i) {\r\n                return {\r\n                    html: MagicBoxUtils_1.MagicBoxUtils.highlightText(value, hash.current, true),\r\n                    text: hash.before + value + hash.after,\r\n                    index: QueryExtensionAddon.INDEX - i / values.length\r\n                };\r\n            });\r\n            return suggestions;\r\n        });\r\n    };\r\n    QueryExtensionAddon.prototype.getExtensions = function () {\r\n        if (this.extensions == null) {\r\n            this.extensions = this.omnibox.queryController.getEndpoint().extensions();\r\n        }\r\n        return this.extensions;\r\n    };\r\n    QueryExtensionAddon.prototype.names = function (current) {\r\n        var extensionName = current.toLowerCase();\r\n        return this.getExtensions().then(function (extensions) {\r\n            var matchExtensions = _.chain(extensions)\r\n                .map(function (extension) {\r\n                return {\r\n                    index: extension.name.toLowerCase().indexOf(extensionName),\r\n                    extension: extension.name\r\n                };\r\n            })\r\n                .filter(function (extension) {\r\n                return extension.index != -1 && extension.extension.length > extensionName.length;\r\n            })\r\n                .sortBy('index')\r\n                .pluck('extension')\r\n                .value();\r\n            matchExtensions = _.first(matchExtensions, 5);\r\n            return matchExtensions;\r\n        });\r\n    };\r\n    QueryExtensionAddon.prototype.attributeNames = function (name, current, used) {\r\n        return this.getExtensions().then(function (extensions) {\r\n            var extension = _.find(extensions, function (extension) { return extension.name == name; });\r\n            if (extension == null) {\r\n                return [];\r\n            }\r\n            else {\r\n                return _.filter(_.difference(extension.argumentNames, used), function (argumentName) { return argumentName.indexOf(current) == 0; });\r\n            }\r\n        });\r\n    };\r\n    QueryExtensionAddon.prototype.hash = function () {\r\n        return;\r\n    };\r\n    QueryExtensionAddon.INDEX = 62;\r\n    return QueryExtensionAddon;\r\n}());\r\nexports.QueryExtensionAddon = QueryExtensionAddon;\r\n\n\n/***/ }),\n\n/***/ 572:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\nvar ComponentOptionsModel_1 = __webpack_require__(28);\r\nvar OmniboxEvents_1 = __webpack_require__(33);\r\nvar StringUtils_1 = __webpack_require__(22);\r\nvar underscore_1 = __webpack_require__(0);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar HistoryStore_1 = __webpack_require__(122);\r\nvar AnalyticsInformation_1 = __webpack_require__(65);\r\nvar QuerySuggestAddon = /** @class */ (function () {\r\n    function QuerySuggestAddon(omnibox) {\r\n        var _this = this;\r\n        this.omnibox = omnibox;\r\n        Dom_1.$$(this.omnibox.element).on(OmniboxEvents_1.OmniboxEvents.populateOmniboxSuggestions, function (e, args) {\r\n            args.suggestions.push(_this.getSuggestion());\r\n        });\r\n    }\r\n    QuerySuggestAddon.suggestiontHtml = function (suggestion) {\r\n        return suggestion.highlighted.replace(/\\[(.*?)\\]|\\{(.*?)\\}|\\((.*?)\\)/g, function (part, notMatched, matched, corrected) {\r\n            var className = '';\r\n            if (matched) {\r\n                className = 'coveo-omnibox-hightlight';\r\n            }\r\n            if (corrected) {\r\n                className = 'coveo-omnibox-hightlight2';\r\n            }\r\n            var ret;\r\n            if (className) {\r\n                ret = Dom_1.$$('span', {\r\n                    className: className\r\n                });\r\n            }\r\n            else {\r\n                ret = Dom_1.$$('span');\r\n            }\r\n            ret.text(notMatched || matched || corrected);\r\n            return ret.el.outerHTML;\r\n        });\r\n    };\r\n    QuerySuggestAddon.isPartialMatch = function (suggestion) {\r\n        // groups : 1=notMatched, 2=matched, 3=corrected\r\n        var parts = StringUtils_1.StringUtils.match(suggestion.highlighted, /\\[(.*?)\\]|\\{(.*?)\\}|\\((.*?)\\)/g);\r\n        var firstFail = underscore_1.find(parts, function (part) { return part[1] != null; });\r\n        // if no fail found, this is a partial or a full match\r\n        if (firstFail == null) {\r\n            return true;\r\n        }\r\n        // if all right parts are notMatched, the right parts is autocomplete\r\n        return underscore_1.every(underscore_1.last(parts, underscore_1.indexOf(parts, firstFail) - parts.length), function (part) { return part[1] != null; });\r\n    };\r\n    QuerySuggestAddon.prototype.getSuggestion = function () {\r\n        var text = this.omnibox.magicBox.getText();\r\n        if (text.length >= this.omnibox.options.querySuggestCharacterThreshold) {\r\n            return this.getQuerySuggest(text);\r\n        }\r\n        return Promise.resolve([]);\r\n    };\r\n    QuerySuggestAddon.prototype.getQuerySuggest = function (text) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var payload, results, _a, completions;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        payload = {\r\n                            q: text,\r\n                            locale: this.locale,\r\n                            searchHub: this.searchHub,\r\n                            pipeline: this.pipeline,\r\n                            enableWordCompletion: this.enableWordCompletion,\r\n                            context: this.context,\r\n                            count: this.count,\r\n                            tab: this.tab,\r\n                            referrer: document.referrer,\r\n                            actionsHistory: this.actionsHistory,\r\n                            timezone: this.timezone,\r\n                            visitorId: this.visitorId,\r\n                            isGuestUser: this.isGuestUser\r\n                        };\r\n                        Dom_1.$$(this.omnibox.getBindings().searchInterface.element).trigger(OmniboxEvents_1.OmniboxEvents.buildingQuerySuggest, {\r\n                            payload: payload\r\n                        });\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        _b.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, this.omnibox.queryController.getEndpoint().getQuerySuggest(payload)];\r\n                    case 2:\r\n                        results = _b.sent();\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        _a = _b.sent();\r\n                        return [2 /*return*/, []];\r\n                    case 4:\r\n                        completions = results.completions;\r\n                        Dom_1.$$(this.omnibox.getBindings().searchInterface.element).trigger(OmniboxEvents_1.OmniboxEvents.querySuggestSuccess, {\r\n                            completions: completions\r\n                        });\r\n                        return [2 /*return*/, underscore_1.map(completions, function (completion, i) {\r\n                                return {\r\n                                    html: QuerySuggestAddon.suggestiontHtml(completion),\r\n                                    text: completion.expression,\r\n                                    index: QuerySuggestAddon.INDEX - i / completions.length,\r\n                                    partial: QuerySuggestAddon.isPartialMatch(completion),\r\n                                    executableConfidence: completion.executableConfidence\r\n                                };\r\n                            })];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"tab\", {\r\n        get: function () {\r\n            var tab = this.omnibox.getBindings().queryStateModel.get(QueryStateModel_1.QUERY_STATE_ATTRIBUTES.T);\r\n            if (Utils_1.Utils.isNonEmptyString(tab)) {\r\n                return tab;\r\n            }\r\n            return undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"locale\", {\r\n        get: function () {\r\n            return String['locale'];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"searchHub\", {\r\n        get: function () {\r\n            return this.omnibox.getBindings().componentOptionsModel.get(ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.searchHub);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"pipeline\", {\r\n        get: function () {\r\n            return this.omnibox.getBindings().searchInterface.options.pipeline;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"enableWordCompletion\", {\r\n        get: function () {\r\n            return this.omnibox.options.enableSearchAsYouType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"context\", {\r\n        get: function () {\r\n            return this.omnibox.getBindings().searchInterface.getQueryContext();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"count\", {\r\n        get: function () {\r\n            return this.omnibox.options.numberOfSuggestions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"actionsHistory\", {\r\n        get: function () {\r\n            var historyStore = HistoryStore_1.buildHistoryStore();\r\n            var historyFromStore = historyStore.getHistory();\r\n            if (historyFromStore == null) {\r\n                return [];\r\n            }\r\n            return historyFromStore;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"timezone\", {\r\n        get: function () {\r\n            return this.omnibox.getBindings().searchInterface.options.timezone;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"visitorId\", {\r\n        get: function () {\r\n            return new AnalyticsInformation_1.AnalyticsInformation().visitorId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuerySuggestAddon.prototype, \"isGuestUser\", {\r\n        get: function () {\r\n            return this.omnibox.getBindings().queryController.getEndpoint().options.isGuestUser;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    QuerySuggestAddon.INDEX = 60;\r\n    return QuerySuggestAddon;\r\n}());\r\nexports.QuerySuggestAddon = QuerySuggestAddon;\r\nvar VoidQuerySuggestAddon = /** @class */ (function () {\r\n    function VoidQuerySuggestAddon() {\r\n    }\r\n    VoidQuerySuggestAddon.prototype.getSuggestion = function () {\r\n        return Promise.resolve([]);\r\n    };\r\n    return VoidQuerySuggestAddon;\r\n}());\r\nexports.VoidQuerySuggestAddon = VoidQuerySuggestAddon;\r\n\n\n/***/ }),\n\n/***/ 664:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 665:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\nvar SearchBoxResize = /** @class */ (function () {\r\n    function SearchBoxResize() {\r\n    }\r\n    SearchBoxResize.resize = function (element, size) {\r\n        var _this = this;\r\n        var searchbox = this.getSearchbox(element);\r\n        var elementToResize = this.getElementsToResize(element);\r\n        var magicboxInput = this.getInput(element);\r\n        var searchboxStyle = \"height: \" + size + \"px; line-height: \" + size + \"px;\";\r\n        var inputChangeStyle = \"height: \" + size + \"px\";\r\n        //This need to be a little bit smaller because when the height become smaller than 38px or to big, the bottom border of the Searchbox dissapear\r\n        var magicboxInputStyle = \"height: \" + (size - 2) + \"px;\";\r\n        this.applyStyle(searchbox, searchboxStyle);\r\n        this.applyStyle(magicboxInput, magicboxInputStyle);\r\n        elementToResize.forEach(function (HtmlElement) {\r\n            _this.applyStyle(HtmlElement, inputChangeStyle);\r\n        });\r\n    };\r\n    SearchBoxResize.applyStyle = function (element, style) {\r\n        element.style.cssText += style;\r\n    };\r\n    SearchBoxResize.getSearchbox = function (element) {\r\n        return Dom_1.$$(element).find('.CoveoOmnibox') || Dom_1.$$(element).find('.CoveoQuerybox');\r\n    };\r\n    SearchBoxResize.getElementsToResize = function (element) {\r\n        return [\r\n            Dom_1.$$(element).find('.CoveoSearchButton'),\r\n            Dom_1.$$(Dom_1.$$(element).find('.magic-box-input')).find('input'),\r\n            Dom_1.$$(element).find('.magic-box-icon'),\r\n            Dom_1.$$(element).find('.magic-box-clear'),\r\n            Dom_1.$$(element).find('.magic-box-underlay')\r\n        ];\r\n    };\r\n    SearchBoxResize.getInput = function (element) {\r\n        return Dom_1.$$(element).find('.magic-box-input');\r\n    };\r\n    return SearchBoxResize;\r\n}());\r\nexports.SearchBoxResize = SearchBoxResize;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Searchbox.min__5f3280c404a1ee75a113.js","import { SubGrammar } from './Expressions';\r\nimport { Expression } from '../Expression/Expression';\r\nimport { Result } from '../Result/Result';\r\nimport { EndOfInputResult } from '../Result/Result';\r\n\r\nexport const notWordStart = ' ()[],$@\\'\"';\r\nexport const notInWord = ' ()[],:';\r\n\r\nexport const Basic: SubGrammar = {\r\n  basicExpressions: ['Word', 'DoubleQuoted'],\r\n  grammars: {\r\n    DoubleQuoted: '\"[NotDoubleQuote]\"',\r\n    NotDoubleQuote: /[^\"]*/,\r\n    SingleQuoted: \"'[NotSingleQuote]'\",\r\n    NotSingleQuote: /[^']*/,\r\n    Number: /-?(0|[1-9]\\d*)(\\.\\d+)?/,\r\n    Word: (input: string, end: boolean, expression: Expression) => {\r\n      const regex = new RegExp('[^' + notWordStart.replace(/(.)/g, '\\\\$1') + '][^' + notInWord.replace(/(.)/g, '\\\\$1') + ']*');\r\n      let groups = input.match(regex);\r\n      if (groups != null && groups.index != 0) {\r\n        groups = null;\r\n      }\r\n      const result = new Result(groups != null ? groups[0] : null, expression, input);\r\n      if (result.isSuccess() && end && input.length > result.value.length) {\r\n        return new EndOfInputResult(result);\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/Basic.ts","import 'styling/_Querybox';\r\nimport { IBuildingQueryEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { StandaloneSearchInterfaceEvents } from '../../events/StandaloneSearchInterfaceEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Grammar } from '../../magicbox/Grammar';\r\nimport { createMagicBox, MagicBoxInstance } from '../../magicbox/MagicBox';\r\nimport { Result } from '../../magicbox/Result/Result';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { IAttributeChangedEventArg, MODEL_EVENTS } from '../../models/Model';\r\nimport { QueryStateModel, QUERY_STATE_ATTRIBUTES } from '../../models/QueryStateModel';\r\nimport { l } from '../../strings/Strings';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { analyticsActionCauseList, IAnalyticsNoMeta } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { QueryboxOptionsProcessing } from './QueryboxOptionsProcessing';\r\nimport { QueryboxQueryParameters } from './QueryboxQueryParameters';\r\n\r\nexport interface IQueryboxOptions {\r\n  enableSearchAsYouType?: boolean;\r\n  searchAsYouTypeDelay?: number;\r\n  enableQuerySyntax?: boolean;\r\n  enableWildcards?: boolean;\r\n  enableQuestionMarks?: boolean;\r\n  enableLowercaseOperators?: boolean;\r\n  enablePartialMatch?: boolean;\r\n  partialMatchKeywords?: number;\r\n  partialMatchThreshold?: string;\r\n  placeholder?: string;\r\n  triggerQueryOnClear?: boolean;\r\n}\r\n\r\n/**\r\n * The `Querybox` component renders an input which the end user can interact with to enter and submit queries.\r\n *\r\n * When the end user submits a search request, the `Querybox` component triggers a query and logs the corresponding\r\n * usage analytics data.\r\n *\r\n * For technical reasons, it is necessary to instantiate this component on a `div` element rather than on an `input`\r\n * element.\r\n *\r\n * See also the [`Searchbox`]{@link Searchbox} component, which can automatically instantiate a `Querybox` along with an\r\n * optional [`SearchButton`]{@link SearchButton} component.\r\n */\r\nexport class Querybox extends Component {\r\n  static ID = 'Querybox';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Querybox: Querybox,\r\n      QueryboxQueryParameters: QueryboxQueryParameters\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the Querybox.\r\n   * @componentOptions\r\n   */\r\n  public static options: IQueryboxOptions = {\r\n    /**\r\n     * Whether to enable the search-as-you-type feature.\r\n     *\r\n     * **Note:** Enabling this feature can consume lots of queries per month (QPM), especially if the [`searchAsYouTypeDelay`]{@link Querybox.options.searchAsYouTypeDelay} option is set to a low value.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableSearchAsYouType: ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n\r\n    /**\r\n     * If the [`enableSearchAsYouType`]{@link Querybox.options.enableSearchAsYouType} option is `true`, specifies how\r\n     * long to wait (in milliseconds) between each key press before triggering a new query.\r\n     *\r\n     * Default value is `50`. Minimum value is `0`\r\n     */\r\n    searchAsYouTypeDelay: ComponentOptions.buildNumberOption({ defaultValue: 50, min: 0, section: 'Advanced Options' }),\r\n\r\n    /**\r\n     * Specifies whether to interpret special query syntax (e.g., `@objecttype=message`) when the end user types\r\n     * a query in the `Querybox` (see\r\n     * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)). Setting this\r\n     * option to `true` also causes the `Querybox` to highlight any query syntax.\r\n     *\r\n     * Regardless of the value of this option, the Coveo Cloud REST Search API always interprets expressions surrounded\r\n     * by double quotes (`\"`) as exact phrase match requests.\r\n     *\r\n     * See also [`enableLowercaseOperators`]{@link Querybox.options.enableLowercaseOperators}.\r\n     *\r\n     * **Notes:**\r\n     * > * End user preferences can override the value you specify for this option.\r\n     * >\r\n     * > If the end user selects a value other than **Automatic** for the **Enable query syntax** setting (see\r\n     * > the [`enableQuerySyntax`]{@link ResultsPreferences.options.enableQuerySyntax} option of the\r\n     * > [`ResultsPreferences`]{@link ResultsPreferences} component), the end user preference takes precedence over this\r\n     * > option.\r\n     * >\r\n     * > * On-premises versions of the Coveo Search API require this option to be set to `true` in order to interpret\r\n     * > expressions surrounded by double quotes (`\"`) as exact phrase match requests.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableQuerySyntax: ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n\r\n    /**\r\n     * Specifies whether to expand basic expression keywords containing wildcards characters (`*`) to the possible\r\n     * matching keywords in order to broaden the query (see\r\n     * [Using Wildcards in Queries](https://docs.coveo.com/en/1580/)).\r\n     *\r\n     * See also [`enableQuestionMarks`]{@link Querybox.options.enableQuestionMarks}.\r\n     *\r\n     *  **Note:**\r\n     * > If you are using an on-premises version of the Coveo Search API, you need to set the\r\n     * > [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option to `true` to be able to set\r\n     * > `enableWildcards` to `true`.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableWildcards: ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n\r\n    /**\r\n     * If [`enableWildcards`]{@link Querybox.options.enableWildcards} is `true`, specifies whether to expand basic\r\n     * expression keywords containing question mark characters (`?`) to the possible matching keywords in order to\r\n     * broaden the query (see\r\n     * [Using Wildcards in Queries](https://docs.coveo.com/en/1580/)).\r\n     *\r\n     * **Note:**\r\n     * > If you are using an on-premises version of the Coveo Search API, you also need to set the\r\n     * > [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option to `true` in order to be able to set\r\n     * > `enableQuestionMarks` to `true`.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableQuestionMarks: ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableWildcards' }),\r\n\r\n    /**\r\n     * If the [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option is `true`, specifies whether to\r\n     * interpret the `AND`, `NOT`, `OR`, and `NEAR` keywords in the `Querybox` as query operators in the query, even if\r\n     * the end user types those keywords in lowercase.\r\n     *\r\n     * This option applies to all query operators (see\r\n     * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).\r\n     *\r\n     * **Example:**\r\n     * > If this option and the `enableQuerySyntax` option are both `true`, the Coveo Platform interprets the `near`\r\n     * > keyword in a query such as `service center near me` as the `NEAR` query operator (not as a query term).\r\n     *\r\n     * > Otherwise, if the `enableQuerySyntax` option is `true` and this option is `false`, the end user has to type the\r\n     * > `NEAR` keyword in uppercase for the Coveo Platform to interpret it as a query operator.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableLowercaseOperators: ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableQuerySyntax' }),\r\n\r\n    /**\r\n     * Whether to convert a basic expression containing at least a certain number of keywords (see the\r\n     * [`partialMatchKeywords`]{@link Querybox.options.partialMatchKeywords} option) to *partial match expression*, so\r\n     * that items containing at least a certain number of those keywords (see the\r\n     * [`partialMatchThreshold`]{@link Querybox.options.partialMatchThreshold} option) will match the expression.\r\n     *\r\n     * **Notes:**\r\n     * - Only the basic expression of the query (see [`q`]{@link q}) can be converted to a partial match expression.\r\n     * - When the [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax} option is set to `true`, this feature has no effect if the basic expression contains advanced query syntax (field expressions, operators, etc.).\r\n     *\r\n     * @notSupportedIn salesforcefree\r\n     */\r\n    enablePartialMatch: ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n\r\n    /**\r\n     * The minimum number of keywords that need to be present in the basic expression to convert it to a partial match expression.\r\n     *\r\n     * See also the [`partialMatchThreshold`]{@link Querybox.options.partialMatchThreshold} option.\r\n     *\r\n     * **Notes:**\r\n     *\r\n     * - Repeated keywords count as a single keyword.\r\n     * - Thesaurus expansions count towards the `partialMatchKeywords` count.\r\n     * - Stemming expansions **do not** count towards the `partialMatchKeywords` count.\r\n     *\r\n     * @notSupportedIn salesforcefree\r\n     */\r\n    partialMatchKeywords: ComponentOptions.buildNumberOption({ defaultValue: 5, min: 1, depend: 'enablePartialMatch' }),\r\n\r\n    /**\r\n     * An absolute or relative value indicating the minimum number of partial match expression keywords an item must contain to match the expression.\r\n     *\r\n     * See also the [`partialMatchKeywords`]{@link Querybox.options.partialMatchKeywords} option.\r\n     *\r\n     * **Notes:**\r\n     * - A keyword and its stemming expansions count as a single keyword when evaluating whether an item meets the `partialMatchThreshold`.\r\n     * - When a relative `partialMatchThreshold` does not yield a whole integer, the fractional part is truncated (e.g., `3.6` becomes `3`).\r\n     *\r\n     * @notSupportedIn salesforcefree\r\n     */\r\n    partialMatchThreshold: ComponentOptions.buildStringOption({ defaultValue: '50%', depend: 'enablePartialMatch' }),\r\n\r\n    /**\r\n     * Whether to trigger a query when clearing the `Querybox`.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    triggerQueryOnClear: ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n  };\r\n  MagicBoxImpl;\r\n\r\n  public magicBox: MagicBoxInstance;\r\n  private lastQuery: string;\r\n  private searchAsYouTypeTimeout: number;\r\n\r\n  /**\r\n   * Creates a new `Querybox component`. Creates a new `Coveo.Magicbox` instance and wraps the Magicbox methods\r\n   * (`onblur`, `onsubmit` etc.). Binds event on `buildingQuery` and before redirection (for standalone box).\r\n   * @param element The HTMLElement on which to instantiate the component. This cannot be an HTMLInputElement for\r\n   * technical reasons.\r\n   * @param options The options for the `Querybox` component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IQueryboxOptions, public bindings?: IComponentBindings) {\r\n    super(element, Querybox.ID, bindings);\r\n\r\n    if (element instanceof HTMLInputElement) {\r\n      this.logger.error('Querybox cannot be used on an HTMLInputElement');\r\n    }\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Querybox, options);\r\n    new QueryboxOptionsProcessing(this).postProcess();\r\n\r\n    $$(this.element).toggleClass('coveo-query-syntax-disabled', this.options.enableQuerySyntax == false);\r\n    this.magicBox = createMagicBox(\r\n      element,\r\n      new Grammar('Query', {\r\n        Query: '[Term*][Spaces?]',\r\n        Term: '[Spaces?][Word]',\r\n        Spaces: / +/,\r\n        Word: /[^ ]+/\r\n      }),\r\n      {\r\n        inline: true\r\n      }\r\n    );\r\n\r\n    const input = $$(this.magicBox.element).find('input');\r\n    if (input) {\r\n      $$(input).setAttribute('aria-label', this.options.placeholder || l('Search'));\r\n    }\r\n\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n    this.bind.onRootElement(StandaloneSearchInterfaceEvents.beforeRedirect, () => this.updateQueryState());\r\n    this.bind.onQueryState(MODEL_EVENTS.CHANGE_ONE, QUERY_STATE_ATTRIBUTES.Q, (args: IAttributeChangedEventArg) =>\r\n      this.handleQueryStateChanged(args)\r\n    );\r\n\r\n    if (this.options.enableSearchAsYouType) {\r\n      $$(this.element).addClass('coveo-search-as-you-type');\r\n      this.magicBox.onchange = () => {\r\n        this.searchAsYouType();\r\n      };\r\n    }\r\n\r\n    this.magicBox.onsubmit = () => {\r\n      this.submit();\r\n    };\r\n\r\n    this.magicBox.onblur = () => {\r\n      this.updateQueryState();\r\n    };\r\n\r\n    this.magicBox.onclear = () => {\r\n      this.updateQueryState();\r\n      if (this.options.triggerQueryOnClear) {\r\n        this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.searchboxClear, {});\r\n        this.triggerNewQuery(false);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adds the current content of the input to the query and triggers a query if the current content of the input has\r\n   * changed since last submit.\r\n   *\r\n   * Also logs the `serachboxSubmit` event in the usage analytics.\r\n   */\r\n  public submit(): void {\r\n    this.magicBox.clearSuggestion();\r\n    this.updateQueryState();\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.searchboxSubmit, {});\r\n    this.triggerNewQuery(false);\r\n  }\r\n\r\n  /**\r\n   * Sets the content of the input.\r\n   *\r\n   * @param text The string to set in the input.\r\n   */\r\n  public setText(text: string): void {\r\n    this.magicBox.setText(text);\r\n    this.updateQueryState();\r\n  }\r\n\r\n  /**\r\n   * Clears the content of the input.\r\n   *\r\n   * See also the [`triggerQueryOnClear`]{@link Querybox.options.triggerQueryOnClear} option.\r\n   */\r\n  public clear(): void {\r\n    this.magicBox.clear();\r\n  }\r\n\r\n  /**\r\n   * Gets the content of the input.\r\n   *\r\n   * @returns {string} The content of the input.\r\n   */\r\n  public getText(): string {\r\n    return this.magicBox.getText();\r\n  }\r\n\r\n  /**\r\n   * Gets the result from the input.\r\n   *\r\n   * @returns {Result} The result.\r\n   */\r\n  public getResult() {\r\n    return this.magicBox.getResult();\r\n  }\r\n\r\n  /**\r\n   * Gets the displayed result from the input.\r\n   *\r\n   * @returns {Result} The displayed result.\r\n   */\r\n  public getDisplayedResult(): Result {\r\n    return this.magicBox.getDisplayedResult();\r\n  }\r\n\r\n  /**\r\n   * Gets the current cursor position in the input.\r\n   *\r\n   * @returns {number} The cursor position (index starts at 0).\r\n   */\r\n  public getCursor(): number {\r\n    return this.magicBox.getCursor();\r\n  }\r\n\r\n  /**\r\n   * Gets the result at cursor position.\r\n   *\r\n   * @param match {string | { (result): boolean }} The match condition.\r\n   *\r\n   * @returns {Result[]} The result.\r\n   */\r\n  public resultAtCursor(match?: string | { (result): boolean }) {\r\n    return this.magicBox.resultAtCursor(match);\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs): void {\r\n    Assert.exists(args);\r\n    Assert.exists(args.queryBuilder);\r\n\r\n    this.updateQueryState();\r\n    this.lastQuery = this.magicBox.getText();\r\n    new QueryboxQueryParameters(this.options).addParameters(args.queryBuilder, this.lastQuery);\r\n  }\r\n\r\n  private triggerNewQuery(searchAsYouType: boolean): void {\r\n    clearTimeout(this.searchAsYouTypeTimeout);\r\n    let text = this.magicBox.getText();\r\n    if (this.lastQuery != text && text != null) {\r\n      this.lastQuery = text;\r\n      this.queryController.executeQuery({\r\n        searchAsYouType: searchAsYouType,\r\n        logInActionsHistory: true\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateQueryState(): void {\r\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, this.magicBox.getText());\r\n  }\r\n\r\n  private handleQueryStateChanged(args: IAttributeChangedEventArg): void {\r\n    Assert.exists(args);\r\n    let q = <string>args.value;\r\n    if (q != this.magicBox.getText()) {\r\n      this.magicBox.setText(q);\r\n    }\r\n  }\r\n\r\n  private searchAsYouType(): void {\r\n    clearTimeout(this.searchAsYouTypeTimeout);\r\n    this.searchAsYouTypeTimeout = window.setTimeout(() => {\r\n      this.usageAnalytics.logSearchAsYouType<IAnalyticsNoMeta>(analyticsActionCauseList.searchboxAsYouType, {});\r\n      this.triggerNewQuery(true);\r\n    }, this.options.searchAsYouTypeDelay);\r\n  }\r\n}\r\nInitialization.registerAutoCreateComponent(Querybox);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Querybox/Querybox.ts","import { ExpressionRef } from './Expression/ExpressionRef';\r\nimport { Expression, ExpressionDef } from './Expression/Expression';\r\nimport { ExpressionOptions } from './Expression/ExpressionOptions';\r\nimport { ExpressionRegExp } from './Expression/ExpressionRegExp';\r\nimport _ = require('underscore');\r\nimport { ExpressionFunction, ExpressionFunctionArgument } from './Expression/ExpressionFunction';\r\nimport { ExpressionConstant } from './Expression/ExpressionConstant';\r\nimport { ExpressionList } from './Expression/ExpressionList';\r\nimport { Result } from './Result/Result';\r\n\r\nexport class Grammar {\r\n  public start: ExpressionRef;\r\n  public expressions: { [id: string]: Expression } = {};\r\n\r\n  constructor(start: string, expressions: { [id: string]: ExpressionDef } = {}) {\r\n    this.start = new ExpressionRef(start, null, 'start', this);\r\n    this.addExpressions(expressions);\r\n  }\r\n\r\n  public addExpressions(expressions: { [id: string]: ExpressionDef }) {\r\n    _.each(expressions, (basicExpression: ExpressionDef, id: string) => {\r\n      this.addExpression(id, basicExpression);\r\n    });\r\n  }\r\n\r\n  public addExpression(id: string, basicExpression: ExpressionDef) {\r\n    if (id in this.expressions) {\r\n      throw new Error('Grammar already contain the id:' + id);\r\n    }\r\n    this.expressions[id] = Grammar.buildExpression(basicExpression, id, this);\r\n  }\r\n\r\n  public getExpression(id: string) {\r\n    return this.expressions[id];\r\n  }\r\n\r\n  public parse(value: string): Result {\r\n    return this.start.parse(value, true);\r\n  }\r\n\r\n  public static buildExpression(value: ExpressionDef, id: string, grammar: Grammar): Expression {\r\n    const type = typeof value;\r\n    if (type == 'undefined') {\r\n      throw new Error('Invalid Expression: ' + value);\r\n    }\r\n    if (_.isString(value)) {\r\n      return this.buildStringExpression(<string>value, id, grammar);\r\n    }\r\n    if (_.isArray(value)) {\r\n      return new ExpressionOptions(_.map(<string[]>value, (v: string, i) => new ExpressionRef(v, null, id + '_' + i, grammar)), id);\r\n    }\r\n    if (_.isRegExp(value)) {\r\n      return new ExpressionRegExp(<RegExp>value, id, grammar);\r\n    }\r\n    if (_.isFunction(value)) {\r\n      return new ExpressionFunction(<ExpressionFunctionArgument>value, id, grammar);\r\n    }\r\n    throw new Error('Invalid Expression: ' + value);\r\n  }\r\n\r\n  public static buildStringExpression(value: string, id: string, grammar: Grammar): Expression {\r\n    const matchs = Grammar.stringMatch(value, Grammar.spliter);\r\n    const expressions = _.map(matchs, (match: string[], i: number): Expression => {\r\n      if (match[1]) {\r\n        // Ref\r\n        const ref = match[1];\r\n        const occurrence = match[3] ? Number(match[3]) : match[2] || null;\r\n        return new ExpressionRef(ref, occurrence, id + '_' + i, grammar);\r\n      } else {\r\n        // Constant\r\n        return new ExpressionConstant(match[4], id + '_' + i);\r\n      }\r\n    });\r\n    if (expressions.length == 1) {\r\n      const expression = expressions[0];\r\n      expression.id = id;\r\n      return expression;\r\n    } else {\r\n      return new ExpressionList(expressions, id);\r\n    }\r\n  }\r\n\r\n  public static stringMatch(str: string, re: RegExp) {\r\n    const groups: string[][] = [];\r\n    const cloneRegExp = new RegExp(re.source, 'g');\r\n    let group: RegExpExecArray = cloneRegExp.exec(str);\r\n\r\n    while (group !== null) {\r\n      groups.push(group);\r\n      group = cloneRegExp.exec(str);\r\n    }\r\n    return groups;\r\n  }\r\n\r\n  static spliter = /\\[(\\w+)(\\*|\\+|\\?|\\{([1-9][0-9]*)\\})?\\]|(.[^\\[]*)/;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammar.ts","///<reference path=\"FieldAddon.ts\" />\r\n///<reference path=\"QueryExtensionAddon.ts\" />\r\n///<reference path=\"QuerySuggestAddon.ts\" />\r\n///<reference path=\"OldOmniboxAddon.ts\" />\r\n\r\nimport 'styling/_Omnibox';\r\nimport * as _ from 'underscore';\r\nimport { findWhere } from 'underscore';\r\nimport { BreadcrumbEvents } from '../../events/BreadcrumbEvents';\r\nimport {\r\n  IOmniboxPreprocessResultForQueryEventArgs,\r\n  IPopulateOmniboxSuggestionsEventArgs,\r\n  IQuerySuggestSelection,\r\n  OmniboxEvents\r\n} from '../../events/OmniboxEvents';\r\nimport { IBuildingQueryEventArgs, IDuringQueryEventArgs, INewQueryEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { StandaloneSearchInterfaceEvents } from '../../events/StandaloneSearchInterfaceEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { ExpressionDef } from '../../magicbox/Expression/Expression';\r\nimport { Grammar } from '../../magicbox/Grammar';\r\nimport { Complete } from '../../magicbox/Grammars/Complete';\r\nimport { Expressions } from '../../magicbox/Grammars/Expressions';\r\nimport { createMagicBox, MagicBoxInstance } from '../../magicbox/MagicBox';\r\nimport { Result } from '../../magicbox/Result/Result';\r\nimport { Suggestion } from '../../magicbox/SuggestionsManager';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { COMPONENT_OPTIONS_ATTRIBUTES } from '../../models/ComponentOptionsModel';\r\nimport { IAttributeChangedEventArg, MODEL_EVENTS } from '../../models/Model';\r\nimport { QueryStateModel, QUERY_STATE_ATTRIBUTES } from '../../models/QueryStateModel';\r\nimport { l } from '../../strings/Strings';\r\nimport { $$, Dom } from '../../utils/Dom';\r\nimport { Utils } from '../../utils/Utils';\r\nimport {\r\n  analyticsActionCauseList,\r\n  IAnalyticsActionCause,\r\n  IAnalyticsNoMeta,\r\n  IAnalyticsOmniboxSuggestionMeta\r\n} from '../Analytics/AnalyticsActionListMeta';\r\nimport { PendingSearchAsYouTypeSearchEvent } from '../Analytics/PendingSearchAsYouTypeSearchEvent';\r\nimport { logSearchBoxSubmitEvent } from '../Analytics/SharedAnalyticsCalls';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { IQueryboxOptions, Querybox } from '../Querybox/Querybox';\r\nimport { QueryboxOptionsProcessing } from '../Querybox/QueryboxOptionsProcessing';\r\nimport { QueryboxQueryParameters } from '../Querybox/QueryboxQueryParameters';\r\nimport { StandaloneSearchInterface } from '../SearchInterface/SearchInterface';\r\nimport { FieldAddon } from './FieldAddon';\r\nimport { OldOmniboxAddon } from './OldOmniboxAddon';\r\nimport { OmniboxAnalytics } from './OmniboxAnalytics';\r\nimport { QueryExtensionAddon } from './QueryExtensionAddon';\r\nimport { IQuerySuggestAddon, QuerySuggestAddon, VoidQuerySuggestAddon } from './QuerySuggestAddon';\r\n\r\nexport interface IOmniboxSuggestion extends Suggestion {\r\n  executableConfidence?: number;\r\n}\r\n\r\nexport interface IOmniboxOptions extends IQueryboxOptions {\r\n  inline?: boolean;\r\n  enableFieldAddon?: boolean;\r\n  enableSimpleFieldAddon?: boolean;\r\n  listOfFields?: IFieldOption[];\r\n  fieldAlias?: { [alias: string]: IFieldOption };\r\n  enableQuerySuggestAddon?: boolean;\r\n  enableQueryExtensionAddon?: boolean;\r\n  omniboxTimeout?: number;\r\n  placeholder?: string;\r\n  numberOfSuggestions?: number;\r\n  querySuggestCharacterThreshold?: number;\r\n  grammar?: (\r\n    grammar: { start: string; expressions: { [id: string]: ExpressionDef } }\r\n  ) => { start: string; expressions: { [id: string]: ExpressionDef } };\r\n  clearFiltersOnNewQuery?: boolean;\r\n}\r\n\r\nconst MINIMUM_EXECUTABLE_CONFIDENCE = 0.8;\r\n\r\n/**\r\n * The `Omnibox` component extends the [`Querybox`]{@link Querybox}, and thus provides the same basic options and\r\n * behaviors. Furthermore, the `Omnibox` adds a type-ahead capability to the search input.\r\n *\r\n * You can configure the type-ahead feature by enabling or disabling certain addons, which the Coveo JavaScript Search\r\n * Framework provides out-of-the-box (see the [`enableFieldAddon`]{@link Omnibox.options.enableFieldAddon},\r\n * [`enableQueryExtension`]{@link Omnibox.options.enableQueryExtensionAddon}, and\r\n * [`enableQuerySuggestAddon`]{@link Omnibox.options.enableQuerySuggestAddon} options).\r\n *\r\n * Custom components and external code can also extend or customize the type-ahead feature and the query completion\r\n * suggestions it provides by attaching their own handlers to the\r\n * [`populateOmniboxSuggestions`]{@link OmniboxEvents.populateOmniboxSuggestions} event.\r\n *\r\n * See also the [`Searchbox`]{@link Searchbox} component, which can automatically instantiate an `Omnibox` along with an\r\n * optional {@link SearchButton}.\r\n */\r\nexport class Omnibox extends Component {\r\n  public static ID = 'Omnibox';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Omnibox: Omnibox,\r\n      QueryboxQueryParameters: QueryboxQueryParameters\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the omnibox\r\n   * @componentOptions\r\n   */\r\n  static options: IOmniboxOptions = {\r\n    /**\r\n     * Specifies whether query completion suggestions appearing in the `Omnibox` should push the result list and facets\r\n     * down, rather than rendering themselves over them (and partially hiding them).\r\n     *\r\n     * Set this option as well as {@link Omnibox.options.enableSearchAsYouType} and\r\n     * {@link Omnibox.options.enableQuerySuggestAddon} to `true` for a cool effect!\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    inline: ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n\r\n    /**\r\n     * Whether to automatically trigger a new query whenever the end user types additional text in the search box input.\r\n     *\r\n     * See also the [`searchAsYouTypeDelay`]{@link Omnibox.options.searchAsYouTypeDelay} option.\r\n     *\r\n     * **Note:**\r\n     * > If you set this option and the [`enableQuerySuggestAddon`]{@link Omnibox.options.enableQuerySuggestAddon}\r\n     * > option to `true`, the query suggestion feature returns the auto-completion of the currently typed keyword as\r\n     * > its first suggestion.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableSearchAsYouType: ComponentOptions.buildBooleanOption({ defaultValue: false, section: 'Advanced Options' }),\r\n\r\n    /**\r\n     * If {@link Omnibox.options.enableSearchAsYouType} is `true`, specifies the delay (in milliseconds) before\r\n     * triggering a new query when the end user types in the `Omnibox`.\r\n     *\r\n     * Default value is `2000`. Minimum value is `0`.\r\n     */\r\n    searchAsYouTypeDelay: ComponentOptions.buildNumberOption({\r\n      defaultValue: 2000,\r\n      min: 0,\r\n      depend: 'enableSearchAsYouType',\r\n      section: 'Advanced Options'\r\n    }),\r\n\r\n    /**\r\n     * The `field` addon makes the `Omnibox` highlight and complete field syntax. Setting this option to `true` automatically sets\r\n     * the [enableQuerySyntax]{@link Querybox.options.enableQuerySyntax} option to `true` as a side effect.\r\n     *\r\n     * **Example:**\r\n     * > Suppose you want to search for PDF files. You start typing `@f` in the search box. The `Omnibox` provides\r\n     * > you with several matching fields. You select the `@filetype` field. Then, you start typing `=p` in the input.\r\n     * > This time, the `Omnibox` provides you with several matching values for the `@filetype` field. You select the\r\n     * > `pdf` suggestion, and submit your search request. Since the `enableQuerySyntax` option is set to `true`, the\r\n     * > Coveo Search API interprets the basic expression as query syntax and returns the items whose `@filetype` field\r\n     * > matches the `pdf` value.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableFieldAddon: ComponentOptions.buildBooleanOption({\r\n      defaultValue: false,\r\n      depend: 'enableQuerySyntax',\r\n      postProcessing: (value, options: IOmniboxOptions) => {\r\n        if (value) {\r\n          options.enableQuerySyntax = true;\r\n        }\r\n        return value;\r\n      },\r\n      section: 'Advanced Options'\r\n    }),\r\n    enableSimpleFieldAddon: ComponentOptions.buildBooleanOption({ defaultValue: false, depend: 'enableFieldAddon' }),\r\n    listOfFields: ComponentOptions.buildFieldsOption({ depend: 'enableFieldAddon' }),\r\n\r\n    /**\r\n     * Whether to display Coveo Machine Learning (Coveo ML) query suggestions in the `Omnibox`.\r\n     *\r\n     * A Coveo ML query suggestions (QS) model must be properly configured in your Coveo Cloud organization, otherwise this\r\n     * option has no effect (see\r\n     * [Create a QS Model](https://docs.coveo.com/en/1832/#create-a-qs-model)).\r\n     *\r\n     * **Note:**\r\n     * > When you set this option and the [`enableSearchAsYouType`]{@link Omnibox.options.enableSearchAsYouType} option\r\n     * > to `true`, the query suggestion feature returns the auto-completion of the currently typed keyword as its first\r\n     * > query suggestion.\r\n     *\r\n     * @availablesince [December 2015 Release (v1.0.273)](https://docs.coveo.com/en/289/#december-2015-release-v10273)\r\n     */\r\n    enableQuerySuggestAddon: ComponentOptions.buildBooleanOption({\r\n      defaultValue: true,\r\n      alias: ['enableTopQueryAddon', 'enableRevealQuerySuggestAddon']\r\n    }),\r\n\r\n    /**\r\n     * If {@link Querybox.options.enableQuerySyntax} is `true`, specifies whether to enable the `query extension` addon.\r\n     *\r\n     * The `query extension` addon allows the Omnibox to complete the syntax for query extensions.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableQueryExtensionAddon: ComponentOptions.buildBooleanOption({\r\n      defaultValue: false,\r\n      depend: 'enableQuerySyntax',\r\n      postProcessing: (value, options: IOmniboxOptions) => {\r\n        if (value) {\r\n          options.enableQuerySyntax = true;\r\n        }\r\n        return value;\r\n      },\r\n      section: 'Advanced Options'\r\n    }),\r\n\r\n    /**\r\n     * Specifies a placeholder for the input.\r\n     *\r\n     * @availablesince [July 2016 Release (v1.667.24)](https://docs.coveo.com/en/309/#july-2016-release-v166724)\r\n     */\r\n    placeholder: ComponentOptions.buildLocalizedStringOption(),\r\n\r\n    /**\r\n     * Specifies a timeout (in milliseconds) before rejecting suggestions in the Omnibox.\r\n     *\r\n     * Default value is `2000`. Minimum value is `0`.\r\n     */\r\n    omniboxTimeout: ComponentOptions.buildNumberOption({ defaultValue: 2000, min: 0 }),\r\n    /**\r\n     * Specifies whether the Coveo Platform should try to interpret special query syntax such as field references in the\r\n     * query that the user enters in the Querybox (see\r\n     * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)).\r\n     *\r\n     * Setting this option to `true` also causes the query syntax in the Querybox to highlight.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    enableQuerySyntax: ComponentOptions.buildBooleanOption({\r\n      defaultValue: false,\r\n      section: 'Advanced Options'\r\n    }),\r\n    /**\r\n     * Specifies the number of suggestions that should appear in standard ML-powered query suggestions.\r\n     *\r\n     * This option only affects the number of suggestions that appear with the {@link Omnibox.options.enableQuerySuggestAddon} option.\r\n     *\r\n     * This options does not affect the {@link AnalyticsSuggestions} or the {@link FieldSuggestions} component, which expose their own dedicated options for this parameter.\r\n     *\r\n     * Default value is `5`.\r\n     *\r\n     * Minimum value is `1`.\r\n     */\r\n    numberOfSuggestions: ComponentOptions.buildNumberOption({\r\n      defaultValue: 5,\r\n      min: 1\r\n    }),\r\n    /**\r\n     * The minimum number of characters required in the in the text input before displaying available query suggestions when focus is on the component.\r\n     *\r\n     * Note: Only effective when [enableQuerySuggestAddon]{@link Omnibox.options.enableQuerySuggestAddon} is true.\r\n     *\r\n     * depend: 'enableQuerySuggestAddon'\r\n     *\r\n     * Default (and minimum): 0, meaning that trending query suggestions are displayed when focus is on the component, even if its text input is empty.\r\n     *\r\n     * @availablesince [July 2019 Release (v2.6459)](https://docs.coveo.com/en/2938/)\r\n     */\r\n    querySuggestCharacterThreshold: ComponentOptions.buildNumberOption({\r\n      defaultValue: 0,\r\n      min: 0\r\n    }),\r\n\r\n    /**\r\n     * Whether to clear all active query filters when the end user submits a new query from the search box.\r\n     *\r\n     * Note: This does not include the filter expression enforced by the currently selected tab, if any.\r\n     *\r\n     * @availablesince [September 2019 Release (v2.7023)](https://docs.coveo.com/en/2990/)\r\n     */\r\n    clearFiltersOnNewQuery: ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n  };\r\n\r\n  public magicBox: MagicBoxInstance;\r\n  private lastSuggestions: IOmniboxSuggestion[] = [];\r\n  private lastQuery: string;\r\n  private modifyEventTo: IAnalyticsActionCause;\r\n  private movedOnce = false;\r\n  private searchAsYouTypeTimeout: number;\r\n  private skipAutoSuggest = false;\r\n  private omniboxAnalytics: OmniboxAnalytics;\r\n\r\n  public suggestionAddon: IQuerySuggestAddon;\r\n\r\n  /**\r\n   * Creates a new Omnibox component. Also enables necessary addons and binds events on various query events.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Omnibox component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IOmniboxOptions, bindings?: IComponentBindings) {\r\n    super(element, Omnibox.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Omnibox, options);\r\n    const originalValueForQuerySyntax = this.options.enableQuerySyntax;\r\n    new QueryboxOptionsProcessing(this).postProcess();\r\n    this.omniboxAnalytics = this.searchInterface.getOmniboxAnalytics();\r\n    $$(this.element).toggleClass('coveo-query-syntax-disabled', this.options.enableQuerySyntax == false);\r\n\r\n    this.suggestionAddon = this.options.enableQuerySuggestAddon ? new QuerySuggestAddon(this) : new VoidQuerySuggestAddon();\r\n    new OldOmniboxAddon(this);\r\n    this.createMagicBox();\r\n\r\n    this.bind.onRootElement(QueryEvents.newQuery, (args: INewQueryEventArgs) => this.handleNewQuery(args));\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n    this.bind.onRootElement(StandaloneSearchInterfaceEvents.beforeRedirect, () => this.handleBeforeRedirect());\r\n    this.bind.onRootElement(QueryEvents.querySuccess, () => this.handleQuerySuccess());\r\n    this.bind.onQueryState(MODEL_EVENTS.CHANGE_ONE, QUERY_STATE_ATTRIBUTES.Q, (args: IAttributeChangedEventArg) =>\r\n      this.handleQueryStateChanged(args)\r\n    );\r\n    if (this.isAutoSuggestion()) {\r\n      this.bind.onRootElement(QueryEvents.duringQuery, (args: IDuringQueryEventArgs) => this.handleDuringQuery(args));\r\n    }\r\n    this.bind.onComponentOptions(MODEL_EVENTS.CHANGE_ONE, COMPONENT_OPTIONS_ATTRIBUTES.SEARCH_BOX, (args: IAttributeChangedEventArg) => {\r\n      if (args.value.enableQuerySyntax != null) {\r\n        this.options.enableQuerySyntax = args.value.enableQuerySyntax;\r\n      } else {\r\n        this.options.enableQuerySyntax = originalValueForQuerySyntax;\r\n      }\r\n      this.updateGrammar();\r\n    });\r\n    this.bind.onRootElement(OmniboxEvents.querySuggestGetFocus, (args: IQuerySuggestSelection) => this.handleQuerySuggestGetFocus(args));\r\n  }\r\n\r\n  /**\r\n   * Adds the current content of the input to the query and triggers a query if the current content of the input has\r\n   * changed since last submit.\r\n   *\r\n   * Also logs a `searchboxSubmit` event in the usage analytics.\r\n   */\r\n  public submit() {\r\n    this.magicBox.clearSuggestion();\r\n    this.updateQueryState();\r\n    this.triggerNewQuery(false, () => {\r\n      logSearchBoxSubmitEvent(this.usageAnalytics);\r\n    });\r\n    this.magicBox.blur();\r\n  }\r\n\r\n  /**\r\n   * Gets the current content of the input.\r\n   * @returns {string} The current content of the input.\r\n   */\r\n  public getText() {\r\n    return this.magicBox.getText();\r\n  }\r\n\r\n  /**\r\n   * Sets the content of the input\r\n   * @param text The string to set in the input.\r\n   */\r\n  public setText(text: string) {\r\n    this.magicBox.setText(text);\r\n    this.updateQueryState();\r\n  }\r\n\r\n  /**\r\n   * Clears the content of the input.\r\n   */\r\n  public clear() {\r\n    this.magicBox.clear();\r\n  }\r\n\r\n  /**\r\n   * Gets the `HTMLInputElement` of the Omnibox.\r\n   */\r\n  public getInput() {\r\n    return <HTMLInputElement>this.magicBox.element.querySelector('input');\r\n  }\r\n\r\n  public getResult() {\r\n    return this.magicBox.getResult();\r\n  }\r\n\r\n  public getDisplayedResult() {\r\n    return this.magicBox.getDisplayedResult();\r\n  }\r\n\r\n  public getCursor() {\r\n    return this.magicBox.getCursor();\r\n  }\r\n\r\n  public resultAtCursor(match?: string | { (result: Result): boolean }) {\r\n    return this.magicBox.resultAtCursor(match);\r\n  }\r\n\r\n  private createGrammar() {\r\n    let grammar = null;\r\n\r\n    if (this.options.enableQuerySyntax) {\r\n      grammar = Expressions(Complete);\r\n      if (this.options.enableFieldAddon) {\r\n        new FieldAddon(this);\r\n      }\r\n      if (this.options.fieldAlias != null) {\r\n        this.options.listOfFields = this.options.listOfFields || [];\r\n        this.options.listOfFields = this.options.listOfFields.concat(_.keys(this.options.fieldAlias));\r\n      }\r\n      if (this.options.enableQueryExtensionAddon) {\r\n        new QueryExtensionAddon(this);\r\n      }\r\n    } else {\r\n      grammar = { start: 'Any', expressions: { Any: /.*/ } };\r\n    }\r\n\r\n    if (this.options.grammar != null) {\r\n      grammar = this.options.grammar(grammar);\r\n    }\r\n\r\n    return grammar;\r\n  }\r\n\r\n  private updateGrammar() {\r\n    const grammar = this.createGrammar();\r\n    this.magicBox.grammar = new Grammar(grammar.start, grammar.expressions);\r\n    this.magicBox.setText(this.magicBox.getText());\r\n  }\r\n\r\n  private createMagicBox() {\r\n    const grammar = this.createGrammar();\r\n    this.magicBox = createMagicBox(this.element, new Grammar(grammar.start, grammar.expressions), {\r\n      inline: this.options.inline,\r\n      selectableSuggestionClass: 'coveo-omnibox-selectable',\r\n      selectedSuggestionClass: 'coveo-omnibox-selected',\r\n      suggestionTimeout: this.options.omniboxTimeout\r\n    });\r\n\r\n    const input = $$(this.magicBox.element).find('input');\r\n\r\n    if (input) {\r\n      $$(input).setAttribute('aria-label', l('Search'));\r\n    }\r\n\r\n    this.setupMagicBox();\r\n  }\r\n\r\n  private setupMagicBox() {\r\n    this.magicBox.onmove = () => {\r\n      // We assume that once the user has moved its selection, it becomes an explicit omnibox analytics event\r\n      if (this.isAutoSuggestion()) {\r\n        this.modifyEventTo = this.getOmniboxAnalyticsEventCause();\r\n      }\r\n      this.movedOnce = true;\r\n    };\r\n\r\n    this.magicBox.onfocus = () => {\r\n      if (this.isAutoSuggestion()) {\r\n        // This flag is used to block the automatic query when the UI is loaded with a query (#q=foo)\r\n        // and then the input is focused. We want to block that query, even if it match the suggestion\r\n        // Only when there is an actual change in the input (user typing something) is when we want the automatic query to kick in\r\n        this.skipAutoSuggest = true;\r\n      }\r\n    };\r\n\r\n    this.magicBox.onSuggestions = (suggestions: IOmniboxSuggestion[]) => {\r\n      // If text is empty, this can mean that user selected text from the search box\r\n      // and hit \"delete\" : Reset the partial queries in this case\r\n      if (Utils.isEmptyString(this.getText())) {\r\n        this.omniboxAnalytics.partialQueries = [];\r\n      }\r\n      this.movedOnce = false;\r\n      this.lastSuggestions = suggestions;\r\n      if (this.isAutoSuggestion() && !this.skipAutoSuggest) {\r\n        this.searchAsYouType();\r\n      }\r\n    };\r\n\r\n    if (this.options.enableSearchAsYouType) {\r\n      $$(this.element).addClass('coveo-magicbox-search-as-you-type');\r\n    }\r\n\r\n    this.magicBox.onchange = () => {\r\n      this.skipAutoSuggest = false;\r\n      const text = this.getText();\r\n      if (text != undefined && text != '') {\r\n        if (this.isAutoSuggestion()) {\r\n          if (this.movedOnce) {\r\n            this.searchAsYouType(true);\r\n          }\r\n        } else if (this.options.enableSearchAsYouType) {\r\n          this.searchAsYouType(true);\r\n        }\r\n      } else {\r\n        this.clear();\r\n      }\r\n    };\r\n\r\n    if (this.options.placeholder) {\r\n      (<HTMLInputElement>this.magicBox.element.querySelector('input')).placeholder = this.options.placeholder;\r\n    }\r\n    this.magicBox.onsubmit = () => this.submit();\r\n\r\n    this.magicBox.onselect = (suggestion: IOmniboxSuggestion) => {\r\n      const index = _.indexOf(this.lastSuggestions, suggestion);\r\n      const suggestions = _.compact(_.map(this.lastSuggestions, suggestion => suggestion.text));\r\n      this.magicBox.clearSuggestion();\r\n      this.updateQueryState();\r\n      // A bit tricky here : When it's machine learning auto suggestions\r\n      // the mouse selection and keyboard selection acts differently :\r\n      // keyboard selection will automatically do the query (which will log a search as you type event -> further modified by this.modifyEventTo if needed)\r\n      // mouse selection will not \"auto\" send the query.\r\n      // the movedOnce variable detect the keyboard movement, and is used to differentiate mouse vs keyboard\r\n      if (!this.isAutoSuggestion()) {\r\n        this.usageAnalytics.cancelAllPendingEvents();\r\n        this.triggerNewQuery(false, () => {\r\n          this.usageAnalytics.logSearchEvent<IAnalyticsOmniboxSuggestionMeta>(\r\n            this.getOmniboxAnalyticsEventCause(),\r\n            this.buildCustomDataForPartialQueries(index, suggestions)\r\n          );\r\n        });\r\n      } else if (this.isAutoSuggestion() && this.movedOnce) {\r\n        this.handleAutoSuggestionWithKeyboard(index, suggestions);\r\n      } else if (this.isAutoSuggestion() && !this.movedOnce) {\r\n        this.handleAutoSuggestionsWithMouse(index, suggestions);\r\n      }\r\n\r\n      // Consider a selection like a reset of the partial queries (it's the end of a suggestion pattern)\r\n      if (this.isAutoSuggestion()) {\r\n        this.omniboxAnalytics.partialQueries = [];\r\n      }\r\n    };\r\n\r\n    this.magicBox.onblur = () => {\r\n      if (this.isAutoSuggestion()) {\r\n        this.setText(this.getQuery(true));\r\n        this.usageAnalytics.sendAllPendingEvents();\r\n      }\r\n    };\r\n\r\n    this.magicBox.onclear = () => {\r\n      this.updateQueryState();\r\n      if (this.options.triggerQueryOnClear || this.options.enableSearchAsYouType) {\r\n        this.triggerNewQuery(false, () => {\r\n          this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.searchboxClear, {});\r\n        });\r\n      }\r\n    };\r\n\r\n    this.magicBox.ontabpress = () => {\r\n      this.handleTabPress();\r\n    };\r\n\r\n    this.magicBox.getSuggestions = () => this.handleSuggestions();\r\n  }\r\n\r\n  private handleAutoSuggestionWithKeyboard(index: number, suggestions: string[]) {\r\n    if (this.searchAsYouTypeTimeout) {\r\n      // Here, there is currently a search as you typed queued up :\r\n      // Think : user typed very quickly, then very quickly selected a suggestion (without waiting for the search as you type)\r\n      // Cancel the search as you type query, then immediately do the query with the selection (+analytics event with the selection)\r\n      this.usageAnalytics.cancelAllPendingEvents();\r\n      clearTimeout(this.searchAsYouTypeTimeout);\r\n      this.searchAsYouTypeTimeout = undefined;\r\n      this.triggerNewQuery(false, () => {\r\n        this.usageAnalytics.logSearchEvent<IAnalyticsOmniboxSuggestionMeta>(\r\n          this.getOmniboxAnalyticsEventCause(),\r\n          this.buildCustomDataForPartialQueries(index, suggestions)\r\n        );\r\n      });\r\n    } else {\r\n      // Here, the search as you type query has returned, but the analytics event has not ye been sent.\r\n      // Think : user typed slowly, the query returned, and then the user selected a suggestion.\r\n      // Since the analytics event has not yet been sent (search as you type event have a 5 sec delay)\r\n      // modify the pending event, then send the newly modified analytics event immediately.\r\n      this.modifyEventTo = this.getOmniboxAnalyticsEventCause();\r\n      this.modifyCustomDataOnPending(index, suggestions);\r\n      this.modifyQueryContentOnPending();\r\n      this.usageAnalytics.sendAllPendingEvents();\r\n    }\r\n  }\r\n\r\n  private handleAutoSuggestionsWithMouse(index: number, suggestions: string[]) {\r\n    if (this.searchAsYouTypeTimeout || index != 0) {\r\n      // Here : the user either very quickly chose the first suggestion, and the search as you type is still queued up.\r\n      // OR\r\n      // the user chose something different then the first suggestion.\r\n      // Remove the search as you type if it's there, and do the query with the suggestion directly.\r\n      this.clearSearchAsYouType();\r\n      this.usageAnalytics.cancelAllPendingEvents();\r\n      this.triggerNewQuery(false, () => {\r\n        this.usageAnalytics.logSearchEvent<IAnalyticsOmniboxSuggestionMeta>(\r\n          this.getOmniboxAnalyticsEventCause(),\r\n          this.buildCustomDataForPartialQueries(index, suggestions)\r\n        );\r\n      });\r\n    } else {\r\n      // Here : the user either very slowly chose a suggestion, and there is no search as you typed queued up\r\n      // AND\r\n      // the user chose the first suggestion.\r\n      // this means the query is already returned, but the analytics event is still queued up.\r\n      // modify the analytics event, and send it.\r\n      this.modifyEventTo = this.getOmniboxAnalyticsEventCause();\r\n      this.modifyCustomDataOnPending(index, suggestions);\r\n      this.modifyQueryContentOnPending();\r\n      this.usageAnalytics.sendAllPendingEvents();\r\n\r\n      // This should happen if :\r\n      // users did a (short) query first, which does not match the first suggestion. (eg: typed \"t\", then search)\r\n      // then, refocus the search box. The same suggestion(s) will re-appear.\r\n      // By selecting the first one with the mouse, we need to retrigger a query because this means the search as you type could not\r\n      // kick in and do the query automatically.\r\n      if (this.lastQuery != this.getText()) {\r\n        this.triggerNewQuery(false, () => {\r\n          this.usageAnalytics.logSearchEvent<IAnalyticsOmniboxSuggestionMeta>(\r\n            this.getOmniboxAnalyticsEventCause(),\r\n            this.buildCustomDataForPartialQueries(index, suggestions)\r\n          );\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private modifyCustomDataOnPending(index: number, suggestions: string[]) {\r\n    const pendingEvt = this.usageAnalytics.getPendingSearchEvent();\r\n    if (pendingEvt instanceof PendingSearchAsYouTypeSearchEvent) {\r\n      const newCustomData = this.buildCustomDataForPartialQueries(index, suggestions);\r\n      _.each(_.keys(newCustomData), (k: string) => {\r\n        (<PendingSearchAsYouTypeSearchEvent>pendingEvt).modifyCustomData(k, newCustomData[k]);\r\n      });\r\n    }\r\n  }\r\n\r\n  private modifyQueryContentOnPending() {\r\n    const pendingEvt = this.usageAnalytics.getPendingSearchEvent();\r\n    if (pendingEvt instanceof PendingSearchAsYouTypeSearchEvent) {\r\n      const queryContent = this.getQuery(this.options.enableSearchAsYouType);\r\n      pendingEvt.modifyQueryContent(queryContent);\r\n    }\r\n  }\r\n\r\n  private buildCustomDataForPartialQueries(index: number, suggestions: string[]): IAnalyticsOmniboxSuggestionMeta {\r\n    this.updateOmniboxAnalytics(suggestions, index);\r\n    return this.omniboxAnalytics.buildCustomDataForPartialQueries();\r\n  }\r\n\r\n  private handleQuerySuggestGetFocus({ suggestion }: IQuerySuggestSelection) {\r\n    const suggestions = _.compact(_.map(this.lastSuggestions, suggestion => suggestion.text));\r\n    const ranking = this.lastSuggestions.indexOf(findWhere(this.lastSuggestions, { text: suggestion }));\r\n    this.updateOmniboxAnalytics(suggestions, ranking);\r\n  }\r\n\r\n  private updateOmniboxAnalytics(suggestions: string[], suggestionRanking: number) {\r\n    this.omniboxAnalytics.suggestions = suggestions;\r\n    this.omniboxAnalytics.suggestionRanking = suggestionRanking;\r\n  }\r\n\r\n  private handleSuggestions() {\r\n    const text = this.getText();\r\n    if (this.options.querySuggestCharacterThreshold <= text.length) {\r\n      const suggestionsEventArgs: IPopulateOmniboxSuggestionsEventArgs = {\r\n        suggestions: [],\r\n        omnibox: this\r\n      };\r\n\r\n      this.triggerOmniboxSuggestions(suggestionsEventArgs);\r\n\r\n      if (!Utils.isNullOrEmptyString(text)) {\r\n        this.omniboxAnalytics.partialQueries.push(text);\r\n      }\r\n\r\n      return _.compact(suggestionsEventArgs.suggestions);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private triggerOmniboxSuggestions(args: IPopulateOmniboxSuggestionsEventArgs) {\r\n    this.bind.trigger(this.element, OmniboxEvents.populateOmniboxSuggestions, args);\r\n\r\n    if (!$$(this.element).isDescendant(this.root)) {\r\n      this.bind.trigger(this.root, OmniboxEvents.populateOmniboxSuggestions, args);\r\n    }\r\n  }\r\n\r\n  private handleBeforeRedirect() {\r\n    this.updateQueryState();\r\n  }\r\n\r\n  private handleBuildingQuery(data: IBuildingQueryEventArgs) {\r\n    Assert.exists(data);\r\n    Assert.exists(data.queryBuilder);\r\n    this.updateQueryState();\r\n    this.lastQuery = this.getQuery(data.searchAsYouType);\r\n\r\n    const result: Result =\r\n      this.lastQuery == this.magicBox.getDisplayedResult().input\r\n        ? this.magicBox.getDisplayedResult().clone()\r\n        : this.magicBox.grammar.parse(this.lastQuery).clean();\r\n    const preprocessResultForQueryArgs: IOmniboxPreprocessResultForQueryEventArgs = {\r\n      result: result\r\n    };\r\n\r\n    if (this.options.enableQuerySyntax) {\r\n      const notQuotedValues = preprocessResultForQueryArgs.result.findAll('FieldValueNotQuoted');\r\n      _.each(notQuotedValues, (value: Result) => (value.value = '\"' + value.value.replace(/\"|\\u00A0/g, ' ') + '\"'));\r\n      if (this.options.fieldAlias) {\r\n        const fieldNames = preprocessResultForQueryArgs.result.findAll(\r\n          (result: Result) => result.expression.id == 'FieldName' && result.isSuccess()\r\n        );\r\n        _.each(fieldNames, (result: Result) => {\r\n          const alias = _.find(_.keys(this.options.fieldAlias), (alias: string) => alias.toLowerCase() == result.value.toLowerCase());\r\n          if (alias != null) {\r\n            result.value = <string>this.options.fieldAlias[alias];\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    this.triggerOmniboxPreprocessResultForQuery(preprocessResultForQueryArgs);\r\n    const query = preprocessResultForQueryArgs.result.toString();\r\n    new QueryboxQueryParameters(this.options).addParameters(data.queryBuilder, query);\r\n  }\r\n\r\n  private triggerOmniboxPreprocessResultForQuery(args: IOmniboxPreprocessResultForQueryEventArgs) {\r\n    this.bind.trigger(this.element, OmniboxEvents.omniboxPreprocessResultForQuery, args);\r\n\r\n    if (!$$(this.element).isDescendant(this.root)) {\r\n      this.bind.trigger(this.root, OmniboxEvents.omniboxPreprocessResultForQuery, args);\r\n    }\r\n  }\r\n\r\n  private handleNewQuery(data: INewQueryEventArgs) {\r\n    Assert.exists(data);\r\n    this.options.clearFiltersOnNewQuery && this.clearFiltersIfNewQuery(data);\r\n  }\r\n\r\n  private clearFiltersIfNewQuery({ origin, searchAsYouType }: INewQueryEventArgs) {\r\n    if (this.queryController.firstQuery) {\r\n      return;\r\n    }\r\n\r\n    // Prevent queries triggered by unrelated components to clear the the filters\r\n    // e.g., a facet selection\r\n    const validOrigins = [Omnibox.ID, 'SearchButton'];\r\n    if (!origin || validOrigins.indexOf(origin.type) === -1) {\r\n      return;\r\n    }\r\n\r\n    const lastQuery = this.queryController.getLastQuery().q || '';\r\n    const newQuery = this.getQuery(searchAsYouType);\r\n    if (lastQuery !== newQuery) {\r\n      this.bind.trigger(this.root, BreadcrumbEvents.clearBreadcrumb);\r\n    }\r\n  }\r\n\r\n  private handleTabPress() {\r\n    if (this.options.enableQuerySuggestAddon) {\r\n      this.handleTabPressForSuggestions();\r\n    }\r\n    this.handleTabPressForOldOmniboxAddon();\r\n  }\r\n\r\n  private handleTabPressForSuggestions() {\r\n    if (!this.options.enableSearchAsYouType) {\r\n      const suggestions = _.compact(_.map(this.lastSuggestions, suggestion => suggestion.text));\r\n      this.usageAnalytics.logCustomEvent(\r\n        this.getOmniboxAnalyticsEventCause(),\r\n        this.buildCustomDataForPartialQueries(0, suggestions),\r\n        this.element\r\n      );\r\n    } else {\r\n      this.setText(this.getQuery(true));\r\n    }\r\n  }\r\n\r\n  private handleTabPressForOldOmniboxAddon() {\r\n    const domSuggestions = this.lastSuggestions.filter(suggestions => suggestions.dom).map(suggestions => $$(suggestions.dom));\r\n    const selected = this.findAllElementsWithClass(domSuggestions, '.coveo-omnibox-selected');\r\n    if (selected.length > 0) {\r\n      $$(selected[0]).trigger('tabSelect');\r\n    } else if (!this.options.enableQuerySuggestAddon) {\r\n      const selectable = this.findAllElementsWithClass(domSuggestions, '.coveo-omnibox-selectable');\r\n      if (selectable.length > 0) {\r\n        $$(selectable[0]).trigger('tabSelect');\r\n      }\r\n    }\r\n  }\r\n\r\n  private findAllElementsWithClass(elements: Dom[], className: string): Dom[] {\r\n    return elements\r\n      .map(element => element.find(className))\r\n      .filter(s => s)\r\n      .reduce((total, s) => total.concat(s), []);\r\n  }\r\n\r\n  private triggerNewQuery(searchAsYouType: boolean, analyticsEvent: () => void) {\r\n    clearTimeout(this.searchAsYouTypeTimeout);\r\n    const shouldExecuteQuery = this.shouldExecuteQuery(searchAsYouType);\r\n    this.lastQuery = this.getQuery(searchAsYouType);\r\n    shouldExecuteQuery && analyticsEvent();\r\n\r\n    this.queryController.executeQuery({\r\n      searchAsYouType: searchAsYouType,\r\n      logInActionsHistory: true,\r\n      cancel: !shouldExecuteQuery,\r\n      origin: this\r\n    });\r\n  }\r\n\r\n  private getQuery(searchAsYouType: boolean) {\r\n    if (this.lastQuery == this.magicBox.getText()) {\r\n      return this.lastQuery;\r\n    }\r\n\r\n    if (!searchAsYouType) {\r\n      return this.magicBox.getText();\r\n    }\r\n\r\n    const wordCompletion = this.magicBox.getWordCompletion();\r\n\r\n    if (wordCompletion != null) {\r\n      return wordCompletion;\r\n    }\r\n\r\n    const currentOmniboxSuggestion = this.magicBox.getWordCompletion() || this.getFirstSuggestion();\r\n    if (currentOmniboxSuggestion) {\r\n      return currentOmniboxSuggestion;\r\n    }\r\n\r\n    if (this.isAutoSuggestion()) {\r\n      return this.lastQuery || this.magicBox.getText();\r\n    }\r\n\r\n    return this.magicBox.getText();\r\n  }\r\n\r\n  private getFirstSuggestion() {\r\n    if (this.lastSuggestions == null) {\r\n      return '';\r\n    }\r\n\r\n    if (this.lastSuggestions.length <= 0) {\r\n      return '';\r\n    }\r\n\r\n    const textSuggestion = _.find(this.lastSuggestions, (suggestion: IOmniboxSuggestion) => suggestion.text != null);\r\n\r\n    if (textSuggestion == null) {\r\n      return '';\r\n    }\r\n\r\n    return textSuggestion.text;\r\n  }\r\n\r\n  public updateQueryState() {\r\n    this.queryStateModel.set(QueryStateModel.attributesEnum.q, this.magicBox.getText());\r\n  }\r\n\r\n  private handleQueryStateChanged(args: IAttributeChangedEventArg) {\r\n    Assert.exists(args);\r\n    const q = <string>args.value;\r\n    if (q != this.magicBox.getText()) {\r\n      this.magicBox.setText(q);\r\n    }\r\n  }\r\n\r\n  private handleQuerySuccess() {\r\n    if (!this.isAutoSuggestion()) {\r\n      this.omniboxAnalytics.partialQueries = [];\r\n    }\r\n  }\r\n\r\n  private handleDuringQuery(args: IDuringQueryEventArgs) {\r\n    // When the query results returns ... (args.promise)\r\n    args.promise.then(() => {\r\n      // Get a handle on a pending search as you type (those events are delayed, not sent instantly)\r\n      const pendingEvent = this.usageAnalytics.getPendingSearchEvent();\r\n      if (pendingEvent instanceof PendingSearchAsYouTypeSearchEvent) {\r\n        (<PendingSearchAsYouTypeSearchEvent>pendingEvent).beforeResolve.then(evt => {\r\n          // Check if we need to modify the event type beforeResolving it\r\n          args.promise.then(() => {\r\n            if (this.modifyEventTo) {\r\n              evt.modifyEventCause(this.modifyEventTo);\r\n              this.modifyEventTo = null;\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private searchAsYouType(forceExecuteQuery = false) {\r\n    this.clearSearchAsYouType();\r\n    if (this.shouldExecuteQuery(true)) {\r\n      this.searchAsYouTypeTimeout = window.setTimeout(() => {\r\n        if (this.suggestionShouldTriggerQuery() || forceExecuteQuery) {\r\n          const suggestions = _.map(this.lastSuggestions, suggestion => suggestion.text);\r\n          const index = _.indexOf(suggestions, this.magicBox.getWordCompletion());\r\n          this.triggerNewQuery(true, () => {\r\n            this.usageAnalytics.logSearchAsYouType<IAnalyticsOmniboxSuggestionMeta>(\r\n              analyticsActionCauseList.searchboxAsYouType,\r\n              this.buildCustomDataForPartialQueries(index, suggestions)\r\n            );\r\n          });\r\n          this.clearSearchAsYouType();\r\n        }\r\n      }, this.options.searchAsYouTypeDelay);\r\n    }\r\n  }\r\n\r\n  private isAutoSuggestion() {\r\n    return this.options.enableSearchAsYouType && this.options.enableQuerySuggestAddon;\r\n  }\r\n\r\n  private shouldExecuteQuery(searchAsYouType: boolean) {\r\n    const text = this.getQuery(searchAsYouType);\r\n    if (this.searchInterface.options.allowQueriesWithoutKeywords === false) {\r\n      return this.lastQuery != text && Utils.isNonEmptyString(text);\r\n    }\r\n    return this.lastQuery != text && text != null;\r\n  }\r\n\r\n  private suggestionShouldTriggerQuery(suggestions = this.lastSuggestions) {\r\n    if (this.shouldExecuteQuery(true)) {\r\n      if (suggestions && suggestions[0]) {\r\n        const suggestion = suggestions[0];\r\n        // If we have access to a confidence level, return true if we are equal or above the minimum confidence level.\r\n        if (suggestion && suggestion.executableConfidence != undefined) {\r\n          return suggestion.executableConfidence >= MINIMUM_EXECUTABLE_CONFIDENCE;\r\n        }\r\n        // If we don't have access to a confidence level, return true only if it \"starts with\" the content of the search box\r\n        if (suggestion.text && suggestion.text.indexOf(this.magicBox.getText()) == 0) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private clearSearchAsYouType() {\r\n    clearTimeout(this.searchAsYouTypeTimeout);\r\n    this.searchAsYouTypeTimeout = undefined;\r\n  }\r\n\r\n  private getOmniboxAnalyticsEventCause() {\r\n    if (this.searchInterface instanceof StandaloneSearchInterface) {\r\n      return analyticsActionCauseList.omniboxFromLink;\r\n    }\r\n    return analyticsActionCauseList.omniboxAnalytics;\r\n  }\r\n}\r\n\r\nOmnibox.options = { ...Omnibox.options, ...Querybox.options };\r\nInitialization.registerAutoCreateComponent(Omnibox);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Omnibox/Omnibox.ts","import { exportGlobally } from '../../GlobalExports';\r\nimport { l } from '../../strings/Strings';\r\nimport { AccessibleButton } from '../../utils/AccessibleButton';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { SVGDom } from '../../utils/SVGDom';\r\nimport { SVGIcons } from '../../utils/SVGIcons';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { IAnalyticsNoMeta, analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { QueryStateModel } from '../../models/QueryStateModel';\r\n\r\nexport interface ISearchButtonOptions {\r\n  searchbox?: ISearchButtonSearchbox;\r\n}\r\n\r\nexport interface ISearchButtonSearchbox {\r\n  getText: () => string;\r\n}\r\n\r\n/**\r\n * The SearchButton component renders a search icon that the end user can click to trigger a new query.\r\n *\r\n * See also the {@link Searchbox} component, which can automatically instantiate a SearchButton component along with a\r\n * {@link Querybox} component or an {@link Omnibox} component.\r\n */\r\nexport class SearchButton extends Component {\r\n  static ID = 'SearchButton';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      SearchButton: SearchButton\r\n    });\r\n  };\r\n\r\n  static options: ISearchButtonOptions = {};\r\n\r\n  /**\r\n   * Creates a new SearchButton. Binds a `click` event on the element. Adds a search icon on the element.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the SearchButton component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: ISearchButtonOptions, bindings?: IComponentBindings) {\r\n    super(element, SearchButton.ID, bindings);\r\n\r\n    new AccessibleButton()\r\n      .withElement(element)\r\n      .withOwner(this.bind)\r\n      .withLabel(l('Search'))\r\n      .withSelectAction(() => this.handleClick())\r\n      .build();\r\n\r\n    // Provide a magnifier icon if element contains nothing\r\n    if (Utils.trim($$(this.element).text()) == '') {\r\n      const svgMagnifierContainer = $$('span', { className: 'coveo-search-button' }, SVGIcons.icons.search).el;\r\n      SVGDom.addClassToSVGInContainer(svgMagnifierContainer, 'coveo-search-button-svg');\r\n      const svgLoadingAnimationContainer = $$('span', { className: 'coveo-search-button-loading' }, SVGIcons.icons.loading).el;\r\n      SVGDom.addClassToSVGInContainer(svgLoadingAnimationContainer, 'coveo-search-button-loading-svg');\r\n      element.appendChild(svgMagnifierContainer);\r\n      element.appendChild(svgLoadingAnimationContainer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers the `click` event handler, which logs a `searchboxSubmit` event in the usage analytics and executes a\r\n   * query.\r\n   */\r\n  public click() {\r\n    this.handleClick();\r\n  }\r\n\r\n  private handleClick() {\r\n    this.logger.debug('Performing query following button click');\r\n    this.updateQueryStateModelWithSearchboxQuery();\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsNoMeta>(analyticsActionCauseList.searchboxSubmit, {});\r\n    this.queryController.executeQuery({ origin: this });\r\n  }\r\n\r\n  private updateQueryStateModelWithSearchboxQuery() {\r\n    const searchbox = this.options && this.options.searchbox;\r\n    searchbox && this.queryStateModel.set(QueryStateModel.attributesEnum.q, searchbox.getText());\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(SearchButton);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/SearchButton/SearchButton.ts","import { Expression } from './Expression';\r\n\r\nexport const ExpressionEndOfInput: Expression = {\r\n  id: 'end of input',\r\n  parse: null\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Expression/ExpressionEndOfInput.ts","import { Expression } from './Expression';\r\nimport { Result } from '../Result/Result';\r\nimport { EndOfInputResult } from '../Result/Result';\r\n\r\nexport class ExpressionConstant implements Expression {\r\n  constructor(public value: string, public id: string) {}\r\n\r\n  public parse(input: string, end: boolean): Result {\r\n    // the value must be at the start of the input\r\n    var success = input.indexOf(this.value) == 0;\r\n    var result = new Result(success ? this.value : null, this, input);\r\n    // if is successful and we require the end but the length of parsed is\r\n    // lower than the input length, return a EndOfInputExpected Result\r\n    if (success && end && input.length > this.value.length) {\r\n      return new EndOfInputResult(result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public toString() {\r\n    return this.value;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Expression/ExpressionConstant.ts","import { Basic } from './Basic';\r\nimport { SubGrammar } from './Expressions';\r\nimport { Date } from './Date';\r\nexport const Field: SubGrammar = {\r\n  basicExpressions: ['FieldSimpleQuery', 'FieldQuery', 'Field'],\r\n  grammars: {\r\n    FieldQuery: '[Field][OptionalSpaces][FieldQueryOperation]',\r\n    FieldQueryOperation: ['FieldQueryValue', 'FieldQueryNumeric'],\r\n    FieldQueryValue: '[FieldOperator][OptionalSpaces][FieldValue]',\r\n    FieldQueryNumeric: '[FieldOperatorNumeric][OptionalSpaces][FieldValueNumeric]',\r\n    FieldSimpleQuery: '[FieldName]:[OptionalSpaces][FieldValue]',\r\n    Field: '@[FieldName]',\r\n    FieldName: /[a-zA-Z][a-zA-Z0-9\\.\\_]*/,\r\n    FieldOperator: /==|=|<>/,\r\n    FieldOperatorNumeric: /<=|>=|<|>/,\r\n    FieldValue: ['DateRange', 'NumberRange', 'DateRelative', 'Date', 'Number', 'FieldValueList', 'FieldValueString'],\r\n    FieldValueNumeric: ['DateRelative', 'Date', 'Number'],\r\n    FieldValueString: ['DoubleQuoted', 'FieldValueNotQuoted'],\r\n    FieldValueList: '([FieldValueString][FieldValueStringList*])',\r\n    FieldValueStringList: '[FieldValueSeparator][FieldValueString]',\r\n    FieldValueSeparator: / *, */,\r\n    FieldValueNotQuoted: /[^ \\(\\)\\[\\],]+/,\r\n    NumberRange: '[Number][Spaces?]..[Spaces?][Number]'\r\n  },\r\n  include: [Date, Basic]\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/Field.ts","import { defaults, indexOf, find } from 'underscore';\r\nimport { IQuerySuggestSelection, OmniboxEvents } from '../events/OmniboxEvents';\r\nimport { Component } from '../ui/Base/Component';\r\nimport { $$, Dom } from '../utils/Dom';\r\nimport { InputManager } from './InputManager';\r\nimport { ResultPreviewsManager } from './ResultPreviewsManager';\r\nimport { QueryProcessor, ProcessingStatus } from './QueryProcessor';\r\nimport { QueryUtils } from '../utils/QueryUtils';\r\n\r\nexport interface Suggestion {\r\n  text?: string;\r\n  index?: number;\r\n  html?: string;\r\n  dom?: HTMLElement;\r\n  separator?: string;\r\n  advancedQuery?: string;\r\n  onSelect?: () => void;\r\n}\r\n\r\nexport interface SuggestionsManagerOptions {\r\n  suggestionClass?: string;\r\n  selectedClass?: string;\r\n  timeout?: number;\r\n  previewHeaderText?: string;\r\n}\r\n\r\nexport enum Direction {\r\n  Up = 'Up',\r\n  Down = 'Down',\r\n  Left = 'Left',\r\n  Right = 'Right'\r\n}\r\n\r\nexport class SuggestionsManager {\r\n  public suggestionsListbox: Dom;\r\n  private suggestionsProcessor: QueryProcessor<Suggestion>;\r\n  private currentSuggestions: Suggestion[];\r\n  private options: SuggestionsManagerOptions;\r\n  private keyboardFocusedElement: HTMLElement;\r\n  private resultPreviewsManager: ResultPreviewsManager;\r\n  private root: HTMLElement;\r\n  private suggestionListboxID = `coveo-magicbox-suggestions-${QueryUtils.createGuid()}`;\r\n  private suggestionListboxClassName = `coveo-magicbox-suggestions`;\r\n\r\n  public get hasSuggestions() {\r\n    return this.currentSuggestions && this.currentSuggestions.length > 0;\r\n  }\r\n\r\n  public get hasFocus() {\r\n    return $$(this.element).findClass(this.options.selectedClass).length > 0;\r\n  }\r\n\r\n  public get hasPreviews() {\r\n    return this.resultPreviewsManager.hasPreviews;\r\n  }\r\n\r\n  private get focusedSuggestion() {\r\n    return find(this.currentSuggestions, suggestion => suggestion.dom.classList.contains(this.options.selectedClass));\r\n  }\r\n\r\n  constructor(\r\n    private element: HTMLElement,\r\n    private magicBoxContainer: HTMLElement,\r\n    private inputManager: InputManager,\r\n    options?: SuggestionsManagerOptions\r\n  ) {\r\n    this.root = Component.resolveRoot(element);\r\n    this.options = defaults(options, <SuggestionsManagerOptions>{\r\n      suggestionClass: 'magic-box-suggestion',\r\n      selectedClass: 'magic-box-selected'\r\n    });\r\n    // Put in a sane default, so as to not reject every suggestions if not set on initialization\r\n    if (this.options.timeout == undefined) {\r\n      this.options.timeout = 500;\r\n    }\r\n\r\n    $$(this.element).on('mouseover', e => {\r\n      this.handleMouseOver(e);\r\n    });\r\n\r\n    $$(this.element).on('mouseout', e => {\r\n      this.handleMouseOut(e);\r\n    });\r\n\r\n    this.suggestionsProcessor = new QueryProcessor({ timeout: this.options.timeout });\r\n    this.resultPreviewsManager = new ResultPreviewsManager(element, {\r\n      selectedClass: this.options.selectedClass,\r\n      timeout: this.options.timeout\r\n    });\r\n    this.suggestionsListbox = this.buildSuggestionsContainer();\r\n    $$(this.element).append(this.suggestionsListbox.el);\r\n    this.addAccessibilityProperties();\r\n    this.appendEmptySuggestionOption();\r\n  }\r\n\r\n  public handleMouseOver(e) {\r\n    const target = $$(<HTMLElement>e.target);\r\n    const parents = target.parents(this.options.suggestionClass);\r\n    if (target.hasClass(this.options.suggestionClass)) {\r\n      this.processMouseSelection(target.el);\r\n    } else if (parents.length > 0 && this.element.contains(parents[0])) {\r\n      this.processMouseSelection(parents[0]);\r\n    }\r\n  }\r\n\r\n  public handleMouseOut(e) {\r\n    const target = $$(<HTMLElement>e.target);\r\n    const targetParents = target.parents(this.options.suggestionClass);\r\n\r\n    //e.relatedTarget is not available if moving off the browser window or is an empty object `{}` when moving out of namespace in LockerService.\r\n    if (e.relatedTarget && $$(e.relatedTarget).isValid()) {\r\n      const relatedTargetParents = $$(<HTMLElement>e.relatedTarget).parents(this.options.suggestionClass);\r\n      if (target.hasClass(this.options.selectedClass) && !$$(<HTMLElement>e.relatedTarget).hasClass(this.options.suggestionClass)) {\r\n        this.removeSelectedStatus(target.el);\r\n      } else if (relatedTargetParents.length == 0 && targetParents.length > 0) {\r\n        this.removeSelectedStatus(targetParents[0]);\r\n      }\r\n    } else {\r\n      if (target.hasClass(this.options.selectedClass)) {\r\n        this.removeSelectedStatus(target.el);\r\n      } else if (targetParents.length > 0) {\r\n        this.removeSelectedStatus(targetParents[0]);\r\n      }\r\n    }\r\n    $$(this.root).trigger(OmniboxEvents.querySuggestLoseFocus);\r\n  }\r\n\r\n  public async moveDown() {\r\n    await this.move(Direction.Down);\r\n  }\r\n\r\n  public async moveUp() {\r\n    await this.move(Direction.Up);\r\n  }\r\n\r\n  public async moveLeft() {\r\n    await this.move(Direction.Left);\r\n  }\r\n\r\n  public async moveRight() {\r\n    await this.move(Direction.Right);\r\n  }\r\n\r\n  public selectAndReturnKeyboardFocusedElement(): HTMLElement {\r\n    const selected = this.keyboardFocusedElement;\r\n    if (selected) {\r\n      $$(selected).trigger('keyboardSelect');\r\n      // By definition, once an element has been \"selected\" with the keyboard,\r\n      // it is not longer \"active\" since the event has been processed.\r\n      this.keyboardFocusedElement = null;\r\n      this.inputManager.blur();\r\n    }\r\n    return selected;\r\n  }\r\n\r\n  public clearKeyboardFocusedElement() {\r\n    this.keyboardFocusedElement = null;\r\n  }\r\n\r\n  public async receiveSuggestions(suggestions: (Promise<Suggestion[]> | Suggestion[])[]) {\r\n    const { results, status } = await this.suggestionsProcessor.processQueries(suggestions);\r\n    if (status === ProcessingStatus.Overriden) {\r\n      return [];\r\n    }\r\n    this.updateSuggestions(results);\r\n    return results;\r\n  }\r\n\r\n  public clearSuggestions() {\r\n    this.updateSuggestions([]);\r\n  }\r\n\r\n  public updateSuggestions(suggestions: Suggestion[]) {\r\n    this.suggestionsListbox.empty();\r\n    this.inputManager.activeDescendant = null;\r\n\r\n    this.currentSuggestions = suggestions;\r\n\r\n    $$(this.element).toggleClass('magic-box-hasSuggestion', this.hasSuggestions);\r\n    this.inputManager.expanded = this.hasSuggestions;\r\n\r\n    this.resultPreviewsManager.displaySearchResultPreviewsForSuggestion(null);\r\n\r\n    if (!this.hasSuggestions) {\r\n      this.appendEmptySuggestionOption();\r\n      $$(this.root).trigger(OmniboxEvents.querySuggestLoseFocus);\r\n      return;\r\n    }\r\n\r\n    suggestions\r\n      .sort((a, b) => (b.index || 0) - (a.index || 0))\r\n      .forEach(suggestion => {\r\n        const dom = suggestion.dom ? this.modifyDomFromExistingSuggestion(suggestion.dom) : this.createDomFromSuggestion(suggestion);\r\n\r\n        dom.setAttribute('id', `magic-box-suggestion-${indexOf(suggestions, suggestion)}`);\r\n        dom.setAttribute('role', 'option');\r\n        dom.setAttribute('aria-selected', 'false');\r\n        dom.setAttribute('aria-label', dom.text());\r\n\r\n        dom['suggestion'] = suggestion;\r\n        this.suggestionsListbox.append(dom.el);\r\n      });\r\n\r\n    $$(this.root).trigger(OmniboxEvents.querySuggestRendered);\r\n  }\r\n\r\n  public get selectedSuggestion(): Suggestion {\r\n    if (this.htmlElementIsSuggestion(this.keyboardFocusedElement)) {\r\n      return this.returnMoved(this.keyboardFocusedElement) as Suggestion;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private async processKeyboardSelection(suggestion: HTMLElement) {\r\n    this.addSelectedStatus(suggestion);\r\n    this.keyboardFocusedElement = suggestion;\r\n    await this.updateSelectedSuggestion(this.focusedSuggestion);\r\n  }\r\n\r\n  private processKeyboardPreviewSelection(preview: HTMLElement) {\r\n    this.addSelectedStatus(preview);\r\n    this.keyboardFocusedElement = preview;\r\n  }\r\n\r\n  private processMouseSelection(suggestion: HTMLElement) {\r\n    this.addSelectedStatus(suggestion);\r\n    this.updateSelectedSuggestion(this.focusedSuggestion);\r\n    this.keyboardFocusedElement = null;\r\n  }\r\n\r\n  private buildSuggestionsContainer() {\r\n    return $$('div', {\r\n      className: this.suggestionListboxClassName,\r\n      id: this.suggestionListboxID,\r\n      role: 'listbox',\r\n      ariaLabel: 'Search Suggestions'\r\n    });\r\n  }\r\n\r\n  private createDomFromSuggestion(suggestion: Suggestion) {\r\n    const dom = $$('div', {\r\n      className: `magic-box-suggestion ${this.options.suggestionClass}`\r\n    });\r\n\r\n    suggestion.dom = dom.el;\r\n\r\n    dom.on('click', () => {\r\n      this.selectSuggestion(suggestion);\r\n    });\r\n\r\n    dom.on('keyboardSelect', () => {\r\n      this.selectSuggestion(suggestion);\r\n    });\r\n\r\n    if (suggestion.html) {\r\n      dom.el.innerHTML = suggestion.html;\r\n      return dom;\r\n    }\r\n\r\n    if (suggestion.text) {\r\n      dom.text(suggestion.text);\r\n\r\n      return dom;\r\n    }\r\n\r\n    if (suggestion.separator) {\r\n      dom.addClass('magic-box-suggestion-seperator');\r\n      const suggestionLabel = $$(\r\n        'div',\r\n        {\r\n          className: 'magic-box-suggestion-seperator-label'\r\n        },\r\n        suggestion.separator\r\n      );\r\n      dom.append(suggestionLabel.el);\r\n      return dom;\r\n    }\r\n\r\n    return dom;\r\n  }\r\n\r\n  private selectSuggestion(suggestion: Suggestion) {\r\n    suggestion.onSelect();\r\n    $$(this.root).trigger(OmniboxEvents.querySuggestSelection, <IQuerySuggestSelection>{ suggestion: suggestion.text });\r\n  }\r\n\r\n  private appendEmptySuggestionOption() {\r\n    // Accessibility tools reports that a listbox element must always have at least one child with an option\r\n    // Even if there is no suggestions to show.\r\n    this.suggestionsListbox.append($$('div', { role: 'option' }).el);\r\n  }\r\n\r\n  private modifyDomFromExistingSuggestion(dom: HTMLElement) {\r\n    // this need to be done if the selection is in cache and the dom is set in the suggestion\r\n    this.removeSelectedStatus(dom);\r\n    const found = dom.classList.contains(this.options.suggestionClass) ? dom : $$(dom).find('.' + this.options.suggestionClass);\r\n    this.removeSelectedStatus(found);\r\n    return $$(dom);\r\n  }\r\n\r\n  private async move(direction: Direction) {\r\n    if (this.resultPreviewsManager.focusedPreviewElement) {\r\n      await this.moveWithinPreview(direction);\r\n      return;\r\n    }\r\n    if (direction === Direction.Right || direction === Direction.Left) {\r\n      const firstPreview = this.resultPreviewsManager.previewElements[0];\r\n      if (firstPreview) {\r\n        this.processKeyboardPreviewSelection(firstPreview);\r\n        return;\r\n      }\r\n    }\r\n    await this.moveWithinSuggestion(direction);\r\n  }\r\n\r\n  private async moveWithinSuggestion(direction: Direction) {\r\n    const currentlySelected = $$(this.element).find(`.${this.options.selectedClass}`);\r\n    const selectables = $$(this.element).findAll(`.${this.options.suggestionClass}`);\r\n    const currentIndex = indexOf(selectables, currentlySelected);\r\n\r\n    let index = direction === Direction.Up ? currentIndex - 1 : currentIndex + 1;\r\n    index = (index + selectables.length) % selectables.length;\r\n\r\n    await this.selectQuerySuggest(selectables[index]);\r\n  }\r\n\r\n  private async selectQuerySuggest(suggestion: HTMLElement) {\r\n    if (suggestion) {\r\n      await this.processKeyboardSelection(suggestion);\r\n    } else {\r\n      this.keyboardFocusedElement = null;\r\n      this.inputManager.input.removeAttribute('aria-activedescendant');\r\n    }\r\n\r\n    return suggestion;\r\n  }\r\n\r\n  private async moveWithinPreview(direction: Direction) {\r\n    const newFocusedPreview = this.resultPreviewsManager.getElementInDirection(direction);\r\n    if (!newFocusedPreview) {\r\n      await this.selectQuerySuggest(this.resultPreviewsManager.previewsOwner.dom);\r\n      return;\r\n    }\r\n    this.processKeyboardPreviewSelection(newFocusedPreview);\r\n  }\r\n\r\n  private returnMoved(selected) {\r\n    if (selected) {\r\n      if (selected['suggestion']) {\r\n        return selected['suggestion'];\r\n      }\r\n      if (selected['no-text-suggestion']) {\r\n        return null;\r\n      }\r\n      if (selected instanceof HTMLElement) {\r\n        return {\r\n          text: $$(selected).text()\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private addSelectedStatus(element: HTMLElement): void {\r\n    const selected = this.element.getElementsByClassName(this.options.selectedClass);\r\n    for (let i = 0; i < selected.length; i++) {\r\n      const elem = <HTMLElement>selected.item(i);\r\n      this.removeSelectedStatus(elem);\r\n    }\r\n    $$(element).addClass(this.options.selectedClass);\r\n    this.updateAreaSelectedIfDefined(element, 'true');\r\n  }\r\n\r\n  private async updateSelectedSuggestion(suggestion: Suggestion) {\r\n    $$(this.root).trigger(OmniboxEvents.querySuggestGetFocus, <IQuerySuggestSelection>{\r\n      suggestion: suggestion.text\r\n    });\r\n    await this.resultPreviewsManager.displaySearchResultPreviewsForSuggestion(suggestion);\r\n  }\r\n\r\n  private removeSelectedStatus(suggestion: HTMLElement): void {\r\n    $$(suggestion).removeClass(this.options.selectedClass);\r\n    this.updateAreaSelectedIfDefined(suggestion, 'false');\r\n  }\r\n\r\n  private updateAreaSelectedIfDefined(element: HTMLElement, value: string): void {\r\n    if ($$(element).getAttribute('aria-selected')) {\r\n      this.inputManager.activeDescendant = element;\r\n      $$(element).setAttribute('aria-selected', value);\r\n    }\r\n  }\r\n\r\n  private addAccessibilityProperties() {\r\n    this.addAccessibilityPropertiesForMagicBox();\r\n    this.addAccessibilityPropertiesForInput();\r\n  }\r\n\r\n  private addAccessibilityPropertiesForMagicBox() {\r\n    const magicBox = $$(this.magicBoxContainer);\r\n\r\n    magicBox.setAttribute('role', 'search');\r\n    magicBox.setAttribute('aria-haspopup', 'listbox');\r\n  }\r\n\r\n  private addAccessibilityPropertiesForInput() {\r\n    const input = $$(this.inputManager.input);\r\n\r\n    this.inputManager.activeDescendant = null;\r\n    this.inputManager.expanded = false;\r\n    input.setAttribute('aria-owns', this.suggestionListboxID);\r\n    input.setAttribute('aria-controls', this.suggestionListboxID);\r\n  }\r\n\r\n  private htmlElementIsSuggestion(selected: HTMLElement) {\r\n    const omniboxSelectables = $$(this.element).findAll(`.${this.options.suggestionClass}`);\r\n    return indexOf(omniboxSelectables, selected) > -1;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/SuggestionsManager.ts","import { each, find, isUndefined } from 'underscore';\r\nimport { KEYBOARD } from '../Core';\r\nimport { $$ } from '../utils/Dom';\r\nimport { doMagicBoxExport } from './doMagicBoxExport';\r\nimport { Grammar } from './Grammar';\r\nimport { InputManager } from './InputManager';\r\nimport { MagicBoxClear } from './MagicBoxClear';\r\nimport { Result } from './Result/Result';\r\nimport { Suggestion, SuggestionsManager } from './SuggestionsManager';\r\n\r\nexport interface Options {\r\n  inline?: boolean;\r\n  selectableSuggestionClass?: string;\r\n  selectedSuggestionClass?: string;\r\n  suggestionTimeout?: number;\r\n}\r\n\r\nexport class MagicBoxInstance {\r\n  public onblur: () => void;\r\n  public onfocus: () => void;\r\n  public onchange: () => void;\r\n  public onSuggestions: (suggestions: Suggestion[]) => void;\r\n  public onsubmit: () => void;\r\n  public onselect: (suggestion: Suggestion) => void;\r\n  public onclear: () => void;\r\n  public onmove: () => void;\r\n  public ontabpress: () => void;\r\n\r\n  public getSuggestions: () => Array<Promise<Suggestion[]> | Suggestion[]>;\r\n\r\n  private inputManager: InputManager;\r\n  private suggestionsManager: SuggestionsManager;\r\n  private magicBoxClear: MagicBoxClear;\r\n\r\n  private lastSuggestions: Suggestion[] = [];\r\n\r\n  private result: Result;\r\n  private displayedResult: Result;\r\n\r\n  private get firstSuggestionWithText(): Suggestion {\r\n    return find(this.lastSuggestions, suggestion => suggestion.text);\r\n  }\r\n\r\n  private get firstSuggestionText() {\r\n    const firstSuggestionWithText = this.firstSuggestionWithText;\r\n    return firstSuggestionWithText ? firstSuggestionWithText.text : '';\r\n  }\r\n\r\n  constructor(public element: HTMLElement, public grammar: Grammar, public options: Options = {}) {\r\n    if (isUndefined(this.options.inline)) {\r\n      this.options.inline = false;\r\n    }\r\n    $$(element).addClass('magic-box');\r\n    if (this.options.inline) {\r\n      $$(element).addClass('magic-box-inline');\r\n    }\r\n\r\n    this.result = this.grammar.parse('');\r\n    this.displayedResult = this.result.clean();\r\n\r\n    let inputContainer = $$(element).find('.magic-box-input');\r\n    if (!inputContainer) {\r\n      inputContainer = document.createElement('div');\r\n      inputContainer.className = 'magic-box-input';\r\n      element.appendChild(inputContainer);\r\n    }\r\n\r\n    this.inputManager = new InputManager(\r\n      inputContainer,\r\n      (text, wordCompletion) => {\r\n        if (!wordCompletion) {\r\n          this.setText(text);\r\n          this.addSuggestions();\r\n          this.onchange && this.onchange();\r\n        } else {\r\n          this.setText(text);\r\n          this.onselect && this.onselect(this.firstSuggestionWithText);\r\n        }\r\n      },\r\n      this\r\n    );\r\n\r\n    this.inputManager.ontabpress = () => {\r\n      this.ontabpress && this.ontabpress();\r\n    };\r\n\r\n    const existingValue = this.inputManager.getValue();\r\n    if (existingValue) {\r\n      this.displayedResult.input = existingValue;\r\n    }\r\n\r\n    this.inputManager.setResult(this.displayedResult);\r\n\r\n    const suggestionsContainer = document.createElement('div');\r\n    suggestionsContainer.className = 'magic-box-suggestions';\r\n    this.element.appendChild(suggestionsContainer);\r\n\r\n    this.suggestionsManager = new SuggestionsManager(suggestionsContainer, this.element, this.inputManager, {\r\n      suggestionClass: this.options.selectableSuggestionClass,\r\n      selectedClass: this.options.selectedSuggestionClass,\r\n      timeout: this.options.suggestionTimeout\r\n    });\r\n\r\n    this.magicBoxClear = new MagicBoxClear(this);\r\n    this.setupHandler();\r\n  }\r\n\r\n  public getResult() {\r\n    return this.result;\r\n  }\r\n\r\n  public getDisplayedResult() {\r\n    return this.displayedResult;\r\n  }\r\n\r\n  public setText(text: string) {\r\n    $$(this.element).toggleClass('magic-box-notEmpty', text.length > 0);\r\n    this.magicBoxClear.toggleTabindexAndAriaHidden(text.length > 0);\r\n\r\n    this.result = this.grammar.parse(text);\r\n    this.displayedResult = this.result.clean();\r\n\r\n    this.inputManager.setResult(this.displayedResult);\r\n  }\r\n\r\n  public setCursor(index: number) {\r\n    this.inputManager.setCursor(index);\r\n  }\r\n\r\n  public getCursor() {\r\n    return this.inputManager.getCursor();\r\n  }\r\n\r\n  public resultAtCursor(match?: string | { (result: Result): boolean }): Result[] {\r\n    return this.displayedResult.resultAt(this.getCursor(), match);\r\n  }\r\n\r\n  private setupHandler() {\r\n    this.inputManager.onblur = () => {\r\n      $$(this.element).removeClass('magic-box-hasFocus');\r\n      this.onblur && this.onblur();\r\n      if (!this.options.inline) {\r\n        this.clearSuggestion();\r\n      }\r\n    };\r\n\r\n    this.inputManager.onfocus = () => {\r\n      $$(this.element).addClass('magic-box-hasFocus');\r\n      this.addSuggestions();\r\n      this.onfocus && this.onfocus();\r\n    };\r\n\r\n    this.inputManager.onkeydown = (key: number) => {\r\n      if (this.shouldMoveInSuggestions(key)) {\r\n        return false;\r\n      }\r\n      if (key === KEYBOARD.ENTER) {\r\n        const suggestion = this.suggestionsManager.selectAndReturnKeyboardFocusedElement();\r\n        if (suggestion == null) {\r\n          this.onsubmit && this.onsubmit();\r\n        }\r\n        return false;\r\n      } else if (key === KEYBOARD.ESCAPE) {\r\n        this.clearSuggestion();\r\n        this.blur();\r\n      } else {\r\n        this.suggestionsManager.clearKeyboardFocusedElement();\r\n      }\r\n      return true;\r\n    };\r\n\r\n    this.inputManager.onchangecursor = () => {\r\n      this.addSuggestions();\r\n    };\r\n\r\n    this.inputManager.onkeyup = (key: number) => {\r\n      this.onmove && this.onmove();\r\n      if (!this.shouldMoveInSuggestions(key)) {\r\n        return true;\r\n      }\r\n      switch (key) {\r\n        case KEYBOARD.UP_ARROW:\r\n          this.suggestionsManager.moveUp();\r\n          break;\r\n        case KEYBOARD.DOWN_ARROW:\r\n          this.suggestionsManager.moveDown();\r\n          break;\r\n        case KEYBOARD.LEFT_ARROW:\r\n          this.suggestionsManager.moveLeft();\r\n          break;\r\n        case KEYBOARD.RIGHT_ARROW:\r\n          this.suggestionsManager.moveRight();\r\n          break;\r\n      }\r\n      if (this.suggestionsManager.selectedSuggestion) {\r\n        this.focusOnSuggestion(this.suggestionsManager.selectedSuggestion);\r\n      }\r\n      this.onchange && this.onchange();\r\n      return false;\r\n    };\r\n  }\r\n\r\n  public async addSuggestions() {\r\n    const suggestions = await this.suggestionsManager.receiveSuggestions(this.getSuggestions != null ? this.getSuggestions() : []);\r\n    this.addSelectEventHandlers(suggestions);\r\n    this.inputManager.setWordCompletion(this.firstSuggestionText);\r\n    this.onSuggestions(suggestions);\r\n  }\r\n\r\n  private shouldMoveInSuggestions(key: KEYBOARD) {\r\n    switch (key) {\r\n      case KEYBOARD.UP_ARROW:\r\n      case KEYBOARD.DOWN_ARROW:\r\n        return true;\r\n      case KEYBOARD.LEFT_ARROW:\r\n      case KEYBOARD.RIGHT_ARROW:\r\n        if (this.suggestionsManager.hasFocus && this.suggestionsManager.hasPreviews) {\r\n          return true;\r\n        }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private addSelectEventHandlers(suggestions: Suggestion[]) {\r\n    each(suggestions, (suggestion: Suggestion) => {\r\n      if (suggestion.onSelect == null && suggestion.text != null) {\r\n        suggestion.onSelect = () => {\r\n          this.setText(suggestion.text);\r\n          this.onselect && this.onselect(suggestion);\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  public focus() {\r\n    $$(this.element).addClass('magic-box-hasFocus');\r\n    this.inputManager.focus();\r\n  }\r\n\r\n  public blur() {\r\n    this.inputManager.blur();\r\n  }\r\n\r\n  public async clearSuggestion() {\r\n    this.inputManager.setWordCompletion(null);\r\n    this.suggestionsManager.clearSuggestions();\r\n    this.onSuggestions([]);\r\n  }\r\n\r\n  private focusOnSuggestion(suggestion: Suggestion) {\r\n    if (suggestion == null || suggestion.text == null) {\r\n      this.inputManager.setResult(this.displayedResult, this.firstSuggestionText);\r\n    } else {\r\n      this.inputManager.setResult(this.grammar.parse(suggestion.text).clean(), suggestion.text);\r\n    }\r\n  }\r\n\r\n  public getText() {\r\n    return this.inputManager.getValue();\r\n  }\r\n\r\n  public getWordCompletion() {\r\n    return this.inputManager.getWordCompletion();\r\n  }\r\n\r\n  public clear() {\r\n    this.setText('');\r\n    this.clearSuggestion();\r\n    this.focus();\r\n    this.onclear && this.onclear();\r\n  }\r\n\r\n  public hasSuggestions() {\r\n    return this.suggestionsManager.hasSuggestions;\r\n  }\r\n}\r\n\r\nexport function createMagicBox(element: HTMLElement, grammar: Grammar, options?: Options) {\r\n  return new MagicBoxInstance(element, grammar, options);\r\n}\r\n\r\nexport function requestAnimationFrame(callback: () => void) {\r\n  if ('requestAnimationFrame' in window) {\r\n    return window.requestAnimationFrame(callback);\r\n  }\r\n  return setTimeout(callback);\r\n}\r\n\r\ndoMagicBoxExport();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/MagicBox.ts","import _ = require('underscore');\r\n\r\nexport class MagicBoxUtils {\r\n  static escapeRegExp(str) {\r\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n  }\r\n\r\n  static highlightText(\r\n    text: string,\r\n    highligth: string,\r\n    ignoreCase = false,\r\n    matchClass: string = 'magic-box-hightlight',\r\n    doNotMatchClass: string = ''\r\n  ) {\r\n    if (highligth.length == 0) {\r\n      return text;\r\n    }\r\n    const escaped = this.escapeRegExp(highligth);\r\n    const stringRegex = '(' + escaped + ')|(.*?(?=' + escaped + ')|.+)';\r\n    const regex = new RegExp(stringRegex, ignoreCase ? 'gi' : 'g');\r\n    return text.replace(regex, (text, match, notmatch) => this.escapeText(match != null ? matchClass : doNotMatchClass, text));\r\n  }\r\n\r\n  private static escapeText = (classname: string, text: string) => {\r\n    return `<span class=\"${classname}\">${_.escape(text)}</span>`;\r\n  };\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/MagicBoxUtils.ts","import 'styling/_Searchbox';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { SVGDom } from '../../utils/SVGDom';\r\nimport { SVGIcons } from '../../utils/SVGIcons';\r\nimport { SearchBoxResize } from '../../utils/SearchBoxResize';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { IOmniboxOptions, Omnibox } from '../Omnibox/Omnibox';\r\nimport { Querybox } from '../Querybox/Querybox';\r\nimport { SearchButton } from '../SearchButton/SearchButton';\r\nimport { each, extend } from 'underscore';\r\n\r\nexport interface ISearchboxOptions extends IOmniboxOptions {\r\n  addSearchButton?: boolean;\r\n  enableOmnibox?: boolean;\r\n  height?: number;\r\n}\r\n\r\n/**\r\n * The `Searchbox` component allows you to conveniently instantiate two components which end users frequently use to\r\n * enter and submit queries.\r\n *\r\n * This component attaches itself to a `div` element and takes care of instantiating either a\r\n * [`Querybox`]{@link Querybox} or an [`Omnibox`]{@link Omnibox} component (see the\r\n * [`enableOmnibox`]{@link Searchbox.options.enableOmnibox} option). Optionally, the `Searchbox` can also instantiate a\r\n * [`SearchButton`]{@link SearchButton} component, and append it inside the same `div` (see the\r\n * [`addSearchButton`]{@link Searchbox.options.addSearchButton} option).\r\n */\r\nexport class Searchbox extends Component {\r\n  static ID = 'Searchbox';\r\n  static parent = Omnibox;\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Searchbox: Searchbox,\r\n      SearchButton: SearchButton,\r\n      Omnibox: Omnibox,\r\n      Querybox: Querybox\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Possible options for the {@link Searchbox}\r\n   * @componentOptions\r\n   */\r\n  static options: ISearchboxOptions = {\r\n    /**\r\n     * Specifies whether to instantiate a [`SearchButton`]{@link SearchButton} component.\r\n     *\r\n     * Default value is `true`.\r\n     */\r\n    addSearchButton: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n    /**\r\n     * A custom height for the search box (in pixels).\r\n     *\r\n     * Note: Avoid setting this option if you want to modify the search box styling through custom CSS.\r\n     *\r\n     * Minimum value is `25`\r\n     *\r\n     * Default behavior: The most specific CSS rules targeting HTML elements generated by the Searchbox component are used\r\n     * (e.g., if you are only using the default CoveoFullSearch.css stylesheet with no further styling customizations,\r\n     * the search box height will be set to 50 pixels by default).\r\n     *\r\n     * @availablesince [July 2019 Release (v2.6459)](https://docs.coveo.com/en/2938/)\r\n     */\r\n    height: ComponentOptions.buildNumberOption({ min: 25 }),\r\n\r\n    /**\r\n     * Specifies whether to instantiate an [`Omnibox`]{@link Omnibox} component.\r\n     *\r\n     * When this option is `false`, the `Searchbox` instantiates a [`Querybox`]{@link Querybox} component instead.\r\n     *\r\n     * **Note:**\r\n     * > You can use configuration options specific to the component you choose to instantiate with the `Searchbox`.\r\n     *\r\n     * **Examples:**\r\n     *\r\n     * In this first case, the `Searchbox` instantiates a `Querybox` component. You can configure this `Querybox`\r\n     * instance using any of the `Querybox` component options, such as\r\n     * [`triggerQueryOnClear`]{@link Querybox.options.triggerQueryOnClear}.\r\n     * ```html\r\n     * <div class='CoveoSearchbox' data-trigger-query-on-clear='true'></div>\r\n     * ```\r\n     *\r\n     * In this second case, the `Searchbox` instantiates an `Omnibox` component. You can configure this `Omnibox`\r\n     * instance using any of the `Omnibox` component options, such as\r\n     * [`placeholder`]{@link Omnibox.options.placeholder}.\r\n     * Moreover, since the `Omnibox` component inherits all of the `Querybox` component options, the\r\n     * `data-trigger-query-on-clear` option from the previous example would also work on this `Omnibox` instance.\r\n     * ```html\r\n     * <div class='CoveoSearchbox' data-enable-omnibox='true' data-placeholder='Please enter a query'></div>\r\n     * ```\r\n     *\r\n     * Default value is `true`.\r\n     */\r\n    enableOmnibox: ComponentOptions.buildBooleanOption({ defaultValue: true })\r\n  };\r\n\r\n  /**\r\n   * The [`SearchButton`]{@link SearchButton} component instance.\r\n   */\r\n  public searchButton: SearchButton;\r\n\r\n  /**\r\n   * The component instance which allows end users to input queries.\r\n   *\r\n   * Can be either a [`Querybox`]{@link Querybox} or an [`Omnibox`]{@link Omnibox} component, depending on the value of\r\n   * [`enableOmnibox`]{@link Searchbox.options.enableOmnibox}.\r\n   */\r\n  public searchbox: Querybox | Omnibox;\r\n\r\n  /**\r\n   * Creates a new `Searchbox` component. Creates a new `Coveo.Magicbox` instance and wraps magic box methods (`onblur`,\r\n   * `onsubmit`, etc.). Binds event on `buildingQuery` and on redirection (for standalone box).\r\n   * @param element The HTMLElement on which to instantiate the component. This cannot be an HTMLInputElement for\r\n   * technical reasons.\r\n   * @param options The options for the `Searchbox component`. These will merge with the options from the component set\r\n   * directly on the `HTMLElement`.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: ISearchboxOptions, public bindings?: IComponentBindings) {\r\n    super(element, Searchbox.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Searchbox, options);\r\n\r\n    if (this.options.inline) {\r\n      $$(element).addClass('coveo-inline');\r\n    }\r\n\r\n    this.initSearchBox();\r\n    this.initSearchButton();\r\n    this.applyMagicBoxIcon();\r\n    this.applyCustomHeight();\r\n  }\r\n\r\n  private initSearchBox() {\r\n    const div = document.createElement('div');\r\n    this.element.appendChild(div);\r\n\r\n    if (this.options.enableOmnibox) {\r\n      this.searchbox = new Omnibox(div, this.options, this.bindings);\r\n    } else {\r\n      this.searchbox = new Querybox(div, this.options, this.bindings);\r\n    }\r\n  }\r\n\r\n  private initSearchButton() {\r\n    if (!this.options.addSearchButton) {\r\n      return;\r\n    }\r\n\r\n    const anchor = $$('a');\r\n    this.element.appendChild(anchor.el);\r\n    this.searchButton = new SearchButton(anchor.el, { searchbox: this.searchbox }, this.bindings);\r\n  }\r\n\r\n  private applyMagicBoxIcon() {\r\n    const magicBoxIcon = $$(this.element).find('.magic-box-icon');\r\n    magicBoxIcon.innerHTML = SVGIcons.icons.mainClear;\r\n    SVGDom.addClassToSVGInContainer(magicBoxIcon, 'magic-box-clear-svg');\r\n  }\r\n\r\n  private applyCustomHeight() {\r\n    if (!this.options.height) {\r\n      return;\r\n    }\r\n\r\n    $$(this.element).addClass('coveo-custom-height');\r\n    SearchBoxResize.resize(this.element, this.options.height);\r\n  }\r\n}\r\n\r\nSearchbox.options = { ...Searchbox.options, ...Omnibox.options, ...Querybox.options };\r\n\r\n// Only parse omnibox option if omnibox is enabled\r\neach(<any>Searchbox.options, (value, key: string) => {\r\n  if (key in Omnibox.options && !(key in Querybox.options)) {\r\n    Searchbox.options[key] = extend({ depend: 'enableOmnibox' }, value);\r\n  }\r\n});\r\n\r\nInitialization.registerAutoCreateComponent(Searchbox);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Searchbox/Searchbox.ts","import { Expression } from './Expression';\r\nimport { Result } from '../Result/Result';\r\nimport { Grammar } from '../Grammar';\r\nimport { RefResult } from '../Result/RefResult';\r\nimport { ExpressionEndOfInput } from './ExpressionEndOfInput';\r\nimport _ = require('underscore');\r\n\r\nexport class ExpressionRef implements Expression {\r\n  constructor(public ref: string, public occurrence: string | number, public id: string, public grammar: Grammar) {}\r\n\r\n  parse(input: string, end: boolean): Result {\r\n    var ref = this.grammar.getExpression(this.ref);\r\n    if (ref == null) {\r\n      throw new Error('Expression not found:' + this.ref);\r\n    }\r\n    if (this.occurrence == '?' || this.occurrence == null) {\r\n      return this.parseOnce(input, end, ref);\r\n    } else {\r\n      return this.parseMany(input, end, ref);\r\n    }\r\n  }\r\n\r\n  parseOnce(input: string, end: boolean, ref: Expression): Result {\r\n    var refResult = ref.parse(input, end);\r\n    var success = refResult.isSuccess();\r\n    if (!success && this.occurrence == '?') {\r\n      if (end) {\r\n        // if end was found\r\n        if (input.length == 0) {\r\n          return new RefResult([], this, input, refResult);\r\n        }\r\n        // if end was not found and all error expression are EndOfInput, reparse with end = false.\r\n        if (_.all(refResult.getBestExpect(), expect => expect.expression == ExpressionEndOfInput)) {\r\n          return new RefResult([new Result(null, ExpressionEndOfInput, input)], this, input, refResult);\r\n        }\r\n        return refResult;\r\n      }\r\n      // the ref is not required and it do not need to end the input\r\n      return new RefResult([], this, input, null);\r\n    }\r\n    return new RefResult([refResult], this, input, success ? null : refResult);\r\n  }\r\n\r\n  parseMany(input: string, end: boolean, ref: Expression) {\r\n    var subResults: Result[] = [];\r\n    var subResult: Result;\r\n    var subInput = input;\r\n    var success: boolean;\r\n\r\n    // try to parse until it do not match, do not manage the end yet\r\n    do {\r\n      subResult = ref.parse(subInput, false);\r\n      success = subResult.isSuccess();\r\n      if (success) {\r\n        subResults.push(subResult);\r\n        subInput = subInput.substr(subResult.getLength());\r\n      }\r\n    } while (success && subResult.input != subInput);\r\n\r\n    // minimal occurance of a ref\r\n    var requiredOccurance = _.isNumber(this.occurrence) ? <number>this.occurrence : this.occurrence == '+' ? 1 : 0;\r\n\r\n    // if the minimal occurance is not reached add the fail result to the list\r\n    if (subResults.length < requiredOccurance) {\r\n      subResults.push(subResult);\r\n    } else if (end) {\r\n      // if there is at least one match, check if the last match is at the end\r\n      if (subResults.length > 0) {\r\n        var last = _.last(subResults);\r\n        subResult = ref.parse(last.input, true);\r\n        if (subResult.isSuccess()) {\r\n          // if successful, replace the last subResult by the one with end\r\n          subResults[subResults.length - 1] = subResult;\r\n        } else {\r\n          // if not successful, we keep the last successful result and we add a endOfInputExpected Result after it\r\n          subResults.push(new Result(null, ExpressionEndOfInput, last.input.substr(last.getLength())));\r\n          // we parse back the last with the length of the successful Result (at the same place we put the endOfInputExpected) and put it in failAttempt\r\n          subResult = ref.parse(last.input.substr(last.getLength()), true);\r\n        }\r\n      } else if (input.length != 0) {\r\n        // if there is no result at all and we are not at the end, return a endOfInputExpected Result\r\n        var endOfInput = new Result(null, ExpressionEndOfInput, input);\r\n        return new RefResult([endOfInput], this, input, subResult);\r\n      }\r\n    }\r\n    return new RefResult(subResults, this, input, subResult);\r\n  }\r\n\r\n  public toString() {\r\n    return this.id;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Expression/ExpressionRef.ts","import { Result } from './Result';\r\nimport { Expression } from '../Expression/Expression';\r\nimport _ = require('underscore');\r\n\r\nexport class RefResult extends Result {\r\n  public failAttempt: Result;\r\n  constructor(results: Result[], public expression: Expression, public input: string, lastResult: Result) {\r\n    super(results, expression, input);\r\n    if (_.last(results) != lastResult) {\r\n      this.failAttempt = lastResult;\r\n      if (this.failAttempt != null) {\r\n        this.failAttempt.parent = this;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all fail result.\r\n   */\r\n  public getExpect(): Result[] {\r\n    var expect = super.getExpect();\r\n    // add the failAttempt to the expect\r\n    if (this.failAttempt != null) {\r\n      return expect.concat(this.failAttempt.getExpect());\r\n    }\r\n    return expect;\r\n  }\r\n\r\n  /**\r\n   * Clean the result to have the most relevant result. If the result is successful just return a clone of it.\r\n   */\r\n  public clean(path?: Result[]): Result {\r\n    // if there is no failAttempt, we will use the default clean\r\n    if (this.failAttempt != null && (path != null || !this.isSuccess())) {\r\n      path = path || _.last(this.getBestExpect()).path(this);\r\n      var next = _.first(path);\r\n      // if the next is in the subResults, not the failAttempt, do the default clean;\r\n      if (next != null && next == this.failAttempt) {\r\n        var last = _.last(this.subResults);\r\n        // if the last is not successful, remove it because we want the failAttempt path\r\n        var subResults: Result[] = _.map(last != null && last.isSuccess() ? this.subResults : _.initial(this.subResults), subResult =>\r\n          subResult.clean()\r\n        );\r\n        subResults.push(next.clean(_.rest(path)));\r\n        return new Result(subResults, this.expression, this.input);\r\n      }\r\n    }\r\n    return super.clean(path);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Result/RefResult.ts","import { Expression } from './Expression';\r\nimport { ExpressionRef } from './ExpressionRef';\r\nimport { Result } from '../Result/Result';\r\nimport { OptionResult } from '../Result/OptionResult';\r\n\r\nexport class ExpressionOptions implements Expression {\r\n  constructor(public parts: ExpressionRef[], public id: string) {}\r\n\r\n  parse(input: string, end: boolean): Result {\r\n    var failAttempt: Result[] = [];\r\n    for (var i = 0; i < this.parts.length; i++) {\r\n      var subResult = this.parts[i].parse(input, end);\r\n      if (subResult.isSuccess()) {\r\n        return new OptionResult(subResult, this, input, failAttempt);\r\n      }\r\n      failAttempt.push(subResult);\r\n    }\r\n    return new OptionResult(null, this, input, failAttempt);\r\n  }\r\n\r\n  public toString() {\r\n    return this.id;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Expression/ExpressionOptions.ts","import { Result } from './Result';\r\nimport _ = require('underscore');\r\nimport { Expression } from '../Expression/Expression';\r\n\r\nexport class OptionResult extends Result {\r\n  constructor(private result: Result, public expression: Expression, public input: string, public failAttempt: Result[]) {\r\n    super(result != null ? [result] : null, expression, input);\r\n    _.forEach(this.failAttempt, subResult => {\r\n      subResult.parent = this;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return all fail result.\r\n   */\r\n  public getExpect(): Result[] {\r\n    var expect = [];\r\n    if (this.result != null) {\r\n      expect = this.result.getExpect();\r\n    }\r\n    expect = _.reduce(this.failAttempt, (expect: Result[], result: Result) => expect.concat(result.getExpect()), expect);\r\n    if (expect.length > 0 && _.all(expect, result => result.input == this.input)) {\r\n      return [this];\r\n    }\r\n    return expect;\r\n  }\r\n\r\n  /**\r\n   * Clean the result to have the most relevant result. If the result is successful just return a clone of it.\r\n   */\r\n  public clean(path?: Result[]): Result {\r\n    if (path != null || !this.isSuccess()) {\r\n      // Result will be a ref. We skip it for cleaner tree.\r\n      path = _.rest(path || _.last(this.getBestExpect()).path(this));\r\n      // next can be Result or one of the failAttempt. In both case we have only one child\r\n      var next = _.first(path);\r\n      if (next == null) {\r\n        return new Result(null, this.expression, this.input);\r\n      }\r\n      return new Result([next.clean(_.rest(path))], this.expression, this.input);\r\n    }\r\n    // Result will be a ref. We skip it for cleaner tree.\r\n    return new Result(_.map(this.result.subResults, subResult => subResult.clean()), this.expression, this.input);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Result/OptionResult.ts","import { Expression } from './Expression';\r\nimport { Grammar } from '../Grammar';\r\nimport { Result } from '../Result/Result';\r\nimport { EndOfInputResult } from '../Result/Result';\r\n\r\nexport class ExpressionRegExp implements Expression {\r\n  constructor(public value: RegExp, public id: string, grammar: Grammar) {}\r\n\r\n  parse(input: string, end: boolean): Result {\r\n    var groups = input.match(this.value);\r\n    // if the RegExp do not match at the start, ignore it\r\n    if (groups != null && groups.index != 0) {\r\n      groups = null;\r\n    }\r\n    var result = new Result(groups != null ? groups[0] : null, this, input);\r\n    // if is successful and we require the end but the length of parsed is\r\n    // lower than the input length, return a EndOfInputExpected Result\r\n    if (result.isSuccess() && end && input.length > result.value.length) {\r\n      return new EndOfInputResult(result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public toString() {\r\n    return this.id;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Expression/ExpressionRegExp.ts","import { Expression } from './Expression';\r\nimport { Result } from '../Result/Result';\r\nimport { Grammar } from '../Grammar';\r\n\r\nexport interface ExpressionFunctionArgument {\r\n  (input: string, end: boolean, expression: Expression): Result;\r\n}\r\n\r\nexport class ExpressionFunction implements Expression {\r\n  constructor(public func: ExpressionFunctionArgument, public id: string, public grammar: Grammar) {}\r\n\r\n  public parse(input: string, end: boolean): Result {\r\n    return this.func(input, end, this);\r\n  }\r\n\r\n  public toString() {\r\n    return this.id;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Expression/ExpressionFunction.ts","import { Expression } from '../Expression/Expression';\r\nimport { ExpressionEndOfInput } from '../Expression/ExpressionEndOfInput';\r\nimport { ExpressionConstant } from '../Expression/ExpressionConstant';\r\nimport _ = require('underscore');\r\n\r\nexport class Result {\r\n  public value: string;\r\n  public subResults: Result[];\r\n  public parent: Result;\r\n\r\n  constructor(value: string | Result[], public expression: Expression, public input: string) {\r\n    if (_.isString(value)) {\r\n      this.value = <string>value;\r\n    } else if (_.isArray(value)) {\r\n      this.subResults = <Result[]>value;\r\n      _.forEach(this.subResults, (subResult: Result) => {\r\n        subResult.parent = this;\r\n      });\r\n    }\r\n  }\r\n\r\n  public isSuccess() {\r\n    // if null is the value, this mean the expression could not parse this input\r\n    return this.value != null || (this.subResults != null && _.all(this.subResults, subResult => subResult.isSuccess()));\r\n  }\r\n\r\n  /**\r\n   * Return path to this result ([parent.parent, parent, this])\r\n   */\r\n  public path(until?: Result): Result[] {\r\n    var path: Result[] = this.parent != null && this.parent != until ? this.parent.path(until) : [];\r\n    path.push(this);\r\n    return path;\r\n  }\r\n\r\n  /**\r\n   * Return the closest parent that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n   */\r\n  public findParent(match: string | { (result: Result): boolean }): Result {\r\n    var parent = <Result>this;\r\n    var iterator = _.isString(match) ? (result: Result) => match == result.expression.id : <{ (result: Result): boolean }>match;\r\n    while (parent != null && !iterator(parent)) {\r\n      parent = parent.parent;\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /**\r\n   * Return the first child that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n   */\r\n  public find(match: string | { (result: Result): boolean }): Result {\r\n    var iterator = _.isString(match) ? (result: Result) => match == result.expression.id : <{ (result: Result): boolean }>match;\r\n    if (iterator(this)) {\r\n      return this;\r\n    }\r\n    if (this.subResults) {\r\n      for (var i = 0; i < this.subResults.length; i++) {\r\n        var subResultFind = this.subResults[i].find(iterator);\r\n        if (subResultFind) {\r\n          return subResultFind;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Return all children that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n   */\r\n  public findAll(match: string | { (result: Result): boolean }): Result[] {\r\n    var results: Result[] = [];\r\n    var iterator = _.isString(match) ? (result: Result) => match == result.expression.id : <{ (result: Result): boolean }>match;\r\n    if (iterator(this)) {\r\n      results.push(this);\r\n    }\r\n    if (this.subResults) {\r\n      results = _.reduce(this.subResults, (results, subResult: Result) => results.concat(subResult.findAll(iterator)), results);\r\n    }\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Return the first child that match the condition (can be it-self). If match is a string, it will search for the result expresion id\r\n   */\r\n  public resultAt(index: number, match?: string | { (result: Result): boolean }): Result[] {\r\n    if (index < 0 || index > this.getLength()) {\r\n      return [];\r\n    }\r\n    if (match != null) {\r\n      if (_.isString(match)) {\r\n        if (match == this.expression.id) {\r\n          return [this];\r\n        }\r\n      } else {\r\n        if ((<{ (result: Result): boolean }>match)(this)) {\r\n          return [this];\r\n        }\r\n      }\r\n    } else {\r\n      var value = this.value == null && this.subResults == null ? this.input : this.value;\r\n      if (value != null) {\r\n        return [this];\r\n      }\r\n    }\r\n\r\n    if (this.subResults != null) {\r\n      var results = [];\r\n      for (var i = 0; i < this.subResults.length; i++) {\r\n        var subResult = this.subResults[i];\r\n        results = results.concat(subResult.resultAt(index, match));\r\n        index -= subResult.getLength();\r\n        if (index < 0) {\r\n          break;\r\n        }\r\n      }\r\n      return results;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Return all fail result.\r\n   */\r\n  public getExpect(): Result[] {\r\n    if (this.value == null && this.subResults == null) {\r\n      return [this];\r\n    }\r\n    if (this.subResults != null) {\r\n      return _.reduce(this.subResults, (expect: Result[], result: Result) => expect.concat(result.getExpect()), []);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Return the best fail result (The farthest result who got parsed). We also remove duplicate and always return the simplest result of a kind\r\n   */\r\n  public getBestExpect(): Result[] {\r\n    var expects = this.getExpect();\r\n    var groups = _.groupBy(expects, expect => expect.input);\r\n    var key = _.last(\r\n      _.keys(groups).sort((a, b) => {\r\n        return b.length - a.length;\r\n      })\r\n    );\r\n    var bestResults = groups[key];\r\n    var groups = _.groupBy(bestResults, expect => expect.expression.id);\r\n    return _.map(groups, (bestResults: Result[]): Result => {\r\n      return _.chain(bestResults)\r\n        .map(result => {\r\n          return {\r\n            path: result.path().length,\r\n            result: result\r\n          };\r\n        })\r\n        .sortBy('path')\r\n        .pluck('result')\r\n        .first()\r\n        .value();\r\n    });\r\n  }\r\n\r\n  public getHumanReadableExpect() {\r\n    var expect = this.getBestExpect();\r\n    var input = expect.length > 0 ? _.last(expect).input : '';\r\n    return (\r\n      'Expected ' +\r\n      _.map(expect, (result: Result) => result.getHumanReadable()).join(' or ') +\r\n      ' but ' +\r\n      (input.length > 0 ? JSON.stringify(input[0]) : 'end of input') +\r\n      ' found.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return a string that represent what is before this result\r\n   */\r\n  public before(): string {\r\n    if (this.parent == null) {\r\n      return '';\r\n    }\r\n    var index = _.indexOf(this.parent.subResults, this);\r\n    return (\r\n      this.parent.before() +\r\n      _.chain(this.parent.subResults)\r\n        .first(index)\r\n        .map(subResult => subResult.toString())\r\n        .join('')\r\n        .value()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return a string that represent what is after this result\r\n   */\r\n  public after(): string {\r\n    if (this.parent == null) {\r\n      return '';\r\n    }\r\n    var index = _.indexOf(this.parent.subResults, this);\r\n    return (\r\n      _.chain(this.parent.subResults)\r\n        .last(this.parent.subResults.length - index - 1)\r\n        .map(subResult => subResult.toString())\r\n        .join('')\r\n        .value() + this.parent.after()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the length of the result\r\n   */\r\n  public getLength() {\r\n    if (this.value != null) {\r\n      return this.value.length;\r\n    }\r\n\r\n    if (this.subResults != null) {\r\n      return _.reduce(this.subResults, (length: number, subResult: Result) => length + subResult.getLength(), 0);\r\n    }\r\n\r\n    return this.input.length;\r\n  }\r\n\r\n  public toHtmlElement(): HTMLElement {\r\n    var element = document.createElement('span');\r\n    var id = this.expression != null ? this.expression.id : null;\r\n\r\n    if (id != null) {\r\n      element.setAttribute('data-id', id);\r\n    }\r\n\r\n    element.setAttribute('data-success', this.isSuccess().toString());\r\n\r\n    if (this.value != null) {\r\n      element.appendChild(document.createTextNode(this.value));\r\n      element.setAttribute('data-value', this.value);\r\n    } else if (this.subResults != null) {\r\n      _.each(this.subResults, (subResult: Result) => {\r\n        element.appendChild(subResult.toHtmlElement());\r\n      });\r\n    } else {\r\n      element.appendChild(document.createTextNode(this.input));\r\n      element.setAttribute('data-input', this.input);\r\n      element.className = 'magic-box-error' + (this.input.length > 0 ? '' : ' magic-box-error-empty');\r\n    }\r\n\r\n    element['result'] = this;\r\n\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Clean the result to have the most relevant result. If the result is successful just return a clone of it.\r\n   */\r\n  public clean(path?: Result[]): Result {\r\n    if (path != null || !this.isSuccess()) {\r\n      path = path || _.last(this.getBestExpect()).path(this);\r\n      var next = _.first(path);\r\n      if (next != null) {\r\n        var nextIndex = _.indexOf(this.subResults, next);\r\n        var subResults: Result[] = nextIndex == -1 ? [] : _.map(_.first(this.subResults, nextIndex), subResult => subResult.clean());\r\n        subResults.push(next.clean(_.rest(path)));\r\n        return new Result(subResults, this.expression, this.input);\r\n      } else {\r\n        return new Result(null, this.expression, this.input);\r\n      }\r\n    }\r\n    if (this.value != null) {\r\n      return new Result(this.value, this.expression, this.input);\r\n    }\r\n    if (this.subResults != null) {\r\n      return new Result(_.map(this.subResults, subResult => subResult.clean()), this.expression, this.input);\r\n    }\r\n  }\r\n\r\n  public clone(): Result {\r\n    if (this.value != null) {\r\n      return new Result(this.value, this.expression, this.input);\r\n    }\r\n    if (this.subResults != null) {\r\n      return new Result(_.map(this.subResults, subResult => subResult.clone()), this.expression, this.input);\r\n    }\r\n    return new Result(null, this.expression, this.input);\r\n  }\r\n\r\n  public toString() {\r\n    if (this.value != null) {\r\n      return this.value;\r\n    }\r\n    if (this.subResults != null) {\r\n      return _.map(this.subResults, subresult => subresult.toString()).join('');\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  public getHumanReadable() {\r\n    if (this.expression instanceof ExpressionConstant) {\r\n      return JSON.stringify((<ExpressionConstant>this.expression).value);\r\n    }\r\n    return this.expression.id;\r\n  }\r\n}\r\n\r\nexport class EndOfInputResult extends Result {\r\n  constructor(result: Result) {\r\n    super([result], ExpressionEndOfInput, result.input);\r\n    var endOfInput = new Result(null, ExpressionEndOfInput, result.input.substr(result.getLength()));\r\n    endOfInput.parent = this;\r\n    this.subResults.push(endOfInput);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Result/Result.ts","import { Result } from '../Result/Result';\r\nimport { Expression } from './Expression';\r\n\r\nexport class ExpressionList implements Expression {\r\n  constructor(private parts: Expression[], public id: string) {\r\n    if (parts.length == 0) {\r\n      throw new Error(JSON.stringify(id) + ' should have at least 1 parts');\r\n    }\r\n  }\r\n\r\n  parse(input: string, end: boolean): Result {\r\n    var subResults: Result[] = [];\r\n    var subResult: Result;\r\n    var subInput = input;\r\n\r\n    for (var i = 0; i < this.parts.length; i++) {\r\n      var part = this.parts[i];\r\n      subResult = part.parse(subInput, end && i == this.parts.length - 1);\r\n      subResults.push(subResult);\r\n      // if the subResult do not succeed, stop the parsing\r\n      if (!subResult.isSuccess()) {\r\n        break;\r\n      } else {\r\n        subInput = subInput.substr(subResult.getLength());\r\n      }\r\n    }\r\n    return new Result(subResults, this, input);\r\n  }\r\n\r\n  public toString() {\r\n    return this.id;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Expression/ExpressionList.ts","import { SubGrammar } from './Expressions';\r\nimport { Field } from './Field';\r\n\r\nexport var NestedQuery: SubGrammar = {\r\n  basicExpressions: ['NestedQuery'],\r\n  grammars: {\r\n    NestedQuery: '[[NestedField][OptionalSpaces][Expressions]]',\r\n    NestedField: '[[Field]]',\r\n    FieldValue: ['NestedQuery']\r\n  },\r\n  include: [Field]\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/NestedQuery.ts","import { SubGrammar } from './Expressions';\r\nimport { Basic } from './Basic';\r\n\r\nexport const Date: SubGrammar = {\r\n  grammars: {\r\n    Date: '[DateYear]/[DateMonth]/[DateDay]',\r\n    DateYear: /([0-9]{4})/,\r\n    DateMonth: /(1[0-2]|0?[1-9])/,\r\n    DateDay: /([1-2][0-9]|3[0-1]|0?[1-9])/,\r\n    DateRange: '[Date][Spaces?]..[Spaces?][Date]',\r\n    DateRelative: ['DateRelativeNegative', 'DateRelativeTerm'],\r\n    DateRelativeTerm: /now|today|yesterday/,\r\n    DateRelativeNegative: '[DateRelativeTerm][DateRelativeNegativeRef]',\r\n    DateRelativeNegativeRef: /([\\-\\+][0-9]+(s|m|h|d|mo|y))/\r\n  },\r\n  include: [Basic]\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/Date.ts","import { Basic } from './Basic';\r\nimport { SubGrammar } from './Expressions';\r\nexport const QueryExtension: SubGrammar = {\r\n  basicExpressions: ['QueryExtension'],\r\n  grammars: {\r\n    QueryExtension: '$[QueryExtensionName]([QueryExtensionArguments])',\r\n    QueryExtensionName: /\\w+/,\r\n    QueryExtensionArguments: '[QueryExtensionArgumentList*][QueryExtensionArgument]',\r\n    QueryExtensionArgumentList: '[QueryExtensionArgument][Spaces?],[Spaces?]',\r\n    QueryExtensionArgument: '[QueryExtensionArgumentName]:[Spaces?][QueryExtensionArgumentValue]',\r\n    QueryExtensionArgumentName: /\\w+/,\r\n    QueryExtensionArgumentValue: ['SingleQuoted', 'Expressions']\r\n  },\r\n  include: [Basic]\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/QueryExtension.ts","import { SubGrammar } from './Expressions';\r\n\r\nexport const SubExpression: SubGrammar = {\r\n  basicExpressions: ['SubExpression'],\r\n  grammars: {\r\n    SubExpression: '([Expressions])'\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/SubExpression.ts","import * as _ from 'underscore';\r\nimport { Component } from '../Core';\r\nimport { l } from '../strings/Strings';\r\nimport { $$ } from '../utils/Dom';\r\nimport { KEYBOARD } from '../utils/KeyboardUtils';\r\nimport { MagicBoxInstance } from './MagicBox';\r\nimport { Result } from './Result/Result';\r\n\r\nexport class InputManager {\r\n  public input: HTMLInputElement;\r\n  private underlay: HTMLElement;\r\n  private highlightContainer: HTMLElement;\r\n  private ghostTextContainer: HTMLElement;\r\n  private root: HTMLElement;\r\n\r\n  private result: Result;\r\n  private wordCompletion: string;\r\n\r\n  private hasFocus: boolean = false;\r\n\r\n  /**\r\n   * Binding event\r\n   */\r\n  public onblur: () => void;\r\n  public onfocus: () => void;\r\n  public onkeyup: (key: number) => boolean;\r\n  public onkeydown: (key: number) => boolean;\r\n  public onchangecursor: () => void;\r\n  public ontabpress: () => void;\r\n\r\n  public set expanded(isExpanded: boolean) {\r\n    this.input.setAttribute('aria-expanded', isExpanded.toString());\r\n  }\r\n\r\n  public set activeDescendant(element: HTMLElement) {\r\n    if (element) {\r\n      this.input.setAttribute('aria-activedescendant', element.id);\r\n    } else {\r\n      this.input.removeAttribute('aria-activedescendant');\r\n    }\r\n  }\r\n\r\n  constructor(element: HTMLElement, private onchange: (text: string, wordCompletion: boolean) => void, private magicBox: MagicBoxInstance) {\r\n    this.root = Component.resolveRoot(element);\r\n    this.underlay = document.createElement('div');\r\n    this.underlay.className = 'magic-box-underlay';\r\n\r\n    this.highlightContainer = document.createElement('span');\r\n    this.highlightContainer.className = 'magic-box-highlight-container';\r\n    this.underlay.appendChild(this.highlightContainer);\r\n\r\n    this.ghostTextContainer = document.createElement('span');\r\n    this.ghostTextContainer.className = 'magic-box-ghost-text';\r\n    this.underlay.appendChild(this.ghostTextContainer);\r\n\r\n    this.input = $$(element).find('input') as HTMLInputElement;\r\n    if (!this.input) {\r\n      this.input = document.createElement('input');\r\n      element.appendChild(this.underlay);\r\n      element.appendChild(this.input);\r\n    } else {\r\n      element.insertBefore(this.underlay, this.input);\r\n    }\r\n\r\n    this.setupHandler();\r\n    this.addAccessibilitiesProperties();\r\n  }\r\n\r\n  /**\r\n   * Update the input with the result value\r\n   */\r\n  private updateInput() {\r\n    if (this.input.value != this.result.input) {\r\n      this.input.value = this.result.input;\r\n      if (this.hasFocus) {\r\n        this.setCursor(this.getValue().length);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the highlight with the result value\r\n   */\r\n  private updateHighlight() {\r\n    $$(this.highlightContainer).empty();\r\n    this.highlightContainer.appendChild(this.result.toHtmlElement());\r\n  }\r\n\r\n  /**\r\n   * Update the ghostText with the wordCompletion\r\n   */\r\n  private updateWordCompletion() {\r\n    $$(this.ghostTextContainer).empty();\r\n    this.ghostTextContainer.innerHTML = '';\r\n    if (this.wordCompletion != null) {\r\n      this.ghostTextContainer.appendChild(document.createTextNode(this.wordCompletion.substr(this.result.input.length)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the result and update visual if needed\r\n   */\r\n  public setResult(result: Result, wordCompletion?: string) {\r\n    this.result = result;\r\n\r\n    this.updateInput();\r\n\r\n    this.updateHighlight();\r\n\r\n    // reuse last wordCompletion for a better visual\r\n    if (_.isUndefined(wordCompletion) && this.wordCompletion != null && this.wordCompletion.indexOf(this.result.input) == 0) {\r\n      this.updateWordCompletion();\r\n    } else {\r\n      this.setWordCompletion(wordCompletion);\r\n    }\r\n\r\n    this.updateScroll();\r\n  }\r\n\r\n  /**\r\n   * Set the word completion. will be ignore if the word completion do not start with the result input\r\n   */\r\n  public setWordCompletion(wordCompletion: string) {\r\n    if (wordCompletion != null && wordCompletion.toLowerCase().indexOf(this.result.input.toLowerCase()) != 0) {\r\n      wordCompletion = null;\r\n    }\r\n    this.wordCompletion = wordCompletion;\r\n    this.updateWordCompletion();\r\n    this.updateScroll();\r\n  }\r\n\r\n  /**\r\n   * Set cursor position\r\n   */\r\n  public setCursor(index: number) {\r\n    this.input.focus();\r\n    if ((<any>this.input).createTextRange) {\r\n      var range = (<any>this.input).createTextRange();\r\n      range.move('character', index);\r\n      range.select();\r\n    } else if (this.input.selectionStart != null) {\r\n      this.input.focus();\r\n      this.input.setSelectionRange(index, index);\r\n    }\r\n  }\r\n\r\n  public getCursor() {\r\n    return this.input.selectionStart;\r\n  }\r\n\r\n  /**\r\n   * Update the scroll of the underlay this allowed the highlight to match the text\r\n   */\r\n\r\n  private updateScrollDefer: number;\r\n  private updateScroll(defer = true) {\r\n    var callback = () => {\r\n      // this is the cheapest call we can do before update scroll\r\n      if (this.underlay.clientWidth < this.underlay.scrollWidth) {\r\n        this.underlay.style.visibility = 'hidden';\r\n        this.underlay.scrollLeft = this.input.scrollLeft;\r\n        this.underlay.scrollTop = this.input.scrollTop;\r\n        this.underlay.style.visibility = 'visible';\r\n      }\r\n      this.updateScrollDefer = null;\r\n      // one day we will have to remove this\r\n      if (this.hasFocus) {\r\n        this.updateScroll();\r\n      }\r\n    };\r\n    // sometime we want it to be updated as soon as posible to have no flickering\r\n    if (!defer) {\r\n      callback();\r\n    } else if (this.updateScrollDefer == null) {\r\n      this.updateScrollDefer = requestAnimationFrame(callback);\r\n    }\r\n  }\r\n\r\n  private setupHandler() {\r\n    this.input.onblur = () => {\r\n      this.hasFocus = false;\r\n      setTimeout(() => {\r\n        if (!this.hasFocus) {\r\n          this.onblur && this.onblur();\r\n        }\r\n      }, 300);\r\n      this.updateScroll();\r\n    };\r\n    this.input.onfocus = () => {\r\n      if (!this.hasFocus) {\r\n        this.hasFocus = true;\r\n        this.updateScroll();\r\n        this.onfocus && this.onfocus();\r\n      }\r\n    };\r\n    this.input.onkeydown = e => {\r\n      this.keydown(e);\r\n    };\r\n    this.input.onkeyup = e => {\r\n      this.keyup(e);\r\n    };\r\n    this.input.oncut = () => {\r\n      setTimeout(() => {\r\n        this.onInputChange();\r\n      });\r\n    };\r\n    this.input.onpaste = () => {\r\n      setTimeout(() => {\r\n        this.onInputChange();\r\n      });\r\n    };\r\n  }\r\n\r\n  private addAccessibilitiesProperties() {\r\n    this.input.setAttribute('autocomplete', 'off');\r\n    this.input.setAttribute('type', 'text');\r\n    this.input.setAttribute('role', 'combobox');\r\n    this.input.setAttribute('form', 'coveo-dummy-form');\r\n    this.input.setAttribute('aria-autocomplete', 'list');\r\n    this.input.setAttribute('title', `${l('InsertAQuery')}. ${l('PressEnterToSend')}`);\r\n  }\r\n\r\n  public focus() {\r\n    // neet a timeout for IE8-9\r\n    setTimeout(() => {\r\n      this.input.focus();\r\n      this.setCursor(this.getValue().length);\r\n    });\r\n  }\r\n\r\n  public blur() {\r\n    if (this.hasFocus) {\r\n      this.input.blur();\r\n    }\r\n  }\r\n\r\n  private keydown(e: KeyboardEvent) {\r\n    switch (e.keyCode || e.which) {\r\n      case KEYBOARD.TAB:\r\n        // Take care of not \"preventing\" the default event behaviour : For accessibility reasons, it is much simpler\r\n        // to simply let the browser do it's standard action (which is to focus out of the input).\r\n        // Instead, handle \"tabPress\" immediately instead of \"keyup\".\r\n        // The focus will be on the next element in the page when the key is released, so keyup on the input will never be triggered.\r\n        this.tabPress();\r\n        this.magicBox.clearSuggestion();\r\n        break;\r\n      default:\r\n        e.stopPropagation();\r\n        if (this.onkeydown == null || this.onkeydown(e.keyCode || e.which)) {\r\n          requestAnimationFrame(() => {\r\n            this.onInputChange();\r\n          });\r\n        } else {\r\n          e.preventDefault();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private keyup(e: KeyboardEvent) {\r\n    switch (e.keyCode || e.which) {\r\n      case KEYBOARD.LEFT_ARROW:\r\n      case KEYBOARD.RIGHT_ARROW:\r\n        this.handleLeftRightArrow(e);\r\n        break;\r\n      default:\r\n        if (this.onkeydown == null || this.onkeyup(e.keyCode || e.which)) {\r\n          this.onInputChange();\r\n        } else {\r\n          e.preventDefault();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleLeftRightArrow(e: KeyboardEvent) {\r\n    const querySuggestPreview = $$(this.root).find(`.${Component.computeCssClassNameForType('QuerySuggestPreview')}`);\r\n    if (!querySuggestPreview) {\r\n      this.onchangecursor();\r\n    }\r\n\r\n    const inputChanged = this.onkeydown == null || this.onkeyup(e.keyCode || e.which);\r\n    inputChanged ? this.onInputChange() : e.preventDefault();\r\n  }\r\n\r\n  private tabPress() {\r\n    this.ontabpress && this.ontabpress();\r\n    this.onblur && this.onblur();\r\n  }\r\n\r\n  private onInputChange() {\r\n    if (this.result.input != this.input.value) {\r\n      this.onchange(this.input.value, false);\r\n    }\r\n  }\r\n\r\n  public getValue() {\r\n    return this.input.value;\r\n  }\r\n\r\n  public getWordCompletion() {\r\n    return this.wordCompletion;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/InputManager.ts","import { flatten } from 'underscore';\r\n\r\nexport interface IQueryProcessorOptions {\r\n  timeout: number;\r\n}\r\n\r\nexport enum ProcessingStatus {\r\n  Finished,\r\n  TimedOut,\r\n  Overriden\r\n}\r\n\r\nexport interface IQueryProcessResult<T> {\r\n  status: ProcessingStatus;\r\n  results: T[];\r\n}\r\n\r\n/**\r\n * IE11 equivalent of Promise.race\r\n * Adapted from Promise.race(iterable) polyfill on https://www.promisejs.org/api/\r\n */\r\nfunction racePromises<T>(promises: Thenable<T>[]): Promise<T> {\r\n  return new Promise<T>((resolve, reject) => promises.forEach(value => Promise.resolve(value).then(resolve, reject)));\r\n}\r\n\r\nexport class QueryProcessor<T> {\r\n  private override: () => void;\r\n  private options: IQueryProcessorOptions;\r\n  private processedResults: T[][];\r\n\r\n  constructor(options: Partial<IQueryProcessorOptions> = {}) {\r\n    this.options = { timeout: 500, ...options };\r\n  }\r\n\r\n  /**\r\n   * Overrides the previous queries and accumulates the result of promise arrays with a timeout.\r\n   */\r\n  public async processQueries(queries: (T[] | Promise<T[]>)[]): Promise<IQueryProcessResult<T>> {\r\n    this.overrideIfProcessing();\r\n    this.processedResults = new Array(queries.length);\r\n    const asyncQueries = queries.map(query => (query instanceof Promise ? query : Promise.resolve(query)));\r\n\r\n    return racePromises([\r\n      this.accumulateResultsChronologically(asyncQueries).then(() => this.buildProcessResults(ProcessingStatus.Finished)),\r\n      this.waitForOverride().then(() => this.buildProcessResults(ProcessingStatus.Overriden)),\r\n      this.waitForTimeout().then(() => this.buildProcessResults(ProcessingStatus.TimedOut))\r\n    ]);\r\n  }\r\n\r\n  public async overrideIfProcessing() {\r\n    if (this.override) {\r\n      this.override();\r\n    }\r\n  }\r\n\r\n  private get orderedResults(): T[] {\r\n    return flatten(this.processedResults.filter(result => !!result), true);\r\n  }\r\n\r\n  private buildProcessResults(status: ProcessingStatus): IQueryProcessResult<T> {\r\n    return {\r\n      status,\r\n      results: status !== ProcessingStatus.Overriden ? this.orderedResults : []\r\n    };\r\n  }\r\n\r\n  private async accumulateResultsChronologically(queries: Promise<T[]>[]) {\r\n    const output = this.processedResults;\r\n    await Promise.all(queries.map((query, i) => query.then(items => (output[i] = items))));\r\n  }\r\n\r\n  private waitForOverride() {\r\n    return new Promise<void>(resolve => {\r\n      this.override = () => {\r\n        this.override = null;\r\n        resolve();\r\n      };\r\n    });\r\n  }\r\n\r\n  private waitForTimeout() {\r\n    return new Promise<void>(resolve => setTimeout(() => resolve(), this.options.timeout));\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/QueryProcessor.ts","import { SubGrammar } from './Expressions';\r\nimport { NestedQuery } from './NestedQuery';\r\nimport { QueryExtension } from './QueryExtension';\r\nimport { Basic } from './Basic';\r\nimport { Field } from './Field';\r\nimport { SubExpression } from './SubExpression';\r\n\r\nexport const Complete: SubGrammar = {\r\n  include: [NestedQuery, QueryExtension, SubExpression, Field, Basic]\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/Complete.ts","import { Grammar } from '../Grammar';\r\nimport { ExpressionDef } from '../Expression/Expression';\r\nimport * as _ from 'underscore';\r\n\r\nexport interface SubGrammar {\r\n  grammars?: { [id: string]: ExpressionDef };\r\n  expressions?: string[];\r\n  basicExpressions?: string[];\r\n  include?: SubGrammar[];\r\n}\r\n\r\nfunction loadSubGrammar(\r\n  expressions: string[],\r\n  basicExpressions: string[],\r\n  grammars: { [id: string]: ExpressionDef },\r\n  subGrammar: SubGrammar\r\n) {\r\n  _.each(subGrammar.expressions, expression => {\r\n    if (!_.contains(expressions, expression)) {\r\n      expressions.push(expression);\r\n    }\r\n  });\r\n  _.each(subGrammar.basicExpressions, expression => {\r\n    if (!_.contains(basicExpressions, expression)) {\r\n      basicExpressions.push(expression);\r\n    }\r\n  });\r\n  _.each(subGrammar.grammars, (expressionDef: ExpressionDef, id: string) => {\r\n    if (!(id in grammars)) {\r\n      grammars[id] = expressionDef;\r\n    } else {\r\n      if (_.isArray(grammars[id]) && _.isArray(expressionDef)) {\r\n        _.each(<string[]>expressionDef, (value: string) => {\r\n          (<string[]>grammars[id]).push(value);\r\n        });\r\n      } else {\r\n        _.each(<string[]>expressionDef, (value: string) => {\r\n          (<string[]>grammars[id]).push(value);\r\n        });\r\n        throw new Error('Can not merge ' + id + '(' + JSON.stringify(expressionDef) + ' => ' + JSON.stringify(grammars[id]) + ')');\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function Expressions(...subGrammars: SubGrammar[]): { start: string; expressions: { [id: string]: ExpressionDef } } {\r\n  var expressions: string[] = [];\r\n  var BasicExpression: string[] = [];\r\n  var grammars: { [id: string]: ExpressionDef } = {\r\n    Start: ['Expressions', 'Empty'],\r\n    Expressions: '[OptionalSpaces][Expression][ExpressionsList*][OptionalSpaces]',\r\n    ExpressionsList: '[Spaces][Expression]',\r\n    Expression: expressions,\r\n    BasicExpression: BasicExpression,\r\n    OptionalSpaces: / */,\r\n    Spaces: / +/,\r\n    Empty: /(?!.)/\r\n  };\r\n  for (var i = 0; i < subGrammars.length; i++) {\r\n    loadSubGrammar(expressions, BasicExpression, grammars, subGrammars[i]);\r\n    _.each(subGrammars[i].include, subGrammar => {\r\n      if (!_.contains(subGrammars, subGrammar)) {\r\n        subGrammars.push(subGrammar);\r\n      }\r\n    });\r\n  }\r\n  expressions.push('BasicExpression');\r\n  return {\r\n    start: 'Start',\r\n    expressions: grammars\r\n  };\r\n}\r\n\r\nexport function ExpressionsGrammar(...subGrammars: SubGrammar[]) {\r\n  var grammar = Expressions.apply(this, subGrammars);\r\n  return new Grammar(grammar.start, grammar.expressions);\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/Expressions.ts","import { ISearchResultPreview } from '../magicbox/ResultPreviewsManager';\r\nimport { Suggestion } from '../magicbox/SuggestionsManager';\r\nimport { IQuery } from '../rest/Query';\r\n\r\nexport interface IBuildingResultPreviewsQueryEventArgs {\r\n  /**\r\n   * The query to be sent to Search API.\r\n   */\r\n  query: IQuery;\r\n}\r\n\r\n/**\r\n * Executed when a {@link Suggestion} is focused before {@link PopulateSearchResultPreviews} is called to fetch more options.\r\n */\r\nexport interface IUpdateResultPreviewsManagerOptionsEventArgs {\r\n  /**\r\n   * How many milliseconds should a {@link Suggestion} be focused for before {@link PopulateSearchResultPreviews} is called.\r\n   *\r\n   * If this is not defined, it will default to 200ms.\r\n   */\r\n  displayAfterDuration?: number;\r\n}\r\n\r\n/**\r\n * Executed when a {@link Suggestion} is focused and waiting for search result previews.\r\n */\r\nexport interface IPopulateSearchResultPreviewsEventArgs {\r\n  /**\r\n   * The suggestion to look up search result previews for.\r\n   */\r\n  suggestion: Suggestion;\r\n  /**\r\n   * The result previews query. This must be set synchronously before the event resolves.\r\n   * Setting this to a non-empty array will display the given search result previews.\r\n   */\r\n  previewsQueries: (ISearchResultPreview[] | Promise<ISearchResultPreview[]>)[];\r\n}\r\n\r\n/**\r\n * Those are the string definitions of events for ResultPreviewsManager.\r\n *\r\n * Those events should be bound to the element returned by `resolveRoot`.\r\n */\r\nexport class ResultPreviewsManagerEvents {\r\n  /**\r\n   * Executed when building a query to fetch result previews.\r\n   * This always receives {@link IBuildingResultPreviewsQueryEventArgs} as arguments.\r\n   */\r\n  public static buildingResultPreviewsQuery = 'buildingResultPreviewsQuery';\r\n  /**\r\n   * Executed when a {@link Suggestion} is focused before {@link PopulateSearchResultPreviews} is called to fetch more options.\r\n   * This always receives {@link IUpdateResultPreviewsManagerOptionsEventArgs} as arguments.\r\n   */\r\n  public static updateResultPreviewsManagerOptions = 'updateResultPreviewsManagerOptions';\r\n  /**\r\n   * Executed when a {@link Suggestion} is focused and waiting for search result previews.\r\n   * This always receives {@link IPopulateSearchResultPreviewsEventArgs} as arguments.\r\n   */\r\n  public static populateSearchResultPreviews = 'populateSearchResultPreviews';\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/events/ResultPreviewsManagerEvents.ts","import { Omnibox, IOmniboxOptions } from '../Omnibox/Omnibox';\r\nimport { Querybox, IQueryboxOptions } from './Querybox';\r\nimport { ComponentOptionsModel } from '../../models/ComponentOptionsModel';\r\n\r\nexport class QueryboxOptionsProcessing {\r\n  constructor(public owner: Omnibox | Querybox) {}\r\n\r\n  private get options() {\r\n    return this.owner.options;\r\n  }\r\n\r\n  private set options(options: IOmniboxOptions | IQueryboxOptions) {\r\n    this.owner.options = options;\r\n  }\r\n\r\n  public postProcess() {\r\n    this.options = { ...this.options, ...this.owner.componentOptionsModel.get(ComponentOptionsModel.attributesEnum.searchBox) };\r\n    this.processQueryOnClearVersusEmptyQuery();\r\n    this.processQueryOnClearVersusSearchAsYouType();\r\n  }\r\n\r\n  private processQueryOnClearVersusEmptyQuery() {\r\n    if (this.options.triggerQueryOnClear && this.owner.searchInterface.options.allowQueriesWithoutKeywords === false) {\r\n      this.owner.logger.warn(\r\n        'Forcing option triggerQueryOnClear to false, as it is not supported when the search interface is configured to not allow queries without keywords (data-allow-queries-without-keywords=\"false\")',\r\n        this.owner\r\n      );\r\n      this.options.triggerQueryOnClear = false;\r\n    }\r\n  }\r\n\r\n  private processQueryOnClearVersusSearchAsYouType() {\r\n    if (\r\n      this.owner.searchInterface.options.allowQueriesWithoutKeywords === true &&\r\n      this.options.triggerQueryOnClear === false &&\r\n      this.options.enableSearchAsYouType === true\r\n    ) {\r\n      this.owner.logger.warn('Forcing option triggerQueryOnClear to true, since search-as-you-type is enabled', this.owner);\r\n      this.options.triggerQueryOnClear = true;\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Querybox/QueryboxOptionsProcessing.ts","import { IQueryboxOptions } from './Querybox';\r\nimport { QueryBuilder } from '../Base/QueryBuilder';\r\nimport * as _ from 'underscore';\r\nimport { Defer } from '../../MiscModules';\r\n\r\nexport class QueryboxQueryParameters {\r\n  private static queryIsCurrentlyBlocked = false;\r\n\r\n  constructor(private options: IQueryboxOptions) {}\r\n\r\n  private static queryIsBlocked() {\r\n    // This code runs on some assumption :\r\n    // Since all \"buildingQuery\" events would have to be run in the same call stack\r\n    // We can add a static flag to block 2 or more query box/omnibox from trying to modify the query inside the same event.\r\n    // If 2 query box are activated, we get duplicate terms in the query, or duplicate term correction with did you mean.\r\n    // This means that only one query box/searchbox would be able to modify the query in a single search page.\r\n    // This also means that if there is 2 search box enabled, the first one in the markup in the page would be able to do the job correctly as far as the query is concerned.\r\n    // The second one is inactive as far as the query is concerned.\r\n\r\n    // The flag gets reset in \"defer\" (setTimeout 0) so that it gets reset correctly when the query event has finished executing\r\n    if (!QueryboxQueryParameters.queryIsCurrentlyBlocked) {\r\n      QueryboxQueryParameters.queryIsCurrentlyBlocked = true;\r\n      Defer.defer(() => QueryboxQueryParameters.allowDuplicateQuery());\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public static allowDuplicateQuery() {\r\n    QueryboxQueryParameters.queryIsCurrentlyBlocked = false;\r\n  }\r\n\r\n  public addParameters(queryBuilder: QueryBuilder, lastQuery: string) {\r\n    if (!QueryboxQueryParameters.queryIsBlocked()) {\r\n      if (this.options.enableWildcards) {\r\n        queryBuilder.enableWildcards = true;\r\n      }\r\n\r\n      if (this.options.enableQuestionMarks) {\r\n        queryBuilder.enableQuestionMarks = true;\r\n      }\r\n\r\n      if (this.options.enableLowercaseOperators) {\r\n        queryBuilder.enableLowercaseOperators = true;\r\n      }\r\n\r\n      if (!_.isEmpty(lastQuery)) {\r\n        queryBuilder.enableQuerySyntax = this.options.enableQuerySyntax;\r\n        queryBuilder.expression.add(lastQuery);\r\n        if (this.options.enablePartialMatch) {\r\n          queryBuilder.enablePartialMatch = this.options.enablePartialMatch;\r\n          if (this.options.partialMatchKeywords) {\r\n            queryBuilder.partialMatchKeywords = this.options.partialMatchKeywords;\r\n          }\r\n          if (this.options.partialMatchThreshold) {\r\n            queryBuilder.partialMatchThreshold = this.options.partialMatchThreshold;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Querybox/QueryboxQueryParameters.ts","import { exportGlobally } from '../GlobalExports';\r\nimport { Expression } from './Expression/Expression';\r\nimport { ExpressionConstant } from './Expression/ExpressionConstant';\r\nimport { ExpressionEndOfInput } from './Expression/ExpressionEndOfInput';\r\nimport { ExpressionFunction, ExpressionFunctionArgument } from './Expression/ExpressionFunction';\r\nimport { ExpressionList } from './Expression/ExpressionList';\r\nimport { ExpressionOptions } from './Expression/ExpressionOptions';\r\nimport { ExpressionRef } from './Expression/ExpressionRef';\r\nimport { ExpressionRegExp } from './Expression/ExpressionRegExp';\r\nimport { Grammar } from './Grammar';\r\nimport { SubGrammar } from './Grammars/Expressions';\r\nimport { Grammars } from './Grammars/Grammars';\r\nimport { InputManager } from './InputManager';\r\nimport { createMagicBox, MagicBoxInstance, requestAnimationFrame } from './MagicBox';\r\nimport { MagicBoxUtils as Utils } from './MagicBoxUtils';\r\nimport { OptionResult } from './Result/OptionResult';\r\nimport { RefResult } from './Result/RefResult';\r\nimport { EndOfInputResult, Result } from './Result/Result';\r\nimport { Suggestion, SuggestionsManager } from './SuggestionsManager';\r\nexport type ExpressionImportedLocally = Expression;\r\nexport type SuggestionImportedLocally = Suggestion;\r\nexport type SubGrammarLocally = SubGrammar;\r\nexport type ExpressionFunctionArgumentLocally = ExpressionFunctionArgument;\r\nexport const GrammarsImportedLocally = Grammars;\r\n\r\nexport function doMagicBoxExport() {\r\n  exportGlobally({\r\n    MagicBox: {\r\n      EndOfInputResult,\r\n      ExpressionConstant,\r\n      ExpressionEndOfInput,\r\n      ExpressionFunction,\r\n      ExpressionList,\r\n      ExpressionOptions,\r\n      ExpressionRef,\r\n      ExpressionRegExp,\r\n      Grammar,\r\n      Grammars,\r\n      InputManager,\r\n      Instance: MagicBoxInstance,\r\n      OptionResult,\r\n      RefResult,\r\n      Result,\r\n      SuggestionsManager,\r\n      Utils,\r\n      create: createMagicBox,\r\n      requestAnimationFrame\r\n    }\r\n  });\r\n}\r\n\r\nexport declare namespace MagicBox {\r\n  export const EndOfInputResult: EndOfInputResult;\r\n  export const ExpressionConstant: ExpressionConstant;\r\n  export const ExpressionFunction: ExpressionFunction;\r\n  export const ExpressionList: ExpressionList;\r\n  export const ExpressionOptions: ExpressionOptions;\r\n  export const ExpressionRef: ExpressionRef;\r\n  export const ExpressionRegExp: ExpressionRegExp;\r\n  export const Grammar: Grammar;\r\n  export const InputManager: InputManager;\r\n  export const Instance: MagicBoxInstance;\r\n  export const OptionResult: OptionResult;\r\n  export const RefResult: RefResult;\r\n  export const Result: Result;\r\n  export const SuggestionsManager: SuggestionsManager;\r\n  export const Utils: Utils;\r\n  export const ExpressionEndOfInput;\r\n  export type Instance = MagicBoxInstance;\r\n  export type Suggestion = SuggestionImportedLocally;\r\n\r\n  export namespace Grammars {\r\n    export const Basic: typeof GrammarsImportedLocally.Basic;\r\n    export const notInWord: typeof GrammarsImportedLocally.notInWord;\r\n    export const notWordStart: typeof GrammarsImportedLocally.notWordStart;\r\n    export const Complete: typeof GrammarsImportedLocally.Complete;\r\n    export const Date: typeof GrammarsImportedLocally.Date;\r\n    export const Expressions: typeof GrammarsImportedLocally.Expressions;\r\n    export const ExpressionsGrammar: typeof GrammarsImportedLocally.ExpressionsGrammar;\r\n    export const Field: typeof GrammarsImportedLocally.Field;\r\n    export const NestedQuery: typeof GrammarsImportedLocally.NestedQuery;\r\n    export const QueryExtension: typeof GrammarsImportedLocally.QueryExtension;\r\n    export const SubExpression: typeof GrammarsImportedLocally.SubExpression;\r\n  }\r\n\r\n  export const createMagicBox;\r\n  export const create;\r\n  export const requestAnimationFrame;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/doMagicBoxExport.ts","import { Basic, notInWord, notWordStart } from './Basic';\r\nimport { Complete } from './Complete';\r\nimport { Date } from './Date';\r\nimport { Expressions, ExpressionsGrammar, SubGrammar } from './Expressions';\r\nimport { ExpressionFunctionArgument } from '../Expression/ExpressionFunction';\r\nimport { Field } from './Field';\r\nimport { NestedQuery } from './NestedQuery';\r\nimport { QueryExtension } from './QueryExtension';\r\nimport { SubExpression } from './SubExpression';\r\nexport type SubGrammarImported = SubGrammar;\r\nexport type ExpressionFunctionArgumentImported = ExpressionFunctionArgument;\r\n\r\nexport const Grammars = {\r\n  Basic,\r\n  notInWord,\r\n  notWordStart,\r\n  Complete,\r\n  Date,\r\n  Expressions,\r\n  ExpressionsGrammar,\r\n  Field,\r\n  NestedQuery,\r\n  QueryExtension,\r\n  SubExpression\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/Grammars/Grammars.ts","import { $$, Dom } from '../utils/Dom';\r\nimport { l } from '../strings/Strings';\r\nimport { defaults, findIndex } from 'underscore';\r\nimport { Component } from '../ui/Base/Component';\r\nimport { Direction, Suggestion } from './SuggestionsManager';\r\nimport {\r\n  ResultPreviewsManagerEvents,\r\n  IPopulateSearchResultPreviewsEventArgs,\r\n  IUpdateResultPreviewsManagerOptionsEventArgs\r\n} from '../events/ResultPreviewsManagerEvents';\r\nimport { QueryProcessor, ProcessingStatus } from './QueryProcessor';\r\nimport { Utils } from '../utils/Utils';\r\n\r\nexport interface ISearchResultPreview {\r\n  element: HTMLElement;\r\n  onSelect: () => void;\r\n}\r\n\r\nexport interface IResultPreviewsManagerOptions {\r\n  previewClass: string;\r\n  selectedClass: string;\r\n  previewHeaderText: string;\r\n  previewHeaderFieldText: string;\r\n  timeout: number;\r\n}\r\n\r\nexport class ResultPreviewsManager {\r\n  private options: IResultPreviewsManagerOptions;\r\n  private suggestionsPreviewContainer: Dom;\r\n  private resultPreviewsContainer: Dom;\r\n  private lastQueriedSuggestion: Suggestion;\r\n  private lastDisplayedSuggestion: Suggestion;\r\n  private previewsProcessor: QueryProcessor<ISearchResultPreview>;\r\n  private lastDelay: Promise<void>;\r\n  private root: HTMLElement;\r\n\r\n  public get previewsOwner() {\r\n    return this.lastDisplayedSuggestion;\r\n  }\r\n\r\n  public get hasPreviews() {\r\n    return !!this.suggestionsPreviewContainer;\r\n  }\r\n\r\n  public get focusedPreviewElement() {\r\n    if (!this.hasPreviews) {\r\n      return null;\r\n    }\r\n    const focusedElement = this.suggestionsPreviewContainer.findClass(this.options.selectedClass)[0];\r\n    if (!focusedElement || !focusedElement.classList.contains(this.options.previewClass)) {\r\n      return null;\r\n    }\r\n    return focusedElement;\r\n  }\r\n\r\n  public get previewElements() {\r\n    if (!this.hasPreviews) {\r\n      return [];\r\n    }\r\n    return this.suggestionsPreviewContainer.findClass(this.options.previewClass);\r\n  }\r\n\r\n  private get suggestionsListbox() {\r\n    return $$($$(this.element).findClass('coveo-magicbox-suggestions')[0]);\r\n  }\r\n\r\n  private get numberOfResultsPerRow() {\r\n    const previewSelectables = this.suggestionsPreviewContainer.findClass(this.options.previewClass);\r\n    if (previewSelectables.length === 0) {\r\n      return 0;\r\n    }\r\n    const firstVerticalOffset = previewSelectables[0].offsetTop;\r\n    const firstIndexOnNextRow = findIndex(previewSelectables, previewSelectable => previewSelectable.offsetTop !== firstVerticalOffset);\r\n    return firstIndexOnNextRow !== -1 ? firstIndexOnNextRow : previewSelectables.length;\r\n  }\r\n\r\n  private get previewContainerId() {\r\n    return `coveo-previews-for-${this.lastDisplayedSuggestion.dom.id}`;\r\n  }\r\n\r\n  constructor(private element: HTMLElement, options: Partial<IResultPreviewsManagerOptions> = {}) {\r\n    this.options = defaults(options, <IResultPreviewsManagerOptions>{\r\n      previewHeaderText: l('QuerySuggestPreview'),\r\n      previewHeaderFieldText: l('QuerySuggestPreviewWithField'),\r\n      previewClass: 'coveo-preview-selectable',\r\n      selectedClass: 'magic-box-selected'\r\n    });\r\n    this.root = Component.resolveRoot(element);\r\n    this.previewsProcessor = new QueryProcessor({ timeout: this.options.timeout });\r\n  }\r\n\r\n  public async displaySearchResultPreviewsForSuggestion(suggestion: Suggestion) {\r\n    const externalOptions = this.getExternalOptions();\r\n    const currentDelay = (this.lastDelay = Utils.resolveAfter(\r\n      Utils.isNullOrUndefined(externalOptions.displayAfterDuration) ? 200 : externalOptions.displayAfterDuration\r\n    ));\r\n    await currentDelay;\r\n    if (currentDelay !== this.lastDelay) {\r\n      return;\r\n    }\r\n    const isQueryForSuggestionOngoing = suggestion && this.lastQueriedSuggestion === suggestion;\r\n    if (isQueryForSuggestionOngoing) {\r\n      return;\r\n    }\r\n    const arePreviewsForSuggestionCurrentlyDisplayed = this.lastDisplayedSuggestion === suggestion;\r\n    if (arePreviewsForSuggestionCurrentlyDisplayed) {\r\n      this.previewsProcessor.overrideIfProcessing();\r\n      this.lastQueriedSuggestion = null;\r\n      return;\r\n    }\r\n    this.lastQueriedSuggestion = suggestion;\r\n    if (!suggestion) {\r\n      this.displaySuggestionPreviews(null, []);\r\n      return;\r\n    }\r\n    const { status, results } = await this.getSearchResultPreviewsQuery(suggestion);\r\n    if (status === ProcessingStatus.Overriden) {\r\n      return;\r\n    }\r\n    this.lastQueriedSuggestion = null;\r\n    this.displaySuggestionPreviews(suggestion, results);\r\n  }\r\n\r\n  public getElementInDirection(direction: Direction) {\r\n    const previewElements = this.previewElements;\r\n    const focusedIndex = previewElements.indexOf(this.focusedPreviewElement);\r\n\r\n    if (focusedIndex === -1) {\r\n      return null;\r\n    }\r\n\r\n    if (focusedIndex === 0 && direction === Direction.Left) {\r\n      return null;\r\n    }\r\n\r\n    return previewElements[(focusedIndex + this.getIncrementInDirection(direction)) % previewElements.length];\r\n  }\r\n\r\n  private getIncrementInDirection(direction: Direction) {\r\n    switch (direction) {\r\n      case Direction.Left:\r\n        return -1;\r\n      case Direction.Right:\r\n        return 1;\r\n      case Direction.Up:\r\n        return -this.numberOfResultsPerRow;\r\n      case Direction.Down:\r\n        return this.numberOfResultsPerRow;\r\n    }\r\n  }\r\n\r\n  private setHasPreviews(shouldHavePreviews: boolean) {\r\n    if (this.hasPreviews === !!shouldHavePreviews) {\r\n      return;\r\n    }\r\n    if (shouldHavePreviews) {\r\n      this.initPreviewForSuggestions();\r\n    } else {\r\n      this.revertPreviewForSuggestions();\r\n    }\r\n  }\r\n\r\n  private initPreviewForSuggestions() {\r\n    this.suggestionsPreviewContainer = $$(\r\n      'div',\r\n      {\r\n        className: 'coveo-suggestion-container'\r\n      },\r\n      this.suggestionsListbox.el,\r\n      this.buildPreviewContainer()\r\n    );\r\n    this.element.appendChild(this.suggestionsPreviewContainer.el);\r\n    this.suggestionsListbox.setAttribute('aria-controls', this.previewContainerId);\r\n  }\r\n\r\n  private revertPreviewForSuggestions() {\r\n    this.element.appendChild(this.suggestionsListbox.el);\r\n    this.suggestionsPreviewContainer.remove();\r\n    this.suggestionsPreviewContainer = null;\r\n  }\r\n\r\n  private buildPreviewContainer() {\r\n    return $$(\r\n      'div',\r\n      {\r\n        className: 'coveo-preview-container',\r\n        id: this.previewContainerId\r\n      },\r\n      (this.resultPreviewsContainer = $$('div', {\r\n        className: 'coveo-preview-results',\r\n        role: 'listbox',\r\n        'aria-orientation': 'horizontal'\r\n      }))\r\n    ).el;\r\n  }\r\n\r\n  private getExternalOptions() {\r\n    const optionsEventArgs: IUpdateResultPreviewsManagerOptionsEventArgs = {};\r\n    $$(this.root).trigger(ResultPreviewsManagerEvents.updateResultPreviewsManagerOptions, optionsEventArgs);\r\n    return optionsEventArgs;\r\n  }\r\n\r\n  private getSearchResultPreviewsQuery(suggestion: Suggestion) {\r\n    const populateEventArgs: IPopulateSearchResultPreviewsEventArgs = {\r\n      suggestion,\r\n      previewsQueries: []\r\n    };\r\n    $$(this.root).trigger(ResultPreviewsManagerEvents.populateSearchResultPreviews, populateEventArgs);\r\n    return this.previewsProcessor.processQueries(populateEventArgs.previewsQueries);\r\n  }\r\n\r\n  private appendSearchResultPreview(preview: ISearchResultPreview, position: number) {\r\n    this.resultPreviewsContainer.append(preview.element);\r\n    preview.element.id = `coveo-result-preview-${position}`;\r\n    const elementDom = $$(preview.element);\r\n    elementDom.setAttribute('aria-selected', 'false');\r\n    elementDom.setAttribute('role', 'option');\r\n    elementDom.on('click', () => preview.onSelect());\r\n    elementDom.on('keyboardSelect', () => preview.onSelect());\r\n  }\r\n\r\n  private appendSearchResultPreviews(previews: ISearchResultPreview[]) {\r\n    this.resultPreviewsContainer.empty();\r\n    previews.forEach((preview, i) => this.appendSearchResultPreview(preview, i));\r\n  }\r\n\r\n  private displaySuggestionPreviews(suggestion: Suggestion, previews: ISearchResultPreview[]) {\r\n    this.lastDisplayedSuggestion = suggestion;\r\n    this.setHasPreviews(previews && previews.length > 0);\r\n    this.element.classList.toggle('magic-box-hasPreviews', this.hasPreviews);\r\n    if (!this.hasPreviews) {\r\n      return;\r\n    }\r\n    this.appendSearchResultPreviews(previews);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/ResultPreviewsManager.ts","import { $$, Dom } from '../utils/Dom';\r\nimport { MagicBoxInstance } from './MagicBox';\r\nimport { l } from '../strings/Strings';\r\nimport { AccessibleButton } from '../utils/AccessibleButton';\r\n\r\nexport class MagicBoxClear {\r\n  public element: Dom;\r\n\r\n  constructor(magicBox: MagicBoxInstance) {\r\n    this.element = $$('div', {\r\n      className: 'magic-box-clear'\r\n    });\r\n    const clearIcon = $$('div', {\r\n      className: 'magic-box-icon'\r\n    });\r\n    this.element.append(clearIcon.el);\r\n\r\n    this.element.insertAfter($$(magicBox.element).find('input'));\r\n\r\n    new AccessibleButton()\r\n      .withElement(this.element)\r\n      .withLabel(l('Clear'))\r\n      .withSelectAction(() => magicBox.clear())\r\n      .build();\r\n\r\n    this.toggleTabindexAndAriaHidden(false);\r\n  }\r\n\r\n  public toggleTabindexAndAriaHidden(hasText: boolean) {\r\n    const tabindex = hasText ? '0' : '-1';\r\n    this.element.setAttribute('tabindex', tabindex);\r\n    this.element.setAttribute('aria-hidden', `${!hasText}`);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/magicbox/MagicBoxClear.ts","///<reference path='Omnibox.ts'/>\r\nimport { Omnibox, IOmniboxSuggestion } from './Omnibox';\r\nimport { OmniboxEvents, IPopulateOmniboxSuggestionsEventArgs } from '../../events/OmniboxEvents';\r\nimport { IFieldDescription } from '../../rest/FieldDescription';\r\nimport { IEndpointError } from '../../rest/EndpointError';\r\nimport * as _ from 'underscore';\r\nimport { Result } from '../../magicbox/Result/Result';\r\nimport { MagicBoxUtils } from '../../magicbox/MagicBoxUtils';\r\n\r\ninterface IFieldAddonHash {\r\n  type: string;\r\n  before: string;\r\n  after: string;\r\n  current: string;\r\n  field?: string;\r\n}\r\n\r\nexport class FieldAddon {\r\n  static INDEX = 64;\r\n  cache: { [hash: string]: Promise<IOmniboxSuggestion[]> } = {};\r\n\r\n  constructor(public omnibox: Omnibox) {\r\n    this.omnibox.bind.on(this.omnibox.element, OmniboxEvents.populateOmniboxSuggestions, (args: IPopulateOmniboxSuggestionsEventArgs) => {\r\n      args.suggestions.push(this.getSuggestion());\r\n    });\r\n  }\r\n\r\n  public getSuggestion(): Promise<IOmniboxSuggestion[]> {\r\n    const hash = this.getHash();\r\n    if (hash == null) {\r\n      return null;\r\n    }\r\n    const hashString = this.hashToString(hash);\r\n    if (this.cache[hashString] != null) {\r\n      return this.hashValueToSuggestion(hash, this.cache[hashString]);\r\n    }\r\n    let values: Promise<IOmniboxSuggestion[]>;\r\n    if (hash.type == 'FieldName') {\r\n      values = this.fieldNames(hash.current);\r\n    }\r\n    if (hash.type == 'FieldValue') {\r\n      values = this.fieldValues(hash.field, hash.current);\r\n    }\r\n    if (hash.type == 'SimpleFieldName') {\r\n      values = this.simpleFieldNames(hash.current);\r\n    }\r\n    this.cache[hashString] = values;\r\n    values.catch(() => {\r\n      delete this.cache[hashString];\r\n    });\r\n    return this.hashValueToSuggestion(hash, values);\r\n  }\r\n\r\n  private getHash(): IFieldAddonHash {\r\n    let fieldName: Result = _.last(this.omnibox.resultAtCursor('FieldName'));\r\n    if (fieldName != null) {\r\n      fieldName = fieldName.findParent('Field') || fieldName;\r\n      const currentField = fieldName.toString();\r\n      const before = fieldName.before();\r\n      const after = fieldName.after();\r\n      return { type: 'FieldName', current: currentField, before: before, after: after };\r\n    }\r\n    const fieldValue: Result = _.last(this.omnibox.resultAtCursor('FieldValue'));\r\n    if (fieldValue) {\r\n      const fieldQuery =\r\n        fieldValue.findParent('FieldQuery') || (this.omnibox.options.enableSimpleFieldAddon && fieldValue.findParent('FieldSimpleQuery'));\r\n      if (fieldQuery) {\r\n        let field = fieldQuery.find('FieldName').toString();\r\n        if (this.omnibox.options.fieldAlias) {\r\n          if (field in this.omnibox.options.fieldAlias) {\r\n            field = this.omnibox.options.fieldAlias[field];\r\n          }\r\n        }\r\n        const value = fieldValue.toString();\r\n        const before = fieldValue.before();\r\n        const after = fieldValue.after();\r\n        return { type: 'FieldValue', field: field, current: value, before: before, after: after };\r\n      }\r\n    }\r\n    if (this.omnibox.options.enableSimpleFieldAddon) {\r\n      const word: Result = _.last(this.omnibox.resultAtCursor('Word'));\r\n      if (word != null) {\r\n        const current = word.toString();\r\n        const before = word.before();\r\n        const after = word.after();\r\n        return { type: 'SimpleFieldName', current, before, after };\r\n      }\r\n    }\r\n  }\r\n\r\n  private hashToString(hash: IFieldAddonHash) {\r\n    if (hash == null) {\r\n      return null;\r\n    }\r\n    return hash.type + hash.current + (hash.field || '');\r\n  }\r\n\r\n  private hashValueToSuggestion(hash: IFieldAddonHash, promise: Promise<IOmniboxSuggestion[]>): Promise<IOmniboxSuggestion[]> {\r\n    return promise.then(values => {\r\n      const suggestions = _.map<any, IOmniboxSuggestion>(values, (value: string, i): IOmniboxSuggestion => {\r\n        const suggestion: IOmniboxSuggestion = {\r\n          text:\r\n            hash.before +\r\n            (hash.current.toLowerCase().indexOf(value.toLowerCase()) == 0 ? hash.current + value.substr(hash.current.length) : value) +\r\n            hash.after,\r\n          html: MagicBoxUtils.highlightText(value, hash.current, true),\r\n          index: FieldAddon.INDEX - i / values.length\r\n        };\r\n        return suggestion;\r\n      });\r\n      return suggestions;\r\n    });\r\n  }\r\n\r\n  private fields: Promise<IOmniboxSuggestion[]>;\r\n\r\n  private getFields(): Promise<IOmniboxSuggestion[]> {\r\n    if (this.fields == null) {\r\n      this.fields = new Promise<any[]>((resolve, reject) => {\r\n        if (this.omnibox.options.listOfFields != null) {\r\n          resolve(<string[]>this.omnibox.options.listOfFields);\r\n        } else {\r\n          const promise: Promise<IFieldDescription[] | IEndpointError> = this.omnibox.queryController.getEndpoint().listFields();\r\n          promise\r\n            .then((fieldDescriptions: IFieldDescription[]) => {\r\n              const fieldNames = _.chain(fieldDescriptions)\r\n                .filter((fieldDescription: IFieldDescription) => fieldDescription.includeInQuery && fieldDescription.groupByField)\r\n                .map((fieldDescription: IFieldDescription) => fieldDescription.name.substr(1))\r\n                .value();\r\n\r\n              resolve(fieldNames);\r\n            })\r\n            .catch(() => {\r\n              reject();\r\n            });\r\n        }\r\n      });\r\n    }\r\n    return this.fields;\r\n  }\r\n\r\n  private fieldNames(current: string): Promise<IOmniboxSuggestion[]> {\r\n    const withAt = current.length > 0 && current[0] == '@';\r\n    const fieldName = withAt ? current.substr(1) : current;\r\n    const fieldNameLC = fieldName.toLowerCase();\r\n\r\n    return this.getFields().then((fields: string[] | IOmniboxSuggestion[]): any[] => {\r\n      let matchFields = _.chain(fields)\r\n        .map((fieldName: any) => {\r\n          const fieldNameBeginsWithAt = fieldName.length > 0 && fieldName[0] == '@';\r\n          return {\r\n            index: fieldName.toLowerCase().indexOf(fieldNameLC),\r\n            field: fieldNameBeginsWithAt ? fieldName : '@' + fieldName\r\n          };\r\n        })\r\n        .filter(field => {\r\n          return field.index != -1 && field.field.length > current.length;\r\n        })\r\n        .sortBy('index')\r\n        .map(field => field.field)\r\n        .value();\r\n      matchFields = _.first(matchFields, 5);\r\n      return matchFields;\r\n    });\r\n  }\r\n\r\n  private fieldValues(field: string, current: string): Promise<any[]> {\r\n    return this.omnibox.queryController\r\n      .getEndpoint()\r\n      .listFieldValues({\r\n        pattern: '.*' + current + '.*',\r\n        patternType: 'RegularExpression',\r\n        sortCriteria: 'occurrences',\r\n        field: '@' + field,\r\n        maximumNumberOfValues: 5\r\n      })\r\n      .then(values => {\r\n        return _.chain(values)\r\n          .map(value => {\r\n            return {\r\n              index: value.value.toLowerCase().indexOf(current),\r\n              value: value.value\r\n            };\r\n          })\r\n          .filter(value => {\r\n            return value.value.length > current.length;\r\n          })\r\n          .sortBy('index')\r\n          .map(value => {\r\n            return value.value.replace(/ /g, '\\u00A0');\r\n          })\r\n          .value();\r\n      });\r\n  }\r\n\r\n  private simpleFieldNames(current: string): Promise<IOmniboxSuggestion[]> {\r\n    const fieldName = current;\r\n    const fieldNameLC = fieldName.toLowerCase();\r\n\r\n    return this.getFields().then((fields: any[]): IOmniboxSuggestion[] => {\r\n      let matchFields: any = _.chain(fields)\r\n        .map((field: string) => {\r\n          return {\r\n            index: field.toLowerCase().indexOf(fieldNameLC),\r\n            field: field + ':'\r\n          };\r\n        })\r\n        .filter(field => {\r\n          return field.index != -1 && field.field.length > current.length;\r\n        })\r\n        .sortBy('index')\r\n        .map(field => field.field)\r\n        .value();\r\n      matchFields = _.first(matchFields, 5);\r\n      return matchFields;\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Omnibox/FieldAddon.ts","///<reference path=\"Omnibox.ts\"/>\r\nimport { Omnibox, IOmniboxSuggestion } from './Omnibox';\r\nimport { IOmniboxDataRow } from './OmniboxInterface';\r\nimport {\r\n  OmniboxEvents,\r\n  IPopulateOmniboxEventArgs,\r\n  IPopulateOmniboxEventRow,\r\n  IPopulateOmniboxSuggestionsEventArgs\r\n} from '../../events/OmniboxEvents';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { Utils } from '../../utils/Utils';\r\nimport * as _ from 'underscore';\r\n\r\nexport class OldOmniboxAddon {\r\n  constructor(public omnibox: Omnibox) {\r\n    this.omnibox.bind.on(this.omnibox.element, OmniboxEvents.populateOmniboxSuggestions, (args: IPopulateOmniboxSuggestionsEventArgs) => {\r\n      _.each(this.getSuggestion(), suggestion => {\r\n        args.suggestions.push(suggestion);\r\n      });\r\n    });\r\n  }\r\n\r\n  public getSuggestion(): Promise<IOmniboxSuggestion[]>[] {\r\n    const text = this.omnibox.magicBox.getText();\r\n\r\n    if (text.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    const eventArgs = this.buildPopulateOmniboxEventArgs();\r\n    $$(this.omnibox.root).trigger(OmniboxEvents.populateOmnibox, eventArgs);\r\n\r\n    return this.rowsToSuggestions(eventArgs.rows);\r\n  }\r\n\r\n  private getCurrentQueryExpression() {\r\n    const cursorPos = this.omnibox.getCursor();\r\n    const value = this.omnibox.getText();\r\n    const length = value.length;\r\n    let start = cursorPos;\r\n    let end = cursorPos;\r\n    if (value[start] == ' ') {\r\n      start--;\r\n    }\r\n    while (start > 0 && value[start] != ' ') {\r\n      start--;\r\n    }\r\n    while (end < length && value[end] != ' ') {\r\n      end++;\r\n    }\r\n    return value.substring(start, end);\r\n  }\r\n\r\n  private getRegexToSearch(strValue?: string) {\r\n    if (strValue == null) {\r\n      strValue = this.omnibox.getText();\r\n    }\r\n    return new RegExp(Utils.escapeRegexCharacter(strValue), 'i');\r\n  }\r\n\r\n  private getQueryExpressionBreakDown() {\r\n    const ret = [];\r\n    const queryWords = this.omnibox.getText().split(' ');\r\n    _.each(queryWords, word => {\r\n      ret.push({\r\n        word: word,\r\n        regex: this.getRegexToSearch(word)\r\n      });\r\n    });\r\n    return ret;\r\n  }\r\n\r\n  private replace(searchValue: string, newValue: string) {\r\n    this.omnibox.setText(this.omnibox.getText().replace(searchValue, newValue));\r\n  }\r\n\r\n  private clearCurrentExpression() {\r\n    this.replace(this.getCurrentQueryExpression(), '');\r\n  }\r\n\r\n  private insertAt(at: number, toInsert: string) {\r\n    const oldValue = this.omnibox.getText();\r\n    const newValue = [oldValue.slice(0, at), toInsert, oldValue.slice(at)].join('');\r\n    this.omnibox.setText(newValue);\r\n  }\r\n\r\n  private replaceCurrentExpression(newValue: string) {\r\n    this.replace(this.getCurrentQueryExpression(), newValue);\r\n  }\r\n\r\n  private buildPopulateOmniboxEventArgs() {\r\n    const currentQueryExpression = this.getCurrentQueryExpression();\r\n    const ret: IPopulateOmniboxEventArgs = {\r\n      rows: [],\r\n      completeQueryExpression: {\r\n        word: this.omnibox.getText(),\r\n        regex: this.getRegexToSearch()\r\n      },\r\n      currentQueryExpression: {\r\n        word: currentQueryExpression,\r\n        regex: this.getRegexToSearch(currentQueryExpression)\r\n      },\r\n      allQueryExpressions: this.getQueryExpressionBreakDown(),\r\n      cursorPosition: this.omnibox.getCursor(),\r\n      clear: () => {\r\n        this.omnibox.clear();\r\n      },\r\n      clearCurrentExpression: () => {\r\n        this.clearCurrentExpression();\r\n      },\r\n      replace: (searchValue: string, newValue: string) => {\r\n        this.replace(searchValue, newValue);\r\n      },\r\n      replaceCurrentExpression: (newValue: string) => {\r\n        this.replaceCurrentExpression(newValue);\r\n      },\r\n      insertAt: (at: number, toInsert: string) => {\r\n        this.insertAt(at, toInsert);\r\n      },\r\n      closeOmnibox: () => {\r\n        this.omnibox.magicBox.blur();\r\n      }\r\n    };\r\n    return ret;\r\n  }\r\n\r\n  private rowsToSuggestions(rows: IOmniboxDataRow[]): Promise<IOmniboxSuggestion[]>[] {\r\n    return _.map(rows, (row: IPopulateOmniboxEventRow) => {\r\n      if (!Utils.isNullOrUndefined(row.element)) {\r\n        return new Promise<IOmniboxSuggestion[]>(resolve => {\r\n          resolve([\r\n            {\r\n              dom: row.element,\r\n              index: row.zIndex\r\n            }\r\n          ]);\r\n        });\r\n      } else if (!Utils.isNullOrUndefined(row.deferred)) {\r\n        return new Promise<IOmniboxSuggestion[]>(resolve => {\r\n          row.deferred.then(row => {\r\n            if (row.element != null) {\r\n              resolve([\r\n                {\r\n                  dom: row.element,\r\n                  index: row.zIndex\r\n                }\r\n              ]);\r\n            } else {\r\n              resolve(null);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Omnibox/OldOmniboxAddon.ts","///<reference path='Omnibox.ts'/>\r\nimport { OmniboxEvents, IPopulateOmniboxSuggestionsEventArgs } from '../../events/OmniboxEvents';\r\nimport { Omnibox, IOmniboxSuggestion } from './Omnibox';\r\nimport { IExtension } from '../../rest/Extension';\r\nimport * as _ from 'underscore';\r\nimport { MagicBoxInstance } from '../../magicbox/MagicBox';\r\nimport { MagicBoxUtils } from '../../magicbox/MagicBoxUtils';\r\nimport { Result } from '../../magicbox/Result/Result';\r\n\r\ninterface IQueryExtensionAddonHash {\r\n  type: string;\r\n  before: string;\r\n  after: string;\r\n  current: string;\r\n  name?: string;\r\n  used?: string[];\r\n}\r\n\r\nexport class QueryExtensionAddon {\r\n  static INDEX = 62;\r\n\r\n  cache: { [hash: string]: Promise<string[]> } = {};\r\n\r\n  constructor(public omnibox: Omnibox) {\r\n    this.omnibox.bind.on(this.omnibox.element, OmniboxEvents.populateOmniboxSuggestions, (args: IPopulateOmniboxSuggestionsEventArgs) => {\r\n      args.suggestions.push(this.getSuggestion());\r\n    });\r\n  }\r\n\r\n  public getSuggestion(): Promise<IOmniboxSuggestion[]> {\r\n    var hash = this.getHash(this.omnibox.magicBox);\r\n    if (hash == null) {\r\n      return null;\r\n    }\r\n    var hashString = this.hashToString(hash);\r\n    if (this.cache[hashString] != null) {\r\n      return this.hashValueToSuggestion(hash, this.cache[hashString]);\r\n    }\r\n    var values = hash.type == 'QueryExtensionName' ? this.names(hash.current) : this.attributeNames(hash.name, hash.current, hash.used);\r\n    this.cache[hashString] = values;\r\n    values.catch(() => {\r\n      delete this.cache[hashString];\r\n    });\r\n    return this.hashValueToSuggestion(hash, values);\r\n  }\r\n\r\n  private getHash(magicBox: MagicBoxInstance): IQueryExtensionAddonHash {\r\n    var queryExtension: Result = _.last(magicBox.resultAtCursor('QueryExtension'));\r\n    if (queryExtension != null) {\r\n      var queryExtensionArgumentResults = queryExtension.findAll('QueryExtensionArgument');\r\n      var current = _.last(magicBox.resultAtCursor('QueryExtensionName'));\r\n      if (current != null) {\r\n        return {\r\n          type: 'QueryExtensionName',\r\n          current: current.toString(),\r\n          before: current.before(),\r\n          after: current.after()\r\n        };\r\n      }\r\n\r\n      current = _.last(magicBox.resultAtCursor('QueryExtensionArgumentName'));\r\n      if (current != null) {\r\n        var used: string[] = _.chain(queryExtensionArgumentResults)\r\n          .map(result => {\r\n            var name = result.find('QueryExtensionArgumentName');\r\n            return name && name.toString();\r\n          })\r\n          .compact()\r\n          .value();\r\n\r\n        var name = queryExtension.find('QueryExtensionName').toString();\r\n\r\n        return {\r\n          type: 'QueryExtensionArgumentName',\r\n          current: current.toString(),\r\n          before: current.before(),\r\n          after: current.after(),\r\n          name: name,\r\n          used: used\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private hashToString(hash: IQueryExtensionAddonHash) {\r\n    if (hash == null) {\r\n      return null;\r\n    }\r\n    return [hash.type, hash.current, hash.name || '', hash.used ? hash.used.join() : ''].join();\r\n  }\r\n\r\n  private hashValueToSuggestion(hash: IQueryExtensionAddonHash, promise: Promise<string[]>): Promise<IOmniboxSuggestion[]> {\r\n    return promise.then(values => {\r\n      var suggestions: IOmniboxSuggestion[] = _.map(values, (value, i) => {\r\n        return {\r\n          html: MagicBoxUtils.highlightText(value, hash.current, true),\r\n          text: hash.before + value + hash.after,\r\n          index: QueryExtensionAddon.INDEX - i / values.length\r\n        };\r\n      });\r\n      return suggestions;\r\n    });\r\n  }\r\n\r\n  private extensions: Promise<any>;\r\n\r\n  private getExtensions() {\r\n    if (this.extensions == null) {\r\n      this.extensions = this.omnibox.queryController.getEndpoint().extensions();\r\n    }\r\n    return this.extensions;\r\n  }\r\n\r\n  private names(current: string): Promise<string[]> {\r\n    var extensionName = current.toLowerCase();\r\n    return this.getExtensions().then((extensions: IExtension[]) => {\r\n      var matchExtensions = _.chain(extensions)\r\n        .map((extension: IExtension) => {\r\n          return {\r\n            index: extension.name.toLowerCase().indexOf(extensionName),\r\n            extension: extension.name\r\n          };\r\n        })\r\n        .filter(extension => {\r\n          return extension.index != -1 && extension.extension.length > extensionName.length;\r\n        })\r\n        .sortBy('index')\r\n        .pluck('extension')\r\n        .value();\r\n      matchExtensions = _.first(matchExtensions, 5);\r\n      return matchExtensions;\r\n    });\r\n  }\r\n\r\n  private attributeNames(name: string, current: string, used: string[]): Promise<string[]> {\r\n    return this.getExtensions().then((extensions: IExtension[]) => {\r\n      var extension = _.find(extensions, (extension: IExtension) => extension.name == name);\r\n      if (extension == null) {\r\n        return [];\r\n      } else {\r\n        return _.filter(_.difference(extension.argumentNames, used), (argumentName: string) => argumentName.indexOf(current) == 0);\r\n      }\r\n    });\r\n  }\r\n\r\n  public hash() {\r\n    return;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Omnibox/QueryExtensionAddon.ts","///<reference path=\"Omnibox.ts\"/>\r\nimport { Omnibox, IOmniboxSuggestion } from './Omnibox';\r\nimport { $$, Dom } from '../../utils/Dom';\r\nimport { IQuerySuggestCompletion, IQuerySuggestRequest, IQuerySuggestResponse } from '../../rest/QuerySuggest';\r\nimport { ComponentOptionsModel } from '../../models/ComponentOptionsModel';\r\nimport {\r\n  OmniboxEvents,\r\n  IPopulateOmniboxSuggestionsEventArgs,\r\n  IBuildingQuerySuggestArgs,\r\n  IQuerySuggestSuccessArgs\r\n} from '../../events/OmniboxEvents';\r\nimport { StringUtils } from '../../utils/StringUtils';\r\nimport { map, every, last, indexOf, find } from 'underscore';\r\nimport { QUERY_STATE_ATTRIBUTES } from '../../models/QueryStateModel';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { buildHistoryStore } from '../../utils/HistoryStore';\r\nimport { AnalyticsInformation } from '../Analytics/AnalyticsInformation';\r\n\r\nexport interface IQuerySuggestAddon {\r\n  getSuggestion(): Promise<IOmniboxSuggestion[]>;\r\n}\r\n\r\nexport class QuerySuggestAddon implements IQuerySuggestAddon {\r\n  static INDEX = 60;\r\n\r\n  private static suggestiontHtml(suggestion: IQuerySuggestCompletion) {\r\n    return suggestion.highlighted.replace(/\\[(.*?)\\]|\\{(.*?)\\}|\\((.*?)\\)/g, (part, notMatched, matched, corrected) => {\r\n      var className = '';\r\n      if (matched) {\r\n        className = 'coveo-omnibox-hightlight';\r\n      }\r\n      if (corrected) {\r\n        className = 'coveo-omnibox-hightlight2';\r\n      }\r\n\r\n      let ret: Dom;\r\n      if (className) {\r\n        ret = $$('span', {\r\n          className: className\r\n        });\r\n      } else {\r\n        ret = $$('span');\r\n      }\r\n      ret.text(notMatched || matched || corrected);\r\n      return ret.el.outerHTML;\r\n    });\r\n  }\r\n\r\n  private static isPartialMatch(suggestion: IQuerySuggestCompletion) {\r\n    // groups : 1=notMatched, 2=matched, 3=corrected\r\n    var parts = StringUtils.match(suggestion.highlighted, /\\[(.*?)\\]|\\{(.*?)\\}|\\((.*?)\\)/g);\r\n    var firstFail = find(parts, (part: string[]) => part[1] != null);\r\n    // if no fail found, this is a partial or a full match\r\n    if (firstFail == null) {\r\n      return true;\r\n    }\r\n    // if all right parts are notMatched, the right parts is autocomplete\r\n    return every(last(parts, indexOf(parts, firstFail) - parts.length), (part: string[]) => part[1] != null);\r\n  }\r\n\r\n  constructor(public omnibox: Omnibox) {\r\n    $$(this.omnibox.element).on(OmniboxEvents.populateOmniboxSuggestions, (e: Event, args: IPopulateOmniboxSuggestionsEventArgs) => {\r\n      args.suggestions.push(this.getSuggestion());\r\n    });\r\n  }\r\n\r\n  public getSuggestion(): Promise<IOmniboxSuggestion[]> {\r\n    const text = this.omnibox.magicBox.getText();\r\n\r\n    if (text.length >= this.omnibox.options.querySuggestCharacterThreshold) {\r\n      return this.getQuerySuggest(text);\r\n    }\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  private async getQuerySuggest(text: string): Promise<IOmniboxSuggestion[]> {\r\n    const payload: IQuerySuggestRequest = {\r\n      q: text,\r\n      locale: this.locale,\r\n      searchHub: this.searchHub,\r\n      pipeline: this.pipeline,\r\n      enableWordCompletion: this.enableWordCompletion,\r\n      context: this.context,\r\n      count: this.count,\r\n      tab: this.tab,\r\n      referrer: document.referrer,\r\n      actionsHistory: this.actionsHistory,\r\n      timezone: this.timezone,\r\n      visitorId: this.visitorId,\r\n      isGuestUser: this.isGuestUser\r\n    };\r\n\r\n    $$(this.omnibox.getBindings().searchInterface.element).trigger(OmniboxEvents.buildingQuerySuggest, <IBuildingQuerySuggestArgs>{\r\n      payload\r\n    });\r\n\r\n    let results: IQuerySuggestResponse;\r\n    try {\r\n      results = await this.omnibox.queryController.getEndpoint().getQuerySuggest(payload);\r\n    } catch {\r\n      return [];\r\n    }\r\n    const completions = results.completions;\r\n\r\n    $$(this.omnibox.getBindings().searchInterface.element).trigger(OmniboxEvents.querySuggestSuccess, <IQuerySuggestSuccessArgs>{\r\n      completions\r\n    });\r\n\r\n    return map(completions, (completion, i) => {\r\n      return {\r\n        html: QuerySuggestAddon.suggestiontHtml(completion),\r\n        text: completion.expression,\r\n        index: QuerySuggestAddon.INDEX - i / completions.length,\r\n        partial: QuerySuggestAddon.isPartialMatch(completion),\r\n        executableConfidence: completion.executableConfidence\r\n      };\r\n    });\r\n  }\r\n\r\n  private get tab() {\r\n    const tab = this.omnibox.getBindings().queryStateModel.get(QUERY_STATE_ATTRIBUTES.T) as string;\r\n\r\n    if (Utils.isNonEmptyString(tab)) {\r\n      return tab;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private get locale() {\r\n    return String['locale'];\r\n  }\r\n\r\n  private get searchHub() {\r\n    return this.omnibox.getBindings().componentOptionsModel.get(ComponentOptionsModel.attributesEnum.searchHub);\r\n  }\r\n\r\n  private get pipeline() {\r\n    return this.omnibox.getBindings().searchInterface.options.pipeline;\r\n  }\r\n\r\n  private get enableWordCompletion() {\r\n    return this.omnibox.options.enableSearchAsYouType;\r\n  }\r\n\r\n  private get context() {\r\n    return this.omnibox.getBindings().searchInterface.getQueryContext();\r\n  }\r\n\r\n  private get count() {\r\n    return this.omnibox.options.numberOfSuggestions;\r\n  }\r\n\r\n  private get actionsHistory() {\r\n    const historyStore = buildHistoryStore();\r\n    const historyFromStore = historyStore.getHistory();\r\n    if (historyFromStore == null) {\r\n      return [];\r\n    }\r\n    return historyFromStore;\r\n  }\r\n\r\n  private get timezone() {\r\n    return this.omnibox.getBindings().searchInterface.options.timezone;\r\n  }\r\n\r\n  private get visitorId() {\r\n    return new AnalyticsInformation().visitorId;\r\n  }\r\n\r\n  private get isGuestUser() {\r\n    return this.omnibox.getBindings().queryController.getEndpoint().options.isGuestUser;\r\n  }\r\n}\r\n\r\nexport class VoidQuerySuggestAddon implements IQuerySuggestAddon {\r\n  getSuggestion(): Promise<IOmniboxSuggestion[]> {\r\n    return Promise.resolve([]);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Omnibox/QuerySuggestAddon.ts","import { $$ } from './Dom';\r\n\r\nexport class SearchBoxResize {\r\n  public static resize(element: HTMLElement, size: number) {\r\n    const searchbox = this.getSearchbox(element);\r\n    const elementToResize: HTMLElement[] = this.getElementsToResize(element);\r\n    const magicboxInput: HTMLElement = this.getInput(element);\r\n\r\n    const searchboxStyle = `height: ${size}px; line-height: ${size}px;`;\r\n    const inputChangeStyle = `height: ${size}px`;\r\n\r\n    //This need to be a little bit smaller because when the height become smaller than 38px or to big, the bottom border of the Searchbox dissapear\r\n    const magicboxInputStyle = `height: ${size - 2}px;`;\r\n\r\n    this.applyStyle(searchbox, searchboxStyle);\r\n    this.applyStyle(magicboxInput, magicboxInputStyle);\r\n\r\n    elementToResize.forEach(HtmlElement => {\r\n      this.applyStyle(HtmlElement, inputChangeStyle);\r\n    });\r\n  }\r\n\r\n  private static applyStyle(element: HTMLElement, style: string) {\r\n    element.style.cssText += style;\r\n  }\r\n\r\n  private static getSearchbox(element: HTMLElement): HTMLElement {\r\n    return $$(element).find('.CoveoOmnibox') || $$(element).find('.CoveoQuerybox');\r\n  }\r\n\r\n  private static getElementsToResize(element: HTMLElement): HTMLElement[] {\r\n    return [\r\n      $$(element).find('.CoveoSearchButton'),\r\n      $$($$(element).find('.magic-box-input')).find('input'),\r\n      $$(element).find('.magic-box-icon'),\r\n      $$(element).find('.magic-box-clear'),\r\n      $$(element).find('.magic-box-underlay')\r\n    ];\r\n  }\r\n\r\n  private static getInput(element: HTMLElement): HTMLElement {\r\n    return $$(element).find('.magic-box-input');\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/SearchBoxResize.ts"],"sourceRoot":""}