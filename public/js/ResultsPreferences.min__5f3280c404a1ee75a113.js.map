{"version":3,"sources":["ResultsPreferences.min__5f3280c404a1ee75a113.js","./src/ui/FormWidgets/FormGroup.ts","./src/ui/ResultsPreferences/ResultsPreferences.ts","./src/ui/FormWidgets/RadioButton.ts"],"names":["webpackJsonpCoveo__temporary","136","module","exports","__webpack_require__","Object","defineProperty","value","contents","label","this","labelElement","$$","className","text","element","_","each","content","append","build","doExport","exportGlobally","FormGroup","el","274","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","options","bindings","ResultsPreferences","ID","preferencePanelCheckboxInputs","preferencePanelRadioInputs","ComponentOptions","initComponentOptions","preferencesPanel","closest","Component","computeCssClassNameForType","preferencePanelLocalStorage","StorageUtils","Assert","exists","componentOptionsModel","window","localStorage","preferences","load","adjustPreferencesToComponentConfig","updateComponentOptionsModel","bind","on","PreferencesPanelEvents","savePreferences","save","exitPreferencesWithoutSave","exitWithoutSave","buildCheckboxesInput","buildRadiosInput","_this","fromInputToPreferences","logger","info","fromPreferencesToCheckboxInput","resultLinkOption","pick","searchBoxOption","set","ComponentOptionsModel","attributesEnum","resultLink","searchBox","enableQuerySyntax","RadioButton","radioButtonInstance","fromPreferenceChangeEventToUsageAnalyticsLog","isSelected","queryController","executeQuery","closeModalBox","translatedLabels","map","l","radios","radio","formGroup","fromPreferencesToRadioInput","createCheckbox","checkbox","Checkbox","checkboxInstance","checkboxes","enableOpenInOutlook","push","enableOpenInNewWindow","appendChild","openInOutlook","alwaysOpenInNewWindow","undefined","select","type","preference","usageAnalytics","logCustomEvent","analyticsActionCauseList","preferencesChange","preferenceName","preferenceType","logSearchEvent","needToSave","Defer","defer","checkingFor","input","buildBooleanOption","defaultValue","Initialization","registerAutoCreateComponent","555","561","661","94","onChange","name","id","radioButton","buildContent","reset","currentlySelected","getRadio","checked","triggerChange","getElement","getValue","find","getLabel","radioOption","radioInput","labelInput","for"],"mappings":"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","file":"ResultsPreferences.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([23,53,55],{\n\n/***/ 136:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\nvar _ = __webpack_require__(0);\r\n__webpack_require__(561);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\n/**\r\n * A simple `fieldset` HTMLElement containing multiple form widgets.\r\n */\r\nvar FormGroup = /** @class */ (function () {\r\n    /**\r\n     * Creates a new `FormGroup`.\r\n     * @param contents The form widgets to include in the form group.\r\n     * @param label The label to display for the form group.\r\n     */\r\n    function FormGroup(contents, label) {\r\n        var _this = this;\r\n        this.labelElement = Dom_1.$$('span', { className: 'coveo-form-group-label' });\r\n        this.labelElement.text(label);\r\n        this.element = Dom_1.$$('fieldset', { className: 'coveo-form-group' }, this.labelElement);\r\n        _.each(contents, function (content) {\r\n            _this.element.append(content.build());\r\n        });\r\n    }\r\n    FormGroup.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            FormGroup: FormGroup\r\n        });\r\n    };\r\n    /**\r\n     * Gets the element on which the form group is bound.\r\n     * @returns {HTMLElement} The form group element.\r\n     */\r\n    FormGroup.prototype.build = function () {\r\n        return this.element.el;\r\n    };\r\n    return FormGroup;\r\n}());\r\nexports.FormGroup = FormGroup;\r\n\n\n/***/ }),\n\n/***/ 274:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(661);\r\nvar _ = __webpack_require__(0);\r\nvar PreferencesPanelEvents_1 = __webpack_require__(96);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar Defer_1 = __webpack_require__(31);\r\nvar ComponentOptionsModel_1 = __webpack_require__(28);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar StorageUtils_1 = __webpack_require__(205);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar Checkbox_1 = __webpack_require__(64);\r\nvar FormGroup_1 = __webpack_require__(136);\r\nvar RadioButton_1 = __webpack_require__(94);\r\n/**\r\n * The ResultsPreferences component allows the end user to select preferences related to the search results. These\r\n * preferences are then saved in the local storage of the end user.\r\n *\r\n * This component is normally accessible through the {@link Settings} menu. Its usual location in the DOM is inside the\r\n * {@link PreferencesPanel} component.\r\n *\r\n * See also the {@link ResultsFiltersPreferences} component.\r\n */\r\nvar ResultsPreferences = /** @class */ (function (_super) {\r\n    __extends(ResultsPreferences, _super);\r\n    /**\r\n     * Creates a new ResultsPreference component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the ResultsPreferences component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function ResultsPreferences(element, options, bindings) {\r\n        var _this = _super.call(this, element, ResultsPreferences.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.bindings = bindings;\r\n        _this.preferencePanelCheckboxInputs = {};\r\n        _this.preferencePanelRadioInputs = {};\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ResultsPreferences, options);\r\n        _this.preferencesPanel = Dom_1.$$(_this.element).closest(Component_1.Component.computeCssClassNameForType('PreferencesPanel'));\r\n        _this.preferencePanelLocalStorage = new StorageUtils_1.StorageUtils(ResultsPreferences.ID);\r\n        Assert_1.Assert.exists(_this.componentOptionsModel);\r\n        Assert_1.Assert.exists(window.localStorage);\r\n        Assert_1.Assert.exists(_this.preferencesPanel);\r\n        _this.preferences = _this.preferencePanelLocalStorage.load() || {};\r\n        _this.adjustPreferencesToComponentConfig();\r\n        ComponentOptions_1.ComponentOptions.initComponentOptions(_this.element, ResultsPreferences, _this.options);\r\n        _this.updateComponentOptionsModel();\r\n        _this.bind.on(_this.preferencesPanel, PreferencesPanelEvents_1.PreferencesPanelEvents.savePreferences, function () { return _this.save(); });\r\n        _this.bind.on(_this.preferencesPanel, PreferencesPanelEvents_1.PreferencesPanelEvents.exitPreferencesWithoutSave, function () { return _this.exitWithoutSave(); });\r\n        _this.buildCheckboxesInput();\r\n        _this.buildRadiosInput();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Saves the current state of the ResultsPreferences component in the local storage.\r\n     */\r\n    ResultsPreferences.prototype.save = function () {\r\n        this.fromInputToPreferences();\r\n        this.logger.info('Saving preferences', this.preferences);\r\n        this.preferencePanelLocalStorage.save(this.preferences);\r\n        this.updateComponentOptionsModel();\r\n    };\r\n    ResultsPreferences.prototype.exitWithoutSave = function () {\r\n        this.fromPreferencesToCheckboxInput();\r\n    };\r\n    ResultsPreferences.prototype.updateComponentOptionsModel = function () {\r\n        var resultLinkOption = _.pick(this.preferences, 'openInOutlook', 'alwaysOpenInNewWindow');\r\n        var searchBoxOption = _.pick(this.preferences, 'enableQuerySyntax');\r\n        this.componentOptionsModel.set(ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.resultLink, resultLinkOption);\r\n        this.componentOptionsModel.set(ComponentOptionsModel_1.ComponentOptionsModel.attributesEnum.searchBox, searchBoxOption);\r\n    };\r\n    ResultsPreferences.prototype.buildRadiosInput = function () {\r\n        var _this = this;\r\n        if (this.options.enableQuerySyntax) {\r\n            var createRadioButton_1 = function (label) {\r\n                var radio = new RadioButton_1.RadioButton(function (radioButtonInstance) {\r\n                    _this.fromPreferenceChangeEventToUsageAnalyticsLog(radioButtonInstance.isSelected() ? 'selected' : 'unselected', label);\r\n                    _this.save();\r\n                    _this.queryController.executeQuery({\r\n                        closeModalBox: false\r\n                    });\r\n                }, label, 'coveo-results-preferences-query-syntax');\r\n                return radio;\r\n            };\r\n            var translatedLabels = _.map(['On', 'Off', 'Automatic'], function (label) { return Strings_1.l(label); });\r\n            var radios = _.map(translatedLabels, function (label) {\r\n                var radio = createRadioButton_1(label);\r\n                _this.preferencePanelRadioInputs[label] = radio;\r\n                return radio;\r\n            });\r\n            var formGroup = new FormGroup_1.FormGroup(radios, Strings_1.l('EnableQuerySyntax'));\r\n            Dom_1.$$(this.element).append(formGroup.build());\r\n            this.fromPreferencesToRadioInput();\r\n        }\r\n    };\r\n    ResultsPreferences.prototype.buildCheckboxesInput = function () {\r\n        var _this = this;\r\n        var createCheckbox = function (label) {\r\n            var checkbox = new Checkbox_1.Checkbox(function (checkboxInstance) {\r\n                _this.fromPreferenceChangeEventToUsageAnalyticsLog(checkboxInstance.isSelected() ? 'selected' : 'unselected', label);\r\n                _this.save();\r\n                _this.queryController.executeQuery({\r\n                    closeModalBox: false\r\n                });\r\n            }, label);\r\n            _this.preferencePanelCheckboxInputs[label] = checkbox;\r\n            return checkbox;\r\n        };\r\n        var checkboxes = [];\r\n        if (this.options.enableOpenInOutlook) {\r\n            checkboxes.push(createCheckbox(Strings_1.l('OpenInOutlookWhenPossible')));\r\n        }\r\n        if (this.options.enableOpenInNewWindow) {\r\n            checkboxes.push(createCheckbox(Strings_1.l('AlwaysOpenInNewWindow')));\r\n        }\r\n        this.element.appendChild(new FormGroup_1.FormGroup(checkboxes, Strings_1.l('ResultLinks')).build());\r\n        this.fromPreferencesToCheckboxInput();\r\n    };\r\n    ResultsPreferences.prototype.fromInputToPreferences = function () {\r\n        var _this = this;\r\n        this.preferences = this.preferences || {\r\n            openInOutlook: false,\r\n            alwaysOpenInNewWindow: false,\r\n            enableQuerySyntax: undefined\r\n        };\r\n        _.each(this.preferencePanelCheckboxInputs, function (checkbox, label) {\r\n            if (label == Strings_1.l('OpenInOutlookWhenPossible')) {\r\n                if (_this.isSelected(Strings_1.l('OpenInOutlookWhenPossible'), label, checkbox)) {\r\n                    _this.preferences.openInOutlook = true;\r\n                }\r\n                else if (_this.preferences.openInOutlook != null) {\r\n                    _this.preferences.openInOutlook = false;\r\n                }\r\n            }\r\n            if (label == Strings_1.l('AlwaysOpenInNewWindow')) {\r\n                if (_this.isSelected(Strings_1.l('AlwaysOpenInNewWindow'), label, checkbox)) {\r\n                    _this.preferences.alwaysOpenInNewWindow = true;\r\n                }\r\n                else if (_this.preferences.alwaysOpenInNewWindow != null) {\r\n                    _this.preferences.alwaysOpenInNewWindow = false;\r\n                }\r\n            }\r\n        });\r\n        _.each(this.preferencePanelRadioInputs, function (radio, label) {\r\n            if (_this.isSelected(Strings_1.l('On'), label, radio)) {\r\n                _this.preferences.enableQuerySyntax = true;\r\n            }\r\n            if (_this.isSelected(Strings_1.l('Off'), label, radio)) {\r\n                _this.preferences.enableQuerySyntax = false;\r\n            }\r\n            if (_this.isSelected(Strings_1.l('Automatic'), label, radio)) {\r\n                delete _this.preferences.enableQuerySyntax;\r\n            }\r\n        });\r\n    };\r\n    ResultsPreferences.prototype.fromPreferencesToCheckboxInput = function () {\r\n        if (this.preferences.openInOutlook) {\r\n            this.preferencePanelCheckboxInputs[Strings_1.l('OpenInOutlookWhenPossible')].select(false);\r\n        }\r\n        if (this.preferences.alwaysOpenInNewWindow) {\r\n            this.preferencePanelCheckboxInputs[Strings_1.l('AlwaysOpenInNewWindow')].select(false);\r\n        }\r\n    };\r\n    ResultsPreferences.prototype.fromPreferencesToRadioInput = function () {\r\n        if (this.preferences.enableQuerySyntax === true) {\r\n            this.preferencePanelRadioInputs[Strings_1.l('On')].select(false);\r\n        }\r\n        else if (this.preferences.enableQuerySyntax === false) {\r\n            this.preferencePanelRadioInputs[Strings_1.l('Off')].select(false);\r\n        }\r\n        else {\r\n            this.preferencePanelRadioInputs[Strings_1.l('Automatic')].select(false);\r\n        }\r\n    };\r\n    ResultsPreferences.prototype.fromPreferenceChangeEventToUsageAnalyticsLog = function (type, preference) {\r\n        this.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.preferencesChange, { preferenceName: preference, preferenceType: type }, this.element);\r\n        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.preferencesChange, {\r\n            preferenceName: preference,\r\n            preferenceType: type\r\n        });\r\n    };\r\n    ResultsPreferences.prototype.adjustPreferencesToComponentConfig = function () {\r\n        var _this = this;\r\n        // This method is used when there are illogical configuration between what's saved in local storage (the preferences)\r\n        // and how the component is configured.\r\n        // This can happen if an admin change the component configuration after end users have already selected a preferences.\r\n        // We need to adapt the saved preferences to what's actually available in the component\r\n        var needToSave = false;\r\n        if (!this.options.enableOpenInNewWindow) {\r\n            delete this.preferences.alwaysOpenInNewWindow;\r\n            needToSave = true;\r\n        }\r\n        if (!this.options.enableOpenInOutlook) {\r\n            delete this.preferences.openInOutlook;\r\n            needToSave = true;\r\n        }\r\n        if (!this.options.enableQuerySyntax) {\r\n            delete this.preferences.enableQuerySyntax;\r\n            needToSave = true;\r\n        }\r\n        if (needToSave) {\r\n            Defer_1.Defer.defer(function () {\r\n                _this.save();\r\n            });\r\n        }\r\n    };\r\n    ResultsPreferences.prototype.isSelected = function (checkingFor, label, input) {\r\n        return checkingFor == label && input.isSelected();\r\n    };\r\n    ResultsPreferences.ID = 'ResultsPreferences';\r\n    ResultsPreferences.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            ResultsPreferences: ResultsPreferences\r\n        });\r\n    };\r\n    /**\r\n     * The options for the component\r\n     * @componentOptions\r\n     */\r\n    ResultsPreferences.options = {\r\n        /**\r\n         * Specifies whether to make the option to open results in Microsoft Outlook available.\r\n         *\r\n         * Default value is `false`\r\n         */\r\n        enableOpenInOutlook: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n        /**\r\n         * Specifies whether to make the option to open results in a new window available.\r\n         *\r\n         * Default value is `true`\r\n         */\r\n        enableOpenInNewWindow: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n        /**\r\n         * Specifies whether to make the option to allow end users to turn query syntax on or off available.\r\n         *\r\n         * If query syntax is enabled, the Coveo Platform tries to interpret special query syntax (e.g.,\r\n         * `@objecttype=message`) when the end user types a query in the [`Querybox`]{@link Querybox} (see\r\n         * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)). Enabling query\r\n         * syntax also causes the `Querybox` to highlight any query syntax.\r\n         *\r\n         * Selecting **On** for the **Enable query syntax** setting enables query syntax, whereas selecting **Off** disables\r\n         * it. Selecting **Automatic** uses the `Querybox` [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax}\r\n         * option value (which is `false` by default).\r\n         *\r\n         * Default value is `false`\r\n         */\r\n        enableQuerySyntax: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n    };\r\n    return ResultsPreferences;\r\n}(Component_1.Component));\r\nexports.ResultsPreferences = ResultsPreferences;\r\nInitialization_1.Initialization.registerAutoCreateComponent(ResultsPreferences);\r\n\n\n/***/ }),\n\n/***/ 555:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 561:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 661:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 94:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\n__webpack_require__(555);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\n/**\r\n * A radio button widget with standard styling.\r\n */\r\nvar RadioButton = /** @class */ (function () {\r\n    /**\r\n     * Creates a new `RadioButton`.\r\n     * @param onChange The function to call when the radio button value changes. This function takes the current\r\n     * `RadioButton` instance as an argument.\r\n     * @param label The label to display next to the radio button.\r\n     * @param name The value to set the `input` HTMLElement `name` attribute to.\r\n     */\r\n    function RadioButton(onChange, label, name, id) {\r\n        if (onChange === void 0) { onChange = function (radioButton) { }; }\r\n        if (id === void 0) { id = label; }\r\n        this.onChange = onChange;\r\n        this.label = label;\r\n        this.name = name;\r\n        this.id = id;\r\n        this.buildContent();\r\n    }\r\n    RadioButton.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            RadioButton: RadioButton\r\n        });\r\n    };\r\n    /**\r\n     * Resets the radio button.\r\n     */\r\n    RadioButton.prototype.reset = function () {\r\n        var currentlySelected = this.isSelected();\r\n        this.getRadio().checked = false;\r\n        if (currentlySelected) {\r\n            this.onChange(this);\r\n        }\r\n    };\r\n    /**\r\n     * Select the radio button\r\n     * @param triggerChange will trigger change event if specified and the radio button is not already selected\r\n     */\r\n    RadioButton.prototype.select = function (triggerChange) {\r\n        if (triggerChange === void 0) { triggerChange = true; }\r\n        var currentlySelected = this.isSelected();\r\n        this.getRadio().checked = true;\r\n        if (!currentlySelected && triggerChange) {\r\n            this.onChange(this);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the element on which the radio button is bound.\r\n     * @returns {HTMLElement} The radio button element.\r\n     */\r\n    RadioButton.prototype.build = function () {\r\n        return this.element;\r\n    };\r\n    /**\r\n     * Gets the element on which the radio button is bound.\r\n     * @returns {HTMLElement} The radio button element.\r\n     */\r\n    RadioButton.prototype.getElement = function () {\r\n        return this.element;\r\n    };\r\n    RadioButton.prototype.getValue = function () {\r\n        return this.label;\r\n    };\r\n    /**\r\n     * Indicates whether the radio button is selected.\r\n     * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\r\n     */\r\n    RadioButton.prototype.isSelected = function () {\r\n        return this.getRadio().checked;\r\n    };\r\n    /**\r\n     * Gets the `input` element (the radio button itself).\r\n     * @returns {HTMLInputElement} The `input` element.\r\n     */\r\n    RadioButton.prototype.getRadio = function () {\r\n        return Dom_1.$$(this.element).find('input');\r\n    };\r\n    /**\r\n     * Gets the radio button [`label`]{@link RadioButton.label} element.\r\n     * @returns {HTMLLabelElement} The `label` element.\r\n     */\r\n    RadioButton.prototype.getLabel = function () {\r\n        return Dom_1.$$(this.element).find('label');\r\n    };\r\n    RadioButton.prototype.buildContent = function () {\r\n        var _this = this;\r\n        var radioOption = Dom_1.$$('div', { className: 'coveo-radio' });\r\n        var radioInput = Dom_1.$$('input', { type: 'radio', name: this.name, id: this.id });\r\n        var labelInput = Dom_1.$$('label', { className: 'coveo-radio-input-label', for: this.id });\r\n        labelInput.text(this.label);\r\n        radioInput.on('change', function () {\r\n            _this.onChange(_this);\r\n        });\r\n        radioOption.append(radioInput.el);\r\n        radioOption.append(labelInput.el);\r\n        this.element = radioOption.el;\r\n    };\r\n    return RadioButton;\r\n}());\r\nexports.RadioButton = RadioButton;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// ResultsPreferences.min__5f3280c404a1ee75a113.js","import { IFormWidget } from './FormWidgets';\r\nimport { Dom, $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\n\r\nimport 'styling/vapor/_FormGroup';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\n/**\r\n * A simple `fieldset` HTMLElement containing multiple form widgets.\r\n */\r\nexport class FormGroup {\r\n  private element: Dom;\r\n  public labelElement: Dom;\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      FormGroup: FormGroup\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `FormGroup`.\r\n   * @param contents The form widgets to include in the form group.\r\n   * @param label The label to display for the form group.\r\n   */\r\n  constructor(contents: IFormWidget[], label: string) {\r\n    this.labelElement = $$('span', { className: 'coveo-form-group-label' });\r\n    this.labelElement.text(label);\r\n    this.element = $$('fieldset', { className: 'coveo-form-group' }, this.labelElement);\r\n    _.each(contents, (content: IFormWidget) => {\r\n      this.element.append(content.build());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the form group is bound.\r\n   * @returns {HTMLElement} The form group element.\r\n   */\r\n  public build(): HTMLElement {\r\n    return this.element.el;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/FormGroup.ts","import 'styling/_ResultsPreferences';\r\nimport * as _ from 'underscore';\r\nimport { PreferencesPanelEvents } from '../../events/PreferencesPanelEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { Defer } from '../../misc/Defer';\r\nimport { ComponentOptionsModel } from '../../models/ComponentOptionsModel';\r\nimport { l } from '../../strings/Strings';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { StorageUtils } from '../../utils/StorageUtils';\r\nimport { analyticsActionCauseList, IAnalyticsPreferencesChangeMeta } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { Checkbox } from '../FormWidgets/Checkbox';\r\nimport { FormGroup } from '../FormWidgets/FormGroup';\r\nimport { IFormWidgetSelectable } from '../FormWidgets/FormWidgets';\r\nimport { RadioButton } from '../FormWidgets/RadioButton';\r\n\r\nexport interface IResultsPreferencesOptions {\r\n  enableOpenInOutlook?: boolean;\r\n  enableOpenInNewWindow?: boolean;\r\n  enableQuerySyntax?: boolean;\r\n}\r\n\r\nexport interface IPossiblePreferences {\r\n  openInOutlook?: boolean;\r\n  alwaysOpenInNewWindow?: boolean;\r\n  enableQuerySyntax?: boolean;\r\n}\r\n\r\n/**\r\n * The ResultsPreferences component allows the end user to select preferences related to the search results. These\r\n * preferences are then saved in the local storage of the end user.\r\n *\r\n * This component is normally accessible through the {@link Settings} menu. Its usual location in the DOM is inside the\r\n * {@link PreferencesPanel} component.\r\n *\r\n * See also the {@link ResultsFiltersPreferences} component.\r\n */\r\nexport class ResultsPreferences extends Component {\r\n  static ID = 'ResultsPreferences';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      ResultsPreferences: ResultsPreferences\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IResultsPreferencesOptions = {\r\n    /**\r\n     * Specifies whether to make the option to open results in Microsoft Outlook available.\r\n     *\r\n     * Default value is `false`\r\n     */\r\n    enableOpenInOutlook: ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n    /**\r\n     * Specifies whether to make the option to open results in a new window available.\r\n     *\r\n     * Default value is `true`\r\n     */\r\n    enableOpenInNewWindow: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n    /**\r\n     * Specifies whether to make the option to allow end users to turn query syntax on or off available.\r\n     *\r\n     * If query syntax is enabled, the Coveo Platform tries to interpret special query syntax (e.g.,\r\n     * `@objecttype=message`) when the end user types a query in the [`Querybox`]{@link Querybox} (see\r\n     * [Coveo Query Syntax Reference](https://www.coveo.com/go?dest=adminhelp70&lcid=9&context=10005)). Enabling query\r\n     * syntax also causes the `Querybox` to highlight any query syntax.\r\n     *\r\n     * Selecting **On** for the **Enable query syntax** setting enables query syntax, whereas selecting **Off** disables\r\n     * it. Selecting **Automatic** uses the `Querybox` [`enableQuerySyntax`]{@link Querybox.options.enableQuerySyntax}\r\n     * option value (which is `false` by default).\r\n     *\r\n     * Default value is `false`\r\n     */\r\n    enableQuerySyntax: ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n  };\r\n\r\n  public preferences: IPossiblePreferences;\r\n  private preferencePanelLocalStorage: StorageUtils<IPossiblePreferences>;\r\n  private preferencesPanel: HTMLElement;\r\n  private preferencePanelCheckboxInputs: { [label: string]: Checkbox } = {};\r\n  private preferencePanelRadioInputs: { [label: string]: RadioButton } = {};\r\n\r\n  /**\r\n   * Creates a new ResultsPreference component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the ResultsPreferences component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options: IResultsPreferencesOptions, public bindings: IComponentBindings) {\r\n    super(element, ResultsPreferences.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, ResultsPreferences, options);\r\n\r\n    this.preferencesPanel = $$(this.element).closest(Component.computeCssClassNameForType('PreferencesPanel'));\r\n    this.preferencePanelLocalStorage = new StorageUtils(ResultsPreferences.ID);\r\n    Assert.exists(this.componentOptionsModel);\r\n    Assert.exists(window.localStorage);\r\n    Assert.exists(this.preferencesPanel);\r\n\r\n    this.preferences = this.preferencePanelLocalStorage.load() || {};\r\n    this.adjustPreferencesToComponentConfig();\r\n\r\n    ComponentOptions.initComponentOptions(this.element, ResultsPreferences, this.options);\r\n\r\n    this.updateComponentOptionsModel();\r\n\r\n    this.bind.on(this.preferencesPanel, PreferencesPanelEvents.savePreferences, () => this.save());\r\n    this.bind.on(this.preferencesPanel, PreferencesPanelEvents.exitPreferencesWithoutSave, () => this.exitWithoutSave());\r\n    this.buildCheckboxesInput();\r\n    this.buildRadiosInput();\r\n  }\r\n\r\n  /**\r\n   * Saves the current state of the ResultsPreferences component in the local storage.\r\n   */\r\n  public save() {\r\n    this.fromInputToPreferences();\r\n    this.logger.info('Saving preferences', this.preferences);\r\n    this.preferencePanelLocalStorage.save(this.preferences);\r\n    this.updateComponentOptionsModel();\r\n  }\r\n\r\n  public exitWithoutSave() {\r\n    this.fromPreferencesToCheckboxInput();\r\n  }\r\n\r\n  private updateComponentOptionsModel() {\r\n    const resultLinkOption = _.pick(this.preferences, 'openInOutlook', 'alwaysOpenInNewWindow');\r\n    const searchBoxOption = _.pick(this.preferences, 'enableQuerySyntax');\r\n    this.componentOptionsModel.set(ComponentOptionsModel.attributesEnum.resultLink, resultLinkOption);\r\n    this.componentOptionsModel.set(ComponentOptionsModel.attributesEnum.searchBox, searchBoxOption);\r\n  }\r\n\r\n  private buildRadiosInput() {\r\n    if (this.options.enableQuerySyntax) {\r\n      const createRadioButton = (label: string) => {\r\n        const radio = new RadioButton(\r\n          radioButtonInstance => {\r\n            this.fromPreferenceChangeEventToUsageAnalyticsLog(radioButtonInstance.isSelected() ? 'selected' : 'unselected', label);\r\n            this.save();\r\n\r\n            this.queryController.executeQuery({\r\n              closeModalBox: false\r\n            });\r\n          },\r\n          label,\r\n          'coveo-results-preferences-query-syntax'\r\n        );\r\n        return radio;\r\n      };\r\n\r\n      const translatedLabels = _.map(['On', 'Off', 'Automatic'], label => l(label));\r\n      const radios = _.map(translatedLabels, label => {\r\n        const radio = createRadioButton(label);\r\n        this.preferencePanelRadioInputs[label] = radio;\r\n        return radio;\r\n      });\r\n\r\n      const formGroup = new FormGroup(radios, l('EnableQuerySyntax'));\r\n      $$(this.element).append(formGroup.build());\r\n      this.fromPreferencesToRadioInput();\r\n    }\r\n  }\r\n\r\n  private buildCheckboxesInput() {\r\n    const createCheckbox = (label: string) => {\r\n      const checkbox = new Checkbox(checkboxInstance => {\r\n        this.fromPreferenceChangeEventToUsageAnalyticsLog(checkboxInstance.isSelected() ? 'selected' : 'unselected', label);\r\n        this.save();\r\n        this.queryController.executeQuery({\r\n          closeModalBox: false\r\n        });\r\n      }, label);\r\n      this.preferencePanelCheckboxInputs[label] = checkbox;\r\n      return checkbox;\r\n    };\r\n\r\n    const checkboxes: Checkbox[] = [];\r\n\r\n    if (this.options.enableOpenInOutlook) {\r\n      checkboxes.push(createCheckbox(l('OpenInOutlookWhenPossible')));\r\n    }\r\n    if (this.options.enableOpenInNewWindow) {\r\n      checkboxes.push(createCheckbox(l('AlwaysOpenInNewWindow')));\r\n    }\r\n\r\n    this.element.appendChild(new FormGroup(checkboxes, l('ResultLinks')).build());\r\n    this.fromPreferencesToCheckboxInput();\r\n  }\r\n\r\n  private fromInputToPreferences() {\r\n    this.preferences = this.preferences || {\r\n      openInOutlook: false,\r\n      alwaysOpenInNewWindow: false,\r\n      enableQuerySyntax: undefined\r\n    };\r\n\r\n    _.each(this.preferencePanelCheckboxInputs, (checkbox: Checkbox, label: string) => {\r\n      if (label == l('OpenInOutlookWhenPossible')) {\r\n        if (this.isSelected(l('OpenInOutlookWhenPossible'), label, checkbox)) {\r\n          this.preferences.openInOutlook = true;\r\n        } else if (this.preferences.openInOutlook != null) {\r\n          this.preferences.openInOutlook = false;\r\n        }\r\n      }\r\n      if (label == l('AlwaysOpenInNewWindow')) {\r\n        if (this.isSelected(l('AlwaysOpenInNewWindow'), label, checkbox)) {\r\n          this.preferences.alwaysOpenInNewWindow = true;\r\n        } else if (this.preferences.alwaysOpenInNewWindow != null) {\r\n          this.preferences.alwaysOpenInNewWindow = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    _.each(this.preferencePanelRadioInputs, (radio: RadioButton, label: string) => {\r\n      if (this.isSelected(l('On'), label, radio)) {\r\n        this.preferences.enableQuerySyntax = true;\r\n      }\r\n      if (this.isSelected(l('Off'), label, radio)) {\r\n        this.preferences.enableQuerySyntax = false;\r\n      }\r\n      if (this.isSelected(l('Automatic'), label, radio)) {\r\n        delete this.preferences.enableQuerySyntax;\r\n      }\r\n    });\r\n  }\r\n\r\n  private fromPreferencesToCheckboxInput() {\r\n    if (this.preferences.openInOutlook) {\r\n      this.preferencePanelCheckboxInputs[l('OpenInOutlookWhenPossible')].select(false);\r\n    }\r\n    if (this.preferences.alwaysOpenInNewWindow) {\r\n      this.preferencePanelCheckboxInputs[l('AlwaysOpenInNewWindow')].select(false);\r\n    }\r\n  }\r\n\r\n  private fromPreferencesToRadioInput() {\r\n    if (this.preferences.enableQuerySyntax === true) {\r\n      this.preferencePanelRadioInputs[l('On')].select(false);\r\n    } else if (this.preferences.enableQuerySyntax === false) {\r\n      this.preferencePanelRadioInputs[l('Off')].select(false);\r\n    } else {\r\n      this.preferencePanelRadioInputs[l('Automatic')].select(false);\r\n    }\r\n  }\r\n\r\n  private fromPreferenceChangeEventToUsageAnalyticsLog(type: 'selected' | 'unselected', preference: string) {\r\n    this.usageAnalytics.logCustomEvent<IAnalyticsPreferencesChangeMeta>(\r\n      analyticsActionCauseList.preferencesChange,\r\n      { preferenceName: preference, preferenceType: type },\r\n      this.element\r\n    );\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsPreferencesChangeMeta>(analyticsActionCauseList.preferencesChange, {\r\n      preferenceName: preference,\r\n      preferenceType: type\r\n    });\r\n  }\r\n\r\n  private adjustPreferencesToComponentConfig() {\r\n    // This method is used when there are illogical configuration between what's saved in local storage (the preferences)\r\n    // and how the component is configured.\r\n    // This can happen if an admin change the component configuration after end users have already selected a preferences.\r\n    // We need to adapt the saved preferences to what's actually available in the component\r\n    let needToSave = false;\r\n    if (!this.options.enableOpenInNewWindow) {\r\n      delete this.preferences.alwaysOpenInNewWindow;\r\n      needToSave = true;\r\n    }\r\n\r\n    if (!this.options.enableOpenInOutlook) {\r\n      delete this.preferences.openInOutlook;\r\n      needToSave = true;\r\n    }\r\n\r\n    if (!this.options.enableQuerySyntax) {\r\n      delete this.preferences.enableQuerySyntax;\r\n      needToSave = true;\r\n    }\r\n\r\n    if (needToSave) {\r\n      Defer.defer(() => {\r\n        this.save();\r\n      });\r\n    }\r\n  }\r\n\r\n  private isSelected(checkingFor: string, label: string, input: IFormWidgetSelectable) {\r\n    return checkingFor == label && input.isSelected();\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(ResultsPreferences);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ResultsPreferences/ResultsPreferences.ts","import { $$ } from '../../utils/Dom';\r\nimport { IFormWidgetWithLabel, IFormWidgetSelectable } from './FormWidgets';\r\nimport 'styling/vapor/_Radio';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\n/**\r\n * A radio button widget with standard styling.\r\n */\r\nexport class RadioButton implements IFormWidgetWithLabel, IFormWidgetSelectable {\r\n  protected element: HTMLElement;\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      RadioButton: RadioButton\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `RadioButton`.\r\n   * @param onChange The function to call when the radio button value changes. This function takes the current\r\n   * `RadioButton` instance as an argument.\r\n   * @param label The label to display next to the radio button.\r\n   * @param name The value to set the `input` HTMLElement `name` attribute to.\r\n   */\r\n  constructor(\r\n    public onChange: (radioButton: RadioButton) => void = (radioButton: RadioButton) => {},\r\n    public label: string,\r\n    public name: string,\r\n    private id: string = label\r\n  ) {\r\n    this.buildContent();\r\n  }\r\n\r\n  /**\r\n   * Resets the radio button.\r\n   */\r\n  public reset() {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = false;\r\n    if (currentlySelected) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select the radio button\r\n   * @param triggerChange will trigger change event if specified and the radio button is not already selected\r\n   */\r\n  public select(triggerChange = true) {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = true;\r\n    if (!currentlySelected && triggerChange) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public build(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public getElement(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  public getValue(): string {\r\n    return this.label;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the radio button is selected.\r\n   * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\r\n   */\r\n  public isSelected(): boolean {\r\n    return this.getRadio().checked;\r\n  }\r\n\r\n  /**\r\n   * Gets the `input` element (the radio button itself).\r\n   * @returns {HTMLInputElement} The `input` element.\r\n   */\r\n  public getRadio(): HTMLInputElement {\r\n    return <HTMLInputElement>$$(this.element).find('input');\r\n  }\r\n\r\n  /**\r\n   * Gets the radio button [`label`]{@link RadioButton.label} element.\r\n   * @returns {HTMLLabelElement} The `label` element.\r\n   */\r\n  public getLabel(): HTMLLabelElement {\r\n    return <HTMLLabelElement>$$(this.element).find('label');\r\n  }\r\n\r\n  private buildContent() {\r\n    const radioOption = $$('div', { className: 'coveo-radio' });\r\n    const radioInput = $$('input', { type: 'radio', name: this.name, id: this.id });\r\n    const labelInput = $$('label', { className: 'coveo-radio-input-label', for: this.id });\r\n    labelInput.text(this.label);\r\n    radioInput.on('change', () => {\r\n      this.onChange(this);\r\n    });\r\n\r\n    radioOption.append(radioInput.el);\r\n    radioOption.append(labelInput.el);\r\n    this.element = radioOption.el;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/RadioButton.ts"],"sourceRoot":""}