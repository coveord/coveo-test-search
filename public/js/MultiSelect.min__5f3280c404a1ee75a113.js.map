{"version":3,"sources":["MultiSelect.min__5f3280c404a1ee75a113.js","./src/ui/FormWidgets/MultiSelect.ts"],"names":["webpackJsonpCoveo__temporary","190","module","exports","__webpack_require__","Object","defineProperty","value","onChange","options","label","multiSelect","this","buildContent","doExport","exportGlobally","MultiSelect","build","element","getElement","getValue","_","chain","toArray","filter","opt","selected","map","getUnselectedValues","setValue","values","currentlySelected","currentStateSplit","partition","contains","newStateToApplySplit","each","toSelect","toUnSelect","hasChanged","Utils","arrayEqual","$$","trigger","reset","selectedIndex","isEmptyArray","className","multiple","size","length","toString","el","optgroup","l","append","appendChild","on","573"],"mappings":"AAAAA,8BAA8B,KAExBC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAEAC,QAAOC,eAAeH,EAAS,cAAgBI,OAAO,GCNtD,YACA,OACA,MACA,OACA,YACA,OAKA,aAgBE,WACSC,EACAC,EACAC,OAFA,KAAAF,MAAA,SAAgDG,MAAhD,KAAAH,WACA,KAAAC,UACA,KAAAC,QAEPE,KAAKC,eAmGT,MArHS,GAAAC,SAAP,WACE,EAAAC,gBACEC,YAAaA,KAuBV,YAAAC,MAAP,WACE,MAAOL,MAAKM,SAOP,YAAAC,WAAP,WACE,MAAOP,MAAKM,SAOP,YAAAE,SAAP,WACE,MAAOC,GAAEC,MAAWV,KAAKM,QAAQT,SAC9Bc,UACAC,OAAO,SAACC,GAA2B,MAAAA,GAAIC,WACvCC,IAAI,SAACD,GAAgC,MAAAA,GAASnB,QAC9CA,SAOE,YAAAqB,oBAAP,WACE,MAAOP,GAAEC,MAAWV,KAAKM,QAAQT,SAC9Bc,UACAC,OAAO,SAACC,GAA2B,OAACA,EAAIC,WACxCC,IAAI,SAACD,GAAgC,MAAAA,GAASnB,QAC9CA,SAOE,YAAAsB,SAAP,SAAgBC,GACd,GAAMC,GAAoBnB,KAAKQ,WAEzBY,EAAoBX,EAAEY,UAAUZ,EAAEE,QAAQX,KAAKM,QAAQT,SAAU,SAACgB,GACtE,MAAAJ,GAAEa,SAASH,EAAmBN,EAAIlB,SAE9B4B,EAAuBd,EAAEY,UAAUZ,EAAEE,QAAQX,KAAKM,QAAQT,SAAU,SAACgB,GAA2B,MAAAJ,GAAEa,SAASJ,EAAQL,EAAIlB,QAE7Hc,GAAEe,KAAKD,EAAqB,GAAI,SAACE,GAAgC,MAACA,GAASX,UAAW,IACtFL,EAAEe,KAAKD,EAAqB,GAAI,SAACG,GAAkC,MAACA,GAAWZ,UAAW,GAE1F,IAAIa,IAAa,CACZ,GAAAC,MAAMC,WAAWT,EAAkB,GAAIG,EAAqB,IAAI,KACnEI,GAAa,GAEV,EAAAC,MAAMC,WAAWT,EAAkB,GAAIG,EAAqB,IAAI,KACnEI,GAAa,GAGXA,GACF,EAAAG,GAAG9B,KAAKM,SAASyB,QAAQ,WAOtB,YAAAC,MAAP,WACE,GAAMb,GAAoBnB,KAAKQ,UAC/BR,MAAKM,QAAQ2B,eAAiB,EACzB,EAAAL,MAAMM,aAAaf,IACtB,EAAAW,GAAG9B,KAAKM,SAASyB,QAAQ,WAIrB,YAAA9B,aAAR,qBACED,MAAKM,QAA6B,EAAAwB,GAAG,UACnCK,UAAW,qBACXC,SAAU,GACVC,KAAMrC,KAAKH,QAAQyC,OAAOC,aACzBC,EACH,IAAMC,GAAW,EAAAX,GAAG,YAClBK,UAAW,mBACXrC,MAAOE,KAAKF,QAERD,EAAUY,EAAEM,IAAIf,KAAKH,QAAS,SAAAgB,GAClC,MAAO,GAAAiB,GAAG,UAAYnC,MAAOkB,EAAKsB,UAAW,mBAAqB,EAAAO,EAAE7B,KAEtEJ,GAAEe,KAAK3B,EAAS,SAAAgB,GAAO,MAAA4B,GAASE,OAAO9B,EAAI2B,MAC3CxC,KAAKM,QAAQsC,YAAYH,EAASD,IAClC,EAAAV,GAAG9B,KAAKM,SAASuC,GAAG,SAAU,WAAM,SAAKjD,SAAS,MAEtD,IAxHa,GAAAQ,eDwHP0C,IACA,SAAUxD,EAAQC","file":"MultiSelect.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([54],{\n\n/***/ 190:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Dom_1 = __webpack_require__(1);\r\nvar _ = __webpack_require__(0);\r\nvar Strings_1 = __webpack_require__(6);\r\n__webpack_require__(573);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\n/**\r\n * A multi select widget with standard styling.\r\n */\r\nvar MultiSelect = /** @class */ (function () {\r\n    /**\r\n     * Creates a new `MultiSelect`.\r\n     * @param onChange The function to call when the widget selected values change. This function takes the current\r\n     * `MultiSelect` instance as an argument.\r\n     * @param options The values which can be selected with the multi select.\r\n     * @param label The label to display for the multi select.\r\n     */\r\n    function MultiSelect(onChange, options, label) {\r\n        if (onChange === void 0) { onChange = function (multiSelect) { }; }\r\n        this.onChange = onChange;\r\n        this.options = options;\r\n        this.label = label;\r\n        this.buildContent();\r\n    }\r\n    MultiSelect.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            MultiSelect: MultiSelect\r\n        });\r\n    };\r\n    /**\r\n     * Gets the element on which the multi select is bound.\r\n     * @returns {HTMLSelectElement} The multi select element.\r\n     */\r\n    MultiSelect.prototype.build = function () {\r\n        return this.element;\r\n    };\r\n    /**\r\n     * Gets the element on which the multi select is bound.\r\n     * @returns {HTMLSelectElement} The multi select element.\r\n     */\r\n    MultiSelect.prototype.getElement = function () {\r\n        return this.element;\r\n    };\r\n    /**\r\n     * Gets the currently selected values.\r\n     * @returns {string[]} The array of selected multi select values.\r\n     */\r\n    MultiSelect.prototype.getValue = function () {\r\n        return _.chain(this.element.options)\r\n            .toArray()\r\n            .filter(function (opt) { return opt.selected; })\r\n            .map(function (selected) { return selected.value; })\r\n            .value();\r\n    };\r\n    /**\r\n     * Gets the currently un-selected values.\r\n     * @returns {string[]} The array of un-selected multi select values.\r\n     */\r\n    MultiSelect.prototype.getUnselectedValues = function () {\r\n        return _.chain(this.element.options)\r\n            .toArray()\r\n            .filter(function (opt) { return !opt.selected; })\r\n            .map(function (selected) { return selected.value; })\r\n            .value();\r\n    };\r\n    /**\r\n     * Sets the currently selected values.\r\n     * @param values The values to select.\r\n     */\r\n    MultiSelect.prototype.setValue = function (values) {\r\n        var currentlySelected = this.getValue();\r\n        var currentStateSplit = _.partition(_.toArray(this.element.options), function (opt) {\r\n            return _.contains(currentlySelected, opt.value);\r\n        });\r\n        var newStateToApplySplit = _.partition(_.toArray(this.element.options), function (opt) { return _.contains(values, opt.value); });\r\n        _.each(newStateToApplySplit[0], function (toSelect) { return (toSelect.selected = true); });\r\n        _.each(newStateToApplySplit[1], function (toUnSelect) { return (toUnSelect.selected = false); });\r\n        var hasChanged = false;\r\n        if (!Utils_1.Utils.arrayEqual(currentStateSplit[0], newStateToApplySplit[0], false)) {\r\n            hasChanged = true;\r\n        }\r\n        if (!Utils_1.Utils.arrayEqual(currentStateSplit[1], newStateToApplySplit[1], false)) {\r\n            hasChanged = true;\r\n        }\r\n        if (hasChanged) {\r\n            Dom_1.$$(this.element).trigger('change');\r\n        }\r\n    };\r\n    /**\r\n     * Resets the multi select.\r\n     */\r\n    MultiSelect.prototype.reset = function () {\r\n        var currentlySelected = this.getValue();\r\n        this.element.selectedIndex = -1;\r\n        if (!Utils_1.Utils.isEmptyArray(currentlySelected)) {\r\n            Dom_1.$$(this.element).trigger('change');\r\n        }\r\n    };\r\n    MultiSelect.prototype.buildContent = function () {\r\n        var _this = this;\r\n        this.element = Dom_1.$$('select', {\r\n            className: 'coveo-multi-select',\r\n            multiple: '',\r\n            size: this.options.length.toString()\r\n        }).el;\r\n        var optgroup = Dom_1.$$('optgroup', {\r\n            className: 'coveo-list-group',\r\n            label: this.label\r\n        });\r\n        var options = _.map(this.options, function (opt) {\r\n            return Dom_1.$$('option', { value: opt, className: 'coveo-list-item' }, Strings_1.l(opt));\r\n        });\r\n        _.each(options, function (opt) { return optgroup.append(opt.el); });\r\n        this.element.appendChild(optgroup.el);\r\n        Dom_1.$$(this.element).on('change', function () { return _this.onChange(_this); });\r\n    };\r\n    return MultiSelect;\r\n}());\r\nexports.MultiSelect = MultiSelect;\r\n\n\n/***/ }),\n\n/***/ 573:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// MultiSelect.min__5f3280c404a1ee75a113.js","import { IFormWidget, IFormWidgetSettable } from './FormWidgets';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\nimport { l } from '../../strings/Strings';\r\nimport 'styling/vapor/_MultiSelect';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\n/**\r\n * A multi select widget with standard styling.\r\n */\r\nexport class MultiSelect implements IFormWidget, IFormWidgetSettable {\r\n  private element: HTMLSelectElement;\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      MultiSelect: MultiSelect\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `MultiSelect`.\r\n   * @param onChange The function to call when the widget selected values change. This function takes the current\r\n   * `MultiSelect` instance as an argument.\r\n   * @param options The values which can be selected with the multi select.\r\n   * @param label The label to display for the multi select.\r\n   */\r\n  constructor(\r\n    public onChange: (multiSelect: MultiSelect) => void = (multiSelect: MultiSelect) => {},\r\n    public options: string[],\r\n    public label: string\r\n  ) {\r\n    this.buildContent();\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the multi select is bound.\r\n   * @returns {HTMLSelectElement} The multi select element.\r\n   */\r\n  public build(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the multi select is bound.\r\n   * @returns {HTMLSelectElement} The multi select element.\r\n   */\r\n  public getElement(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Gets the currently selected values.\r\n   * @returns {string[]} The array of selected multi select values.\r\n   */\r\n  public getValue(): string[] {\r\n    return _.chain(<any>this.element.options)\r\n      .toArray()\r\n      .filter((opt: HTMLOptionElement) => opt.selected)\r\n      .map((selected: HTMLOptionElement) => selected.value)\r\n      .value();\r\n  }\r\n\r\n  /**\r\n   * Gets the currently un-selected values.\r\n   * @returns {string[]} The array of un-selected multi select values.\r\n   */\r\n  public getUnselectedValues(): string[] {\r\n    return _.chain(<any>this.element.options)\r\n      .toArray()\r\n      .filter((opt: HTMLOptionElement) => !opt.selected)\r\n      .map((selected: HTMLOptionElement) => selected.value)\r\n      .value();\r\n  }\r\n\r\n  /**\r\n   * Sets the currently selected values.\r\n   * @param values The values to select.\r\n   */\r\n  public setValue(values: string[]) {\r\n    const currentlySelected = this.getValue();\r\n\r\n    const currentStateSplit = _.partition(_.toArray(this.element.options), (opt: HTMLOptionElement) =>\r\n      _.contains(currentlySelected, opt.value)\r\n    );\r\n    const newStateToApplySplit = _.partition(_.toArray(this.element.options), (opt: HTMLOptionElement) => _.contains(values, opt.value));\r\n\r\n    _.each(newStateToApplySplit[0], (toSelect: HTMLOptionElement) => (toSelect.selected = true));\r\n    _.each(newStateToApplySplit[1], (toUnSelect: HTMLOptionElement) => (toUnSelect.selected = false));\r\n\r\n    let hasChanged = false;\r\n    if (!Utils.arrayEqual(currentStateSplit[0], newStateToApplySplit[0], false)) {\r\n      hasChanged = true;\r\n    }\r\n    if (!Utils.arrayEqual(currentStateSplit[1], newStateToApplySplit[1], false)) {\r\n      hasChanged = true;\r\n    }\r\n\r\n    if (hasChanged) {\r\n      $$(this.element).trigger('change');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the multi select.\r\n   */\r\n  public reset() {\r\n    const currentlySelected = this.getValue();\r\n    this.element.selectedIndex = -1;\r\n    if (!Utils.isEmptyArray(currentlySelected)) {\r\n      $$(this.element).trigger('change');\r\n    }\r\n  }\r\n\r\n  private buildContent() {\r\n    this.element = <HTMLSelectElement>$$('select', {\r\n      className: 'coveo-multi-select',\r\n      multiple: '',\r\n      size: this.options.length.toString()\r\n    }).el;\r\n    const optgroup = $$('optgroup', {\r\n      className: 'coveo-list-group',\r\n      label: this.label\r\n    });\r\n    const options = _.map(this.options, opt => {\r\n      return $$('option', { value: opt, className: 'coveo-list-item' }, l(opt));\r\n    });\r\n    _.each(options, opt => optgroup.append(opt.el));\r\n    this.element.appendChild(optgroup.el);\r\n    $$(this.element).on('change', () => this.onChange(this));\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/MultiSelect.ts"],"sourceRoot":""}