{"version":3,"sources":["./src/ui/Aggregate/Aggregate.ts"],"names":[],"mappings":"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","file":"Aggregate__1728cc16e4d2d82aa5db.js","sourcesContent":["import { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { QueryEvents, IBuildingQueryEventArgs, IQuerySuccessEventArgs } from '../../events/QueryEvents';\r\nimport { IGroupByRequest } from '../../rest/GroupByRequest';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as Globalize from 'globalize';\r\nimport * as _ from 'underscore';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\nexport interface IAggregateOptions {\r\n  field: IFieldOption;\r\n  operation?: string;\r\n  format?: string;\r\n}\r\n\r\n/**\r\n * The Aggregate component allows to display the result on an aggregate operation on the index.\r\n *\r\n * It hooks itself to the query to add a new {@link IGroupByRequest}, then displays the result.\r\n */\r\nexport class Aggregate extends Component {\r\n  static ID = 'Aggregate';\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      Aggregate: Aggregate\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IAggregateOptions = {\r\n    /**\r\n     * Specifies the field on which to do the aggregate operation. This parameter is mandatory.\r\n     */\r\n    field: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the aggregate operation to perform.\r\n     *\r\n     * The possible values are:\r\n     * - `sum` - Computes the sum of the computed field values.\r\n     * - `average` - Computes the average of the computed field values.\r\n     * - `minimum` - Finds the minimum value of the computed field values.\r\n     * - `maximum` - Finds the maximum value of the computed field values.\r\n     *\r\n     * Default value is `sum`.\r\n     */\r\n    operation: ComponentOptions.buildStringOption({ defaultValue: 'sum' }),\r\n\r\n    /**\r\n     * Specifies how to format the value.\r\n     *\r\n     * The available formats are defined in the Globalize library (see\r\n     * [Globalize](https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-).\r\n     *\r\n     * The most commonly used formats are:\r\n     * - `c0` - Formats the value as a currency.\r\n     * - `n0` - Formats the value as an integer.\r\n     * - `n2` - Formats the value as a floating point with 2 decimal digits.\r\n     *\r\n     * Default value is `c0`.\r\n     */\r\n    format: ComponentOptions.buildStringOption({ defaultValue: 'c0' })\r\n  };\r\n\r\n  private index: number;\r\n\r\n  /**\r\n   * Creates a new Aggregate component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Aggregate component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IAggregateOptions, bindings?: IComponentBindings) {\r\n    super(element, Aggregate.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Aggregate, options);\r\n\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.querySuccess, (args: IQuerySuccessEventArgs) => this.handleQuerySuccess(args));\r\n    $$(this.element).hide();\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\r\n    var request: IGroupByRequest = {\r\n      field: <string>this.options.field,\r\n      maximumNumberOfValues: 0,\r\n      computedFields: [\r\n        {\r\n          field: <string>this.options.field,\r\n          operation: this.options.operation\r\n        }\r\n      ]\r\n    };\r\n\r\n    this.index = args.queryBuilder.groupByRequests.length;\r\n    args.queryBuilder.groupByRequests.push(request);\r\n  }\r\n\r\n  private handleQuerySuccess(args: IQuerySuccessEventArgs) {\r\n    if (_.isNumber(this.index) && args.results.groupByResults.length != 0) {\r\n      var gbr = args.results.groupByResults[this.index];\r\n      var aggregate = gbr.globalComputedFieldResults[0];\r\n      $$(this.element).text(Globalize.format(aggregate, this.options.format));\r\n      $$(this.element).show();\r\n    } else {\r\n      $$(this.element).hide();\r\n    }\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(Aggregate);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Aggregate/Aggregate.ts"],"sourceRoot":""}