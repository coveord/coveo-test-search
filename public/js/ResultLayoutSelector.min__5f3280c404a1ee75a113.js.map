{"version":3,"sources":["ResultLayoutSelector.min__5f3280c404a1ee75a113.js","./src/ui/ResultLayoutSelector/ResultLayoutSelector.ts","./src/ui/ResponsiveComponents/ResponsiveResultLayout.ts"],"names":["webpackJsonpCoveo__temporary","197","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","defaultLayout","element","options","bindings","ResultLayoutSelector","ID","ComponentOptions","initComponentOptions","currentActiveLayouts","bind","onQueryState","MODEL_EVENTS","CHANGE_ONE","QUERY_STATE_ATTRIBUTES","LAYOUT","handleQueryStateChanged","onRootElement","QueryEvents","querySuccess","args","handleQuerySuccess","queryError","handleQueryError","resultLayoutSection","$$","closest","oneRootElement","InitializationEvents","afterComponentsInitialization","populate","afterInitialization","ResponsiveResultLayout","init","root","_this","get","enumerable","configurable","changeLayout","layout","Assert","check","isLayoutDisplayedByButton","currentLayout","getModelValue","setModelValue","lastResults","queryController","getLastResults","setLayout","usageAnalytics","logCustomEvent","analyticsActionCauseList","resultsLayoutChange","resultsLayoutChangeTo","logSearchEvent","firstQuery","executeQuery","getCurrentLayout","disableLayouts","layouts","Utils","isNonEmptyArray","each","disableLayout","remainingValidLayouts","difference","keys","isEmpty","logger","error","firstPossibleValidLayout","enableLayout","newLayout","contains","enableLayouts","hideButton","allResultLists","resultLists","find","resultList","showButton","updateSelectorAppearance","searchInterface","getComponents","btn","button","el","addClass","visible","removeClass","results","setAttribute","toString","trigger","ResultListEvents","hasNoResults","length","shouldShowSelector","show","hide","modelLayout","l","undefined","populateArgs","ResultLayoutEvents","populateResultLayout","uniq","map","toLowerCase","validLayouts","addButton","className","caption","append","icon","SVGIcons","icons","SVGDom","addClassToSVGInContainer","prepend","selectAction","AccessibleButton","withElement","withLabel","withSelectAction","withOwner","build","isCurrentLayout","toggleClass","enabled","elem","queryStateModel","QueryStateModel","attributesEnum","val","set","filter","activeLayout","aliases","doExport","exportGlobally","ResultLayout","mobileLayouts","buildListOption","defaultValue","tabletLayouts","desktopLayouts","Component","Initialization","registerAutoCreateComponent","655","656","coveoRoot","responsiveDropdown","SearchInterface","component","computeCssClassName","Logger","trace","ResponsiveComponentsManager","register","registerComponent","accept","resultLayout","handleResizeEvent","needSmallMode","enableAndDisableLayouts","needMediumMode","layoutsToDisable","layoutsToEnable","intersection","responsiveComponents","getResponsiveMode","width","getSmallScreenWidth","getMediumScreenWidth"],"mappings":"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","file":"ResultLayoutSelector.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([40],{\n\n/***/ 197:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(655);\r\nvar underscore_1 = __webpack_require__(0);\r\nvar InitializationEvents_1 = __webpack_require__(17);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar ResultLayoutEvents_1 = __webpack_require__(129);\r\nvar ResultListEvents_1 = __webpack_require__(29);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar Model_1 = __webpack_require__(18);\r\nvar QueryStateModel_1 = __webpack_require__(13);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar SVGDom_1 = __webpack_require__(16);\r\nvar SVGIcons_1 = __webpack_require__(12);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar ResponsiveResultLayout_1 = __webpack_require__(656);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nexports.defaultLayout = 'list';\r\n/**\r\n * The ResultLayoutSelector component allows the end user to switch between multiple {@link ResultList} components that have\r\n * different {@link ResultList.options.layout} values.\r\n *\r\n * This component automatically populates itself with buttons to switch between the ResultList components that have a\r\n * valid layout value (see the {@link ValidLayout} type).\r\n *\r\n * See also the [Result Layouts](https://docs.coveo.com/en/360/) documentation.\r\n *\r\n * @availablesince [February 2018 Release (v2.3826.10)](https://docs.coveo.com/en/410/#february-2018-release-v2382610)\r\n */\r\nvar ResultLayoutSelector = /** @class */ (function (_super) {\r\n    __extends(ResultLayoutSelector, _super);\r\n    /**\r\n     * Creates a new ResultLayoutSelector component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the ResultLayout component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function ResultLayoutSelector(element, options, bindings) {\r\n        var _this = _super.call(this, element, ResultLayoutSelector.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ResultLayoutSelector, options);\r\n        _this.currentActiveLayouts = {};\r\n        _this.bind.onQueryState(Model_1.MODEL_EVENTS.CHANGE_ONE, QueryStateModel_1.QUERY_STATE_ATTRIBUTES.LAYOUT, _this.handleQueryStateChanged.bind(_this));\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function (args) { return _this.handleQuerySuccess(args); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.queryError, function (args) { return _this.handleQueryError(args); });\r\n        _this.resultLayoutSection = Dom_1.$$(_this.element).closest('.coveo-result-layout-section');\r\n        _this.bind.oneRootElement(InitializationEvents_1.InitializationEvents.afterComponentsInitialization, function () { return _this.populate(); });\r\n        _this.bind.oneRootElement(InitializationEvents_1.InitializationEvents.afterInitialization, function () { return _this.handleQueryStateChanged(); });\r\n        ResponsiveResultLayout_1.ResponsiveResultLayout.init(_this.root, _this, {});\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ResultLayoutSelector.prototype, \"activeLayouts\", {\r\n        get: function () {\r\n            return this.currentActiveLayouts;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Changes the current layout.\r\n     *\r\n     * Also logs a `resultLayoutChange` event in the usage analytics with the new layout as metadeta.\r\n     *\r\n     * Triggers a new query.\r\n     *\r\n     * @param layout The new layout. The page must contain a valid {@link ResultList} component with a matching\r\n     * {@link ResultList.options.layout} value for this method to work.\r\n     */\r\n    ResultLayoutSelector.prototype.changeLayout = function (layout) {\r\n        Assert_1.Assert.check(this.isLayoutDisplayedByButton(layout), 'Layout not available or invalid');\r\n        if (layout !== this.currentLayout || this.getModelValue() === '') {\r\n            this.setModelValue(layout);\r\n            var lastResults = this.queryController.getLastResults();\r\n            this.setLayout(layout, lastResults);\r\n            if (lastResults) {\r\n                this.usageAnalytics.logCustomEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.resultsLayoutChange, {\r\n                    resultsLayoutChangeTo: layout\r\n                }, this.element);\r\n            }\r\n            else {\r\n                this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.resultsLayoutChange, {\r\n                    resultsLayoutChangeTo: layout\r\n                });\r\n                if (!this.queryController.firstQuery) {\r\n                    this.queryController.executeQuery();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets the current layout (`list`, `card` or `table`).\r\n     * @returns {string} The current current layout.\r\n     */\r\n    ResultLayoutSelector.prototype.getCurrentLayout = function () {\r\n        return this.currentLayout;\r\n    };\r\n    ResultLayoutSelector.prototype.disableLayouts = function (layouts) {\r\n        var _this = this;\r\n        if (Utils_1.Utils.isNonEmptyArray(layouts)) {\r\n            underscore_1.each(layouts, function (layout) { return _this.disableLayout(layout); });\r\n            var remainingValidLayouts = underscore_1.difference(underscore_1.keys(this.currentActiveLayouts), layouts);\r\n            if (!underscore_1.isEmpty(remainingValidLayouts)) {\r\n                var newLayout = underscore_1.contains(remainingValidLayouts, this.currentLayout) ? this.currentLayout : remainingValidLayouts[0];\r\n                this.changeLayout(newLayout);\r\n            }\r\n            else {\r\n                this.logger.error('Cannot disable the last valid layout ... Re-enabling the first one possible');\r\n                var firstPossibleValidLayout = underscore_1.keys(this.currentActiveLayouts)[0];\r\n                this.enableLayout(firstPossibleValidLayout);\r\n                this.setLayout(firstPossibleValidLayout);\r\n            }\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.enableLayouts = function (layouts) {\r\n        var _this = this;\r\n        underscore_1.each(layouts, function (layout) {\r\n            _this.enableLayout(layout);\r\n        });\r\n    };\r\n    ResultLayoutSelector.prototype.disableLayout = function (layout) {\r\n        if (this.isLayoutDisplayedByButton(layout)) {\r\n            this.hideButton(layout);\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.enableLayout = function (layout) {\r\n        var allResultLists = this.resultLists;\r\n        var atLeastOneResultListCanShowLayout = underscore_1.find(allResultLists, function (resultList) { return resultList.options.layout == layout; });\r\n        if (atLeastOneResultListCanShowLayout && this.isLayoutDisplayedByButton(layout)) {\r\n            this.showButton(layout);\r\n            this.updateSelectorAppearance();\r\n        }\r\n    };\r\n    Object.defineProperty(ResultLayoutSelector.prototype, \"resultLists\", {\r\n        get: function () {\r\n            return this.searchInterface.getComponents('ResultList');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ResultLayoutSelector.prototype.hideButton = function (layout) {\r\n        if (this.isLayoutDisplayedByButton(layout)) {\r\n            var btn = this.currentActiveLayouts[layout].button;\r\n            Dom_1.$$(btn.el).addClass('coveo-hidden');\r\n            btn.visible = false;\r\n            this.updateSelectorAppearance();\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.showButton = function (layout) {\r\n        if (this.isLayoutDisplayedByButton(layout)) {\r\n            var btn = this.currentActiveLayouts[layout].button;\r\n            Dom_1.$$(btn.el).removeClass('coveo-hidden');\r\n            btn.visible = true;\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.setLayout = function (layout, results) {\r\n        if (layout) {\r\n            if (this.currentLayout) {\r\n                Dom_1.$$(this.currentActiveLayouts[this.currentLayout].button.el).removeClass('coveo-selected');\r\n                Dom_1.$$(this.currentActiveLayouts[this.currentLayout].button.el).setAttribute('aria-pressed', false.toString());\r\n            }\r\n            Dom_1.$$(this.currentActiveLayouts[layout].button.el).addClass('coveo-selected');\r\n            Dom_1.$$(this.currentActiveLayouts[layout].button.el).setAttribute('aria-pressed', true.toString());\r\n            this.currentLayout = layout;\r\n            Dom_1.$$(this.element).trigger(ResultListEvents_1.ResultListEvents.changeLayout, {\r\n                layout: layout,\r\n                results: results\r\n            });\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.handleQuerySuccess = function (args) {\r\n        this.hasNoResults = args.results.results.length == 0;\r\n        if (this.shouldShowSelector()) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.handleQueryStateChanged = function (args) {\r\n        var modelLayout = this.getModelValue();\r\n        var newLayout = underscore_1.find(underscore_1.keys(this.currentActiveLayouts), function (l) { return l === modelLayout; });\r\n        if (newLayout !== undefined) {\r\n            this.setLayout(newLayout);\r\n        }\r\n        else {\r\n            this.setLayout(underscore_1.keys(this.currentActiveLayouts)[0]);\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.handleQueryError = function (args) {\r\n        this.hasNoResults = true;\r\n        this.hide();\r\n    };\r\n    ResultLayoutSelector.prototype.updateSelectorAppearance = function () {\r\n        if (this.shouldShowSelector()) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.populate = function () {\r\n        var _this = this;\r\n        var populateArgs = { layouts: [] };\r\n        Dom_1.$$(this.root).trigger(ResultLayoutEvents_1.ResultLayoutEvents.populateResultLayout, populateArgs);\r\n        var layouts = underscore_1.uniq(populateArgs.layouts.map(function (layout) { return layout.toLowerCase(); }));\r\n        underscore_1.each(layouts, function (layout) { return Assert_1.Assert.check(underscore_1.contains(ResultLayoutSelector.validLayouts, layout), 'Invalid layout'); });\r\n        if (!underscore_1.isEmpty(layouts)) {\r\n            underscore_1.each(layouts, function (layout) { return _this.addButton(layout); });\r\n            if (!this.shouldShowSelector()) {\r\n                this.hide();\r\n            }\r\n        }\r\n    };\r\n    ResultLayoutSelector.prototype.addButton = function (layout) {\r\n        var _this = this;\r\n        var btn = Dom_1.$$('span', {\r\n            className: 'coveo-result-layout-selector'\r\n        });\r\n        var caption = Dom_1.$$('span', { className: 'coveo-result-layout-selector-caption' }, Strings_1.l(layout));\r\n        btn.append(caption.el);\r\n        var icon = Dom_1.$$('span', { className: \"coveo-icon coveo-\" + layout + \"-layout-icon\" }, SVGIcons_1.SVGIcons.icons[layout + \"Layout\"]);\r\n        SVGDom_1.SVGDom.addClassToSVGInContainer(icon.el, \"coveo-\" + layout + \"-svg\");\r\n        btn.prepend(icon.el);\r\n        var selectAction = function () { return _this.changeLayout(layout); };\r\n        new AccessibleButton_1.AccessibleButton()\r\n            .withElement(btn)\r\n            .withLabel(Strings_1.l('DisplayResultsAs', Strings_1.l(layout)))\r\n            .withSelectAction(selectAction)\r\n            .withOwner(this.bind)\r\n            .build();\r\n        var isCurrentLayout = layout === this.currentLayout;\r\n        btn.toggleClass('coveo-selected', isCurrentLayout);\r\n        btn.setAttribute('aria-pressed', isCurrentLayout.toString());\r\n        Dom_1.$$(this.element).append(btn.el);\r\n        this.currentActiveLayouts[layout] = {\r\n            button: {\r\n                visible: true,\r\n                el: btn.el\r\n            },\r\n            enabled: true\r\n        };\r\n    };\r\n    ResultLayoutSelector.prototype.hide = function () {\r\n        var elem = this.resultLayoutSection || this.element;\r\n        Dom_1.$$(elem).addClass('coveo-result-layout-hidden');\r\n    };\r\n    ResultLayoutSelector.prototype.show = function () {\r\n        var elem = this.resultLayoutSection || this.element;\r\n        Dom_1.$$(elem).removeClass('coveo-result-layout-hidden');\r\n    };\r\n    ResultLayoutSelector.prototype.getModelValue = function () {\r\n        return this.queryStateModel.get(QueryStateModel_1.QueryStateModel.attributesEnum.layout);\r\n    };\r\n    ResultLayoutSelector.prototype.setModelValue = function (val) {\r\n        this.queryStateModel.set(QueryStateModel_1.QueryStateModel.attributesEnum.layout, val);\r\n    };\r\n    ResultLayoutSelector.prototype.shouldShowSelector = function () {\r\n        return (underscore_1.keys(this.currentActiveLayouts).length > 1 &&\r\n            underscore_1.filter(this.currentActiveLayouts, function (activeLayout) { return activeLayout.button.visible; }).length > 1 &&\r\n            !this.hasNoResults);\r\n    };\r\n    ResultLayoutSelector.prototype.isLayoutDisplayedByButton = function (layout) {\r\n        return underscore_1.contains(underscore_1.keys(this.currentActiveLayouts), layout);\r\n    };\r\n    ResultLayoutSelector.ID = 'ResultLayoutSelector';\r\n    ResultLayoutSelector.aliases = ['ResultLayout'];\r\n    ResultLayoutSelector.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            ResultLayoutSelector: ResultLayoutSelector,\r\n            ResultLayout: ResultLayoutSelector\r\n        });\r\n    };\r\n    ResultLayoutSelector.validLayouts = ['list', 'card', 'table'];\r\n    /**\r\n     * The component options\r\n     * @componentOptions\r\n     */\r\n    ResultLayoutSelector.options = {\r\n        /**\r\n         * Specifies the layouts that should be available when the search page is displayed in mobile mode.\r\n         *\r\n         * By default, the mobile mode breakpoint is at 480 px screen width.\r\n         *\r\n         * To change this default value, use the [responsiveSmallBreakpoint]{@link SearchInterface.options.responsiveSmallBreakpoint} option.\r\n         *\r\n         * When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.\r\n         *\r\n         * The possible values for layouts are `list`, `card`, `table`.\r\n         *\r\n         * The default value is `card`, `table`.\r\n         */\r\n        mobileLayouts: ComponentOptions_1.ComponentOptions.buildListOption({ defaultValue: ['card', 'table'] }),\r\n        /**\r\n         * Specifies the layouts that should be available when the search page is displayed in tablet mode.\r\n         *\r\n         * By default, the tablet mode breakpoint is at 800 px screen width.\r\n         *\r\n         * To change this default value, use the [responsiveMediumBreakpoint]{@link SearchInterface.options.responsiveMediumBreakpoint} option.\r\n         *\r\n         *  When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.\r\n         *\r\n         * The possible values for layouts are `list`, `card`, `table`.\r\n         *\r\n         * The default value is `list`, `card`, `table`.\r\n         */\r\n        tabletLayouts: ComponentOptions_1.ComponentOptions.buildListOption({ defaultValue: ['list', 'card', 'table'] }),\r\n        /**\r\n         * Specifies the layouts that should be available when the search page is displayed in desktop mode.\r\n         *\r\n         * By default, the desktop mode breakpoint is any screen size over 800 px.\r\n         *\r\n         * To change this default value, use the [responsiveMediumBreakpoint]{@link SearchInterface.options.responsiveMediumBreakpoint} option.\r\n         *\r\n         *  When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.\r\n         *\r\n         * The possible values for layouts are `list`, `card`, `table`.\r\n         *\r\n         * The default value is `list`, `card`, `table`.\r\n         */\r\n        desktopLayouts: ComponentOptions_1.ComponentOptions.buildListOption({ defaultValue: ['list', 'card', 'table'] })\r\n    };\r\n    return ResultLayoutSelector;\r\n}(Component_1.Component));\r\nexports.ResultLayoutSelector = ResultLayoutSelector;\r\nInitialization_1.Initialization.registerAutoCreateComponent(ResultLayoutSelector);\r\n\n\n/***/ }),\n\n/***/ 655:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 656:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar underscore_1 = __webpack_require__(0);\r\nvar Logger_1 = __webpack_require__(9);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ResultLayoutSelector_1 = __webpack_require__(197);\r\nvar SearchInterface_1 = __webpack_require__(19);\r\nvar ResponsiveComponentsManager_1 = __webpack_require__(60);\r\nvar ResponsiveResultLayout = /** @class */ (function () {\r\n    function ResponsiveResultLayout(coveoRoot, ID, options, responsiveDropdown) {\r\n        this.coveoRoot = coveoRoot;\r\n        this.ID = ID;\r\n        this.searchInterface = Component_1.Component.get(this.coveoRoot.el, SearchInterface_1.SearchInterface, false);\r\n    }\r\n    ResponsiveResultLayout.init = function (root, component, options) {\r\n        if (!Dom_1.$$(root).find(\".\" + Component_1.Component.computeCssClassName(ResultLayoutSelector_1.ResultLayoutSelector))) {\r\n            var logger = new Logger_1.Logger('ResponsiveResultLayout');\r\n            logger.trace('No ResultLayout component found : Cannot instantiate ResponsiveResultLayout');\r\n            return;\r\n        }\r\n        ResponsiveComponentsManager_1.ResponsiveComponentsManager.register(ResponsiveResultLayout, Dom_1.$$(root), ResultLayoutSelector_1.ResultLayoutSelector.ID, component, options);\r\n    };\r\n    ResponsiveResultLayout.prototype.registerComponent = function (accept) {\r\n        if (accept instanceof ResultLayoutSelector_1.ResultLayoutSelector) {\r\n            this.resultLayout = accept;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    ResponsiveResultLayout.prototype.handleResizeEvent = function () {\r\n        if (this.needSmallMode()) {\r\n            this.enableAndDisableLayouts(this.resultLayout.options.mobileLayouts);\r\n        }\r\n        else if (this.needMediumMode()) {\r\n            this.enableAndDisableLayouts(this.resultLayout.options.tabletLayouts);\r\n        }\r\n        else {\r\n            this.enableAndDisableLayouts(this.resultLayout.options.desktopLayouts);\r\n        }\r\n    };\r\n    ResponsiveResultLayout.prototype.enableAndDisableLayouts = function (validLayouts) {\r\n        var layoutsToDisable = underscore_1.difference(ResultLayoutSelector_1.ResultLayoutSelector.validLayouts, validLayouts);\r\n        var layoutsToEnable = underscore_1.intersection(ResultLayoutSelector_1.ResultLayoutSelector.validLayouts, validLayouts);\r\n        this.resultLayout.disableLayouts(layoutsToDisable);\r\n        this.resultLayout.enableLayouts(layoutsToEnable);\r\n    };\r\n    ResponsiveResultLayout.prototype.needSmallMode = function () {\r\n        switch (this.searchInterface.responsiveComponents.getResponsiveMode()) {\r\n            case 'small':\r\n                return true;\r\n            case 'auto':\r\n                return this.coveoRoot.width() <= this.searchInterface.responsiveComponents.getSmallScreenWidth();\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    ResponsiveResultLayout.prototype.needMediumMode = function () {\r\n        switch (this.searchInterface.responsiveComponents.getResponsiveMode()) {\r\n            case 'medium':\r\n                return true;\r\n            case 'auto':\r\n                return this.coveoRoot.width() <= this.searchInterface.responsiveComponents.getMediumScreenWidth();\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    return ResponsiveResultLayout;\r\n}());\r\nexports.ResponsiveResultLayout = ResponsiveResultLayout;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// ResultLayoutSelector.min__5f3280c404a1ee75a113.js","import 'styling/_ResultLayoutSelector';\r\nimport { contains, difference, each, filter, find, isEmpty, keys, uniq } from 'underscore';\r\nimport { InitializationEvents } from '../../events/InitializationEvents';\r\nimport { IQueryErrorEventArgs, IQuerySuccessEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { IResultLayoutPopulateArgs, ResultLayoutEvents } from '../../events/ResultLayoutEvents';\r\nimport { IChangeLayoutEventArgs, ResultListEvents } from '../../events/ResultListEvents';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { IAttributesChangedEventArg, MODEL_EVENTS } from '../../models/Model';\r\nimport { QueryStateModel, QUERY_STATE_ATTRIBUTES } from '../../models/QueryStateModel';\r\nimport { IQueryResults } from '../../rest/QueryResults';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { l } from '../../strings/Strings';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { SVGDom } from '../../utils/SVGDom';\r\nimport { SVGIcons } from '../../utils/SVGIcons';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { analyticsActionCauseList, IAnalyticsResultsLayoutChange } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { ResponsiveResultLayout } from '../ResponsiveComponents/ResponsiveResultLayout';\r\nimport { ValidLayout } from './ValidLayout';\r\nimport ResultListModule = require('../ResultList/ResultList');\r\nimport { AccessibleButton } from '../../utils/AccessibleButton';\r\n\r\nexport interface IActiveLayouts {\r\n  button: {\r\n    el: HTMLElement;\r\n    visible: boolean;\r\n  };\r\n  enabled: boolean;\r\n}\r\n\r\nexport interface IResultLayoutOptions {\r\n  mobileLayouts: string[];\r\n  tabletLayouts: string[];\r\n  desktopLayouts: string[];\r\n}\r\n\r\nexport const defaultLayout: ValidLayout = 'list';\r\n\r\n/**\r\n * The ResultLayoutSelector component allows the end user to switch between multiple {@link ResultList} components that have\r\n * different {@link ResultList.options.layout} values.\r\n *\r\n * This component automatically populates itself with buttons to switch between the ResultList components that have a\r\n * valid layout value (see the {@link ValidLayout} type).\r\n *\r\n * See also the [Result Layouts](https://docs.coveo.com/en/360/) documentation.\r\n *\r\n * @availablesince [February 2018 Release (v2.3826.10)](https://docs.coveo.com/en/410/#february-2018-release-v2382610)\r\n */\r\nexport class ResultLayoutSelector extends Component {\r\n  static ID = 'ResultLayoutSelector';\r\n  static aliases = ['ResultLayout'];\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      ResultLayoutSelector: ResultLayoutSelector,\r\n      ResultLayout: ResultLayoutSelector\r\n    });\r\n  };\r\n\r\n  public static validLayouts: ValidLayout[] = ['list', 'card', 'table'];\r\n\r\n  public currentLayout: string;\r\n\r\n  private currentActiveLayouts: { [key: string]: IActiveLayouts };\r\n\r\n  private resultLayoutSection: HTMLElement;\r\n  private hasNoResults: boolean;\r\n\r\n  /**\r\n   * The component options\r\n   * @componentOptions\r\n   */\r\n  static options: IResultLayoutOptions = {\r\n    /**\r\n     * Specifies the layouts that should be available when the search page is displayed in mobile mode.\r\n     *\r\n     * By default, the mobile mode breakpoint is at 480 px screen width.\r\n     *\r\n     * To change this default value, use the [responsiveSmallBreakpoint]{@link SearchInterface.options.responsiveSmallBreakpoint} option.\r\n     *\r\n     * When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.\r\n     *\r\n     * The possible values for layouts are `list`, `card`, `table`.\r\n     *\r\n     * The default value is `card`, `table`.\r\n     */\r\n    mobileLayouts: ComponentOptions.buildListOption<ValidLayout>({ defaultValue: ['card', 'table'] }),\r\n    /**\r\n     * Specifies the layouts that should be available when the search page is displayed in tablet mode.\r\n     *\r\n     * By default, the tablet mode breakpoint is at 800 px screen width.\r\n     *\r\n     * To change this default value, use the [responsiveMediumBreakpoint]{@link SearchInterface.options.responsiveMediumBreakpoint} option.\r\n     *\r\n     *  When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.\r\n     *\r\n     * The possible values for layouts are `list`, `card`, `table`.\r\n     *\r\n     * The default value is `list`, `card`, `table`.\r\n     */\r\n    tabletLayouts: ComponentOptions.buildListOption<ValidLayout>({ defaultValue: ['list', 'card', 'table'] }),\r\n    /**\r\n     * Specifies the layouts that should be available when the search page is displayed in desktop mode.\r\n     *\r\n     * By default, the desktop mode breakpoint is any screen size over 800 px.\r\n     *\r\n     * To change this default value, use the [responsiveMediumBreakpoint]{@link SearchInterface.options.responsiveMediumBreakpoint} option.\r\n     *\r\n     *  When the breakpoint is reached, layouts that are not specified becomes inactive and the linked result list will be disabled.\r\n     *\r\n     * The possible values for layouts are `list`, `card`, `table`.\r\n     *\r\n     * The default value is `list`, `card`, `table`.\r\n     */\r\n    desktopLayouts: ComponentOptions.buildListOption<ValidLayout>({ defaultValue: ['list', 'card', 'table'] })\r\n  };\r\n\r\n  /**\r\n   * Creates a new ResultLayoutSelector component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the ResultLayout component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IResultLayoutOptions, bindings?: IComponentBindings) {\r\n    super(element, ResultLayoutSelector.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, ResultLayoutSelector, options);\r\n\r\n    this.currentActiveLayouts = {};\r\n\r\n    this.bind.onQueryState(MODEL_EVENTS.CHANGE_ONE, QUERY_STATE_ATTRIBUTES.LAYOUT, this.handleQueryStateChanged.bind(this));\r\n    this.bind.onRootElement(QueryEvents.querySuccess, (args: IQuerySuccessEventArgs) => this.handleQuerySuccess(args));\r\n    this.bind.onRootElement(QueryEvents.queryError, (args: IQueryErrorEventArgs) => this.handleQueryError(args));\r\n\r\n    this.resultLayoutSection = $$(this.element).closest('.coveo-result-layout-section');\r\n\r\n    this.bind.oneRootElement(InitializationEvents.afterComponentsInitialization, () => this.populate());\r\n    this.bind.oneRootElement(InitializationEvents.afterInitialization, () => this.handleQueryStateChanged());\r\n\r\n    ResponsiveResultLayout.init(this.root, this, {});\r\n  }\r\n\r\n  public get activeLayouts(): { [key: string]: IActiveLayouts } {\r\n    return this.currentActiveLayouts;\r\n  }\r\n\r\n  /**\r\n   * Changes the current layout.\r\n   *\r\n   * Also logs a `resultLayoutChange` event in the usage analytics with the new layout as metadeta.\r\n   *\r\n   * Triggers a new query.\r\n   *\r\n   * @param layout The new layout. The page must contain a valid {@link ResultList} component with a matching\r\n   * {@link ResultList.options.layout} value for this method to work.\r\n   */\r\n  public changeLayout(layout: ValidLayout) {\r\n    Assert.check(this.isLayoutDisplayedByButton(layout), 'Layout not available or invalid');\r\n\r\n    if (layout !== this.currentLayout || this.getModelValue() === '') {\r\n      this.setModelValue(layout);\r\n      const lastResults = this.queryController.getLastResults();\r\n      this.setLayout(layout, lastResults);\r\n      if (lastResults) {\r\n        this.usageAnalytics.logCustomEvent<IAnalyticsResultsLayoutChange>(\r\n          analyticsActionCauseList.resultsLayoutChange,\r\n          {\r\n            resultsLayoutChangeTo: layout\r\n          },\r\n          this.element\r\n        );\r\n      } else {\r\n        this.usageAnalytics.logSearchEvent<IAnalyticsResultsLayoutChange>(analyticsActionCauseList.resultsLayoutChange, {\r\n          resultsLayoutChangeTo: layout\r\n        });\r\n        if (!this.queryController.firstQuery) {\r\n          this.queryController.executeQuery();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current layout (`list`, `card` or `table`).\r\n   * @returns {string} The current current layout.\r\n   */\r\n  public getCurrentLayout() {\r\n    return this.currentLayout;\r\n  }\r\n\r\n  public disableLayouts(layouts: ValidLayout[]) {\r\n    if (Utils.isNonEmptyArray(layouts)) {\r\n      each(layouts, layout => this.disableLayout(layout));\r\n\r\n      let remainingValidLayouts = difference(keys(this.currentActiveLayouts), layouts);\r\n      if (!isEmpty(remainingValidLayouts)) {\r\n        const newLayout = contains(remainingValidLayouts, this.currentLayout) ? this.currentLayout : remainingValidLayouts[0];\r\n        this.changeLayout(<ValidLayout>newLayout);\r\n      } else {\r\n        this.logger.error('Cannot disable the last valid layout ... Re-enabling the first one possible');\r\n        let firstPossibleValidLayout = <ValidLayout>keys(this.currentActiveLayouts)[0];\r\n        this.enableLayout(firstPossibleValidLayout);\r\n        this.setLayout(firstPossibleValidLayout);\r\n      }\r\n    }\r\n  }\r\n\r\n  public enableLayouts(layouts: ValidLayout[]) {\r\n    each(layouts, layout => {\r\n      this.enableLayout(layout);\r\n    });\r\n  }\r\n\r\n  private disableLayout(layout: ValidLayout) {\r\n    if (this.isLayoutDisplayedByButton(layout)) {\r\n      this.hideButton(layout);\r\n    }\r\n  }\r\n\r\n  private enableLayout(layout: ValidLayout) {\r\n    const allResultLists = this.resultLists;\r\n    const atLeastOneResultListCanShowLayout = find(allResultLists, resultList => resultList.options.layout == layout);\r\n    if (atLeastOneResultListCanShowLayout && this.isLayoutDisplayedByButton(layout)) {\r\n      this.showButton(layout);\r\n      this.updateSelectorAppearance();\r\n    }\r\n  }\r\n\r\n  private get resultLists(): ResultListModule.ResultList[] {\r\n    return this.searchInterface.getComponents('ResultList');\r\n  }\r\n\r\n  private hideButton(layout: ValidLayout) {\r\n    if (this.isLayoutDisplayedByButton(layout)) {\r\n      let btn = this.currentActiveLayouts[<string>layout].button;\r\n      $$(btn.el).addClass('coveo-hidden');\r\n      btn.visible = false;\r\n      this.updateSelectorAppearance();\r\n    }\r\n  }\r\n\r\n  private showButton(layout: ValidLayout) {\r\n    if (this.isLayoutDisplayedByButton(layout)) {\r\n      let btn = this.currentActiveLayouts[<string>layout].button;\r\n      $$(btn.el).removeClass('coveo-hidden');\r\n      btn.visible = true;\r\n    }\r\n  }\r\n\r\n  private setLayout(layout: ValidLayout, results?: IQueryResults) {\r\n    if (layout) {\r\n      if (this.currentLayout) {\r\n        $$(this.currentActiveLayouts[this.currentLayout].button.el).removeClass('coveo-selected');\r\n        $$(this.currentActiveLayouts[this.currentLayout].button.el).setAttribute('aria-pressed', false.toString());\r\n      }\r\n      $$(this.currentActiveLayouts[layout].button.el).addClass('coveo-selected');\r\n      $$(this.currentActiveLayouts[layout].button.el).setAttribute('aria-pressed', true.toString());\r\n      this.currentLayout = layout;\r\n      $$(this.element).trigger(ResultListEvents.changeLayout, <IChangeLayoutEventArgs>{\r\n        layout: layout,\r\n        results: results\r\n      });\r\n    }\r\n  }\r\n\r\n  private handleQuerySuccess(args: IQuerySuccessEventArgs) {\r\n    this.hasNoResults = args.results.results.length == 0;\r\n    if (this.shouldShowSelector()) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  private handleQueryStateChanged(args?: IAttributesChangedEventArg) {\r\n    const modelLayout = this.getModelValue();\r\n    const newLayout = find(keys(this.currentActiveLayouts), l => l === modelLayout);\r\n    if (newLayout !== undefined) {\r\n      this.setLayout(<ValidLayout>newLayout);\r\n    } else {\r\n      this.setLayout(<ValidLayout>keys(this.currentActiveLayouts)[0]);\r\n    }\r\n  }\r\n\r\n  private handleQueryError(args: IQueryErrorEventArgs) {\r\n    this.hasNoResults = true;\r\n    this.hide();\r\n  }\r\n\r\n  private updateSelectorAppearance() {\r\n    if (this.shouldShowSelector()) {\r\n      this.show();\r\n    } else {\r\n      this.hide();\r\n    }\r\n  }\r\n\r\n  private populate() {\r\n    let populateArgs: IResultLayoutPopulateArgs = { layouts: [] };\r\n    $$(this.root).trigger(ResultLayoutEvents.populateResultLayout, populateArgs);\r\n    const layouts = uniq(populateArgs.layouts.map(layout => layout.toLowerCase()));\r\n\r\n    each(layouts, layout => Assert.check(contains(ResultLayoutSelector.validLayouts, layout), 'Invalid layout'));\r\n    if (!isEmpty(layouts)) {\r\n      each(layouts, layout => this.addButton(layout));\r\n      if (!this.shouldShowSelector()) {\r\n        this.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  private addButton(layout: string) {\r\n    const btn = $$('span', {\r\n      className: 'coveo-result-layout-selector'\r\n    });\r\n    const caption = $$('span', { className: 'coveo-result-layout-selector-caption' }, l(layout));\r\n    btn.append(caption.el);\r\n\r\n    const icon = $$('span', { className: `coveo-icon coveo-${layout}-layout-icon` }, SVGIcons.icons[`${layout}Layout`]);\r\n    SVGDom.addClassToSVGInContainer(icon.el, `coveo-${layout}-svg`);\r\n    btn.prepend(icon.el);\r\n\r\n    const selectAction = () => this.changeLayout(<ValidLayout>layout);\r\n\r\n    new AccessibleButton()\r\n      .withElement(btn)\r\n      .withLabel(l('DisplayResultsAs', l(layout)))\r\n      .withSelectAction(selectAction)\r\n      .withOwner(this.bind)\r\n      .build();\r\n\r\n    const isCurrentLayout = layout === this.currentLayout;\r\n    btn.toggleClass('coveo-selected', isCurrentLayout);\r\n    btn.setAttribute('aria-pressed', isCurrentLayout.toString());\r\n\r\n    $$(this.element).append(btn.el);\r\n    this.currentActiveLayouts[layout] = {\r\n      button: {\r\n        visible: true,\r\n        el: btn.el\r\n      },\r\n      enabled: true\r\n    };\r\n  }\r\n\r\n  private hide() {\r\n    const elem = this.resultLayoutSection || this.element;\r\n    $$(elem).addClass('coveo-result-layout-hidden');\r\n  }\r\n\r\n  private show() {\r\n    const elem = this.resultLayoutSection || this.element;\r\n    $$(elem).removeClass('coveo-result-layout-hidden');\r\n  }\r\n\r\n  private getModelValue(): string {\r\n    return this.queryStateModel.get(QueryStateModel.attributesEnum.layout);\r\n  }\r\n\r\n  private setModelValue(val: string) {\r\n    this.queryStateModel.set(QueryStateModel.attributesEnum.layout, val);\r\n  }\r\n\r\n  private shouldShowSelector() {\r\n    return (\r\n      keys(this.currentActiveLayouts).length > 1 &&\r\n      filter(this.currentActiveLayouts, (activeLayout: IActiveLayouts) => activeLayout.button.visible).length > 1 &&\r\n      !this.hasNoResults\r\n    );\r\n  }\r\n\r\n  private isLayoutDisplayedByButton(layout: ValidLayout) {\r\n    return contains(keys(this.currentActiveLayouts), layout);\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(ResultLayoutSelector);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ResultLayoutSelector/ResultLayoutSelector.ts","import { difference, intersection } from 'underscore';\r\nimport { Logger } from '../../misc/Logger';\r\nimport { $$, Dom } from '../../utils/Dom';\r\nimport { Component } from '../Base/Component';\r\nimport { ResultLayoutSelector } from '../ResultLayoutSelector/ResultLayoutSelector';\r\nimport { ValidLayout } from '../ResultLayoutSelector/ValidLayout';\r\nimport { SearchInterface } from '../SearchInterface/SearchInterface';\r\nimport { IResponsiveComponent, IResponsiveComponentOptions, ResponsiveComponentsManager } from './ResponsiveComponentsManager';\r\nimport { ResponsiveDropdown } from './ResponsiveDropdown/ResponsiveDropdown';\r\n\r\nexport class ResponsiveResultLayout implements IResponsiveComponent {\r\n  private searchInterface: SearchInterface;\r\n  private resultLayout: ResultLayoutSelector;\r\n\r\n  public static init(root: HTMLElement, component: ResultLayoutSelector, options: IResponsiveComponentOptions) {\r\n    if (!$$(root).find(`.${Component.computeCssClassName(ResultLayoutSelector)}`)) {\r\n      let logger = new Logger('ResponsiveResultLayout');\r\n      logger.trace('No ResultLayout component found : Cannot instantiate ResponsiveResultLayout');\r\n      return;\r\n    }\r\n    ResponsiveComponentsManager.register(ResponsiveResultLayout, $$(root), ResultLayoutSelector.ID, component, options);\r\n  }\r\n\r\n  constructor(public coveoRoot: Dom, public ID: string, options: IResponsiveComponentOptions, responsiveDropdown?: ResponsiveDropdown) {\r\n    this.searchInterface = <SearchInterface>Component.get(this.coveoRoot.el, SearchInterface, false);\r\n  }\r\n\r\n  public registerComponent(accept: Component) {\r\n    if (accept instanceof ResultLayoutSelector) {\r\n      this.resultLayout = accept;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public handleResizeEvent() {\r\n    if (this.needSmallMode()) {\r\n      this.enableAndDisableLayouts(<ValidLayout[]>this.resultLayout.options.mobileLayouts);\r\n    } else if (this.needMediumMode()) {\r\n      this.enableAndDisableLayouts(<ValidLayout[]>this.resultLayout.options.tabletLayouts);\r\n    } else {\r\n      this.enableAndDisableLayouts(<ValidLayout[]>this.resultLayout.options.desktopLayouts);\r\n    }\r\n  }\r\n\r\n  private enableAndDisableLayouts(validLayouts: ValidLayout[]) {\r\n    const layoutsToDisable = difference<any>(ResultLayoutSelector.validLayouts, validLayouts);\r\n    const layoutsToEnable = intersection<any>(ResultLayoutSelector.validLayouts, validLayouts);\r\n    this.resultLayout.disableLayouts(layoutsToDisable);\r\n    this.resultLayout.enableLayouts(layoutsToEnable);\r\n  }\r\n\r\n  private needSmallMode(): boolean {\r\n    switch (this.searchInterface.responsiveComponents.getResponsiveMode()) {\r\n      case 'small':\r\n        return true;\r\n      case 'auto':\r\n        return this.coveoRoot.width() <= this.searchInterface.responsiveComponents.getSmallScreenWidth();\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private needMediumMode(): boolean {\r\n    switch (this.searchInterface.responsiveComponents.getResponsiveMode()) {\r\n      case 'medium':\r\n        return true;\r\n      case 'auto':\r\n        return this.coveoRoot.width() <= this.searchInterface.responsiveComponents.getMediumScreenWidth();\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/ResponsiveComponents/ResponsiveResultLayout.ts"],"sourceRoot":""}