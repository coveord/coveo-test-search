{"version":3,"sources":["CardOverlay.min__5f3280c404a1ee75a113.js","./src/ui/CardOverlay/CardOverlay.ts","./src/events/CardOverlayEvents.ts"],"names":["webpackJsonpCoveo__temporary","241","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","CardOverlay","ID","ComponentOptions","initComponentOptions","parentCard","$$","closest","Assert","exists","addClass","createOverlay","createButton","closeOverlay","_this","toggleOverlay","swtch","undefined","openOverlay","overlay","hasClass","removeClass","bind","trigger","CardOverlayEvents","openCardOverlay","closeCardOverlay","className","el","overlayHeader","appendChild","overlayBody","childNodes","length","firstChild","icon","SVGIcons","icons","arrowDown","SVGDom","addClassToSVGInContainer","overlayFooter","tabindex","on","KeyboardUtils","keypressAction","KEYBOARD","ENTER","Utils","toDashCase","title","setAttribute","doExport","exportGlobally","buildLocalizedStringOption","required","localizedString","l","buildIconOption","Component","Initialization","registerAutoCreateComponent","599","600"],"mappings":"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","file":"CardOverlay.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([46],{\n\n/***/ 241:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar CardOverlayEvents_1 = __webpack_require__(599);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar KeyboardUtils_1 = __webpack_require__(25);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\n__webpack_require__(600);\r\nvar SVGIcons_1 = __webpack_require__(12);\r\nvar SVGDom_1 = __webpack_require__(16);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar Strings_1 = __webpack_require__(6);\r\n/**\r\n * The CardOverlay component displays a button that the user can click to toggle the visibility of an overlay on top of\r\n * an {@link IQueryResult}. While this component typically populates a {@link CardActionBar} component, it is actually\r\n * possible to place a CardOverlay component anywhere in any result.\r\n *\r\n * The primary purpose of the CardOverlay component is to display additional information about a result in a format that\r\n * fits well within a card result layout (see [Result Layouts](https://docs.coveo.com/en/360/)).\r\n *\r\n * When initialized, this component creates a `<div class=\"coveo-card-overlay\">` element as the last child of its parent\r\n * IQueryResult, and displays a button which toggles the visibility of the overlay.\r\n */\r\nvar CardOverlay = /** @class */ (function (_super) {\r\n    __extends(CardOverlay, _super);\r\n    /**\r\n     * Creates a new CardOverlay component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the CardOverlay component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function CardOverlay(element, options, bindings) {\r\n        var _this = _super.call(this, element, CardOverlay.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, CardOverlay, options);\r\n        _this.parentCard = Dom_1.$$(_this.element).closest('.CoveoResult');\r\n        Assert_1.Assert.exists(_this.parentCard);\r\n        Dom_1.$$(_this.parentCard).addClass('coveo-with-card-overlay');\r\n        _this.createOverlay();\r\n        _this.createButton(_this.element);\r\n        _this.closeOverlay();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Toggles the CardOverlay visibility.\r\n     *\r\n     * @param swtch Specifying a value for this parameter forces the component visibility to take the corresponding value\r\n     * (`true` for visible; `false` for hidden).\r\n     */\r\n    CardOverlay.prototype.toggleOverlay = function (swtch) {\r\n        if (swtch !== undefined) {\r\n            swtch ? this.openOverlay() : this.closeOverlay();\r\n        }\r\n        else {\r\n            if (Dom_1.$$(this.overlay).hasClass('coveo-opened')) {\r\n                this.closeOverlay();\r\n            }\r\n            else {\r\n                this.openOverlay();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Opens the CardOverlay.\r\n     *\r\n     * Also triggers the {@link CardOverlayEvents.openCardOverlay} event.\r\n     */\r\n    CardOverlay.prototype.openOverlay = function () {\r\n        Dom_1.$$(this.overlay).removeClass('coveo-hidden-for-tab-nav');\r\n        Dom_1.$$(this.overlay).addClass('coveo-opened');\r\n        Dom_1.$$(this.parentCard).addClass('coveo-card-overlay-opened');\r\n        this.bind.trigger(this.element, CardOverlayEvents_1.CardOverlayEvents.openCardOverlay);\r\n    };\r\n    /**\r\n     * Closes the CardOverlay.\r\n     *\r\n     * Also triggers the {@link CardOverlayEvents.closeCardOverlay} event.\r\n     */\r\n    CardOverlay.prototype.closeOverlay = function () {\r\n        Dom_1.$$(this.overlay).addClass('coveo-hidden-for-tab-nav');\r\n        Dom_1.$$(this.overlay).removeClass('coveo-opened');\r\n        Dom_1.$$(this.parentCard).removeClass('coveo-card-overlay-opened');\r\n        this.bind.trigger(this.element, CardOverlayEvents_1.CardOverlayEvents.closeCardOverlay);\r\n    };\r\n    CardOverlay.prototype.createOverlay = function () {\r\n        var _this = this;\r\n        this.overlay = Dom_1.$$('div', { className: 'coveo-card-overlay' }).el;\r\n        // Create header\r\n        var overlayHeader = Dom_1.$$('div', { className: 'coveo-card-overlay-header' }).el;\r\n        this.createButton(overlayHeader);\r\n        this.overlay.appendChild(overlayHeader);\r\n        // Create body\r\n        var overlayBody = Dom_1.$$('div', { className: 'coveo-card-overlay-body' }).el;\r\n        // Transfer all of element's children to the overlay\r\n        while (this.element.childNodes.length > 0) {\r\n            overlayBody.appendChild(this.element.firstChild);\r\n        }\r\n        this.overlay.appendChild(overlayBody);\r\n        // Create footer\r\n        var icon = Dom_1.$$('span', { className: 'coveo-icon coveo-open-card-overlay' }, SVGIcons_1.SVGIcons.icons.arrowDown);\r\n        SVGDom_1.SVGDom.addClassToSVGInContainer(icon.el, 'coveo-open-card-overlay-svg');\r\n        var overlayFooter = Dom_1.$$('div', { className: 'coveo-card-overlay-footer', tabindex: '0' }, icon.el);\r\n        overlayFooter.on('click', function () { return _this.toggleOverlay(false); });\r\n        this.bind.on(overlayFooter.el, 'keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, function () { return _this.toggleOverlay(false); }));\r\n        this.overlay.appendChild(overlayFooter.el);\r\n        this.parentCard.appendChild(this.overlay);\r\n    };\r\n    CardOverlay.prototype.createButton = function (element) {\r\n        var _this = this;\r\n        if (this.options.icon) {\r\n            var icon = Dom_1.$$('span', { className: 'coveo-icon ' }, SVGIcons_1.SVGIcons.icons[this.options.icon]).el;\r\n            element.appendChild(icon);\r\n            SVGDom_1.SVGDom.addClassToSVGInContainer(element, \"coveo-\" + Utils_1.Utils.toDashCase(this.options.icon) + \"-svg\");\r\n        }\r\n        element.appendChild(Dom_1.$$('span', { className: 'coveo-label' }, this.options.title).el);\r\n        element.setAttribute('tabindex', '0');\r\n        Dom_1.$$(element).on('click', function () { return _this.toggleOverlay(); });\r\n        this.bind.on(element, 'keyup', KeyboardUtils_1.KeyboardUtils.keypressAction(KeyboardUtils_1.KEYBOARD.ENTER, function () { return _this.toggleOverlay(); }));\r\n    };\r\n    CardOverlay.ID = 'CardOverlay';\r\n    CardOverlay.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            CardOverlay: CardOverlay\r\n        });\r\n    };\r\n    /**\r\n     * @componentOptions\r\n     */\r\n    CardOverlay.options = {\r\n        /**\r\n         * Specifies the string to use for the overlay title and for the button text.\r\n         *\r\n         * Setting a value for this option is required for this component to work.\r\n         */\r\n        title: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({\r\n            required: true,\r\n            localizedString: function () { return Strings_1.l('NoTitle'); }\r\n        }),\r\n        /**\r\n         * Specifies the icon to use for the overlay icon and for the button icon.\r\n         *\r\n         * The name of the icon to use should be specified in dashed case. ie: facet-expand\r\n         */\r\n        icon: ComponentOptions_1.ComponentOptions.buildIconOption()\r\n    };\r\n    return CardOverlay;\r\n}(Component_1.Component));\r\nexports.CardOverlay = CardOverlay;\r\nInitialization_1.Initialization.registerAutoCreateComponent(CardOverlay);\r\n\n\n/***/ }),\n\n/***/ 599:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * The CardOverlayEvents class contains string definitions for all events related to the {@link CardOverlay} component.\r\n */\r\nvar CardOverlayEvents = /** @class */ (function () {\r\n    function CardOverlayEvents() {\r\n    }\r\n    /**\r\n     * Opening a {@link CardOverlay} component triggers this event (see {@link CardOverlay.openOverlay}).\r\n     *\r\n     * @type {string}\r\n     */\r\n    CardOverlayEvents.openCardOverlay = 'openCardOverlay';\r\n    /**\r\n     * Closing a {@link CardOverlay} component triggers this event (see {@link CardOverlay.closeOverlay}).\r\n     *\r\n     * @type {string}\r\n     */\r\n    CardOverlayEvents.closeCardOverlay = 'closeCardOverlay';\r\n    return CardOverlayEvents;\r\n}());\r\nexports.CardOverlayEvents = CardOverlayEvents;\r\n\n\n/***/ }),\n\n/***/ 600:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// CardOverlay.min__5f3280c404a1ee75a113.js","import { Component } from '../Base/Component';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { CardOverlayEvents } from '../../events/CardOverlayEvents';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { KeyboardUtils, KEYBOARD } from '../../utils/KeyboardUtils';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport 'styling/_CardOverlay';\r\nimport { SVGIcons } from '../../utils/SVGIcons';\r\nimport { SVGDom } from '../../utils/SVGDom';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { l } from '../../strings/Strings';\r\n\r\nexport interface ICardOverlayOptions {\r\n  title: string;\r\n  icon?: string;\r\n}\r\n\r\n/**\r\n * The CardOverlay component displays a button that the user can click to toggle the visibility of an overlay on top of\r\n * an {@link IQueryResult}. While this component typically populates a {@link CardActionBar} component, it is actually\r\n * possible to place a CardOverlay component anywhere in any result.\r\n *\r\n * The primary purpose of the CardOverlay component is to display additional information about a result in a format that\r\n * fits well within a card result layout (see [Result Layouts](https://docs.coveo.com/en/360/)).\r\n *\r\n * When initialized, this component creates a `<div class=\"coveo-card-overlay\">` element as the last child of its parent\r\n * IQueryResult, and displays a button which toggles the visibility of the overlay.\r\n */\r\nexport class CardOverlay extends Component {\r\n  static ID = 'CardOverlay';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      CardOverlay: CardOverlay\r\n    });\r\n  };\r\n\r\n  private parentCard: HTMLElement;\r\n  private overlay: HTMLElement;\r\n\r\n  /**\r\n   * @componentOptions\r\n   */\r\n  static options: ICardOverlayOptions = {\r\n    /**\r\n     * Specifies the string to use for the overlay title and for the button text.\r\n     *\r\n     * Setting a value for this option is required for this component to work.\r\n     */\r\n    title: ComponentOptions.buildLocalizedStringOption({\r\n      required: true,\r\n      localizedString: () => l('NoTitle')\r\n    }),\r\n\r\n    /**\r\n     * Specifies the icon to use for the overlay icon and for the button icon.\r\n     *\r\n     * The name of the icon to use should be specified in dashed case. ie: facet-expand\r\n     */\r\n    icon: ComponentOptions.buildIconOption()\r\n  };\r\n\r\n  /**\r\n   * Creates a new CardOverlay component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the CardOverlay component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: ICardOverlayOptions, bindings?: IComponentBindings) {\r\n    super(element, CardOverlay.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, CardOverlay, options);\r\n\r\n    this.parentCard = $$(this.element).closest('.CoveoResult');\r\n    Assert.exists(this.parentCard);\r\n    $$(this.parentCard).addClass('coveo-with-card-overlay');\r\n    this.createOverlay();\r\n    this.createButton(this.element);\r\n    this.closeOverlay();\r\n  }\r\n\r\n  /**\r\n   * Toggles the CardOverlay visibility.\r\n   *\r\n   * @param swtch Specifying a value for this parameter forces the component visibility to take the corresponding value\r\n   * (`true` for visible; `false` for hidden).\r\n   */\r\n  public toggleOverlay(swtch?: boolean) {\r\n    if (swtch !== undefined) {\r\n      swtch ? this.openOverlay() : this.closeOverlay();\r\n    } else {\r\n      if ($$(this.overlay).hasClass('coveo-opened')) {\r\n        this.closeOverlay();\r\n      } else {\r\n        this.openOverlay();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the CardOverlay.\r\n   *\r\n   * Also triggers the {@link CardOverlayEvents.openCardOverlay} event.\r\n   */\r\n  public openOverlay() {\r\n    $$(this.overlay).removeClass('coveo-hidden-for-tab-nav');\r\n    $$(this.overlay).addClass('coveo-opened');\r\n    $$(this.parentCard).addClass('coveo-card-overlay-opened');\r\n    this.bind.trigger(this.element, CardOverlayEvents.openCardOverlay);\r\n  }\r\n\r\n  /**\r\n   * Closes the CardOverlay.\r\n   *\r\n   * Also triggers the {@link CardOverlayEvents.closeCardOverlay} event.\r\n   */\r\n  public closeOverlay() {\r\n    $$(this.overlay).addClass('coveo-hidden-for-tab-nav');\r\n    $$(this.overlay).removeClass('coveo-opened');\r\n    $$(this.parentCard).removeClass('coveo-card-overlay-opened');\r\n    this.bind.trigger(this.element, CardOverlayEvents.closeCardOverlay);\r\n  }\r\n\r\n  private createOverlay() {\r\n    this.overlay = $$('div', { className: 'coveo-card-overlay' }).el;\r\n\r\n    // Create header\r\n    let overlayHeader = $$('div', { className: 'coveo-card-overlay-header' }).el;\r\n    this.createButton(overlayHeader);\r\n    this.overlay.appendChild(overlayHeader);\r\n\r\n    // Create body\r\n    let overlayBody = $$('div', { className: 'coveo-card-overlay-body' }).el;\r\n    // Transfer all of element's children to the overlay\r\n    while (this.element.childNodes.length > 0) {\r\n      overlayBody.appendChild(this.element.firstChild);\r\n    }\r\n    this.overlay.appendChild(overlayBody);\r\n\r\n    // Create footer\r\n    const icon = $$('span', { className: 'coveo-icon coveo-open-card-overlay' }, SVGIcons.icons.arrowDown);\r\n    SVGDom.addClassToSVGInContainer(icon.el, 'coveo-open-card-overlay-svg');\r\n    let overlayFooter = $$('div', { className: 'coveo-card-overlay-footer', tabindex: '0' }, icon.el);\r\n    overlayFooter.on('click', () => this.toggleOverlay(false));\r\n    this.bind.on(overlayFooter.el, 'keyup', KeyboardUtils.keypressAction(KEYBOARD.ENTER, () => this.toggleOverlay(false)));\r\n\r\n    this.overlay.appendChild(overlayFooter.el);\r\n\r\n    this.parentCard.appendChild(this.overlay);\r\n  }\r\n\r\n  private createButton(element: HTMLElement) {\r\n    if (this.options.icon) {\r\n      const icon = $$('span', { className: 'coveo-icon ' }, SVGIcons.icons[this.options.icon]).el;\r\n      element.appendChild(icon);\r\n      SVGDom.addClassToSVGInContainer(element, `coveo-${Utils.toDashCase(this.options.icon)}-svg`);\r\n    }\r\n    element.appendChild($$('span', { className: 'coveo-label' }, this.options.title).el);\r\n    element.setAttribute('tabindex', '0');\r\n    $$(element).on('click', () => this.toggleOverlay());\r\n    this.bind.on(element, 'keyup', KeyboardUtils.keypressAction(KEYBOARD.ENTER, () => this.toggleOverlay()));\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(CardOverlay);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/CardOverlay/CardOverlay.ts","/**\r\n * The CardOverlayEvents class contains string definitions for all events related to the {@link CardOverlay} component.\r\n */\r\nexport class CardOverlayEvents {\r\n  /**\r\n   * Opening a {@link CardOverlay} component triggers this event (see {@link CardOverlay.openOverlay}).\r\n   *\r\n   * @type {string}\r\n   */\r\n  public static openCardOverlay = 'openCardOverlay';\r\n\r\n  /**\r\n   * Closing a {@link CardOverlay} component triggers this event (see {@link CardOverlay.closeOverlay}).\r\n   *\r\n   * @type {string}\r\n   */\r\n  public static closeCardOverlay = 'closeCardOverlay';\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/events/CardOverlayEvents.ts"],"sourceRoot":""}