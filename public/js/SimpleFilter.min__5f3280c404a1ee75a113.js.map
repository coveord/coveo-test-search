{"version":3,"sources":["SimpleFilter.min__5f3280c404a1ee75a113.js","./src/ui/SimpleFilter/SimpleFilter.ts","./src/ui/Facet/FacetUtils.ts","./src/ui/SimpleFilter/SimpleFilterValues.ts"],"names":["webpackJsonpCoveo__temporary","285","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","SimpleFilter","ID","previouslySelected","groupByRequestValues","isSticky","shouldTriggerQuery","ComponentOptions","initComponentOptions","title","buildContent","AccessibleButton","withElement","withClickAction","e","handleClick","withEnterKeyboardAction","handleKeyboardSelect","withBlurAction","handleBlur","withLabel","build","bind","onRootElement","BreadcrumbEvents","populateBreadcrumb","args","handlePopulateBreadcrumb","clearBreadcrumb","handleClearBreadcrumb","QueryEvents","buildingQuery","handleBuildingQuery","doneBuildingQuery","handleDoneBuildingQuery","querySuccess","handleQuerySuccess","_this","simpleFilterSortCritera","getValueContainer","valueContainer","getValueCaption","ret","contains","keys","valueCaption","l","FacetUtils","tryToGetTranslatedCaption","field","toString","getSelectedCaptions","map","getSelectedValues","selectedValue","toggleContainer","$$","hasClass","closeContainer","openContainer","selectValue","triggerQuery","each","checkboxes","labeledCheckbox","translated","label","checkbox","select","deselectValue","reset","toggleValue","toggle","resetSimpleFilter","isSelected","addClass","refreshValueContainer","backdrop","showBackdrop","removeClass","hideBackdrop","getSelectedLabeledCheckboxes","length","stopPropagation","target","text","relatedTarget","parent","Component","computeCssClassName","handleValueToggle","selectedValues","circleElement","enableClearButton","clearElement","show","setDisplayedTitle","hide","action","analyticsActionCauseList","simpleFilterSelectValue","simpleFilterDeselectValue","usageAnalytics","logSearchEvent","simpleFilterTitle","simpleFilterSelectedValue","simpleFilterField","queryController","executeQuery","createCheckbox","Checkbox","getElement","setAttribute","createCheckboxes","caption","indexOf","undefined","values","sortCriteria","toLocaleLowerCase","toLowerCase","sort","a","localeCompare","reverse","result","append","find","on","createValueContainer","className","appendChild","buildSelect","el","findOrCreateWrapper","createBackdrop","selectTitle","buildCircleElement","buildClearElement","buildSvgToggleUpIcon","svgIcon","SVGIcons","icons","arrowDown","SVGDom","addClassToSVGInContainer","mainClear","evt","handleClear","root","elem","selectedlabeledCheckbox","svgContainer","handleRemoveFromBreadcrumb","breadcrumbs","push","resetWithoutTriggeringQuery","simpleFilterClearAll","data","results","groupByBuilder","groupBy","getValuesFromGroupBy","Assert","exists","queryBuilder","advancedExpression","addFieldExpression","SimpleFilterValues","filter","wrapper","insertBefore","empty","doExport","exportGlobally","maximumNumberOfValues","buildNumberOption","defaultValue","min","buildListOption","buildFieldOption","required","buildLocalizedStringOption","localizedString","buildJsonOption","buildStringOption","postProcessing","sortCriteriaToValidate","Logger","warn","buildBooleanOption","Initialization","registerAutoCreateComponent","39","getRegexToUseForFacetSearch","ignoreAccent","RegExp","StringUtils","stringToRegex","getDisplayValueFromValueCaption","returnValue","getValuesToUseForSearchInFacet","original","facet","regex","facetSearchIgnoreAccents","_","chain","pairs","pair","test","match","QueryUtils","isStratusAgnosticField","FileTypes","getFileTypeCaptions","key","range","month","DateUtils","monthToString","substr","buildFacetSearchPattern","Utils","escapeRegexCharacter","join","needAnotherFacetSearch","currentSearchLength","newSearchLength","oldSearchLength","desiredSearchLength","addNoStateCssClassToFacetValues","container","getSelected","noStates","findAll","noState","found","getFileType","getObjectType","isMonthFieldValue","parseInt","isNonEmptyString","asInt","isNaN","519","673","simpleFilter","groupByResult","groupByResults","position","lookupValue","putGroupByIntoQueryBuilder","groupByRequest","createBasicGroupByRequest","groupByRequests","injectionDepth"],"mappings":"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","file":"SimpleFilter.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([33],{\n\n/***/ 285:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(519);\r\nvar underscore_1 = __webpack_require__(0);\r\nvar BreadcrumbEvents_1 = __webpack_require__(34);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar Logger_1 = __webpack_require__(9);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar SVGDom_1 = __webpack_require__(16);\r\nvar SVGIcons_1 = __webpack_require__(12);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar FacetUtils_1 = __webpack_require__(39);\r\nvar Checkbox_1 = __webpack_require__(64);\r\nvar SimpleFilterValues_1 = __webpack_require__(673);\r\n/**\r\n * The `SimpleFilter` component displays a dropdown menu containing field values which the end user can select to filter\r\n * the query results.\r\n *\r\n * The list of available field values in the dropdown menu can either be static (defined through the\r\n * [`values`]{@link SimpleFilter.options.values} option), or dynamic (automatically obtained through a\r\n * [`GroupByRequest`]{@link IGroupByRequest} operation performed at the same time as the main query).\r\n *\r\n * @availablesince [November 2017 Release (v2.3477.9)](https://docs.coveo.com/en/373/#november-2017-release-v234779)\r\n */\r\nvar SimpleFilter = /** @class */ (function (_super) {\r\n    __extends(SimpleFilter, _super);\r\n    /**\r\n     * Creates a new `SimpleFilter` component. Binds multiple query events as well.\r\n     * @param element the HTMLElement on which to instantiate the component.\r\n     * @param options The options for the `SimpleFilter` component.\r\n     * @param bindings The bindings that the component requires to function normally.\r\n     */\r\n    function SimpleFilter(element, options, bindings) {\r\n        var _this = _super.call(this, element, SimpleFilter.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.bindings = bindings;\r\n        _this.previouslySelected = [];\r\n        _this.groupByRequestValues = [];\r\n        _this.isSticky = false;\r\n        _this.shouldTriggerQuery = true;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, SimpleFilter, options);\r\n        _this.element.title = _this.options.title;\r\n        _this.buildContent();\r\n        new AccessibleButton_1.AccessibleButton()\r\n            .withElement(_this.element)\r\n            .withClickAction(function (e) { return _this.handleClick(e); })\r\n            .withEnterKeyboardAction(function (e) { return _this.handleKeyboardSelect(e); })\r\n            .withBlurAction(function (e) { return _this.handleBlur(e); })\r\n            .withLabel(_this.options.title)\r\n            .build();\r\n        _this.bind.onRootElement(BreadcrumbEvents_1.BreadcrumbEvents.populateBreadcrumb, function (args) {\r\n            return _this.handlePopulateBreadcrumb(args);\r\n        });\r\n        _this.bind.onRootElement(BreadcrumbEvents_1.BreadcrumbEvents.clearBreadcrumb, function () { return _this.handleClearBreadcrumb(); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.doneBuildingQuery, function (args) { return _this.handleDoneBuildingQuery(args); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function (args) { return _this.handleQuerySuccess(args); });\r\n        return _this;\r\n    }\r\n    SimpleFilter.simpleFilterSortCritera = function () {\r\n        return ['score', 'occurrences', 'alphaascending', 'alphadescending', 'chisquare'];\r\n    };\r\n    /**\r\n     * Gets the `SimpleFilter` `valueContainer`.\r\n     * @returns {Dom} The `SimpleFilter` valueContainer.\r\n     */\r\n    SimpleFilter.prototype.getValueContainer = function () {\r\n        return this.valueContainer;\r\n    };\r\n    /**\r\n     * Gets the caption of a specific field value.\r\n     * @param value The field value whose caption the method should attempt to get.\r\n     * @returns {any} The value caption, if available; the original value otherwise.\r\n     */\r\n    SimpleFilter.prototype.getValueCaption = function (value) {\r\n        var ret = value;\r\n        if (underscore_1.contains(underscore_1.keys(this.options.valueCaption), value)) {\r\n            ret = this.options.valueCaption[ret] || ret;\r\n            return Strings_1.l(ret);\r\n        }\r\n        else {\r\n            return FacetUtils_1.FacetUtils.tryToGetTranslatedCaption(this.options.field.toString(), ret);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the captions of the currently selected field values in the `SimpleFilter`.\r\n     * @returns {string[]} An array containing the selected captions.\r\n     */\r\n    SimpleFilter.prototype.getSelectedCaptions = function () {\r\n        var _this = this;\r\n        return underscore_1.map(this.getSelectedValues(), function (selectedValue) { return _this.getValueCaption(selectedValue); });\r\n    };\r\n    /**\r\n     * Opens or closes the `SimpleFilter` `valueContainer`, depending on its current state.\r\n     */\r\n    SimpleFilter.prototype.toggleContainer = function () {\r\n        Dom_1.$$(this.valueContainer).hasClass('coveo-simplefilter-value-container-expanded') ? this.closeContainer() : this.openContainer();\r\n    };\r\n    /**\r\n     * Selects the specified value. Also triggers a query, by default.\r\n     * @param value The value to select.\r\n     * @param triggerQuery `true` by default. If set to `false`, the method triggers no query.\r\n     */\r\n    SimpleFilter.prototype.selectValue = function (value, triggerQuery) {\r\n        var _this = this;\r\n        if (triggerQuery === void 0) { triggerQuery = true; }\r\n        underscore_1.each(this.checkboxes, function (labeledCheckbox) {\r\n            var translated = _this.getValueCaption(labeledCheckbox.label);\r\n            if (labeledCheckbox.label == value || translated == value) {\r\n                labeledCheckbox.checkbox.select(triggerQuery);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Un-selects the specified value.\r\n     * @param value The value whose state the method should reset.\r\n     */\r\n    SimpleFilter.prototype.deselectValue = function (value) {\r\n        var _this = this;\r\n        underscore_1.each(this.checkboxes, function (labeledCheckbox) {\r\n            var translated = _this.getValueCaption(labeledCheckbox.label);\r\n            if (labeledCheckbox.label == value || translated == value) {\r\n                labeledCheckbox.checkbox.reset();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Selects or un-selects the specified value, depending on its current state.\r\n     * @param value The value whose state the method should toggle.\r\n     */\r\n    SimpleFilter.prototype.toggleValue = function (value) {\r\n        var _this = this;\r\n        underscore_1.each(this.checkboxes, function (labeledCheckbox) {\r\n            var translated = _this.getValueCaption(labeledCheckbox.label);\r\n            if (labeledCheckbox.label == value || translated == value) {\r\n                labeledCheckbox.checkbox.toggle();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Resets the component to its original state.\r\n     */\r\n    SimpleFilter.prototype.resetSimpleFilter = function () {\r\n        var _this = this;\r\n        underscore_1.each(this.checkboxes, function (labeledCheckbox) {\r\n            if (labeledCheckbox.checkbox.isSelected()) {\r\n                _this.deselectValue(labeledCheckbox.label);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Opens the `SimpleFilter` `valueContainer`.\r\n     */\r\n    SimpleFilter.prototype.openContainer = function () {\r\n        Dom_1.$$(this.element).addClass('coveo-simplefilter-value-container-expanded');\r\n        this.valueContainer.addClass('coveo-simplefilter-value-container-expanded');\r\n        this.refreshValueContainer();\r\n        this.isSticky = true;\r\n        if (!this.backdrop.hasClass('coveo-dropdown-background-active')) {\r\n            this.showBackdrop();\r\n        }\r\n    };\r\n    /**\r\n     * Closes the `SimpleFilter` `valueContainer`.\r\n     */\r\n    SimpleFilter.prototype.closeContainer = function () {\r\n        Dom_1.$$(this.element).removeClass('coveo-simplefilter-value-container-expanded');\r\n        this.valueContainer.removeClass('coveo-simplefilter-value-container-expanded');\r\n        if (this.backdrop.hasClass('coveo-dropdown-background-active')) {\r\n            this.hideBackdrop();\r\n        }\r\n        if (this.getSelectedLabeledCheckboxes().length == 0) {\r\n            this.isSticky = false;\r\n        }\r\n    };\r\n    SimpleFilter.prototype.getSelectedValues = function () {\r\n        return underscore_1.map(this.getSelectedLabeledCheckboxes(), function (labeledCheckbox) { return labeledCheckbox.label; });\r\n    };\r\n    SimpleFilter.prototype.handleClick = function (e) {\r\n        e.stopPropagation();\r\n        if (e.target == this.element) {\r\n            this.toggleContainer();\r\n        }\r\n    };\r\n    SimpleFilter.prototype.handleKeyboardSelect = function (e) {\r\n        if (e.target == this.element) {\r\n            this.toggleContainer();\r\n        }\r\n        else {\r\n            this.toggleValue(Dom_1.$$(e.target).text());\r\n        }\r\n    };\r\n    SimpleFilter.prototype.handleBlur = function (e) {\r\n        var relatedTarget = e.relatedTarget;\r\n        if (!relatedTarget) {\r\n            return;\r\n        }\r\n        if (!Dom_1.$$(relatedTarget).parent(Component_1.Component.computeCssClassName(SimpleFilter))) {\r\n            this.closeContainer();\r\n        }\r\n    };\r\n    SimpleFilter.prototype.handleValueToggle = function (checkbox) {\r\n        var selectedValues = this.getSelectedValues();\r\n        this.circleElement.text(selectedValues.length.toString());\r\n        this.circleElement.removeClass('coveo-simplefilter-circle-hidden');\r\n        this.options.enableClearButton && this.clearElement.show();\r\n        if (selectedValues.length == 1) {\r\n            this.setDisplayedTitle(this.getValueCaption(selectedValues[0]));\r\n            this.element.title = this.getValueCaption(selectedValues[0]);\r\n        }\r\n        else {\r\n            this.setDisplayedTitle(this.options.title);\r\n            this.element.title = this.options.title;\r\n            if (selectedValues.length < 1) {\r\n                this.circleElement.addClass('coveo-simplefilter-circle-hidden');\r\n                this.options.enableClearButton && this.clearElement.hide();\r\n            }\r\n        }\r\n        if (selectedValues.length == 0) {\r\n            this.isSticky = false;\r\n        }\r\n        var action = checkbox.isSelected()\r\n            ? AnalyticsActionListMeta_1.analyticsActionCauseList.simpleFilterSelectValue\r\n            : AnalyticsActionListMeta_1.analyticsActionCauseList.simpleFilterDeselectValue;\r\n        if (this.shouldTriggerQuery) {\r\n            this.usageAnalytics.logSearchEvent(action, {\r\n                simpleFilterTitle: this.options.title,\r\n                simpleFilterSelectedValue: checkbox.label,\r\n                simpleFilterField: this.options.field\r\n            });\r\n            this.queryController.executeQuery();\r\n        }\r\n    };\r\n    SimpleFilter.prototype.createCheckbox = function (label) {\r\n        var _this = this;\r\n        var checkbox = new Checkbox_1.Checkbox(function () {\r\n            _this.handleValueToggle(checkbox);\r\n        }, this.getValueCaption(label));\r\n        checkbox.getElement().title = Strings_1.l(label);\r\n        Dom_1.$$(checkbox.getElement()).setAttribute('tabindex', '0');\r\n        return { checkbox: checkbox, label: label };\r\n    };\r\n    SimpleFilter.prototype.createCheckboxes = function () {\r\n        var _this = this;\r\n        if (this.previouslySelected.length > 0) {\r\n            this.checkboxes = underscore_1.map(this.previouslySelected, function (caption) { return _this.createCheckbox(caption); });\r\n            underscore_1.each(this.checkboxes, function (checkbox) {\r\n                if (_this.previouslySelected.indexOf(checkbox.label) >= 0) {\r\n                    _this.selectValue(checkbox.label, false);\r\n                }\r\n            });\r\n        }\r\n        else if (this.options.values != undefined) {\r\n            this.checkboxes = underscore_1.map(this.options.values, function (caption) { return _this.createCheckbox(caption); });\r\n        }\r\n        else if (this.groupByRequestValues != undefined) {\r\n            this.checkboxes = underscore_1.map(this.groupByRequestValues, function (caption) { return _this.createCheckbox(caption); });\r\n        }\r\n        if (this.options.sortCriteria.toLocaleLowerCase() === 'alphaascending' ||\r\n            this.options.sortCriteria.toLowerCase() === 'alphadescending') {\r\n            this.checkboxes.sort(function (a, b) { return a.checkbox.label.localeCompare(b.checkbox.label); });\r\n            if (this.options.sortCriteria.toLowerCase() === 'alphadescending') {\r\n                this.checkboxes.reverse();\r\n            }\r\n        }\r\n        underscore_1.each(this.checkboxes, function (result) {\r\n            _this.valueContainer.append(result.checkbox.getElement());\r\n        });\r\n        if (this.checkboxes.length > 0) {\r\n            Dom_1.$$(Dom_1.$$(this.checkboxes[this.checkboxes.length - 1].checkbox.getElement()).find('.coveo-checkbox-button')).on('blur', function () {\r\n                _this.closeContainer();\r\n            });\r\n        }\r\n    };\r\n    SimpleFilter.prototype.createValueContainer = function () {\r\n        this.valueContainer = Dom_1.$$('div', { className: 'coveo-simplefilter-value-container' });\r\n    };\r\n    SimpleFilter.prototype.buildContent = function () {\r\n        this.createValueContainer();\r\n        this.element.appendChild(this.buildSelect());\r\n        this.element.appendChild(this.valueContainer.el);\r\n        this.findOrCreateWrapper().append(this.element);\r\n        this.createBackdrop();\r\n    };\r\n    SimpleFilter.prototype.buildSelect = function () {\r\n        var select = Dom_1.$$('span', { className: 'coveo-simplefilter-select' });\r\n        this.selectTitle = Dom_1.$$('span', { className: 'coveo-simplefilter-selecttext' }, this.options.title);\r\n        select.append(this.selectTitle.el);\r\n        select.append(this.buildCircleElement());\r\n        this.options.enableClearButton && select.append(this.buildClearElement());\r\n        select.append(this.buildSvgToggleUpIcon());\r\n        return select.el;\r\n    };\r\n    SimpleFilter.prototype.buildSvgToggleUpIcon = function () {\r\n        var svgIcon = Dom_1.$$('span', { className: 'coveo-simplefilter-toggle-svg-container' }, SVGIcons_1.SVGIcons.icons.arrowDown).el;\r\n        SVGDom_1.SVGDom.addClassToSVGInContainer(svgIcon, 'coveo-simplefilter-toggle-down-svg');\r\n        return svgIcon;\r\n    };\r\n    SimpleFilter.prototype.buildCircleElement = function () {\r\n        this.circleElement = Dom_1.$$('span', { className: 'coveo-simplefilter-circle coveo-simplefilter-circle-hidden' }, this.getSelectedLabeledCheckboxes().length.toString());\r\n        return this.circleElement.el;\r\n    };\r\n    SimpleFilter.prototype.buildClearElement = function () {\r\n        var _this = this;\r\n        this.clearElement = Dom_1.$$('button', {\r\n            title: Strings_1.l('DeselectFilterValues', this.options.title),\r\n            'aria-label': Strings_1.l('Clear', this.options.title),\r\n            className: 'coveo-simplefilter-eraser'\r\n        }, SVGIcons_1.SVGIcons.icons.mainClear);\r\n        this.clearElement.hide();\r\n        this.clearElement.on('click', function (evt) {\r\n            evt.stopPropagation();\r\n            _this.handleClear();\r\n        });\r\n        return this.clearElement.el;\r\n    };\r\n    SimpleFilter.prototype.createBackdrop = function () {\r\n        var _this = this;\r\n        var backdrop = Dom_1.$$(this.root).find('.coveo-dropdown-background');\r\n        if (backdrop == null) {\r\n            this.backdrop = Dom_1.$$('div', { className: 'coveo-dropdown-background' });\r\n            this.root.appendChild(this.backdrop.el);\r\n        }\r\n        else {\r\n            this.backdrop = Dom_1.$$(backdrop);\r\n        }\r\n        this.backdrop.on('click', function () { return _this.closeContainer(); });\r\n    };\r\n    SimpleFilter.prototype.handlePopulateBreadcrumb = function (args) {\r\n        var _this = this;\r\n        if (this.getSelectedLabeledCheckboxes().length > 0) {\r\n            var elem = Dom_1.$$('div', { className: 'coveo-simplefilter-breadcrumb' });\r\n            var title = Dom_1.$$('span', { className: 'coveo-simplefilter-breadcrumb-title' }, this.options.title + \":\");\r\n            elem.append(title.el);\r\n            var values_1 = Dom_1.$$('span', { className: 'coveo-simplefilter-breadcrumb-values' });\r\n            elem.append(values_1.el);\r\n            underscore_1.each(this.getSelectedLabeledCheckboxes(), function (selectedlabeledCheckbox) {\r\n                var value = Dom_1.$$('span', { className: 'coveo-simplefilter-breadcrumb-value' }, _this.getValueCaption(selectedlabeledCheckbox.label));\r\n                values_1.append(value.el);\r\n                var svgContainer = Dom_1.$$('span', { className: 'coveo-simplefilter-breadcrumb-clear' }, SVGIcons_1.SVGIcons.icons.mainClear);\r\n                value.append(svgContainer.el);\r\n                value.el.title = _this.getValueCaption(selectedlabeledCheckbox.label);\r\n                Dom_1.$$(value).on('click', function () { return _this.handleRemoveFromBreadcrumb(selectedlabeledCheckbox); });\r\n            });\r\n            args.breadcrumbs.push({\r\n                element: elem.el\r\n            });\r\n        }\r\n    };\r\n    SimpleFilter.prototype.handleRemoveFromBreadcrumb = function (labeledCheckbox) {\r\n        labeledCheckbox.checkbox.reset();\r\n        this.refreshValueContainer();\r\n    };\r\n    SimpleFilter.prototype.handleClearBreadcrumb = function () {\r\n        // Bit of a hack with that flag, but essentially we want \"clear breadcrumb\" to be a global, unique event.\r\n        // Not something that will log a special event for SimpleFilter (or any component)\r\n        this.resetWithoutTriggeringQuery();\r\n    };\r\n    SimpleFilter.prototype.handleClear = function () {\r\n        this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.simpleFilterClearAll, {\r\n            simpleFilterTitle: this.options.title,\r\n            simpleFilterField: this.options.field\r\n        });\r\n        this.resetWithoutTriggeringQuery();\r\n        this.queryController.executeQuery();\r\n    };\r\n    SimpleFilter.prototype.resetWithoutTriggeringQuery = function () {\r\n        this.shouldTriggerQuery = false;\r\n        this.resetSimpleFilter();\r\n        this.shouldTriggerQuery = true;\r\n    };\r\n    SimpleFilter.prototype.handleQuerySuccess = function (data) {\r\n        if (data.results.results.length > 0) {\r\n            this.findOrCreateWrapper().removeClass('coveo-no-results');\r\n        }\r\n        else {\r\n            this.findOrCreateWrapper().addClass('coveo-no-results');\r\n        }\r\n        if (this.options.values == undefined) {\r\n            this.groupByBuilder.groupBy(data);\r\n            this.groupByRequestValues = this.groupByBuilder.getValuesFromGroupBy();\r\n            this.refreshValueContainer();\r\n            if (!Dom_1.$$(this.element).hasClass('coveo-simplefilter-value-container-expanded')) {\r\n                this.isSticky = false;\r\n            }\r\n        }\r\n    };\r\n    SimpleFilter.prototype.handleBuildingQuery = function (args) {\r\n        Assert_1.Assert.exists(args);\r\n        Assert_1.Assert.exists(args.queryBuilder);\r\n        var selectedValues = this.getSelectedValues();\r\n        if (selectedValues.length > 0) {\r\n            args.queryBuilder.advancedExpression.addFieldExpression(this.options.field.toString(), '==', selectedValues);\r\n        }\r\n    };\r\n    SimpleFilter.prototype.handleDoneBuildingQuery = function (data) {\r\n        if (this.options.values == undefined) {\r\n            Assert_1.Assert.exists(data);\r\n            Assert_1.Assert.exists(data.queryBuilder);\r\n            this.previouslySelected = this.getSelectedValues();\r\n            this.groupByBuilder = new SimpleFilterValues_1.SimpleFilterValues(this, this.options);\r\n            this.groupByBuilder.handleDoneBuildingQuery(data);\r\n        }\r\n    };\r\n    SimpleFilter.prototype.getSelectedLabeledCheckboxes = function () {\r\n        return underscore_1.filter(this.checkboxes, function (labeledCheckbox) { return labeledCheckbox.checkbox.isSelected(); });\r\n    };\r\n    SimpleFilter.prototype.setDisplayedTitle = function (title) {\r\n        this.selectTitle.text(this.getValueCaption(title));\r\n    };\r\n    SimpleFilter.prototype.showBackdrop = function () {\r\n        this.backdrop.addClass('coveo-dropdown-background-active');\r\n    };\r\n    SimpleFilter.prototype.hideBackdrop = function () {\r\n        this.backdrop.removeClass('coveo-dropdown-background-active');\r\n    };\r\n    SimpleFilter.prototype.findOrCreateWrapper = function () {\r\n        if (Dom_1.$$(this.root).find('.coveo-simplefilter-header-wrapper') == null) {\r\n            var wrapper = Dom_1.$$('div', { className: 'coveo-simplefilter-header-wrapper' });\r\n            wrapper.insertBefore(this.element);\r\n            return wrapper;\r\n        }\r\n        else {\r\n            var wrapper = Dom_1.$$(this.root).find('.coveo-simplefilter-header-wrapper');\r\n            return Dom_1.$$(wrapper);\r\n        }\r\n    };\r\n    SimpleFilter.prototype.refreshValueContainer = function () {\r\n        if (!this.isSticky) {\r\n            this.valueContainer.empty();\r\n            this.createCheckboxes();\r\n        }\r\n        if (this.checkboxes.length == 0 && !this.isSticky) {\r\n            Dom_1.$$(this.element).addClass('coveo-simplefilter-empty');\r\n        }\r\n        else {\r\n            Dom_1.$$(this.element).removeClass('coveo-simplefilter-empty');\r\n        }\r\n        Dom_1.$$(this.circleElement).text(this.getSelectedLabeledCheckboxes().length.toString());\r\n    };\r\n    SimpleFilter.ID = 'SimpleFilter';\r\n    SimpleFilter.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            SimpleFilter: SimpleFilter\r\n        });\r\n    };\r\n    /**\r\n     * The possible options for the SimpleFilter.\r\n     * @componentOptions\r\n     */\r\n    SimpleFilter.options = {\r\n        /**\r\n         * Specifies the maximum number of field values to display in the `SimpleFilter` dropdown menu.\r\n         *\r\n         * Default value is `5`. Minimum value is `0`.\r\n         */\r\n        maximumNumberOfValues: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 5, min: 0 }),\r\n        /**\r\n         * Specifies a static list of field values to display in the `SimpleFilter` dropdown menu.\r\n         *\r\n         * This option is undefined by default, which means that the component generates a dynamic list of field values\r\n         * by performing a [`GroupByRequest`]{@link IGroupByRequest} operation at the same time as the main query.\r\n         */\r\n        values: ComponentOptions_1.ComponentOptions.buildListOption(),\r\n        /**\r\n         * Specifies the field whose values the `SimpleFilter` should output result filters from.\r\n         *\r\n         * Specifying a value for this option is required for the `SimpleFilter` component to work.\r\n         */\r\n        field: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),\r\n        /**\r\n         * Specifies the title to display for the `SimpleFilter`.\r\n         *\r\n         * Default value is the localized string for `NoTitle`.\r\n         */\r\n        title: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({ localizedString: function () { return Strings_1.l('NoTitle'); } }),\r\n        /**\r\n         * Specifies a JSON object describing a mapping of `SimpleFilter` values to their desired captions.\r\n         *\r\n         * **Examples:**\r\n         *\r\n         * * You can set the option in the ['init']{@link init} call:\r\n         * ```javascript\r\n         * var myValueCaptions = {\r\n         *   \"txt\" : \"Text files\",\r\n         *   \"html\" : \"Web page\",\r\n         *   [ ... ]\r\n         * };\r\n         *\r\n         * Coveo.init(document.querySelector(\"#search\"), {\r\n         *   SimpleFilter : {\r\n         *     valueCaption : myValueCaptions\r\n         *   }\r\n         * });\r\n         * ```\r\n         *\r\n         * * Or before the `init` call, using the ['options']{@link options} top-level function:\r\n         * ```javascript\r\n         * Coveo.options(document.querySelector(\"#search\"), {\r\n         *   SimpleFilter : {\r\n         *     valueCaption : myValueCaptions\r\n         *   }\r\n         * });\r\n         * ```\r\n         *\r\n         * * Or directly in the markup:\r\n         * ```html\r\n         * <!-- Ensure that the double quotes are properly handled in `data-value-caption`. -->\r\n         * <div class='CoveoSimpleFilter' data-field='@myotherfield' data-value-caption='{\"txt\":\"Text files\",\"html\":\"Web page\"}'></div>\r\n         * ```\r\n         */\r\n        valueCaption: ComponentOptions_1.ComponentOptions.buildJsonOption(),\r\n        /**\r\n         *\r\n         * string?\r\n         * The sort criteria to use.\r\n         *\r\n         * **Default:** `score`\r\n         *\r\n         * **Allowed values:**\r\n         *\r\n         * `score`: sort using the score value which is computed from the number of occurrences of a field value, as well as from the position\r\n         * where query result items having this field value appear in the ranked query result set. When using this sort criterion, a field value\r\n         * with 100 occurrences might appear after one with only 10 occurrences, if the occurrences of the latter field value tend to appear higher\r\n         * in the ranked query result set.\r\n         *\r\n         * `occurrences`: sort by number of occurrences, with field values having the highest number of occurrences appearing first.\r\n         *\r\n         * `alphaascending/alphadescending`: sort alphabetically on the field values.\r\n         *\r\n         * `chisquare`: sort based on the relative frequency of field values in the query result set compared to their frequency in the entire index. This means that a field value that does\r\n         * not appear often in the index, but does appear often in the query result set will tend to appear higher.\r\n         *\r\n         * @availablesince [July 2019 Release (v2.6459)](https://docs.coveo.com/en/2938/)\r\n         *\r\n         */\r\n        sortCriteria: ComponentOptions_1.ComponentOptions.buildStringOption({\r\n            postProcessing: function (value, options) {\r\n                var sortCriteriaToValidate = value || 'score';\r\n                if (SimpleFilter.simpleFilterSortCritera().indexOf(sortCriteriaToValidate.toLowerCase()) !== -1) {\r\n                    return sortCriteriaToValidate;\r\n                }\r\n                else {\r\n                    new Logger_1.Logger(SimpleFilter).warn(\"The simpleFilter component doesn't accept \" + sortCriteriaToValidate + \" as the value for the sortCriteria option.\", \"Available option are : \" + SimpleFilter.simpleFilterSortCritera().toString());\r\n                    return 'score';\r\n                }\r\n            }\r\n        }),\r\n        /**\r\n         * Whether to show a button to clear all selected values.\r\n         *\r\n         * @availablesince [March 2020 Release (v2.8521)](https://docs.coveo.com/en/3203/)\r\n         */\r\n        enableClearButton: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n    };\r\n    return SimpleFilter;\r\n}(Component_1.Component));\r\nexports.SimpleFilter = SimpleFilter;\r\nInitialization_1.Initialization.registerAutoCreateComponent(SimpleFilter);\r\n\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/// <reference path='Facet.ts' />\r\nvar StringUtils_1 = __webpack_require__(22);\r\nvar QueryUtils_1 = __webpack_require__(21);\r\nvar FileTypes_1 = __webpack_require__(113);\r\nvar DateUtils_1 = __webpack_require__(32);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar _ = __webpack_require__(0);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar FacetUtils = /** @class */ (function () {\r\n    function FacetUtils() {\r\n    }\r\n    FacetUtils.getRegexToUseForFacetSearch = function (value, ignoreAccent) {\r\n        return new RegExp(StringUtils_1.StringUtils.stringToRegex(value, ignoreAccent), 'i');\r\n    };\r\n    FacetUtils.getDisplayValueFromValueCaption = function (value, field, valueCaption) {\r\n        var returnValue = this.tryToGetTranslatedCaption(field, value);\r\n        return valueCaption[value] || returnValue;\r\n    };\r\n    FacetUtils.getValuesToUseForSearchInFacet = function (original, facet) {\r\n        var ret = [original];\r\n        var regex = this.getRegexToUseForFacetSearch(original, facet.options.facetSearchIgnoreAccents);\r\n        if (facet.options.valueCaption) {\r\n            _.chain(facet.options.valueCaption)\r\n                .pairs()\r\n                .filter(function (pair) {\r\n                return regex.test(pair[1]);\r\n            })\r\n                .each(function (match) {\r\n                ret.push(match[0]);\r\n            });\r\n            if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') ||\r\n                QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {\r\n                _.each(FileTypes_1.FileTypes.getFileTypeCaptions(), function (value, key) {\r\n                    if (!(key in facet.options.valueCaption) && regex.test(value)) {\r\n                        ret.push(key);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') ||\r\n            QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {\r\n            _.each(_.filter(_.pairs(FileTypes_1.FileTypes.getFileTypeCaptions()), function (pair) {\r\n                return regex.test(pair[1]);\r\n            }), function (match) {\r\n                ret.push(match[0]);\r\n            });\r\n        }\r\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@month')) {\r\n            _.each(_.range(1, 13), function (month) {\r\n                if (regex.test(DateUtils_1.DateUtils.monthToString(month - 1))) {\r\n                    ret.push(('0' + month.toString()).substr(-2));\r\n                }\r\n            });\r\n        }\r\n        return ret;\r\n    };\r\n    FacetUtils.buildFacetSearchPattern = function (values) {\r\n        values = _.map(values, function (value) {\r\n            return Utils_1.Utils.escapeRegexCharacter(value);\r\n        });\r\n        values[0] = '.*' + values[0] + '.*';\r\n        return values.join('|');\r\n    };\r\n    FacetUtils.needAnotherFacetSearch = function (currentSearchLength, newSearchLength, oldSearchLength, desiredSearchLength) {\r\n        // Something was removed (currentSearch < newSearch)\r\n        // && we might want to display more facet search result(currentSearch < desiredSearch)\r\n        // && the new query returned more stuff than the old one so there's still more results(currentSearchLength > oldLength)\r\n        return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && currentSearchLength > oldSearchLength;\r\n    };\r\n    FacetUtils.addNoStateCssClassToFacetValues = function (facet, container) {\r\n        // This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet\r\n        if (facet.values.getSelected().length != 0) {\r\n            var noStates = Dom_1.$$(container).findAll('li:not(.coveo-selected)');\r\n            _.each(noStates, function (noState) {\r\n                Dom_1.$$(noState).addClass('coveo-no-state');\r\n            });\r\n        }\r\n    };\r\n    FacetUtils.tryToGetTranslatedCaption = function (field, value) {\r\n        var found;\r\n        if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@filetype')) {\r\n            found = FileTypes_1.FileTypes.getFileType(value).caption;\r\n        }\r\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@objecttype')) {\r\n            found = FileTypes_1.FileTypes.getObjectType(value).caption;\r\n        }\r\n        else if (FacetUtils.isMonthFieldValue(field, value)) {\r\n            var month = parseInt(value, 10);\r\n            found = DateUtils_1.DateUtils.monthToString(month - 1);\r\n        }\r\n        else {\r\n            found = Strings_1.l(value);\r\n        }\r\n        return found != undefined && Utils_1.Utils.isNonEmptyString(found) ? found : value;\r\n    };\r\n    FacetUtils.isMonthFieldValue = function (field, value) {\r\n        if (!QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@month')) {\r\n            return false;\r\n        }\r\n        var asInt = parseInt(value, 10);\r\n        if (isNaN(asInt)) {\r\n            return false;\r\n        }\r\n        if (asInt < 1 || asInt > 12) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    return FacetUtils;\r\n}());\r\nexports.FacetUtils = FacetUtils;\r\n\n\n/***/ }),\n\n/***/ 519:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 673:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__webpack_require__(519);\r\nvar _ = __webpack_require__(0);\r\nvar SimpleFilterValues = /** @class */ (function () {\r\n    function SimpleFilterValues(simpleFilter, options) {\r\n        this.simpleFilter = simpleFilter;\r\n        this.options = options;\r\n        this.groupByRequestValues = [];\r\n    }\r\n    SimpleFilterValues.prototype.getValuesFromGroupBy = function () {\r\n        return this.groupByRequestValues;\r\n    };\r\n    SimpleFilterValues.prototype.groupBy = function (data) {\r\n        var _this = this;\r\n        this.groupByRequestValues = [];\r\n        var groupByResult = data.results.groupByResults;\r\n        if (groupByResult.length > 0 && this.position != undefined) {\r\n            _.each(groupByResult[this.position].values, function (value) {\r\n                if (_this.groupByRequestValues.indexOf(value.lookupValue) < 0) {\r\n                    _this.groupByRequestValues.push(value.lookupValue);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    SimpleFilterValues.prototype.handleDoneBuildingQuery = function (data) {\r\n        var queryBuilder = data.queryBuilder;\r\n        this.putGroupByIntoQueryBuilder(queryBuilder);\r\n    };\r\n    SimpleFilterValues.prototype.putGroupByIntoQueryBuilder = function (queryBuilder) {\r\n        var groupByRequest = this.createBasicGroupByRequest();\r\n        queryBuilder.groupByRequests.push(groupByRequest);\r\n        this.position = queryBuilder.groupByRequests.length - 1;\r\n    };\r\n    SimpleFilterValues.prototype.createBasicGroupByRequest = function () {\r\n        var groupByRequest = {\r\n            field: this.options.field,\r\n            maximumNumberOfValues: this.options.maximumNumberOfValues,\r\n            injectionDepth: 1000,\r\n            sortCriteria: this.simpleFilter.options.sortCriteria\r\n        };\r\n        return groupByRequest;\r\n    };\r\n    return SimpleFilterValues;\r\n}());\r\nexports.SimpleFilterValues = SimpleFilterValues;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// SimpleFilter.min__5f3280c404a1ee75a113.js","import 'styling/_SimpleFilter';\r\nimport { contains, each, filter, keys, map } from 'underscore';\r\nimport { BreadcrumbEvents, IPopulateBreadcrumbEventArgs } from '../../events/BreadcrumbEvents';\r\nimport { IBuildingQueryEventArgs, IDoneBuildingQueryEventArgs, IQuerySuccessEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { Logger } from '../../misc/Logger';\r\nimport { l } from '../../strings/Strings';\r\nimport { AccessibleButton } from '../../utils/AccessibleButton';\r\nimport { $$, Dom } from '../../utils/Dom';\r\nimport { SVGDom } from '../../utils/SVGDom';\r\nimport { SVGIcons } from '../../utils/SVGIcons';\r\nimport { analyticsActionCauseList, IAnalyticsSimpleFilterMeta } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { FacetSortCriterion } from '../Facet/FacetSortCriterion';\r\nimport { FacetUtils } from '../Facet/FacetUtils';\r\nimport { Checkbox } from '../FormWidgets/Checkbox';\r\nimport { SimpleFilterValues } from './SimpleFilterValues';\r\n\r\nexport interface ISimpleFilterOptions {\r\n  title: string;\r\n  values: string[];\r\n  field: IFieldOption;\r\n  valueCaption: any;\r\n  maximumNumberOfValues: number;\r\n  sortCriteria: string;\r\n  enableClearButton?: boolean;\r\n}\r\n\r\ninterface ILabeledCheckbox {\r\n  checkbox: Checkbox;\r\n  label: string;\r\n}\r\n\r\n/**\r\n * The `SimpleFilter` component displays a dropdown menu containing field values which the end user can select to filter\r\n * the query results.\r\n *\r\n * The list of available field values in the dropdown menu can either be static (defined through the\r\n * [`values`]{@link SimpleFilter.options.values} option), or dynamic (automatically obtained through a\r\n * [`GroupByRequest`]{@link IGroupByRequest} operation performed at the same time as the main query).\r\n *\r\n * @availablesince [November 2017 Release (v2.3477.9)](https://docs.coveo.com/en/373/#november-2017-release-v234779)\r\n */\r\nexport class SimpleFilter extends Component {\r\n  static ID = 'SimpleFilter';\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      SimpleFilter\r\n    });\r\n  };\r\n\r\n  static simpleFilterSortCritera() {\r\n    return ['score', 'occurrences', 'alphaascending', 'alphadescending', 'chisquare'];\r\n  }\r\n  /**\r\n   * The possible options for the SimpleFilter.\r\n   * @componentOptions\r\n   */\r\n  static options: ISimpleFilterOptions = {\r\n    /**\r\n     * Specifies the maximum number of field values to display in the `SimpleFilter` dropdown menu.\r\n     *\r\n     * Default value is `5`. Minimum value is `0`.\r\n     */\r\n    maximumNumberOfValues: ComponentOptions.buildNumberOption({ defaultValue: 5, min: 0 }),\r\n\r\n    /**\r\n     * Specifies a static list of field values to display in the `SimpleFilter` dropdown menu.\r\n     *\r\n     * This option is undefined by default, which means that the component generates a dynamic list of field values\r\n     * by performing a [`GroupByRequest`]{@link IGroupByRequest} operation at the same time as the main query.\r\n     */\r\n    values: ComponentOptions.buildListOption<string>(),\r\n\r\n    /**\r\n     * Specifies the field whose values the `SimpleFilter` should output result filters from.\r\n     *\r\n     * Specifying a value for this option is required for the `SimpleFilter` component to work.\r\n     */\r\n    field: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the title to display for the `SimpleFilter`.\r\n     *\r\n     * Default value is the localized string for `NoTitle`.\r\n     */\r\n    title: ComponentOptions.buildLocalizedStringOption({ localizedString: () => l('NoTitle') }),\r\n\r\n    /**\r\n     * Specifies a JSON object describing a mapping of `SimpleFilter` values to their desired captions.\r\n     *\r\n     * **Examples:**\r\n     *\r\n     * * You can set the option in the ['init']{@link init} call:\r\n     * ```javascript\r\n     * var myValueCaptions = {\r\n     *   \"txt\" : \"Text files\",\r\n     *   \"html\" : \"Web page\",\r\n     *   [ ... ]\r\n     * };\r\n     *\r\n     * Coveo.init(document.querySelector(\"#search\"), {\r\n     *   SimpleFilter : {\r\n     *     valueCaption : myValueCaptions\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * * Or before the `init` call, using the ['options']{@link options} top-level function:\r\n     * ```javascript\r\n     * Coveo.options(document.querySelector(\"#search\"), {\r\n     *   SimpleFilter : {\r\n     *     valueCaption : myValueCaptions\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * * Or directly in the markup:\r\n     * ```html\r\n     * <!-- Ensure that the double quotes are properly handled in `data-value-caption`. -->\r\n     * <div class='CoveoSimpleFilter' data-field='@myotherfield' data-value-caption='{\"txt\":\"Text files\",\"html\":\"Web page\"}'></div>\r\n     * ```\r\n     */\r\n    valueCaption: ComponentOptions.buildJsonOption(),\r\n    /**\r\n     *\r\n     * string?\r\n     * The sort criteria to use.\r\n     *\r\n     * **Default:** `score`\r\n     *\r\n     * **Allowed values:**\r\n     *\r\n     * `score`: sort using the score value which is computed from the number of occurrences of a field value, as well as from the position\r\n     * where query result items having this field value appear in the ranked query result set. When using this sort criterion, a field value\r\n     * with 100 occurrences might appear after one with only 10 occurrences, if the occurrences of the latter field value tend to appear higher\r\n     * in the ranked query result set.\r\n     *\r\n     * `occurrences`: sort by number of occurrences, with field values having the highest number of occurrences appearing first.\r\n     *\r\n     * `alphaascending/alphadescending`: sort alphabetically on the field values.\r\n     *\r\n     * `chisquare`: sort based on the relative frequency of field values in the query result set compared to their frequency in the entire index. This means that a field value that does\r\n     * not appear often in the index, but does appear often in the query result set will tend to appear higher.\r\n     *\r\n     * @availablesince [July 2019 Release (v2.6459)](https://docs.coveo.com/en/2938/)\r\n     *\r\n     */\r\n    sortCriteria: ComponentOptions.buildStringOption<FacetSortCriterion>({\r\n      postProcessing: (value, options: ISimpleFilterOptions) => {\r\n        const sortCriteriaToValidate = value || 'score';\r\n        if (SimpleFilter.simpleFilterSortCritera().indexOf(sortCriteriaToValidate.toLowerCase()) !== -1) {\r\n          return sortCriteriaToValidate;\r\n        } else {\r\n          new Logger(SimpleFilter).warn(\r\n            `The simpleFilter component doesn't accept ${sortCriteriaToValidate} as the value for the sortCriteria option.`,\r\n            `Available option are : ${SimpleFilter.simpleFilterSortCritera().toString()}`\r\n          );\r\n          return 'score';\r\n        }\r\n      }\r\n    }),\r\n    /**\r\n     * Whether to show a button to clear all selected values.\r\n     *\r\n     * @availablesince [March 2020 Release (v2.8521)](https://docs.coveo.com/en/3203/)\r\n     */\r\n    enableClearButton: ComponentOptions.buildBooleanOption({ defaultValue: false })\r\n  };\r\n\r\n  private valueContainer: Dom;\r\n  private checkboxes: ILabeledCheckbox[];\r\n  private previouslySelected: string[] = [];\r\n  private circleElement: Dom;\r\n  private clearElement: Dom;\r\n  private backdrop: Dom;\r\n  private selectTitle: Dom;\r\n  private groupByRequestValues: string[] = [];\r\n  private isSticky: boolean = false;\r\n  private groupByBuilder: SimpleFilterValues;\r\n  private shouldTriggerQuery = true;\r\n\r\n  /**\r\n   * Creates a new `SimpleFilter` component. Binds multiple query events as well.\r\n   * @param element the HTMLElement on which to instantiate the component.\r\n   * @param options The options for the `SimpleFilter` component.\r\n   * @param bindings The bindings that the component requires to function normally.\r\n   */\r\n  constructor(public element: HTMLElement, public options: ISimpleFilterOptions, public bindings?: IComponentBindings) {\r\n    super(element, SimpleFilter.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, SimpleFilter, options);\r\n    this.element.title = this.options.title;\r\n    this.buildContent();\r\n\r\n    new AccessibleButton()\r\n      .withElement(this.element)\r\n      .withClickAction((e: Event) => this.handleClick(e))\r\n      .withEnterKeyboardAction((e: KeyboardEvent) => this.handleKeyboardSelect(e))\r\n      .withBlurAction((e: MouseEvent) => this.handleBlur(e))\r\n      .withLabel(this.options.title)\r\n      .build();\r\n\r\n    this.bind.onRootElement(BreadcrumbEvents.populateBreadcrumb, (args: IPopulateBreadcrumbEventArgs) =>\r\n      this.handlePopulateBreadcrumb(args)\r\n    );\r\n    this.bind.onRootElement(BreadcrumbEvents.clearBreadcrumb, () => this.handleClearBreadcrumb());\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.doneBuildingQuery, (args: IDoneBuildingQueryEventArgs) => this.handleDoneBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.querySuccess, (args: IQuerySuccessEventArgs) => this.handleQuerySuccess(args));\r\n  }\r\n\r\n  /**\r\n   * Gets the `SimpleFilter` `valueContainer`.\r\n   * @returns {Dom} The `SimpleFilter` valueContainer.\r\n   */\r\n  public getValueContainer(): Dom {\r\n    return this.valueContainer;\r\n  }\r\n\r\n  /**\r\n   * Gets the caption of a specific field value.\r\n   * @param value The field value whose caption the method should attempt to get.\r\n   * @returns {any} The value caption, if available; the original value otherwise.\r\n   */\r\n  public getValueCaption(value: string): string {\r\n    let ret = value;\r\n\r\n    if (contains(keys(this.options.valueCaption), value)) {\r\n      ret = this.options.valueCaption[ret] || ret;\r\n      return l(ret);\r\n    } else {\r\n      return FacetUtils.tryToGetTranslatedCaption(this.options.field.toString(), ret);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the captions of the currently selected field values in the `SimpleFilter`.\r\n   * @returns {string[]} An array containing the selected captions.\r\n   */\r\n  public getSelectedCaptions(): string[] {\r\n    return map(this.getSelectedValues(), (selectedValue: string) => this.getValueCaption(selectedValue));\r\n  }\r\n\r\n  /**\r\n   * Opens or closes the `SimpleFilter` `valueContainer`, depending on its current state.\r\n   */\r\n  public toggleContainer() {\r\n    $$(this.valueContainer).hasClass('coveo-simplefilter-value-container-expanded') ? this.closeContainer() : this.openContainer();\r\n  }\r\n\r\n  /**\r\n   * Selects the specified value. Also triggers a query, by default.\r\n   * @param value The value to select.\r\n   * @param triggerQuery `true` by default. If set to `false`, the method triggers no query.\r\n   */\r\n  public selectValue(value: string, triggerQuery = true) {\r\n    each(this.checkboxes, (labeledCheckbox: ILabeledCheckbox) => {\r\n      const translated = this.getValueCaption(labeledCheckbox.label);\r\n      if (labeledCheckbox.label == value || translated == value) {\r\n        labeledCheckbox.checkbox.select(triggerQuery);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Un-selects the specified value.\r\n   * @param value The value whose state the method should reset.\r\n   */\r\n  public deselectValue(value: string) {\r\n    each(this.checkboxes, (labeledCheckbox: ILabeledCheckbox) => {\r\n      const translated = this.getValueCaption(labeledCheckbox.label);\r\n      if (labeledCheckbox.label == value || translated == value) {\r\n        labeledCheckbox.checkbox.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Selects or un-selects the specified value, depending on its current state.\r\n   * @param value The value whose state the method should toggle.\r\n   */\r\n  public toggleValue(value: string) {\r\n    each(this.checkboxes, (labeledCheckbox: ILabeledCheckbox) => {\r\n      const translated = this.getValueCaption(labeledCheckbox.label);\r\n      if (labeledCheckbox.label == value || translated == value) {\r\n        labeledCheckbox.checkbox.toggle();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resets the component to its original state.\r\n   */\r\n  public resetSimpleFilter() {\r\n    each(this.checkboxes, (labeledCheckbox: ILabeledCheckbox) => {\r\n      if (labeledCheckbox.checkbox.isSelected()) {\r\n        this.deselectValue(labeledCheckbox.label);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Opens the `SimpleFilter` `valueContainer`.\r\n   */\r\n  public openContainer() {\r\n    $$(this.element).addClass('coveo-simplefilter-value-container-expanded');\r\n    this.valueContainer.addClass('coveo-simplefilter-value-container-expanded');\r\n    this.refreshValueContainer();\r\n    this.isSticky = true;\r\n    if (!this.backdrop.hasClass('coveo-dropdown-background-active')) {\r\n      this.showBackdrop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes the `SimpleFilter` `valueContainer`.\r\n   */\r\n  public closeContainer() {\r\n    $$(this.element).removeClass('coveo-simplefilter-value-container-expanded');\r\n    this.valueContainer.removeClass('coveo-simplefilter-value-container-expanded');\r\n    if (this.backdrop.hasClass('coveo-dropdown-background-active')) {\r\n      this.hideBackdrop();\r\n    }\r\n    if (this.getSelectedLabeledCheckboxes().length == 0) {\r\n      this.isSticky = false;\r\n    }\r\n  }\r\n\r\n  public getSelectedValues() {\r\n    return map(this.getSelectedLabeledCheckboxes(), (labeledCheckbox: ILabeledCheckbox) => labeledCheckbox.label);\r\n  }\r\n\r\n  private handleClick(e: Event) {\r\n    e.stopPropagation();\r\n    if (e.target == this.element) {\r\n      this.toggleContainer();\r\n    }\r\n  }\r\n\r\n  private handleKeyboardSelect(e: Event) {\r\n    if (e.target == this.element) {\r\n      this.toggleContainer();\r\n    } else {\r\n      this.toggleValue($$(e.target as HTMLElement).text());\r\n    }\r\n  }\r\n\r\n  private handleBlur(e: MouseEvent) {\r\n    const relatedTarget = e.relatedTarget as HTMLElement;\r\n    if (!relatedTarget) {\r\n      return;\r\n    }\r\n    if (!$$(relatedTarget).parent(Component.computeCssClassName(SimpleFilter))) {\r\n      this.closeContainer();\r\n    }\r\n  }\r\n\r\n  private handleValueToggle(checkbox: Checkbox) {\r\n    const selectedValues = this.getSelectedValues();\r\n    this.circleElement.text(selectedValues.length.toString());\r\n    this.circleElement.removeClass('coveo-simplefilter-circle-hidden');\r\n    this.options.enableClearButton && this.clearElement.show();\r\n\r\n    if (selectedValues.length == 1) {\r\n      this.setDisplayedTitle(this.getValueCaption(selectedValues[0]));\r\n      this.element.title = this.getValueCaption(selectedValues[0]);\r\n    } else {\r\n      this.setDisplayedTitle(this.options.title);\r\n      this.element.title = this.options.title;\r\n\r\n      if (selectedValues.length < 1) {\r\n        this.circleElement.addClass('coveo-simplefilter-circle-hidden');\r\n        this.options.enableClearButton && this.clearElement.hide();\r\n      }\r\n    }\r\n\r\n    if (selectedValues.length == 0) {\r\n      this.isSticky = false;\r\n    }\r\n\r\n    const action = checkbox.isSelected()\r\n      ? analyticsActionCauseList.simpleFilterSelectValue\r\n      : analyticsActionCauseList.simpleFilterDeselectValue;\r\n\r\n    if (this.shouldTriggerQuery) {\r\n      this.usageAnalytics.logSearchEvent<IAnalyticsSimpleFilterMeta>(action, {\r\n        simpleFilterTitle: this.options.title,\r\n        simpleFilterSelectedValue: checkbox.label,\r\n        simpleFilterField: <string>this.options.field\r\n      });\r\n      this.queryController.executeQuery();\r\n    }\r\n  }\r\n\r\n  private createCheckbox(label: string) {\r\n    const checkbox = new Checkbox(() => {\r\n      this.handleValueToggle(checkbox);\r\n    }, this.getValueCaption(label));\r\n    checkbox.getElement().title = l(label);\r\n    $$(checkbox.getElement()).setAttribute('tabindex', '0');\r\n    return { checkbox, label };\r\n  }\r\n\r\n  private createCheckboxes() {\r\n    if (this.previouslySelected.length > 0) {\r\n      this.checkboxes = map(this.previouslySelected, caption => this.createCheckbox(caption));\r\n      each(this.checkboxes, checkbox => {\r\n        if (this.previouslySelected.indexOf(checkbox.label) >= 0) {\r\n          this.selectValue(checkbox.label, false);\r\n        }\r\n      });\r\n    } else if (this.options.values != undefined) {\r\n      this.checkboxes = map(this.options.values, caption => this.createCheckbox(caption));\r\n    } else if (this.groupByRequestValues != undefined) {\r\n      this.checkboxes = map(this.groupByRequestValues, caption => this.createCheckbox(caption));\r\n    }\r\n    if (\r\n      this.options.sortCriteria.toLocaleLowerCase() === 'alphaascending' ||\r\n      this.options.sortCriteria.toLowerCase() === 'alphadescending'\r\n    ) {\r\n      this.checkboxes.sort((a, b) => a.checkbox.label.localeCompare(b.checkbox.label));\r\n      if (this.options.sortCriteria.toLowerCase() === 'alphadescending') {\r\n        this.checkboxes.reverse();\r\n      }\r\n    }\r\n    each(this.checkboxes, result => {\r\n      this.valueContainer.append(result.checkbox.getElement());\r\n    });\r\n    if (this.checkboxes.length > 0) {\r\n      $$($$(this.checkboxes[this.checkboxes.length - 1].checkbox.getElement()).find('.coveo-checkbox-button')).on('blur', () => {\r\n        this.closeContainer();\r\n      });\r\n    }\r\n  }\r\n\r\n  private createValueContainer() {\r\n    this.valueContainer = $$('div', { className: 'coveo-simplefilter-value-container' });\r\n  }\r\n\r\n  private buildContent() {\r\n    this.createValueContainer();\r\n    this.element.appendChild(this.buildSelect());\r\n    this.element.appendChild(this.valueContainer.el);\r\n    this.findOrCreateWrapper().append(this.element);\r\n    this.createBackdrop();\r\n  }\r\n\r\n  private buildSelect(): HTMLElement {\r\n    const select = $$('span', { className: 'coveo-simplefilter-select' });\r\n    this.selectTitle = $$('span', { className: 'coveo-simplefilter-selecttext' }, this.options.title);\r\n    select.append(this.selectTitle.el);\r\n    select.append(this.buildCircleElement());\r\n    this.options.enableClearButton && select.append(this.buildClearElement());\r\n    select.append(this.buildSvgToggleUpIcon());\r\n    return select.el;\r\n  }\r\n\r\n  private buildSvgToggleUpIcon(): HTMLElement {\r\n    let svgIcon = $$('span', { className: 'coveo-simplefilter-toggle-svg-container' }, SVGIcons.icons.arrowDown).el;\r\n    SVGDom.addClassToSVGInContainer(svgIcon, 'coveo-simplefilter-toggle-down-svg');\r\n    return svgIcon;\r\n  }\r\n\r\n  private buildCircleElement(): HTMLElement {\r\n    this.circleElement = $$(\r\n      'span',\r\n      { className: 'coveo-simplefilter-circle coveo-simplefilter-circle-hidden' },\r\n      this.getSelectedLabeledCheckboxes().length.toString()\r\n    );\r\n    return this.circleElement.el;\r\n  }\r\n\r\n  public buildClearElement(): HTMLElement {\r\n    this.clearElement = $$(\r\n      'button',\r\n      {\r\n        title: l('DeselectFilterValues', this.options.title),\r\n        'aria-label': l('Clear', this.options.title),\r\n        className: 'coveo-simplefilter-eraser'\r\n      },\r\n      SVGIcons.icons.mainClear\r\n    );\r\n    this.clearElement.hide();\r\n\r\n    this.clearElement.on('click', (evt: Event) => {\r\n      evt.stopPropagation();\r\n      this.handleClear();\r\n    });\r\n\r\n    return this.clearElement.el;\r\n  }\r\n\r\n  private createBackdrop() {\r\n    const backdrop = $$(this.root).find('.coveo-dropdown-background');\r\n\r\n    if (backdrop == null) {\r\n      this.backdrop = $$('div', { className: 'coveo-dropdown-background' });\r\n      this.root.appendChild(this.backdrop.el);\r\n    } else {\r\n      this.backdrop = $$(backdrop);\r\n    }\r\n    this.backdrop.on('click', () => this.closeContainer());\r\n  }\r\n\r\n  private handlePopulateBreadcrumb(args: IPopulateBreadcrumbEventArgs) {\r\n    if (this.getSelectedLabeledCheckboxes().length > 0) {\r\n      const elem = $$('div', { className: 'coveo-simplefilter-breadcrumb' });\r\n      const title = $$('span', { className: 'coveo-simplefilter-breadcrumb-title' }, `${this.options.title}:`);\r\n      elem.append(title.el);\r\n      const values = $$('span', { className: 'coveo-simplefilter-breadcrumb-values' });\r\n      elem.append(values.el);\r\n\r\n      each(this.getSelectedLabeledCheckboxes(), selectedlabeledCheckbox => {\r\n        const value = $$('span', { className: 'coveo-simplefilter-breadcrumb-value' }, this.getValueCaption(selectedlabeledCheckbox.label));\r\n        values.append(value.el);\r\n        const svgContainer = $$('span', { className: 'coveo-simplefilter-breadcrumb-clear' }, SVGIcons.icons.mainClear);\r\n        value.append(svgContainer.el);\r\n        value.el.title = this.getValueCaption(selectedlabeledCheckbox.label);\r\n        $$(value).on('click', () => this.handleRemoveFromBreadcrumb(selectedlabeledCheckbox));\r\n      });\r\n\r\n      args.breadcrumbs.push({\r\n        element: elem.el\r\n      });\r\n    }\r\n  }\r\n\r\n  private handleRemoveFromBreadcrumb(labeledCheckbox: ILabeledCheckbox) {\r\n    labeledCheckbox.checkbox.reset();\r\n    this.refreshValueContainer();\r\n  }\r\n\r\n  private handleClearBreadcrumb() {\r\n    // Bit of a hack with that flag, but essentially we want \"clear breadcrumb\" to be a global, unique event.\r\n    // Not something that will log a special event for SimpleFilter (or any component)\r\n    this.resetWithoutTriggeringQuery();\r\n  }\r\n\r\n  private handleClear() {\r\n    this.usageAnalytics.logSearchEvent<IAnalyticsSimpleFilterMeta>(analyticsActionCauseList.simpleFilterClearAll, {\r\n      simpleFilterTitle: this.options.title,\r\n      simpleFilterField: <string>this.options.field\r\n    });\r\n\r\n    this.resetWithoutTriggeringQuery();\r\n    this.queryController.executeQuery();\r\n  }\r\n\r\n  private resetWithoutTriggeringQuery() {\r\n    this.shouldTriggerQuery = false;\r\n    this.resetSimpleFilter();\r\n    this.shouldTriggerQuery = true;\r\n  }\r\n\r\n  private handleQuerySuccess(data: IQuerySuccessEventArgs) {\r\n    if (data.results.results.length > 0) {\r\n      this.findOrCreateWrapper().removeClass('coveo-no-results');\r\n    } else {\r\n      this.findOrCreateWrapper().addClass('coveo-no-results');\r\n    }\r\n\r\n    if (this.options.values == undefined) {\r\n      this.groupByBuilder.groupBy(data);\r\n      this.groupByRequestValues = this.groupByBuilder.getValuesFromGroupBy();\r\n      this.refreshValueContainer();\r\n      if (!$$(this.element).hasClass('coveo-simplefilter-value-container-expanded')) {\r\n        this.isSticky = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\r\n    Assert.exists(args);\r\n    Assert.exists(args.queryBuilder);\r\n    const selectedValues = this.getSelectedValues();\r\n\r\n    if (selectedValues.length > 0) {\r\n      args.queryBuilder.advancedExpression.addFieldExpression(this.options.field.toString(), '==', selectedValues);\r\n    }\r\n  }\r\n\r\n  private handleDoneBuildingQuery(data: IDoneBuildingQueryEventArgs) {\r\n    if (this.options.values == undefined) {\r\n      Assert.exists(data);\r\n      Assert.exists(data.queryBuilder);\r\n      this.previouslySelected = this.getSelectedValues();\r\n      this.groupByBuilder = new SimpleFilterValues(this, this.options);\r\n      this.groupByBuilder.handleDoneBuildingQuery(data);\r\n    }\r\n  }\r\n\r\n  private getSelectedLabeledCheckboxes(): ILabeledCheckbox[] {\r\n    return filter(this.checkboxes, (labeledCheckbox: ILabeledCheckbox) => labeledCheckbox.checkbox.isSelected());\r\n  }\r\n\r\n  private setDisplayedTitle(title: string) {\r\n    this.selectTitle.text(this.getValueCaption(title));\r\n  }\r\n\r\n  private showBackdrop() {\r\n    this.backdrop.addClass('coveo-dropdown-background-active');\r\n  }\r\n\r\n  private hideBackdrop() {\r\n    this.backdrop.removeClass('coveo-dropdown-background-active');\r\n  }\r\n\r\n  private findOrCreateWrapper() {\r\n    if ($$(this.root).find('.coveo-simplefilter-header-wrapper') == null) {\r\n      const wrapper = $$('div', { className: 'coveo-simplefilter-header-wrapper' });\r\n      wrapper.insertBefore(this.element);\r\n      return wrapper;\r\n    } else {\r\n      const wrapper = $$(this.root).find('.coveo-simplefilter-header-wrapper');\r\n      return $$(wrapper);\r\n    }\r\n  }\r\n\r\n  private refreshValueContainer() {\r\n    if (!this.isSticky) {\r\n      this.valueContainer.empty();\r\n      this.createCheckboxes();\r\n    }\r\n\r\n    if (this.checkboxes.length == 0 && !this.isSticky) {\r\n      $$(this.element).addClass('coveo-simplefilter-empty');\r\n    } else {\r\n      $$(this.element).removeClass('coveo-simplefilter-empty');\r\n    }\r\n    $$(this.circleElement).text(this.getSelectedLabeledCheckboxes().length.toString());\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(SimpleFilter);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/SimpleFilter/SimpleFilter.ts","/// <reference path='Facet.ts' />\r\nimport { StringUtils } from '../../utils/StringUtils';\r\nimport { QueryUtils } from '../../utils/QueryUtils';\r\nimport { FileTypes } from '../Misc/FileTypes';\r\nimport { DateUtils } from '../../utils/DateUtils';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\nimport FacetModuleDefinition = require('./Facet');\r\nimport { l } from '../../strings/Strings';\r\n\r\nexport class FacetUtils {\r\n  static getRegexToUseForFacetSearch(value: string, ignoreAccent: boolean) {\r\n    return new RegExp(StringUtils.stringToRegex(value, ignoreAccent), 'i');\r\n  }\r\n\r\n  static getDisplayValueFromValueCaption(value: string, field: string, valueCaption: Record<string, string>) {\r\n    const returnValue = this.tryToGetTranslatedCaption(field, value);\r\n    return valueCaption[value] || returnValue;\r\n  }\r\n\r\n  static getValuesToUseForSearchInFacet(original: string, facet: FacetModuleDefinition.Facet): string[] {\r\n    let ret = [original];\r\n    let regex = this.getRegexToUseForFacetSearch(original, facet.options.facetSearchIgnoreAccents);\r\n    if (facet.options.valueCaption) {\r\n      _.chain(facet.options.valueCaption)\r\n        .pairs()\r\n        .filter(pair => {\r\n          return regex.test(pair[1]);\r\n        })\r\n        .each(match => {\r\n          ret.push(match[0]);\r\n        });\r\n      if (\r\n        QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@objecttype') ||\r\n        QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@filetype')\r\n      ) {\r\n        _.each(FileTypes.getFileTypeCaptions(), (value: string, key: string) => {\r\n          if (!(key in facet.options.valueCaption) && regex.test(value)) {\r\n            ret.push(key);\r\n          }\r\n        });\r\n      }\r\n    } else if (\r\n      QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@objecttype') ||\r\n      QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@filetype')\r\n    ) {\r\n      _.each(\r\n        _.filter(_.pairs(FileTypes.getFileTypeCaptions()), pair => {\r\n          return regex.test(pair[1]);\r\n        }),\r\n        match => {\r\n          ret.push(match[0]);\r\n        }\r\n      );\r\n    } else if (QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@month')) {\r\n      _.each(_.range(1, 13), month => {\r\n        if (regex.test(DateUtils.monthToString(month - 1))) {\r\n          ret.push(('0' + month.toString()).substr(-2));\r\n        }\r\n      });\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  static buildFacetSearchPattern(values: string[]) {\r\n    values = _.map(values, value => {\r\n      return Utils.escapeRegexCharacter(value);\r\n    });\r\n    values[0] = '.*' + values[0] + '.*';\r\n    return values.join('|');\r\n  }\r\n\r\n  static needAnotherFacetSearch(\r\n    currentSearchLength: number,\r\n    newSearchLength: number,\r\n    oldSearchLength: number,\r\n    desiredSearchLength: number\r\n  ) {\r\n    // Something was removed (currentSearch < newSearch)\r\n    // && we might want to display more facet search result(currentSearch < desiredSearch)\r\n    // && the new query returned more stuff than the old one so there's still more results(currentSearchLength > oldLength)\r\n    return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && currentSearchLength > oldSearchLength;\r\n  }\r\n\r\n  static addNoStateCssClassToFacetValues(facet: FacetModuleDefinition.Facet, container: HTMLElement) {\r\n    // This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet\r\n    if (facet.values.getSelected().length != 0) {\r\n      let noStates = $$(container).findAll('li:not(.coveo-selected)');\r\n      _.each(noStates, noState => {\r\n        $$(noState).addClass('coveo-no-state');\r\n      });\r\n    }\r\n  }\r\n\r\n  static tryToGetTranslatedCaption(field: string, value: string) {\r\n    let found: string;\r\n\r\n    if (QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@filetype')) {\r\n      found = FileTypes.getFileType(value).caption;\r\n    } else if (QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@objecttype')) {\r\n      found = FileTypes.getObjectType(value).caption;\r\n    } else if (FacetUtils.isMonthFieldValue(field, value)) {\r\n      const month = parseInt(value, 10);\r\n      found = DateUtils.monthToString(month - 1);\r\n    } else {\r\n      found = l(value);\r\n    }\r\n    return found != undefined && Utils.isNonEmptyString(found) ? found : value;\r\n  }\r\n\r\n  static isMonthFieldValue(field: string, value: string) {\r\n    if (!QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@month')) {\r\n      return false;\r\n    }\r\n\r\n    const asInt = parseInt(value, 10);\r\n\r\n    if (isNaN(asInt)) {\r\n      return false;\r\n    }\r\n\r\n    if (asInt < 1 || asInt > 12) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Facet/FacetUtils.ts","import 'styling/_SimpleFilter';\r\nimport { IDoneBuildingQueryEventArgs, IQuerySuccessEventArgs } from '../../events/QueryEvents';\r\nimport * as _ from 'underscore';\r\nimport { QueryBuilder } from '../Base/QueryBuilder';\r\nimport { SimpleFilter, ISimpleFilterOptions } from './SimpleFilter';\r\nimport { IGroupByRequest } from '../../rest/GroupByRequest';\r\n\r\nexport class SimpleFilterValues {\r\n  private groupByRequestValues: string[] = [];\r\n  private position: number;\r\n\r\n  constructor(public simpleFilter: SimpleFilter, public options: ISimpleFilterOptions) {}\r\n\r\n  public getValuesFromGroupBy(): string[] {\r\n    return this.groupByRequestValues;\r\n  }\r\n\r\n  public groupBy(data: IQuerySuccessEventArgs) {\r\n    this.groupByRequestValues = [];\r\n    const groupByResult = data.results.groupByResults;\r\n    if (groupByResult.length > 0 && this.position != undefined) {\r\n      _.each(groupByResult[this.position].values, value => {\r\n        if (this.groupByRequestValues.indexOf(value.lookupValue) < 0) {\r\n          this.groupByRequestValues.push(value.lookupValue);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public handleDoneBuildingQuery(data: IDoneBuildingQueryEventArgs) {\r\n    const queryBuilder = data.queryBuilder;\r\n    this.putGroupByIntoQueryBuilder(queryBuilder);\r\n  }\r\n\r\n  private putGroupByIntoQueryBuilder(queryBuilder: QueryBuilder) {\r\n    const groupByRequest = this.createBasicGroupByRequest();\r\n    queryBuilder.groupByRequests.push(groupByRequest);\r\n    this.position = queryBuilder.groupByRequests.length - 1;\r\n  }\r\n\r\n  private createBasicGroupByRequest(): IGroupByRequest {\r\n    let groupByRequest: IGroupByRequest = {\r\n      field: <string>this.options.field,\r\n      maximumNumberOfValues: this.options.maximumNumberOfValues,\r\n      injectionDepth: 1000,\r\n      sortCriteria: this.simpleFilter.options.sortCriteria\r\n    };\r\n    return groupByRequest;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/SimpleFilter/SimpleFilterValues.ts"],"sourceRoot":""}