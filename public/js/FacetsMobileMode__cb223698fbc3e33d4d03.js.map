{"version":3,"sources":["./src/ui/FacetsMobileMode/FacetsMobileMode.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,yCAA8C;AAC9C,gDAA4D;AAE5D,6CAAqD;AACrD,qCAAmC;AACnC,8CAAwD;AAUxD;;;;;;;GAOG;AACH;IAAsC,oCAAS;IAyD7C,0BAAmB,OAAoB,EAAE,OAAkC,EAAE,QAA6B;QAA1G,YACE,kBAAM,OAAO,EAAE,gBAAgB,CAAC,EAAE,EAAE,QAAQ,CAAC,SAO9C;QARkB,aAAO,GAAP,OAAO,CAAa;QAGrC,KAAI,CAAC,OAAO,GAAG,mCAAgB,CAAC,oBAAoB,CAAC,OAAO,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;QACzF,IAAI,KAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;YACjC,IAAM,eAAe,GAAG,KAAI,CAAC,OAAO,CAAC,eAAe,IAAI,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACrF,KAAI,CAAC,OAAO,CAAC,eAAe,GAAG,mCAAgB,CAAC,wBAAwB,CAAC,eAAe,CAAC,CAAC;SAC3F;;IACH,CAAC;IAhEM,mBAAE,GAAG,kBAAkB,CAAC;IAE/B;;OAEG;IACI,wBAAO,GAA6B;QACzC;;;;WAIG;QACH,UAAU,EAAE,mCAAgB,CAAC,iBAAiB,EAAE;QAChD;;WAEG;QACH,OAAO,EAAE,mCAAgB,CAAC,kBAAkB,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;QACrE;;;;;;WAMG;QACH,uBAAuB,EAAE,mCAAgB,CAAC,kBAAkB,CAAC;YAC3D,cAAc,EAAE,UAAC,KAAK,EAAE,OAAiC,IAAK,QAAC,YAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAA3D,CAA2D;SAC1H,CAAC;QACF;;;;;;WAMG;QACH,gBAAgB,EAAE,mCAAgB,CAAC,kBAAkB,CAAC;YACpD,cAAc,EAAE,UAAC,KAAK,EAAE,OAAiC,IAAK,QAAC,YAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAA1D,CAA0D;SACzH,CAAC;QACF;;;;;;;;WAQG;QACH,eAAe,EAAE,mCAAgB,CAAC,2BAA2B,CAAC,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC;KAC9F,CAAC;IAEK,yBAAQ,GAAG;QAChB,8BAAc,CAAC;YACb,gBAAgB,EAAE,gBAAgB;SACnC,CAAC,CAAC;IACL,CAAC,CAAC;IAaJ,uBAAC;CAAA,CAlEqC,qBAAS,GAkE9C;AAlEY,4CAAgB;AAoE7B,+BAAc,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,CAAC","file":"FacetsMobileMode__cb223698fbc3e33d4d03.js","sourcesContent":["import { Component } from '../Base/Component';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Utils } from '../../Core';\r\nimport { Initialization } from '../Base/Initialization';\r\n\r\nexport interface IFacetsMobileModeOptions {\r\n  breakpoint?: number;\r\n  isModal?: boolean;\r\n  displayOverlayWhileOpen?: boolean;\r\n  preventScrolling?: boolean;\r\n  scrollContainer?: HTMLElement;\r\n}\r\n\r\n/**\r\n * This component lets you customize the mobile responsive behavior of facets in your search interface.\r\n *\r\n * **Notes:**\r\n * - You can include this component anywhere under the root element of your search interface.\r\n * - You should only include this component once in your search interface.\r\n * - If you do not include this component in your search interface, facets will still have a default mobile responsive behavior.\r\n */\r\nexport class FacetsMobileMode extends Component {\r\n  static ID = 'FacetsMobileMode';\r\n\r\n  /**\r\n   * @componentOptions\r\n   */\r\n  static options: IFacetsMobileModeOptions = {\r\n    /**\r\n     * The screen width (in number of pixels) at which facets should enter mobile responsive mode and be collapsed under a single button.\r\n     *\r\n     * **Default:** `800`\r\n     */\r\n    breakpoint: ComponentOptions.buildNumberOption(),\r\n    /**\r\n     * Whether to display the facets in a modal instead of a pop-up when the end user expands them in mobile responsive mode.\r\n     */\r\n    isModal: ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n    /**\r\n     * Whether to display an overlay behind the facets when the end user expands them in mobile responsive mode.\r\n     *\r\n     * By default, the following behavior applies:\r\n     * - `true` when [isModal]{@link FacetsMobileMode.options.isModal} is `false`\r\n     * - `false` when [isModal]{@link FacetsMobileMode.options.isModal} is `true`\r\n     */\r\n    displayOverlayWhileOpen: ComponentOptions.buildBooleanOption({\r\n      postProcessing: (value, options: IFacetsMobileModeOptions) => (Utils.isNullOrUndefined(value) ? !options.isModal : value)\r\n    }),\r\n    /**\r\n     * Whether to disable vertical scrolling on the specified or resolved [`scrollContainer`]{@link FacetsMobileMode.options.scrollContainer} while facets are expanded in mobile responsive mode.\r\n     *\r\n     * By default, the following behavior applies:\r\n     * - `true` when [isModal]{@link FacetsMobileMode.options.isModal} is `true`\r\n     * - `false` when [isModal]{@link FacetsMobileMode.options.isModal} is `false`\r\n     */\r\n    preventScrolling: ComponentOptions.buildBooleanOption({\r\n      postProcessing: (value, options: IFacetsMobileModeOptions) => (Utils.isNullOrUndefined(value) ? options.isModal : value)\r\n    }),\r\n    /**\r\n     * The HTML element whose vertical scrolling should be locked while facets are expanded in mobile responsive mode.\r\n     *\r\n     * By default, the component tries to detect and use the first ancestor element whose CSS `overflow-y` attribute is set to `scroll`, starting from the `FacetsMobileMode`'s element itself. If no such element is found, the `document.body` element is used.\r\n     *\r\n     * Since this heuristic is not perfect, we strongly recommend that you manually set this option by explicitly specifying the desired CSS selector.\r\n     *\r\n     * **Example:** `data-scroll-container-selector='#someCssSelector'`\r\n     */\r\n    scrollContainer: ComponentOptions.buildChildHtmlElementOption({ depend: 'preventScrolling' })\r\n  };\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      FacetsMobileMode: FacetsMobileMode\r\n    });\r\n  };\r\n\r\n  public options: IFacetsMobileModeOptions;\r\n\r\n  constructor(public element: HTMLElement, options?: IFacetsMobileModeOptions, bindings?: IComponentBindings) {\r\n    super(element, FacetsMobileMode.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, FacetsMobileMode, options);\r\n    if (this.options.preventScrolling) {\r\n      const scrollContainer = this.options.scrollContainer || this.searchInterface.element;\r\n      this.options.scrollContainer = ComponentOptions.findParentScrollLockable(scrollContainer);\r\n    }\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(FacetsMobileMode);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FacetsMobileMode/FacetsMobileMode.ts"],"sourceRoot":""}