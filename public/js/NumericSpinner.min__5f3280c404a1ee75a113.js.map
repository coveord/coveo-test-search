{"version":3,"sources":["NumericSpinner.min__5f3280c404a1ee75a113.js","./src/ui/FormWidgets/NumericSpinner.ts"],"names":["webpackJsonpCoveo__temporary","120","module","exports","__webpack_require__","Object","defineProperty","value","onChange","min","max","label","numericSpinner","this","buildContent","bindEvents","doExport","exportGlobally","NumericSpinner","reset","getSpinnerInput","getElement","element","getValue","getIntValue","parseInt","getFloatValue","parseFloat","setValue","toString","build","$$","className","numberInput","type","l","addOn","arrowUp","SVGIcons","icons","SVGDom","addClassToSVGInContainer","el","arrowDown","append","up","find","on","down","match"],"mappings":"AAAAA,8BAA8B,KAExBC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAEAC,QAAOC,eAAeH,EAAS,cAAgBI,OAAO,GCPtD,YACA,OACA,OACA,QACA,QAMA,aAkBE,WACSC,EACAC,EACAC,EACCC,OAHD,KAAAH,MAAA,SAAsDI,UACtD,KAAAH,MAAA,GADA,KAAAD,WACA,KAAAC,MACA,KAAAC,MACC,KAAAC,QAERE,KAAKC,eACLD,KAAKE,aA+GT,MApIgB,GAAAC,SAAd,WACE,EAAAC,gBACEC,eAAgBA,KAyBb,YAAAC,MAAP,WACEN,KAAKO,kBAAkBb,MAAQ,GAC/BM,KAAKL,SAASK,OAOT,YAAAQ,WAAP,WACE,MAAOR,MAAKS,SAOP,YAAAC,SAAP,WACE,MAAOV,MAAKO,kBAAkBb,OAOzB,YAAAiB,YAAP,WACE,MAAOX,MAAKO,kBAAkBb,MAAQkB,SAASZ,KAAKO,kBAAkBb,MAAO,IAAMM,KAAKJ,KAOnF,YAAAiB,cAAP,WACE,MAAOb,MAAKO,kBAAkBb,MAAQoB,WAAWd,KAAKO,kBAAkBb,OAASM,KAAKJ,KAUjF,YAAAmB,SAAP,SAAgBrB,GACVM,KAAKH,KAAOH,EAAQM,KAAKH,MAC3BH,EAAQM,KAAKH,KAEXH,EAAQM,KAAKJ,MACfF,EAAQM,KAAKJ,KAEfI,KAAKO,kBAAkBb,MAAQA,EAAMsB,WACrChB,KAAKL,SAASK,OAOT,YAAAiB,MAAP,WACE,MAAOjB,MAAKS,SAGN,YAAAR,aAAR,WACE,GAAMF,GAAiB,EAAAmB,GAAG,OAASC,UAAW,0BACxCC,EAAc,EAAAF,GAAG,SACrBC,UAAW,qBACXE,KAAM,OACN,aAAcrB,KAAKF,MAAQ,EAAAwB,EAAEtB,KAAKF,OAAS,KAGvCyB,EAAQ,EAAAL,GAAG,QAAUC,UAAW,iBAChCK,EAAU,EAAAN,GAAG,OAASC,UAAW,oBAAsB,EAAAM,SAASC,MAAMF,QAC5E,GAAAG,OAAOC,yBAAyBJ,EAAQK,GAAI,uBAC5C,IAAMC,GAAY,EAAAZ,GAAG,OAASC,UAAW,sBAAwB,EAAAM,SAASC,MAAMI,UAChF,GAAAH,OAAOC,yBAAyBE,EAAUD,GAAI,0BAC9CN,EAAMQ,OAAOP,EAAQK,IACrBN,EAAMQ,OAAOD,EAAUD,IACvB9B,EAAegC,OAAOX,EAAYS,IAClC9B,EAAegC,OAAOR,EAAMM,IAC5B7B,KAAKS,QAAUV,EAAe8B,IAGxB,YAAA3B,WAAR,sBACQ8B,EAAK,EAAAd,GAAGlB,KAAKS,SAASwB,KAAK,oBACjC,GAAAf,GAAGc,GAAIE,GAAG,QAAS,WACjB,EAAKnB,SAAS,EAAKF,gBAAkB,IAGvC,IAAMsB,GAAO,EAAAjB,GAAGlB,KAAKS,SAASwB,KAAK,sBACnC,GAAAf,GAAGiB,GAAMD,GAAG,QAAS,WACnB,EAAKnB,SAAS,EAAKF,gBAAkB,IAGvC,IAAMO,GAAgC,EAAAF,GAAGlB,KAAKS,SAASwB,KAAK,QAC5D,GAAAf,GAAGE,GAAac,GAAG,QAAS,WACtBd,EAAY1B,MAAM0C,MAAM,WAC1B,EAAKzC,SAAS,MAKZ,YAAAY,gBAAR,WACE,MAAyB,GAAAW,GAAGlB,KAAKS,SAASwB,KAAK,wBAEnD,IAxIa,GAAA5B","file":"NumericSpinner.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([82],{\n\n/***/ 120:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar SVGDom_1 = __webpack_require__(16);\r\nvar SVGIcons_1 = __webpack_require__(12);\r\n/**\r\n * A numeric spinner widget with standard styling.\r\n */\r\nvar NumericSpinner = /** @class */ (function () {\r\n    /**\r\n     * Creates a new `NumericSpinner`.\r\n     * @param onChange The function to call when the numeric spinner value changes. This function takes the current\r\n     * `NumericSpinner` instance as an argument.\r\n     * @param min The minimum possible value of the numeric spinner.\r\n     * @param max The maximum possible value of the numeric spinner.\r\n     * @param label The label to use for the input for accessibility purposes.\r\n     */\r\n    function NumericSpinner(onChange, min, max, label) {\r\n        if (onChange === void 0) { onChange = function (numericSpinner) { }; }\r\n        if (min === void 0) { min = 0; }\r\n        this.onChange = onChange;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.label = label;\r\n        this.buildContent();\r\n        this.bindEvents();\r\n    }\r\n    NumericSpinner.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            NumericSpinner: NumericSpinner\r\n        });\r\n    };\r\n    /**\r\n     * Resets the numeric spinner.\r\n     */\r\n    NumericSpinner.prototype.reset = function () {\r\n        this.getSpinnerInput().value = '';\r\n        this.onChange(this);\r\n    };\r\n    /**\r\n     * Gets the element on which the numeric spinner is bound.\r\n     * @returns {HTMLInputElement} The numeric spinner element.\r\n     */\r\n    NumericSpinner.prototype.getElement = function () {\r\n        return this.element;\r\n    };\r\n    /**\r\n     * Gets the numeric spinner currently selected value (as a string).\r\n     * @returns {string} The numeric spinner value.\r\n     */\r\n    NumericSpinner.prototype.getValue = function () {\r\n        return this.getSpinnerInput().value;\r\n    };\r\n    /**\r\n     * Gets the numeric spinner currently selected value (as an integer).\r\n     * @returns {number} The numeric spinner value.\r\n     */\r\n    NumericSpinner.prototype.getIntValue = function () {\r\n        return this.getSpinnerInput().value ? parseInt(this.getSpinnerInput().value, 10) : this.min;\r\n    };\r\n    /**\r\n     * Gets the numeric spinner currently selected value (as a float).\r\n     * @returns {number} The numeric spinner value.\r\n     */\r\n    NumericSpinner.prototype.getFloatValue = function () {\r\n        return this.getSpinnerInput().value ? parseFloat(this.getSpinnerInput().value) : this.min;\r\n    };\r\n    /**\r\n     * Sets the numeric spinner value.\r\n     *\r\n     * @param value The value to set the numeric spinner to. If `value` is greater than [`max`]{@link NumericSpinner.max},\r\n     * this method sets the numeric spinner to its maximum value instead. Likewise, if value is lesser than\r\n     * [`min`]{@link NumericSpinner.min}, the method sets the numeric spinner to its minimum value.\r\n     */\r\n    NumericSpinner.prototype.setValue = function (value) {\r\n        if (this.max && value > this.max) {\r\n            value = this.max;\r\n        }\r\n        if (value < this.min) {\r\n            value = this.min;\r\n        }\r\n        this.getSpinnerInput().value = value.toString();\r\n        this.onChange(this);\r\n    };\r\n    /**\r\n     * Gets the element on which the numeric spinner is bound.\r\n     * @returns {HTMLInputElement} The numeric spinner element.\r\n     */\r\n    NumericSpinner.prototype.build = function () {\r\n        return this.element;\r\n    };\r\n    NumericSpinner.prototype.buildContent = function () {\r\n        var numericSpinner = Dom_1.$$('div', { className: 'coveo-numeric-spinner' });\r\n        var numberInput = Dom_1.$$('input', {\r\n            className: 'coveo-number-input',\r\n            type: 'text',\r\n            'aria-label': this.label ? Strings_1.l(this.label) : ''\r\n        });\r\n        var addOn = Dom_1.$$('span', { className: 'coveo-add-on' });\r\n        var arrowUp = Dom_1.$$('div', { className: 'coveo-spinner-up' }, SVGIcons_1.SVGIcons.icons.arrowUp);\r\n        SVGDom_1.SVGDom.addClassToSVGInContainer(arrowUp.el, 'coveo-spinner-up-svg');\r\n        var arrowDown = Dom_1.$$('div', { className: 'coveo-spinner-down' }, SVGIcons_1.SVGIcons.icons.arrowDown);\r\n        SVGDom_1.SVGDom.addClassToSVGInContainer(arrowDown.el, 'coveo-spinner-down-svg');\r\n        addOn.append(arrowUp.el);\r\n        addOn.append(arrowDown.el);\r\n        numericSpinner.append(numberInput.el);\r\n        numericSpinner.append(addOn.el);\r\n        this.element = numericSpinner.el;\r\n    };\r\n    NumericSpinner.prototype.bindEvents = function () {\r\n        var _this = this;\r\n        var up = Dom_1.$$(this.element).find('.coveo-spinner-up');\r\n        Dom_1.$$(up).on('click', function () {\r\n            _this.setValue(_this.getFloatValue() + 1);\r\n        });\r\n        var down = Dom_1.$$(this.element).find('.coveo-spinner-down');\r\n        Dom_1.$$(down).on('click', function () {\r\n            _this.setValue(_this.getFloatValue() - 1);\r\n        });\r\n        var numberInput = Dom_1.$$(this.element).find('input');\r\n        Dom_1.$$(numberInput).on('input', function () {\r\n            if (numberInput.value.match(/[0-9]*/)) {\r\n                _this.onChange(_this);\r\n            }\r\n        });\r\n    };\r\n    NumericSpinner.prototype.getSpinnerInput = function () {\r\n        return Dom_1.$$(this.element).find('.coveo-number-input');\r\n    };\r\n    return NumericSpinner;\r\n}());\r\nexports.NumericSpinner = NumericSpinner;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// NumericSpinner.min__5f3280c404a1ee75a113.js","import { exportGlobally } from '../../GlobalExports';\r\nimport { l } from '../../strings/Strings';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { SVGDom } from '../../utils/SVGDom';\r\nimport { SVGIcons } from '../../utils/SVGIcons';\r\nimport { IFormWidget, IFormWidgetSettable } from './FormWidgets';\r\n\r\n/**\r\n * A numeric spinner widget with standard styling.\r\n */\r\nexport class NumericSpinner implements IFormWidget, IFormWidgetSettable {\r\n  private element: HTMLElement;\r\n  public name: string;\r\n\r\n  public static doExport() {\r\n    exportGlobally({\r\n      NumericSpinner: NumericSpinner\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `NumericSpinner`.\r\n   * @param onChange The function to call when the numeric spinner value changes. This function takes the current\r\n   * `NumericSpinner` instance as an argument.\r\n   * @param min The minimum possible value of the numeric spinner.\r\n   * @param max The maximum possible value of the numeric spinner.\r\n   * @param label The label to use for the input for accessibility purposes.\r\n   */\r\n  constructor(\r\n    public onChange: (numericSpinner: NumericSpinner) => void = (numericSpinner: NumericSpinner) => {},\r\n    public min: number = 0,\r\n    public max?: number,\r\n    private label?: string\r\n  ) {\r\n    this.buildContent();\r\n    this.bindEvents();\r\n  }\r\n\r\n  /**\r\n   * Resets the numeric spinner.\r\n   */\r\n  public reset() {\r\n    this.getSpinnerInput().value = '';\r\n    this.onChange(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the numeric spinner is bound.\r\n   * @returns {HTMLInputElement} The numeric spinner element.\r\n   */\r\n  public getElement(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Gets the numeric spinner currently selected value (as a string).\r\n   * @returns {string} The numeric spinner value.\r\n   */\r\n  public getValue(): string {\r\n    return this.getSpinnerInput().value;\r\n  }\r\n\r\n  /**\r\n   * Gets the numeric spinner currently selected value (as an integer).\r\n   * @returns {number} The numeric spinner value.\r\n   */\r\n  public getIntValue(): number {\r\n    return this.getSpinnerInput().value ? parseInt(this.getSpinnerInput().value, 10) : this.min;\r\n  }\r\n\r\n  /**\r\n   * Gets the numeric spinner currently selected value (as a float).\r\n   * @returns {number} The numeric spinner value.\r\n   */\r\n  public getFloatValue(): number {\r\n    return this.getSpinnerInput().value ? parseFloat(this.getSpinnerInput().value) : this.min;\r\n  }\r\n\r\n  /**\r\n   * Sets the numeric spinner value.\r\n   *\r\n   * @param value The value to set the numeric spinner to. If `value` is greater than [`max`]{@link NumericSpinner.max},\r\n   * this method sets the numeric spinner to its maximum value instead. Likewise, if value is lesser than\r\n   * [`min`]{@link NumericSpinner.min}, the method sets the numeric spinner to its minimum value.\r\n   */\r\n  public setValue(value: number) {\r\n    if (this.max && value > this.max) {\r\n      value = this.max;\r\n    }\r\n    if (value < this.min) {\r\n      value = this.min;\r\n    }\r\n    this.getSpinnerInput().value = value.toString();\r\n    this.onChange(this);\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the numeric spinner is bound.\r\n   * @returns {HTMLInputElement} The numeric spinner element.\r\n   */\r\n  public build() {\r\n    return this.element;\r\n  }\r\n\r\n  private buildContent() {\r\n    const numericSpinner = $$('div', { className: 'coveo-numeric-spinner' });\r\n    const numberInput = $$('input', {\r\n      className: 'coveo-number-input',\r\n      type: 'text',\r\n      'aria-label': this.label ? l(this.label) : ''\r\n    });\r\n\r\n    const addOn = $$('span', { className: 'coveo-add-on' });\r\n    const arrowUp = $$('div', { className: 'coveo-spinner-up' }, SVGIcons.icons.arrowUp);\r\n    SVGDom.addClassToSVGInContainer(arrowUp.el, 'coveo-spinner-up-svg');\r\n    const arrowDown = $$('div', { className: 'coveo-spinner-down' }, SVGIcons.icons.arrowDown);\r\n    SVGDom.addClassToSVGInContainer(arrowDown.el, 'coveo-spinner-down-svg');\r\n    addOn.append(arrowUp.el);\r\n    addOn.append(arrowDown.el);\r\n    numericSpinner.append(numberInput.el);\r\n    numericSpinner.append(addOn.el);\r\n    this.element = numericSpinner.el;\r\n  }\r\n\r\n  private bindEvents() {\r\n    const up = $$(this.element).find('.coveo-spinner-up');\r\n    $$(up).on('click', () => {\r\n      this.setValue(this.getFloatValue() + 1);\r\n    });\r\n\r\n    const down = $$(this.element).find('.coveo-spinner-down');\r\n    $$(down).on('click', () => {\r\n      this.setValue(this.getFloatValue() - 1);\r\n    });\r\n\r\n    const numberInput = <HTMLInputElement>$$(this.element).find('input');\r\n    $$(numberInput).on('input', () => {\r\n      if (numberInput.value.match(/[0-9]*/)) {\r\n        this.onChange(this);\r\n      }\r\n    });\r\n  }\r\n\r\n  private getSpinnerInput(): HTMLInputElement {\r\n    return <HTMLInputElement>$$(this.element).find('.coveo-number-input');\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/NumericSpinner.ts"],"sourceRoot":""}