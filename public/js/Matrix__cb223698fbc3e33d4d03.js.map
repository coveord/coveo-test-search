{"version":3,"sources":["./src/ui/Matrix/Matrix.ts","./sass/_Matrix.scss","./src/ui/Matrix/Cell.ts","./src/ui/Matrix/DefaultMatrixResultPreviewTemplate.ts"],"names":[],"mappings":"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","file":"Matrix__cb223698fbc3e33d4d03.js","sourcesContent":["import * as Globalize from 'globalize';\r\nimport 'styling/_Matrix';\r\nimport * as _ from 'underscore';\r\nimport { IBuildingQueryEventArgs, IDoneBuildingQueryEventArgs, IQuerySuccessEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { QueryStateModel } from '../../models/QueryStateModel';\r\nimport { IGroupByRequest } from '../../rest/GroupByRequest';\r\nimport { IQuery } from '../../rest/Query';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { IQueryResults } from '../../rest/QueryResults';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { QueryUtils } from '../../utils/QueryUtils';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { IInitializationParameters, Initialization } from '../Base/Initialization';\r\nimport { QueryBuilder } from '../Base/QueryBuilder';\r\nimport { TemplateComponentOptions } from '../Base/TemplateComponentOptions';\r\nimport { Template } from '../Templates/Template';\r\nimport { Cell } from './Cell';\r\nimport { DefaultMatrixResultPreviewTemplate } from './DefaultMatrixResultPreviewTemplate';\r\n\r\nexport interface IMatrixOptions {\r\n  title?: string;\r\n\r\n  rowField: IFieldOption;\r\n  sortCriteria?: string;\r\n  maximumNumberOfRows?: number;\r\n  enableRowTotals?: boolean;\r\n\r\n  columnField: IFieldOption;\r\n  columnFieldValues?: string[];\r\n  columnLabels?: string[];\r\n  columnHeader?: string;\r\n  maximumNumberOfValuesInGroupBy?: number;\r\n  enableColumnTotals?: boolean;\r\n\r\n  computedField: IFieldOption;\r\n  computedFieldOperation?: string;\r\n  computedFieldFormat?: string;\r\n  cellFontSize?: string;\r\n\r\n  enableHoverPreview?: boolean;\r\n  previewSortCriteria?: string;\r\n  previewSortField?: IFieldOption;\r\n  previewMaxWidth?: string;\r\n  previewMinWidth?: string;\r\n  previewDelay?: number;\r\n  previewTemplate?: Template;\r\n}\r\n\r\n/**\r\n * The Matrix component uses the values of two fields (row and column) to display the results of the specified computed\r\n * field in a table.\r\n *\r\n * The user specifies the values to use for the columns. An {@link IGroupByRequest} operation performed at the same time\r\n * as the main query retrieves the values to use for the rows.\r\n *\r\n * In a way that is similar to the {@link Facet} component, selecting a Matrix cell allows the end user to drill down\r\n * inside the results by restricting the row field and the column field to match the values of the selected cell.\r\n *\r\n * @notSupportedIn salesforcefree\r\n */\r\nexport class Matrix extends Component {\r\n  static ID = 'Matrix';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Matrix: Matrix\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The possible options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IMatrixOptions = {\r\n    /**\r\n     * Specifies the text to display at the top of the Matrix.\r\n     */\r\n    title: ComponentOptions.buildStringOption(),\r\n\r\n    /**\r\n     * Specifies the field to use for the rows.\r\n     *\r\n     * Specifying a value for this options is required for this component to work.\r\n     */\r\n    rowField: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the field to use for the columns.\r\n     *\r\n     * Specifying a value for this options is required for this component to work.\r\n     */\r\n    columnField: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the criteria to use for sorting the rows.\r\n     *\r\n     * See {@link IGroupByRequest.sortCriteria} for the list of possible values.\r\n     *\r\n     * Default value is `computedfielddescending`.\r\n     */\r\n    sortCriteria: ComponentOptions.buildStringOption({ defaultValue: 'computedfielddescending' }),\r\n\r\n    /**\r\n     * Specifies the maximum number of rows to display in the Matrix.\r\n     *\r\n     * Default value is `10`. Minimum value is `0`.\r\n     */\r\n    maximumNumberOfRows: ComponentOptions.buildNumberOption({ defaultValue: 10, min: 0 }),\r\n\r\n    /**\r\n     * Specifies whether to display a **Total** column containing the sum of each row.\r\n     *\r\n     * Default value is `true`.\r\n     */\r\n    enableRowTotals: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n\r\n    /**\r\n     * Specifies the field values to use for each column.\r\n     *\r\n     * See also {@link Matrix.options.columnLabels}.\r\n     *\r\n     * Default value is `[]`, which means that the Matrix will not generate any column (except the **Total** column, if\r\n     * {@link Matrix.options.enableRowTotals} is `true`).\r\n     */\r\n    columnFieldValues: ComponentOptions.buildListOption<string>({ defaultValue: [] }),\r\n\r\n    /**\r\n     * Specifies the label values to use for each column.\r\n     *\r\n     * Default value is `[]`. The array set for this options should match the {@link Matrix.options.columnFieldValues}.\r\n     */\r\n    columnLabels: ComponentOptions.buildListOption<string>({ defaultValue: [] }),\r\n\r\n    /**\r\n     * Specifies the label for the first column on the left as a description of the {@link Matrix.options.columnField}.\r\n     *\r\n     * Default value is `undefined`.\r\n     */\r\n    columnHeader: ComponentOptions.buildStringOption(),\r\n\r\n    /**\r\n     * Specifies the maximum number of results to include in the {@link IGroupByRequest} for the columns.\r\n     *\r\n     * This value should always be greater than the {@link Matrix.options.maximumNumberOfRows}. If it is too small, some\r\n     * of the results will not be displayed in the Matrix.\r\n     *\r\n     * Default value is `100`. Minimum value is `0`.\r\n     */\r\n    maximumNumberOfValuesInGroupBy: ComponentOptions.buildNumberOption({ defaultValue: 100, min: 0 }),\r\n\r\n    /**\r\n     * Specifies whether to add a **Total** row containing the total of each column.\r\n     *\r\n     * Default value is `true`\r\n     */\r\n    enableColumnTotals: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n\r\n    /**\r\n     * Specifies the field whose computed values you want to display in the cells.\r\n     *\r\n     * Specifying a value for this options is required for this component to work.\r\n     */\r\n    computedField: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the type of aggregate operation to perform on the {@link Matrix.options.computedField}.\r\n     *\r\n     * The possible values are:\r\n     * - `sum` - Computes the sum of the computed field values.\r\n     * - `average` - Computes the average of the computed field values.\r\n     * - `minimum` - Finds the minimum value of the computed field values.\r\n     * - `maximum` - Finds the maximum value of the computed field values.\r\n     *\r\n     * Default value is `sum`.\r\n     */\r\n    computedFieldOperation: ComponentOptions.buildStringOption({ defaultValue: 'sum' }),\r\n\r\n    /**\r\n     * Specifies how to format the values resulting from a {@link Matrix.options.computedFieldOperation}.\r\n     *\r\n     * The Globalize library defines all available formats (see\r\n     * [Globalize](https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-)).\r\n     *\r\n     * The most commonly used formats are:\r\n     * - `c0` - Formats the value as a currency.\r\n     * - `n0` - Formats the value as an integer.\r\n     * - `n2` - Formats the value as a floating point with 2 decimal digits.\r\n     *\r\n     * Default value is `c0`.\r\n     */\r\n    computedFieldFormat: ComponentOptions.buildStringOption({ defaultValue: 'c0' }),\r\n\r\n    /**\r\n     * Specifies the font-size to use for displaying text inside the cells.\r\n     *\r\n     * This option is mainly useful to prevent a Matrix containing many columns from cropping some of its values.\r\n     *\r\n     * However, instead of using this option to solve this kind of issue, you could also remove some of the less\r\n     * important columns from your Matrix or modify the CSS of your page to allow the Matrix to occupy a larger space.\r\n     *\r\n     * Default value is `''`.\r\n     */\r\n    cellFontSize: ComponentOptions.buildStringOption({ defaultValue: '' }),\r\n\r\n    /**\r\n     * Specifies whether to show a preview popup of cell results when hovering over a cell.\r\n     *\r\n     * See also {@link Matrix.options.previewSortCriteria}, {@link Matrix.options.previewMaxWidth},\r\n     * {@link Matrix.options.previewMinWidth}, {@link Matrix.options.previewDelay} and\r\n     * {@link Matrix.options.previewTemplate}.\r\n     *\r\n     * Default value is `true`.\r\n     */\r\n    enableHoverPreview: ComponentOptions.buildBooleanOption({ defaultValue: true }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the criteria to use for sorting the results of\r\n     * the hover preview.\r\n     *\r\n     * The available sort criteria values are the same as those of the {@link IQuery}.\r\n     *\r\n     * The possible values are:\r\n     * - `relevancy`: Uses all configured ranking weights and any specified ranking expressions to sort the results.\r\n     * - `dateascending` / `datedescending`: Sorts the results using the `@date` field value, which is typically the\r\n     * last modification date of an item in the index.\r\n     * - `qre`: Sorts the results using only the weights applied by ranking expressions. Using `qre` is much like using\r\n     * `relevancy`, except that `qre` does not compute automatic weights, such as weights based on keyword proximity.\r\n     * - `nosort`: Does not sort the results. Using `nosort` returns the items in an essentially random order.\r\n     * - `fieldascending` / `fielddescending`: Sorts the results using the value of a custom field.\r\n     * - `fieldascending` / `fielddescending`: Sorts the results using the value of a custom field.\r\n     *\r\n     * See also {@link Matrix.options.previewSortField}.\r\n     *\r\n     * Default value is `FieldDescending`.\r\n     */\r\n    previewSortCriteria: ComponentOptions.buildStringOption({ defaultValue: 'FieldDescending' }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.previewSortCriteria} is `fieldascending` or `fielddescending`, specifies the field to\r\n     * use for sorting the results of the hover preview.\r\n     *\r\n     * Default value is the value of {@link Matrix.options.computedField}.\r\n     */\r\n    previewSortField: ComponentOptions.buildFieldOption(),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the maximum width (in pixels) of the preview\r\n     * popup.\r\n     *\r\n     * Default value is `500px`.\r\n     */\r\n    previewMaxWidth: ComponentOptions.buildStringOption({ defaultValue: '500px' }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the minimum width (in pixels) of the preview\r\n     * popup.\r\n     *\r\n     * Default value is `0`.\r\n     */\r\n    previewMinWidth: ComponentOptions.buildStringOption({ defaultValue: '0' }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the delay (in milliseconds) before sending the\r\n     * query to get the preview results.\r\n     *\r\n     * Default value is `500`.\r\n     */\r\n    previewDelay: ComponentOptions.buildNumberOption({ defaultValue: 500 }),\r\n\r\n    /**\r\n     * If {@link Matrix.options.enableHoverPreview} is `true`, specifies the template ID or CSS selector of the template\r\n     * to use to render the results of the hover preview.\r\n     *\r\n     * You must use either `data-template-id` or `data-template-selector` in the markup to specify a value for this\r\n     * option.\r\n     *\r\n     * **Examples:**\r\n     *\r\n     * Specifying what template to use by referring to its template ID:\r\n     * ```html\r\n     * <div class='CoveoMatrix' data-template-id='TemplateId'></div>\r\n     * ```\r\n     *\r\n     * Specifying what template to use by referring to its CSS selector:\r\n     * ```html\r\n     * <div class='CoveoMatrix' data-template-selector='.templateSelector'></div>\r\n     * ```\r\n     */\r\n    previewTemplate: TemplateComponentOptions.buildTemplateOption()\r\n  };\r\n\r\n  /**\r\n   * Holds the data for the Matrix.\r\n   */\r\n  public data: Cell[][];\r\n  public groupByIndex = [];\r\n  public rowId = '';\r\n  public columnId = '';\r\n\r\n  /**\r\n   * The currently selected row value, or `undefined` if nothing is selected.\r\n   */\r\n  public selectedRowValue: string = undefined;\r\n\r\n  /**\r\n   * The currently selected column value, or `undefined` if nothing is selected.\r\n   */\r\n  public selectedColumnValue = undefined;\r\n\r\n  private numberOfRows = 0;\r\n  private numberOfColumns = 0;\r\n  private previewTimeout: number;\r\n\r\n  /**\r\n   * Creates a new Matrix. Also verifies whether options are valid and coherent. Binds query events.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Matrix component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IMatrixOptions, bindings?: IComponentBindings) {\r\n    super(element, Matrix.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, Matrix, options);\r\n\r\n    if (!this.options.previewTemplate) {\r\n      this.options.previewTemplate = new DefaultMatrixResultPreviewTemplate(\r\n        <string>this.options.computedField,\r\n        this.options.computedFieldFormat\r\n      );\r\n    }\r\n\r\n    if (!this.options.previewSortField) {\r\n      this.options.previewSortField = <string>this.options.computedField;\r\n    }\r\n\r\n    if (this.options.columnFieldValues.length != this.options.columnLabels.length) {\r\n      this.options.columnLabels = this.options.columnFieldValues;\r\n    }\r\n\r\n    this.buildMatrix();\r\n    if (this.options.rowField == null) {\r\n      this.logger.error(\"'rowField' option is required in the Matrix component\");\r\n    } else if (this.options.columnField == null) {\r\n      this.logger.error(\"'columnField' option is required in the Matrix component\");\r\n    } else if (this.options.computedField == null) {\r\n      this.logger.error(\"'computedField' option is required in the Matrix component\");\r\n    } else {\r\n      this.bindEvents();\r\n      this.initQueryState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects a cell by its row and column number. Does not execute a query.\r\n   * @param rowNumber The row number of the cell to select.\r\n   * @param columnNumber The column number of the cell to select.\r\n   */\r\n  public selectCell(rowNumber: number, columnNumber: number): void {\r\n    let rowValue, columnValue;\r\n    if (rowNumber !== 0 && rowNumber !== this.numberOfRows - 1) {\r\n      rowValue = this.getRowValue(rowNumber);\r\n    }\r\n\r\n    if (columnNumber !== 0 && columnNumber !== this.numberOfColumns - 1) {\r\n      columnValue = this.getColumnValue(columnNumber);\r\n    }\r\n\r\n    if (rowValue && this.isRowFacetPresent()) {\r\n      this.queryStateModel.set(this.rowId, [rowValue]);\r\n    } else {\r\n      this.selectedRowValue = rowValue;\r\n      this.queryStateModel.set(this.rowId, []);\r\n    }\r\n\r\n    if (columnValue && this.isColumnFacetPresent()) {\r\n      this.queryStateModel.set(this.columnId, [columnValue]);\r\n    } else {\r\n      this.selectedColumnValue = columnValue;\r\n      this.queryStateModel.set(this.columnId, []);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the currently selected column value.\r\n   */\r\n  public getSelectedColumnValue(): string {\r\n    return this.selectedColumnValue;\r\n  }\r\n\r\n  /**\r\n   * Returns the currently selected row value.\r\n   */\r\n  public getSelectedRowValue(): string {\r\n    return this.selectedRowValue;\r\n  }\r\n\r\n  /**\r\n   * Gets the HTMLElement associated to a cell.\r\n   * @param rowNumber The row number of the cell.\r\n   * @param columnNumber The column number of the cell.\r\n   * @returns {HTMLElement} The associated HTMLElement.\r\n   */\r\n  public getCellElement(rowNumber: number, columnNumber: number): HTMLElement {\r\n    return this.data[rowNumber][columnNumber].getHTML();\r\n  }\r\n\r\n  /**\r\n   * Gets the string associated to a cell.\r\n   * @param rowNumber The row number of the cell.\r\n   * @param columnNumber The column number of the cell.\r\n   * @returns {string} The associated string.\r\n   */\r\n  public getCellValue(rowNumber: number, columnNumber: number): string {\r\n    let cell = this.getCellElement(rowNumber, columnNumber);\r\n    return $$(cell).text();\r\n  }\r\n\r\n  public drawMatrix() {\r\n    let headerRow = $$('div', {\r\n      className: 'coveo-matrix-row matrix-header-row'\r\n    });\r\n    this.drawRow(headerRow.el, 0);\r\n    let numberOfRowsToDraw = this.options.enableColumnTotals ? this.numberOfRows - 1 : this.numberOfRows;\r\n    for (let i = 1; i < numberOfRowsToDraw; i++) {\r\n      let row = $$('div', {\r\n        className: 'coveo-matrix-row'\r\n      }).el;\r\n      this.drawRow(row, i);\r\n    }\r\n\r\n    if (this.options.enableColumnTotals) {\r\n      let totalRow = $$('div', {\r\n        className: 'coveo-matrix-row matrix-total-row'\r\n      }).el;\r\n\r\n      this.drawRow(totalRow, this.numberOfRows - 1);\r\n    }\r\n\r\n    if (this.options.cellFontSize !== '') {\r\n      let cells = $$(this.element).findAll('.coveo-matrix-cell');\r\n      _.each(cells, (c: HTMLElement) => {\r\n        c.style.fontSize = this.options.cellFontSize;\r\n      });\r\n    }\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.doneBuildingQuery, (args: IDoneBuildingQueryEventArgs) => this.handleDoneBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.deferredQuerySuccess, (args: IQuerySuccessEventArgs) => this.handleDeferredQuerySuccess(args));\r\n  }\r\n\r\n  private initQueryState() {\r\n    this.rowId = QueryStateModel.getFacetId(<string>this.options.rowField);\r\n    this.columnId = QueryStateModel.getFacetId(<string>this.options.columnField);\r\n\r\n    this.queryStateModel.registerNewAttribute(this.rowId, []);\r\n    this.queryStateModel.registerNewAttribute(this.columnId, []);\r\n  }\r\n\r\n  private buildMatrix() {\r\n    this.buildTitle();\r\n    this.buildBody();\r\n    this.data = new Array<Array<Cell>>();\r\n    this.addHeaderRow();\r\n  }\r\n\r\n  private buildTitle() {\r\n    let title = this.options.title ? this.options.title : '';\r\n    let titleHtml = $$(\r\n      'div',\r\n      {\r\n        className: 'coveo-matrix-title'\r\n      },\r\n      title\r\n    ).el;\r\n    this.element.appendChild(titleHtml);\r\n  }\r\n\r\n  private buildBody() {\r\n    let body = $$('div', {\r\n      className: 'coveo-matrix'\r\n    }).el;\r\n    this.element.appendChild(body);\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\r\n    if (!this.areFacetsPresent()) {\r\n      if (this.selectedRowValue && !this.isRowFacetPresent()) {\r\n        args.queryBuilder.advancedExpression.addFieldExpression(<string>this.options.rowField, '=', [this.selectedRowValue]);\r\n      }\r\n      if (this.selectedColumnValue && !this.isColumnFacetPresent()) {\r\n        args.queryBuilder.advancedExpression.addFieldExpression(<string>this.options.columnField, '=', [this.selectedColumnValue]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleDoneBuildingQuery(args: IDoneBuildingQueryEventArgs) {\r\n    this.groupByIndex = [];\r\n    this.addMainGroubByRequest(args.queryBuilder);\r\n    this.addColumnsGroupByRequests(args.queryBuilder);\r\n  }\r\n\r\n  private handleDeferredQuerySuccess(args: IQuerySuccessEventArgs) {\r\n    this.reset();\r\n    this.parseResults(args.results);\r\n    this.addTotals();\r\n    this.drawMatrix();\r\n    this.formatCells();\r\n    this.selectedRowValue = undefined;\r\n    this.selectedColumnValue = undefined;\r\n  }\r\n\r\n  private addMainGroubByRequest(queryBuilder: QueryBuilder) {\r\n    let groupBy: IGroupByRequest = {\r\n      field: <string>this.options.rowField,\r\n      sortCriteria: this.options.sortCriteria,\r\n      computedFields: this.getComputedFields(),\r\n      maximumNumberOfValues: this.options.maximumNumberOfRows\r\n    };\r\n\r\n    this.groupByIndex.push(queryBuilder.groupByRequests.length);\r\n    queryBuilder.groupByRequests.push(groupBy);\r\n  }\r\n\r\n  private addColumnsGroupByRequests(queryBuilder: QueryBuilder) {\r\n    for (let i = 0; i < this.options.columnFieldValues.length; i++) {\r\n      let groupBy = {\r\n        field: <string>this.options.rowField,\r\n        sortCriteria: this.options.sortCriteria,\r\n        computedFields: this.getComputedFields(),\r\n        queryOverride:\r\n          '(' + this.buildExpression(queryBuilder) + ')' + '(' + this.options.columnField + \"='\" + this.options.columnFieldValues[i] + \"')\",\r\n        maximumNumberOfValues: this.options.maximumNumberOfValuesInGroupBy\r\n      };\r\n\r\n      this.groupByIndex.push(queryBuilder.groupByRequests.length);\r\n      queryBuilder.groupByRequests.push(groupBy);\r\n    }\r\n  }\r\n\r\n  private buildExpression(queryBuilder: QueryBuilder) {\r\n    let expression = queryBuilder.expression.build();\r\n    let advancedExpression = queryBuilder.advancedExpression.build();\r\n    let constantExpression = queryBuilder.constantExpression.build();\r\n    let totalQuery = '';\r\n    if (expression) {\r\n      totalQuery += ' ' + expression;\r\n    }\r\n    if (advancedExpression) {\r\n      totalQuery += ' ' + advancedExpression;\r\n    }\r\n    if (constantExpression) {\r\n      totalQuery += ' ' + constantExpression;\r\n    }\r\n    return totalQuery;\r\n  }\r\n\r\n  private getComputedFields() {\r\n    let computedFields = [\r\n      {\r\n        field: <string>this.options.computedField,\r\n        operation: this.options.computedFieldOperation\r\n      }\r\n    ];\r\n    return computedFields;\r\n  }\r\n\r\n  private getCellResult(results, rowNumber: number, columnNumber: number) {\r\n    let rowValue = this.getRowValue(rowNumber);\r\n    let columnValue = this.getColumnValue(columnNumber);\r\n    let cellResult = 0;\r\n\r\n    for (let i = 0; i < results.values.length; i++) {\r\n      if (results.values[i].value === rowValue) {\r\n        cellResult = results.values[i].computedFieldResults[0];\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (this.isAColumnSelected() && !this.isColumnSelected(columnValue)) {\r\n      cellResult = 0;\r\n    }\r\n\r\n    return cellResult;\r\n  }\r\n\r\n  private addTotals() {\r\n    if (this.options.enableRowTotals) {\r\n      this.addRowTotals();\r\n    }\r\n    if (this.options.enableColumnTotals) {\r\n      this.addColumnTotals();\r\n    }\r\n  }\r\n\r\n  private addRowTotals() {\r\n    this.addColumn();\r\n    this.setValue('Total', 0, this.numberOfColumns - 1);\r\n    for (let i = 1; i < this.numberOfRows; i++) {\r\n      let rowTotal = this.computeRowTotal(i);\r\n      this.setValue(rowTotal, i, this.numberOfColumns - 1);\r\n    }\r\n\r\n    // Fix sort ordering when not all columns field values are present.\r\n    if (this.options.sortCriteria.toLowerCase() == 'computedfielddescending') {\r\n      this.data.sort((a: Cell[], b: Cell[]): number => {\r\n        return b[this.numberOfColumns - 1].getValue() - a[this.numberOfColumns - 1].getValue();\r\n      });\r\n    }\r\n\r\n    if (this.options.sortCriteria.toLowerCase() == 'computedfieldascending') {\r\n      this.data.sort((a: Cell[], b: Cell[]): number => {\r\n        return a[this.numberOfColumns - 1].getValue() - b[this.numberOfColumns - 1].getValue();\r\n      });\r\n    }\r\n  }\r\n\r\n  private addColumnTotals() {\r\n    this.addRow();\r\n    this.setValue('Total', this.numberOfRows - 1, 0);\r\n    for (let i = 1; i < this.numberOfColumns; i++) {\r\n      let columnTotal = this.computeColumnTotal(i);\r\n      this.setValue(columnTotal, this.numberOfRows - 1, i);\r\n    }\r\n  }\r\n\r\n  private computeRowTotal(rowNumber: number): number {\r\n    let total = 0;\r\n    for (let columnNumber = 1; columnNumber < this.numberOfColumns - 1; columnNumber++) {\r\n      total += parseInt(this.getCellValue(rowNumber, columnNumber));\r\n    }\r\n    return total;\r\n  }\r\n\r\n  private computeColumnTotal(columnNumber: number): number {\r\n    let total = 0;\r\n    for (let rowNumber = 1; rowNumber < this.numberOfRows - 1; rowNumber++) {\r\n      total += parseInt(this.getCellValue(rowNumber, columnNumber));\r\n    }\r\n    return total;\r\n  }\r\n\r\n  private formatCells() {\r\n    for (let i = 1; i < this.numberOfRows; i++) {\r\n      for (let j = 1; j < this.numberOfColumns; j++) {\r\n        let cellValue = this.getCellValue(i, j);\r\n        cellValue = Globalize.format(parseInt(cellValue), this.options.computedFieldFormat);\r\n        this.setValue(cellValue, i, j);\r\n      }\r\n    }\r\n  }\r\n\r\n  private addHeaderRow() {\r\n    this.addRow();\r\n    this.addColumn();\r\n    this.setValue(this.options.columnHeader, 0, 0);\r\n    for (let i = 0; i < this.options.columnLabels.length; i++) {\r\n      this.addColumn();\r\n      this.setValue(this.options.columnLabels[i], 0, i + 1);\r\n    }\r\n  }\r\n\r\n  private addRow() {\r\n    this.data.push(new Array<Cell>());\r\n\r\n    for (let i = 0; i < this.numberOfColumns; i++) {\r\n      this.addCellToRow(this.numberOfRows, i);\r\n    }\r\n    this.numberOfRows++;\r\n  }\r\n\r\n  private addColumn() {\r\n    for (let i = 0; i < this.numberOfRows; i++) {\r\n      this.addCellToRow(i, this.numberOfColumns);\r\n    }\r\n\r\n    this.numberOfColumns++;\r\n  }\r\n\r\n  private addCellToRow(rowNumber: number, columnNumber: number) {\r\n    let column = $$('div', {\r\n      className: 'coveo-matrix-cell'\r\n    });\r\n\r\n    if (columnNumber == 0) {\r\n      column.addClass('matrix-first-column');\r\n    }\r\n    this.data[rowNumber].push(new Cell(0, column.el));\r\n  }\r\n\r\n  private setValue(value: any, rowNumber: number, columnNumber: number) {\r\n    let cell = this.getCellElement(rowNumber, columnNumber);\r\n    if (!Utils.isNullOrUndefined(value)) {\r\n      $$(cell).text(value.toString());\r\n    }\r\n\r\n    if (this.isCellSelected(this.getRowValue(rowNumber), this.getColumnValue(columnNumber))) {\r\n      $$(cell).addClass('coveo-matrix-selected');\r\n    }\r\n\r\n    if (this.isAColumnSelected() && !this.isColumnSelected(this.getColumnValue(columnNumber))) {\r\n      if (columnNumber != 0 && rowNumber != 0) {\r\n        $$(cell).addClass('coveo-matrix-unimportant');\r\n      }\r\n    }\r\n\r\n    this.data[rowNumber][columnNumber].setValue(value);\r\n  }\r\n\r\n  private handleClick(rowNumber: number, columnNumber: number) {\r\n    this.selectCell(rowNumber, columnNumber);\r\n    this.queryController.executeQuery();\r\n  }\r\n\r\n  private getRowValue(rowNumber: number): string {\r\n    return this.data[rowNumber][0].getValue();\r\n  }\r\n\r\n  private getColumnValue(columnNumber: number): string {\r\n    return this.options.columnFieldValues[columnNumber - 1];\r\n  }\r\n\r\n  private isAColumnSelected(): boolean {\r\n    let selectedColumnValues = this.queryStateModel.get(this.columnId) || [];\r\n    return selectedColumnValues.length !== 0 || this.selectedColumnValue != undefined;\r\n  }\r\n\r\n  private isColumnSelected(columnValue: string): boolean {\r\n    if (this.isAColumnSelected() && columnValue) {\r\n      let selectedColumnValues = this.queryStateModel.attributes[this.columnId] || [];\r\n      for (let i = 0; i < selectedColumnValues.length; i++) {\r\n        if (selectedColumnValues[i].toLowerCase() === columnValue.toLowerCase()) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return this.selectedColumnValue == columnValue;\r\n  }\r\n\r\n  private isARowSelected(): boolean {\r\n    let selectedRowValues = this.queryStateModel.get(this.rowId) || [];\r\n    return selectedRowValues.length !== 0 || this.selectedRowValue !== undefined;\r\n  }\r\n\r\n  private isRowSelected(rowValue: string): boolean {\r\n    if (this.isARowSelected() && rowValue) {\r\n      let selectedRowValues = this.queryStateModel.get(this.rowId) || [];\r\n      for (let i = 0; i < selectedRowValues.length; i++) {\r\n        if (selectedRowValues[i].toLowerCase() === rowValue.toLowerCase()) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return this.selectedRowValue == rowValue;\r\n  }\r\n\r\n  private isCellSelected(rowValue: string, columnValue: string): boolean {\r\n    if (this.isAColumnSelected() && this.isARowSelected()) {\r\n      return this.isRowSelected(rowValue) && this.isColumnSelected(columnValue);\r\n    } else if (this.isAColumnSelected()) {\r\n      return this.isColumnSelected(columnValue);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private areFacetsPresent() {\r\n    return this.isRowFacetPresent() && this.isColumnFacetPresent();\r\n  }\r\n\r\n  private isRowFacetPresent() {\r\n    let facet = this.componentStateModel.get(this.rowId);\r\n    return facet && !facet[0].disabled;\r\n  }\r\n\r\n  private isColumnFacetPresent() {\r\n    let facet = this.componentStateModel.get(this.columnId);\r\n    return facet && !facet[0].disabled;\r\n  }\r\n\r\n  private reset() {\r\n    $$(this.element).empty();\r\n    this.numberOfRows = 0;\r\n    this.numberOfColumns = 0;\r\n    this.data = new Array<Array<Cell>>();\r\n\r\n    this.buildMatrix();\r\n  }\r\n\r\n  private parseResults(results: IQueryResults) {\r\n    if (results) {\r\n      let mainResults = results.groupByResults[this.groupByIndex[0]];\r\n      if (mainResults) {\r\n        for (let i = 0; i < mainResults.values.length; i++) {\r\n          let value = mainResults.values[i].value;\r\n          this.addRow();\r\n          this.setValue(value, i + 1, 0);\r\n        }\r\n      }\r\n\r\n      for (let i = 1; i < this.numberOfRows; i++) {\r\n        for (let j = 1; j < this.numberOfColumns; j++) {\r\n          let columnResult = results.groupByResults[this.groupByIndex[j]];\r\n          let cellValue = this.getCellResult(columnResult, i, j);\r\n          this.setValue(cellValue, i, j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private drawRow(row: HTMLElement, rowNumber: number) {\r\n    let body = $$(this.element).find('.coveo-matrix');\r\n    for (let i = 0; i < this.numberOfColumns; i++) {\r\n      let cell = this.data[rowNumber][i].getHTML();\r\n      $$(cell).on('click', () => {\r\n        let handler = num => {\r\n          this.handleClick(rowNumber, num);\r\n        };\r\n        handler(i);\r\n      });\r\n\r\n      if (this.options.enableHoverPreview) {\r\n        ((num: number) => {\r\n          $$(cell).on('mouseover', () => this.handleHoverIn(rowNumber, num));\r\n          $$(cell).on('mouseout', () => this.handleHoverOut(rowNumber, num));\r\n        })(i);\r\n      }\r\n      row.appendChild(cell);\r\n    }\r\n    body.appendChild(row);\r\n  }\r\n\r\n  private handleHoverIn(rowNumber: number, columnNumber: number) {\r\n    if (this.isHoverWorkingOnRow(rowNumber) && this.isHoverWorkingOnColumn(columnNumber)) {\r\n      this.previewTimeout = window.setTimeout(() => {\r\n        this.displayResultsPreview(rowNumber, columnNumber);\r\n      }, this.options.previewDelay);\r\n    }\r\n  }\r\n\r\n  private handleHoverOut(rowNumber: number, columnNumber: number) {\r\n    clearTimeout(this.previewTimeout);\r\n    let cell = this.data[rowNumber][columnNumber];\r\n    cell.removePreview();\r\n  }\r\n\r\n  private displayResultsPreview(rowNumber: number, columnNumber: number) {\r\n    let query = this.createPreviewQuery(rowNumber, columnNumber);\r\n    let cell = this.data[rowNumber][columnNumber];\r\n    cell.addPreview(this.options.previewMinWidth, this.options.previewMaxWidth);\r\n\r\n    let endpoint = this.queryController.getEndpoint();\r\n    endpoint.search(query).then((data: IQueryResults) => {\r\n      // During the time it take for the query to return, the matrix can change size depending\r\n      // on if another query was performed : Need to check for undefined before accessing the data\r\n      // we're trying to render;\r\n      if (!this.isDataAvailable(rowNumber, columnNumber)) {\r\n        return;\r\n      }\r\n      let cell = this.data[rowNumber][columnNumber];\r\n      let instantiatedResults = _.map(data.results, (r: IQueryResult) => {\r\n        return this.instantiateTemplate(r);\r\n      });\r\n      let html = '';\r\n      _.each(instantiatedResults, result => {\r\n        result.then((builtResultElement: HTMLElement) => {\r\n          html += builtResultElement.outerHTML;\r\n        });\r\n      });\r\n      Promise.all(instantiatedResults).then(() => {\r\n        cell.updatePreview(html);\r\n      });\r\n    });\r\n  }\r\n\r\n  private instantiateTemplate(result: IQueryResult): Promise<HTMLElement> {\r\n    return this.options.previewTemplate\r\n      .instantiateToElement(result, {\r\n        checkCondition: false,\r\n        responsiveComponents: this.searchInterface.responsiveComponents\r\n      })\r\n      .then((content: HTMLElement) => {\r\n        let initParameters: IInitializationParameters = {\r\n          options: this.options,\r\n          bindings: this.getBindings(),\r\n          result: result\r\n        };\r\n\r\n        return Initialization.automaticallyCreateComponentsInside(content, initParameters).initResult.then(() => {\r\n          return content;\r\n        });\r\n      });\r\n  }\r\n\r\n  private createPreviewQuery(rowNumber: number, columnNumber: number): IQuery {\r\n    let rowFieldExpression = '(' + QueryUtils.buildFieldExpression(<string>this.options.rowField, '=', [this.getRowValue(rowNumber)]) + ')';\r\n    let columnFieldExpression =\r\n      '(' + QueryUtils.buildFieldExpression(<string>this.options.columnField, '=', [this.getColumnValue(columnNumber)]) + ')';\r\n    let query = this.queryController.getLastQuery();\r\n    query.aq = rowFieldExpression;\r\n    query.aq += columnFieldExpression;\r\n    query.sortCriteria = this.options.previewSortCriteria;\r\n    query.sortField = <string>this.options.previewSortField;\r\n    let fieldSliced = this.options.computedField.slice(1);\r\n    let fieldExists = _.find(query.fieldsToInclude, (field: string) => {\r\n      return field == fieldSliced;\r\n    });\r\n    if (!fieldExists && query.fieldsToInclude) {\r\n      query.fieldsToInclude.push(fieldSliced);\r\n    }\r\n    return query;\r\n  }\r\n\r\n  private isHoverWorkingOnRow(rowNumber: number) {\r\n    if (this.options.enableColumnTotals) {\r\n      return rowNumber !== 0 && rowNumber !== this.numberOfRows - 1;\r\n    }\r\n    return rowNumber !== 0;\r\n  }\r\n\r\n  private isHoverWorkingOnColumn(columnNumber: number) {\r\n    if (this.options.enableRowTotals) {\r\n      return columnNumber !== 0 && columnNumber !== this.numberOfColumns - 1;\r\n    }\r\n    return columnNumber !== 0;\r\n  }\r\n\r\n  private isDataAvailable(row: number, column: number) {\r\n    return this.data[row] !== undefined && this.data[row][column] !== undefined;\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(Matrix);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Matrix/Matrix.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/_Matrix.scss\n// module id = 627\n// module chunks = 36 88","import { $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\n\r\n/**\r\n * Represent a single cell of data in the {@link Matrix} component.\r\n */\r\nexport class Cell {\r\n  private value: any;\r\n  private element: HTMLElement;\r\n  private previewActive = false;\r\n\r\n  constructor(value: any = 0, el?: HTMLElement) {\r\n    this.element = el;\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Return the value of the cell.\r\n   * @returns {any}\r\n   */\r\n  public getValue(): any {\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * Return the `HTMLElement` for the cell.\r\n   * @returns {HTMLElement}\r\n   */\r\n  public getHTML(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Set the value if the cell.\r\n   * @param value\r\n   */\r\n  public setValue(value: any) {\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * Set the `HTMLElement` for the cell.\r\n   * @param html\r\n   */\r\n  public setHTML(html: HTMLElement) {\r\n    this.element = html;\r\n  }\r\n\r\n  /**\r\n   * Show the preview of the cell.\r\n   * @param minWidth css minWidth property : eg 100px\r\n   * @param maxWidth css maxWidth property : eg 100px\r\n   */\r\n  public addPreview(minWidth: string, maxWidth: string) {\r\n    this.previewActive = true;\r\n    let previewContainer = $$('div', {\r\n      className: 'matrix-results-preview-container'\r\n    });\r\n    previewContainer.el.style.minWidth = minWidth;\r\n    previewContainer.el.style.maxWidth = maxWidth;\r\n    previewContainer.on('click', (e: MouseEvent) => {\r\n      e.stopPropagation();\r\n    });\r\n    this.element.appendChild(previewContainer.el);\r\n    let container = $$(this.element).findAll('.matrix-results-preview-container');\r\n    _.each(container, (c: HTMLElement) => {\r\n      $$(c).hide();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove the preview of the cell\r\n   */\r\n  public removePreview() {\r\n    this.previewActive = false;\r\n    let container = $$(this.element).find('.matrix-results-preview-container');\r\n    if (container) {\r\n      $$(container).detach();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the preview with a new template\r\n   * @param template\r\n   */\r\n  public updatePreview(template: string) {\r\n    if (this.previewActive) {\r\n      let preview = $$(this.element).find('.matrix-results-preview-container');\r\n      preview.innerHTML += template;\r\n      $$(preview).show();\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Matrix/Cell.ts","import { Template, IInstantiateTemplateOptions } from '../Templates/Template';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as Globalize from 'globalize';\r\n\r\nexport class DefaultMatrixResultPreviewTemplate extends Template {\r\n  constructor(private computedField: string, private format: string) {\r\n    super();\r\n  }\r\n\r\n  instantiateToString(object?: IQueryResult, instantiateOptions?: IInstantiateTemplateOptions): string {\r\n    var preview =\r\n      \"<div class='coveo-result-frame'>\" +\r\n      \"<div class='coveo-result-row'>\" +\r\n      \"<div class='coveo-result-cell' style='width: 40px; padding-right:5px;vertical-align: middle'>\" +\r\n      \"<a class='CoveoIcon' data-small='true'></a>\" +\r\n      '</div>' +\r\n      \"<div class='coveo-result-cell' style='font-size:13px;vertical-align: middle'>\" +\r\n      \"<a class='CoveoResultLink'></a>\" +\r\n      '</div>' +\r\n      \"<div class='coveo-result-cell' style='width:80px; text-align:right; font-size:13px; padding-right: 5px;vertical-align: middle'>\" +\r\n      Globalize.format(parseInt(object.raw[this.computedField.slice(1)]), this.format) +\r\n      '</div>' +\r\n      '</div>' +\r\n      '</div>';\r\n    return preview;\r\n  }\r\n\r\n  instantiateToElement(object?: IQueryResult, instantiateOptions?: IInstantiateTemplateOptions): Promise<HTMLElement> {\r\n    return new Promise((resolve, reject) => {\r\n      return $$('div', undefined, this.instantiateToString(object)).el;\r\n    });\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Matrix/DefaultMatrixResultPreviewTemplate.ts"],"sourceRoot":""}