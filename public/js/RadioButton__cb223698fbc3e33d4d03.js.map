{"version":3,"sources":["./sass/vapor/_Radio.scss","./src/ui/FormWidgets/RadioButton.ts"],"names":[],"mappings":"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","file":"RadioButton__cb223698fbc3e33d4d03.js","sourcesContent":["// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./sass/vapor/_Radio.scss\n// module id = 555\n// module chunks = 13 19 23 53 88","import { $$ } from '../../utils/Dom';\r\nimport { IFormWidgetWithLabel, IFormWidgetSelectable } from './FormWidgets';\r\nimport 'styling/vapor/_Radio';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\n/**\r\n * A radio button widget with standard styling.\r\n */\r\nexport class RadioButton implements IFormWidgetWithLabel, IFormWidgetSelectable {\r\n  protected element: HTMLElement;\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      RadioButton: RadioButton\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `RadioButton`.\r\n   * @param onChange The function to call when the radio button value changes. This function takes the current\r\n   * `RadioButton` instance as an argument.\r\n   * @param label The label to display next to the radio button.\r\n   * @param name The value to set the `input` HTMLElement `name` attribute to.\r\n   */\r\n  constructor(\r\n    public onChange: (radioButton: RadioButton) => void = (radioButton: RadioButton) => {},\r\n    public label: string,\r\n    public name: string,\r\n    private id: string = label\r\n  ) {\r\n    this.buildContent();\r\n  }\r\n\r\n  /**\r\n   * Resets the radio button.\r\n   */\r\n  public reset() {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = false;\r\n    if (currentlySelected) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select the radio button\r\n   * @param triggerChange will trigger change event if specified and the radio button is not already selected\r\n   */\r\n  public select(triggerChange = true) {\r\n    const currentlySelected = this.isSelected();\r\n    this.getRadio().checked = true;\r\n    if (!currentlySelected && triggerChange) {\r\n      this.onChange(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public build(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  /**\r\n   * Gets the element on which the radio button is bound.\r\n   * @returns {HTMLElement} The radio button element.\r\n   */\r\n  public getElement(): HTMLElement {\r\n    return this.element;\r\n  }\r\n\r\n  public getValue(): string {\r\n    return this.label;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the radio button is selected.\r\n   * @returns {boolean} `true` if the radio button is selected, `false` otherwise.\r\n   */\r\n  public isSelected(): boolean {\r\n    return this.getRadio().checked;\r\n  }\r\n\r\n  /**\r\n   * Gets the `input` element (the radio button itself).\r\n   * @returns {HTMLInputElement} The `input` element.\r\n   */\r\n  public getRadio(): HTMLInputElement {\r\n    return <HTMLInputElement>$$(this.element).find('input');\r\n  }\r\n\r\n  /**\r\n   * Gets the radio button [`label`]{@link RadioButton.label} element.\r\n   * @returns {HTMLLabelElement} The `label` element.\r\n   */\r\n  public getLabel(): HTMLLabelElement {\r\n    return <HTMLLabelElement>$$(this.element).find('label');\r\n  }\r\n\r\n  private buildContent() {\r\n    const radioOption = $$('div', { className: 'coveo-radio' });\r\n    const radioInput = $$('input', { type: 'radio', name: this.name, id: this.id });\r\n    const labelInput = $$('label', { className: 'coveo-radio-input-label', for: this.id });\r\n    labelInput.text(this.label);\r\n    radioInput.on('change', () => {\r\n      this.onChange(this);\r\n    });\r\n\r\n    radioOption.append(radioInput.el);\r\n    radioOption.append(labelInput.el);\r\n    this.element = radioOption.el;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FormWidgets/RadioButton.ts"],"sourceRoot":""}