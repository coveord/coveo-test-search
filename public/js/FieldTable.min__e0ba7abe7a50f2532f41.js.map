{"version":3,"sources":["FieldTable.min__e0ba7abe7a50f2532f41.js","./src/ui/FieldValue/FieldValue.ts","./src/ui/FieldTable/FieldTable.ts","./src/ui/Facet/FacetUtils.ts","./src/ui/FieldValue/IFieldValueCompatibleFacet.ts"],"names":["webpackJsonpCoveo__temporary","121","module","exports","__webpack_require__","showOnlyWithHelper","helpers","options","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","bindings","result","fieldValueClassId","FieldValue","ID","ComponentOptions","initOptions","simpleOptions","helper","normalizeHelperAndOptions","resolveResult","Assert","exists","TemplateFieldsEvaluator","evaluateFieldsToMatch","conditions","Utils","isNullOrUndefined","getValue","initialize","parentElement","removeChild","_this","values","loadedValueFromComponent","isArray","splitValues","isString","map","split","separator","v","trim","toString","appendValuesToDom","textCaption","prependTextCaptionToDom","getFieldValue","field","isObject","renderOneValue","$$","el","toRender","getCaption","TemplateHelpers","getHelper","call","getHelperOptions","logger","warn","keys","getHelpers","fullDateStr","getFullDate","setAttribute","StringUtils","capitalizeFirstLetter","htmlValue","innerHTML","appendChild","document","createTextNode","bindEventOnValue","getValueContainer","helperOptions","toFilter","toKeep","filter","optionKey","optionDefinition","contains","omit","key","inlineOptions","loadStringOption","isNonEmptyString","extend","eval","date","fullDateOptions","useLongDateFormat","useTodayYesterdayAndTomorrow","useWeekdayIfThisWeek","omitYearIfCurrentOne","DateUtils","dateToString","Date","parseInt","dateTimeToString","each","index","undefined","length","displaySeparator","renderTextCaption","className","escape","elem","prepend","addClass","originalFacetValue","renderedFacetValue","bindFacets","getFacets","facet","caption","getCaptionForStringValue","FacetUtils","tryToGetTranslatedCaption","facets","ComponentsTypes","getAllFacetsFromSearchInterface","searchInterface","isFacetFieldValueCompatible","disabled","facetsWithMatchingId","id","isValueSelected","find","hasSelectedValue","selectAction","handleFacetSelection","buildClickableElement","isSelected","label","l","AccessibleButton","withTitle","withElement","withSelectAction","build","forEach","deselectValue","selectValue","executeQuery","queryController","deferExecuteQuery","beforeExecuteQuery","usageAnalytics","logSearchEvent","analyticsActionCauseList","documentField","facetId","facetField","facetValue","toLowerCase","doExport","exportGlobally","buildFieldOption","defaultValue","required","buildStringOption","postProcessing","buildBooleanOption","depend","buildHelperOption","buildObjectOption","subOptions","text","target","class","format","decimals","buildNumberOption","min","symbol","includeTimeIfToday","includeTimeIfThisWeek","alwaysIncludeTime","predefinedFormat","companyDomain","me","lengthLimit","truncateName","alt","height","width","srcTemplate","precision","base","isMilliseconds","buildLocalizedStringOption","buildFieldConditionOption","Component","Initialization","registerAutoCreateComponent","254","ValueRow","initComponentOptions","FieldTable","rows","findAll","e","detach","isTogglable","toggleContainer","uniqueId","buildToggle","insertBefore","toggleButtonInsideTable","get","toggleButton","getAttribute","set","expanded","enumerable","configurable","toggle","anim","isExpanded","minimize","expand","toggleCaption","textContent","expandedTitle","SVGDom","addClassToSVGInContainer","toggleButtonSVGContainer","slideToggle","minimizedTitle","removeClassFromSVGInContainer","updateToggleHeight","updateToggleContainerHeight","allowMinimization","ariaControls","SVGIcons","icons","arrowDown","arrowUp","minimizedByDefault","QueryUtils","hasExcerpt","requestAnimationFrame","toggleAction","withOwner","bind","withLabel","on","visible","style","display","containerHeight","offsetHeight","removeClass","toggleContainerHeight","scrollHeight","localizedString","toLocaleString","valueContainer","createElement","substr","parent","40","getRegexToUseForFacetSearch","ignoreAccent","RegExp","stringToRegex","getDisplayValueFromValueCaption","valueCaption","returnValue","getValuesToUseForSearchInFacet","original","ret","regex","facetSearchIgnoreAccents","_","chain","pairs","pair","test","match","push","isStratusAgnosticField","FileTypes","getFileTypeCaptions","range","month","monthToString","buildFacetSearchPattern","escapeRegexCharacter","join","needAnotherFacetSearch","currentSearchLength","newSearchLength","oldSearchLength","desiredSearchLength","addNoStateCssClassToFacetValues","container","getSelected","noStates","noState","fallbackOnLocalization","found","getFileType","getObjectType","isMonthFieldValue","asInt","isNaN","539","619"],"mappings":"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","file":"FieldTable.min__e0ba7abe7a50f2532f41.js","sourcesContent":["webpackJsonpCoveo__temporary([26,37],{\n\n/***/ 121:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar underscore_1 = __webpack_require__(0);\nvar GlobalExports_1 = __webpack_require__(3);\nvar Assert_1 = __webpack_require__(5);\nvar Strings_1 = __webpack_require__(6);\nvar AccessibleButton_1 = __webpack_require__(16);\nvar DateUtils_1 = __webpack_require__(33);\nvar Dom_1 = __webpack_require__(1);\nvar StringUtils_1 = __webpack_require__(22);\nvar Utils_1 = __webpack_require__(4);\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar Initialization_1 = __webpack_require__(2);\nvar FacetUtils_1 = __webpack_require__(40);\nvar TemplateFieldsEvaluator_1 = __webpack_require__(133);\nvar TemplateHelpers_1 = __webpack_require__(118);\nvar IFieldValueCompatibleFacet_1 = __webpack_require__(539);\nvar ComponentsTypes_1 = __webpack_require__(47);\nfunction showOnlyWithHelper(helpers, options) {\n    if (options == null) {\n        options = {};\n    }\n    options.helpers = helpers;\n    return options;\n}\n/**\n * The FieldValue component displays the value of a field associated to its parent search result. It is normally usable\n * within a {@link FieldTable}.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n *\n * A common use of this component is to display a specific field value which also happens to be an existing\n * {@link Facet.options.field}. When the user clicks on the FieldValue component, it activates the corresponding Facet.\n */\nvar FieldValue = /** @class */ (function (_super) {\n    __extends(FieldValue, _super);\n    /**\n     * Creates a new FieldValue.\n     * @param element The HTMLElement on which to instantiate the component.\n     * @param options The options for the FieldValue component.\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\n     * automatically resolved (with a slower execution time).\n     * @param result The result to associate the component with.\n     */\n    function FieldValue(element, options, bindings, result, fieldValueClassId) {\n        if (fieldValueClassId === void 0) { fieldValueClassId = FieldValue.ID; }\n        var _this = _super.call(this, element, fieldValueClassId, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.result = result;\n        _this.options = ComponentOptions_1.ComponentOptions.initOptions(element, FieldValue.simpleOptions, options, FieldValue.ID);\n        if (_this.options.helper != null) {\n            _this.normalizeHelperAndOptions();\n        }\n        _this.result = _this.result || _this.resolveResult();\n        Assert_1.Assert.exists(_this.result);\n        if (TemplateFieldsEvaluator_1.TemplateFieldsEvaluator.evaluateFieldsToMatch(_this.options.conditions, _this.result) && !Utils_1.Utils.isNullOrUndefined(_this.getValue())) {\n            _this.initialize();\n        }\n        else if (_this.element.parentElement != null) {\n            _this.element.parentElement.removeChild(_this.element);\n        }\n        return _this;\n    }\n    FieldValue.prototype.initialize = function () {\n        var loadedValueFromComponent = this.getValue();\n        var values;\n        if (underscore_1.isArray(loadedValueFromComponent)) {\n            values = loadedValueFromComponent;\n        }\n        else if (this.options.splitValues) {\n            if (underscore_1.isString(loadedValueFromComponent)) {\n                values = underscore_1.map(loadedValueFromComponent.split(this.options.separator), function (v) {\n                    return v.trim();\n                });\n            }\n        }\n        else {\n            loadedValueFromComponent = loadedValueFromComponent.toString();\n            values = [loadedValueFromComponent];\n        }\n        this.appendValuesToDom(values);\n        if (this.options.textCaption != null) {\n            this.prependTextCaptionToDom();\n        }\n    };\n    /**\n     * Gets the current FieldValue from the current {@link IQueryResult}.\n     *\n     * @returns {any} The current FieldValue or `null` if value is and `Object`.\n     */\n    FieldValue.prototype.getValue = function () {\n        var value = Utils_1.Utils.getFieldValue(this.result, this.options.field);\n        if (!underscore_1.isArray(value) && underscore_1.isObject(value)) {\n            value = null;\n        }\n        return value;\n    };\n    /**\n     * Renders a value to HTML using all of the current FieldValue component options.\n     * @param value The value to render.\n     * @returns {HTMLElement} The element containing the rendered value.\n     */\n    FieldValue.prototype.renderOneValue = function (value) {\n        var element = Dom_1.$$('span').el;\n        var toRender = this.getCaption(value);\n        if (this.options.helper) {\n            // Try to resolve and execute version 2 of each helper function if available\n            var helper = TemplateHelpers_1.TemplateHelpers.getHelper(this.options.helper + \"v2\") || TemplateHelpers_1.TemplateHelpers.getHelper(\"\" + this.options.helper);\n            if (Utils_1.Utils.exists(helper)) {\n                toRender = helper.call(this, value, this.getHelperOptions(), this.result);\n            }\n            else {\n                this.logger.warn(\"Helper \" + this.options.helper + \" is not found in available helpers. The list of supported helpers is :\", underscore_1.keys(TemplateHelpers_1.TemplateHelpers.getHelpers()));\n            }\n            var fullDateStr = this.getFullDate(value, this.options.helper);\n            if (fullDateStr) {\n                element.setAttribute('title', fullDateStr);\n            }\n            if (this.options.helper == 'date' || this.options.helper == 'dateTime' || this.options.helper == 'emailDateTime') {\n                toRender = StringUtils_1.StringUtils.capitalizeFirstLetter(toRender);\n            }\n        }\n        if (this.options.htmlValue) {\n            element.innerHTML = toRender;\n        }\n        else {\n            element.appendChild(document.createTextNode(toRender));\n        }\n        this.bindEventOnValue(element, value, toRender);\n        return element;\n    };\n    FieldValue.prototype.getValueContainer = function () {\n        return this.element;\n    };\n    FieldValue.prototype.normalizeHelperAndOptions = function () {\n        var _this = this;\n        this.options = ComponentOptions_1.ComponentOptions.initOptions(this.element, FieldValue.helperOptions, this.options, FieldValue.ID);\n        var toFilter = underscore_1.keys(FieldValue.options.helperOptions['subOptions']);\n        var toKeep = underscore_1.filter(toFilter, function (optionKey) {\n            var optionDefinition = FieldValue.options.helperOptions['subOptions'][optionKey];\n            if (optionDefinition) {\n                var helpers = optionDefinition.helpers;\n                return helpers != null && underscore_1.contains(helpers, _this.options.helper);\n            }\n            return false;\n        });\n        this.options.helperOptions = underscore_1.omit(this.options.helperOptions, function (value, key) {\n            return !underscore_1.contains(toKeep, key);\n        });\n    };\n    FieldValue.prototype.getHelperOptions = function () {\n        var inlineOptions = ComponentOptions_1.ComponentOptions.loadStringOption(this.element, 'helperOptions', {});\n        if (Utils_1.Utils.isNonEmptyString(inlineOptions)) {\n            return underscore_1.extend({}, this.options.helperOptions, eval('(' + inlineOptions + ')'));\n        }\n        return this.options.helperOptions;\n    };\n    FieldValue.prototype.getFullDate = function (date, helper) {\n        var fullDateOptions = {\n            useLongDateFormat: true,\n            useTodayYesterdayAndTomorrow: false,\n            useWeekdayIfThisWeek: false,\n            omitYearIfCurrentOne: false\n        };\n        if (helper == 'date') {\n            return DateUtils_1.DateUtils.dateToString(new Date(parseInt(date)), fullDateOptions);\n        }\n        else if (helper == 'dateTime' || helper == 'emailDateTime') {\n            return DateUtils_1.DateUtils.dateTimeToString(new Date(parseInt(date)), fullDateOptions);\n        }\n        return '';\n    };\n    FieldValue.prototype.appendValuesToDom = function (values) {\n        var _this = this;\n        underscore_1.each(values, function (value, index) {\n            if (value != undefined) {\n                _this.getValueContainer().appendChild(_this.renderOneValue(value));\n                if (index !== values.length - 1) {\n                    _this.getValueContainer().appendChild(document.createTextNode(_this.options.displaySeparator));\n                }\n            }\n        });\n    };\n    FieldValue.prototype.renderTextCaption = function () {\n        var element = Dom_1.$$('span', { className: 'coveo-field-caption' }, underscore_1.escape(this.options.textCaption));\n        return element.el;\n    };\n    FieldValue.prototype.prependTextCaptionToDom = function () {\n        var elem = this.getValueContainer();\n        Dom_1.$$(elem).prepend(this.renderTextCaption());\n        // Add a class to the container so the value and the caption wrap together.\n        Dom_1.$$(elem).addClass('coveo-with-label');\n    };\n    FieldValue.prototype.bindEventOnValue = function (element, originalFacetValue, renderedFacetValue) {\n        this.bindFacets(element, originalFacetValue, renderedFacetValue);\n    };\n    FieldValue.prototype.getCaption = function (value) {\n        for (var _i = 0, _a = this.getFacets(); _i < _a.length; _i++) {\n            var facet = _a[_i];\n            var caption = facet.getCaptionForStringValue(value);\n            if (caption) {\n                return caption;\n            }\n        }\n        return FacetUtils_1.FacetUtils.tryToGetTranslatedCaption(this.options.field, value);\n    };\n    FieldValue.prototype.getFacets = function () {\n        var _this = this;\n        var facets = ComponentsTypes_1.ComponentsTypes.getAllFacetsFromSearchInterface(this.searchInterface)\n            .filter(IFieldValueCompatibleFacet_1.isFacetFieldValueCompatible)\n            .filter(function (facet) { return !facet.disabled; });\n        var facetsWithMatchingId = facets.filter(function (facet) { return facet.options.id === _this.options.facet; });\n        if (facetsWithMatchingId.length) {\n            return facetsWithMatchingId;\n        }\n        return facets.filter(function (facet) { return facet.options.field === _this.options.field; });\n    };\n    FieldValue.prototype.bindFacets = function (element, originalFacetValue, renderedFacetValue) {\n        var _this = this;\n        var facets = this.getFacets();\n        if (!facets.length) {\n            return;\n        }\n        var isValueSelected = !!underscore_1.find(facets, function (facet) { return facet.hasSelectedValue(originalFacetValue); });\n        var selectAction = function () { return _this.handleFacetSelection(isValueSelected, facets, originalFacetValue); };\n        this.buildClickableElement(element, isValueSelected, renderedFacetValue, selectAction);\n    };\n    FieldValue.prototype.buildClickableElement = function (element, isSelected, value, selectAction) {\n        var label = isSelected ? Strings_1.l('RemoveFilterOn', value) : Strings_1.l('FilterOn', value);\n        new AccessibleButton_1.AccessibleButton().withTitle(label).withElement(element).withSelectAction(selectAction).build();\n        if (isSelected) {\n            Dom_1.$$(element).addClass('coveo-selected');\n        }\n        Dom_1.$$(element).addClass('coveo-clickable');\n    };\n    FieldValue.prototype.handleFacetSelection = function (isValueSelected, facets, value) {\n        facets.forEach(function (facet) {\n            isValueSelected ? facet.deselectValue(value) : facet.selectValue(value);\n        });\n        this.executeQuery(value);\n    };\n    FieldValue.prototype.executeQuery = function (value) {\n        var _this = this;\n        this.queryController.deferExecuteQuery({\n            beforeExecuteQuery: function () {\n                return _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.documentField, {\n                    facetId: _this.options.facet,\n                    facetField: _this.options.field.toString(),\n                    facetValue: value.toLowerCase()\n                });\n            }\n        });\n    };\n    FieldValue.ID = 'FieldValue';\n    FieldValue.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            FieldValue: FieldValue\n        });\n    };\n    /**\n     * The options for the component\n     * @componentOptions\n     */\n    FieldValue.options = {\n        /**\n         * Specifies the field that the FieldValue should display.\n         *\n         * Specifying a value for this parameter is required in order for the FieldValue component to work.\n         */\n        field: ComponentOptions_1.ComponentOptions.buildFieldOption({ defaultValue: '@field', required: true }),\n        /**\n         * Specifies the {@link Facet} component to toggle when the end user clicks the FieldValue.\n         *\n         * Default value is the value of {@link FieldValue.options.field}.\n         *\n         * **Note:**\n         * > If the target {@link Facet.options.id} is is not the same as its {@link Facet.options.field}), you must specify\n         * > this option manually in order to link to the correct Facet.\n         */\n        facet: ComponentOptions_1.ComponentOptions.buildStringOption({ postProcessing: function (value, options) { return value || options.field; } }),\n        /**\n         * Specifies whether the content to display is an HTML element.\n         *\n         * Default value is `false`.\n         */\n        htmlValue: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\n        /**\n         * Specifies whether to split the FieldValue at each {@link FieldValue.options.separator}.\n         *\n         * This is useful for splitting groups using a {@link Facet.options.field}.\n         *\n         * When this option is `true`, the displayed values are split by the {@link FieldValue.options.displaySeparator}.\n         *\n         * Default value is `false`.\n         */\n        splitValues: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\n        /**\n         * If {@link FieldValue.options.splitValues} is `true`, specifies the separator string which separates multi-value\n         * fields in the index.\n         *\n         * See {@link FieldValue.options.displaySeparator}.\n         *\n         * Default value is `\";\"`.\n         */\n        separator: ComponentOptions_1.ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ';' }),\n        /**\n         * If {@link FieldValue.options.splitValues} is `true`, specifies the string to use when displaying multi-value\n         * fields in the UI.\n         *\n         * The component will insert this string between each value it displays from a multi-value field.\n         *\n         * See also {@link FieldValue.options.separator}.\n         *\n         * Default value is `\", \"`.\n         */\n        displaySeparator: ComponentOptions_1.ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ', ' }),\n        /**\n         * Specifies the helper that the FieldValue should use to display its content.\n         *\n         * While several helpers exist by default (see {@link ICoreHelpers}), it is also possible for you to create your own\n         * custom helpers (see {@link TemplateHelpers}).\n         */\n        helper: ComponentOptions_1.ComponentOptions.buildHelperOption(),\n        /**\n         * Specifies the options to call on the specified helper.\n         */\n        helperOptions: ComponentOptions_1.ComponentOptions.buildObjectOption({\n            subOptions: {\n                text: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\n                target: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\n                class: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\n                format: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['number'])),\n                decimals: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['currency'], { min: 0 })),\n                symbol: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['currency'])),\n                useTodayYesterdayAndTomorrow: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\n                useWeekdayIfThisWeek: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\n                omitYearIfCurrentOne: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\n                useLongDateFormat: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })),\n                includeTimeIfToday: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\n                includeTimeIfThisWeek: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\n                alwaysIncludeTime: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })),\n                predefinedFormat: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'])),\n                companyDomain: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\n                me: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\n                lengthLimit: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['email'], { min: 1 })),\n                truncateName: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['email'])),\n                alt: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n                height: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n                width: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n                srcTemplate: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n                precision: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 2 })),\n                base: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 0 })),\n                isMilliseconds: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['timeSpan'])),\n                length: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['shorten', 'shortenPath', 'shortenUri'], { defaultValue: 200 }))\n            }\n        }),\n        /**\n         * Specifies a caption to display before the value.\n         *\n         * Default value is `undefined`.\n         *\n         * @availablesince [January 2017 Release (v1.1865.9)](https://docs.coveo.com/en/396/#january-2017-release-v118659)\n         */\n        textCaption: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption(),\n        /**\n         * A field-based condition that must be satisfied by the query result item for the component to be rendered.\n         *\n         * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\n         *\n         * **Examples:**\n         * Render the component if the query result item's @documenttype field value is Article or Documentation.\n         * ```html\n         * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\n         * ```\n         * Render the component if the query result item's @documenttype field value is anything but Case.\n         * ```html\n         * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\n         * ```\n         * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\n         * ```html\n         * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\n         * ```\n         * Default value is `undefined`.\n         */\n        conditions: ComponentOptions_1.ComponentOptions.buildFieldConditionOption()\n    };\n    FieldValue.simpleOptions = underscore_1.omit(FieldValue.options, 'helperOptions');\n    FieldValue.helperOptions = {\n        helperOptions: FieldValue.options.helperOptions\n    };\n    return FieldValue;\n}(Component_1.Component));\nexports.FieldValue = FieldValue;\nInitialization_1.Initialization.registerAutoCreateComponent(FieldValue);\n\n\n/***/ }),\n\n/***/ 254:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(619);\nvar underscore_1 = __webpack_require__(0);\nvar GlobalExports_1 = __webpack_require__(3);\nvar Strings_1 = __webpack_require__(6);\nvar AccessibleButton_1 = __webpack_require__(16);\nvar Dom_1 = __webpack_require__(1);\nvar QueryUtils_1 = __webpack_require__(21);\nvar SVGDom_1 = __webpack_require__(15);\nvar SVGIcons_1 = __webpack_require__(12);\nvar Component_1 = __webpack_require__(7);\nvar ComponentOptions_1 = __webpack_require__(8);\nvar Initialization_1 = __webpack_require__(2);\nvar FieldValue_1 = __webpack_require__(121);\n/**\n * The FieldTable component displays a set of {@link FieldValue} components in a table that can optionally be\n * expandable and minimizable. This component automatically takes care of not displaying empty field values.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n *\n * **Example:**\n *\n * ```\n * // This is the FieldTable component itself, which holds a list of table rows.\n * // Each row is a FieldValue component.\n * <table class='CoveoFieldTable'>\n *    // Items\n *    <tr data-field='@sysdate' data-caption='Date' data-helper='dateTime' />\n *    <tr data-field='@sysauthor' data-caption='Author' />\n *    <tr data-field='@clickuri' data-html-value='true' data-caption='URL' data-helper='anchor' data-helper-options='{text: \\\"<%= raw.syssource %>\\\" , target:\\\"_blank\\\"}'>\n * </table>\n * ```\n */\nvar FieldTable = /** @class */ (function (_super) {\n    __extends(FieldTable, _super);\n    /**\n     * Creates a new FieldTable.\n     * @param element The HTMLElement on which to instantiate the component.\n     * @param options The options for the FieldTable component.\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\n     * automatically resolved (with a slower execution time).\n     * @param result The result to associate the component with.\n     */\n    function FieldTable(element, options, bindings, result) {\n        var _this = _super.call(this, element, ValueRow.ID, bindings) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.result = result;\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, FieldTable, options);\n        var rows = Dom_1.$$(_this.element).findAll('tr[data-field]');\n        underscore_1.each(rows, function (e) {\n            new ValueRow(e, {}, bindings, result);\n        });\n        if (Dom_1.$$(_this.element).find('tr') == null) {\n            Dom_1.$$(element).detach();\n        }\n        if (_this.isTogglable()) {\n            var className = 'coveo-field-table-toggle-container';\n            _this.toggleContainer = Dom_1.$$('div', { className: className, id: underscore_1.uniqueId(className) }).el;\n            _this.buildToggle();\n            Dom_1.$$(_this.toggleContainer).insertBefore(_this.element);\n            _this.toggleContainer.appendChild(_this.element);\n            _this.toggleContainer.appendChild(_this.toggleButtonInsideTable);\n        }\n        return _this;\n    }\n    Object.defineProperty(FieldTable.prototype, \"isExpanded\", {\n        get: function () {\n            return !this.toggleButton || this.toggleButton.getAttribute('aria-expanded') === 'true';\n        },\n        set: function (expanded) {\n            if (this.toggleButton) {\n                this.toggleButton.setAttribute('aria-expanded', expanded.toString());\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Toggles between expanding (showing) and minimizing (collapsing) the FieldTable.\n     *\n     * @param anim Specifies whether to show a sliding animation when toggling the display of the FieldTable.\n     */\n    FieldTable.prototype.toggle = function (anim) {\n        if (anim === void 0) { anim = false; }\n        this.isExpanded ? this.minimize(anim) : this.expand(anim);\n    };\n    /**\n     * Expands (shows) the FieldTable,\n     * @param anim Specifies whether to show a sliding animation when expanding the FieldTable.\n     */\n    FieldTable.prototype.expand = function (anim) {\n        if (anim === void 0) { anim = false; }\n        if (this.isTogglable()) {\n            this.isExpanded = true;\n            this.toggleCaption.textContent = this.options.expandedTitle;\n            SVGDom_1.SVGDom.addClassToSVGInContainer(this.toggleButtonSVGContainer, 'coveo-opened');\n            SVGDom_1.SVGDom.addClassToSVGInContainer(this.toggleButtonInsideTable, 'coveo-opened');\n            anim ? this.slideToggle(true) : this.slideToggle(true, false);\n        }\n    };\n    /**\n     * Minimizes (collapses) the FieldTable.\n     * @param anim Specifies whether to show a sliding animation when minimizing the FieldTable.\n     */\n    FieldTable.prototype.minimize = function (anim) {\n        if (anim === void 0) { anim = false; }\n        if (this.isTogglable()) {\n            this.isExpanded = false;\n            this.toggleCaption.textContent = this.options.minimizedTitle;\n            SVGDom_1.SVGDom.removeClassFromSVGInContainer(this.toggleButtonSVGContainer, 'coveo-opened');\n            SVGDom_1.SVGDom.removeClassFromSVGInContainer(this.toggleButtonInsideTable, 'coveo-opened');\n            anim ? this.slideToggle(false) : this.slideToggle(false, false);\n        }\n    };\n    /**\n     * Updates the toggle height if the content was dynamically resized, so that the expanding and minimizing animation\n     * can match the new content size.\n     */\n    FieldTable.prototype.updateToggleHeight = function () {\n        this.updateToggleContainerHeight();\n        this.isExpanded ? this.expand() : this.minimize();\n    };\n    FieldTable.prototype.isTogglable = function () {\n        if (this.options.allowMinimization) {\n            return true;\n        }\n        return false;\n    };\n    FieldTable.prototype.buildToggle = function () {\n        var _this = this;\n        this.toggleCaption = Dom_1.$$('span', {\n            className: 'coveo-field-table-toggle-caption'\n        }).el;\n        this.toggleButton = Dom_1.$$('div', {\n            className: 'coveo-field-table-toggle coveo-field-table-toggle-down',\n            ariaControls: this.toggleContainer.id\n        }).el;\n        this.toggleButtonSVGContainer = Dom_1.$$('span', null, SVGIcons_1.SVGIcons.icons.arrowDown).el;\n        SVGDom_1.SVGDom.addClassToSVGInContainer(this.toggleButtonSVGContainer, 'coveo-field-table-toggle-down-svg');\n        this.toggleButton.appendChild(this.toggleCaption);\n        this.toggleButton.appendChild(this.toggleButtonSVGContainer);\n        Dom_1.$$(this.toggleButton).insertBefore(this.element);\n        this.toggleButtonInsideTable = Dom_1.$$('span', { className: 'coveo-field-table-toggle coveo-field-table-toggle-up' }, SVGIcons_1.SVGIcons.icons.arrowUp).el;\n        SVGDom_1.SVGDom.addClassToSVGInContainer(this.toggleButtonInsideTable, 'coveo-field-table-toggle-up-svg');\n        if (this.options.minimizedByDefault === true) {\n            this.isExpanded = false;\n        }\n        else if (this.options.minimizedByDefault === false) {\n            this.isExpanded = true;\n        }\n        else {\n            this.isExpanded = !QueryUtils_1.QueryUtils.hasExcerpt(this.result);\n        }\n        requestAnimationFrame(function () { return _this.updateToggleHeight(); });\n        var toggleAction = function () { return _this.toggle(true); };\n        new AccessibleButton_1.AccessibleButton()\n            .withElement(this.toggleButton)\n            .withSelectAction(function () { return toggleAction(); })\n            .withOwner(this.bind)\n            .withLabel(Strings_1.l('Details'))\n            .build();\n        Dom_1.$$(this.toggleButtonInsideTable).on('click', toggleAction);\n    };\n    FieldTable.prototype.slideToggle = function (visible, anim) {\n        if (visible === void 0) { visible = true; }\n        if (anim === void 0) { anim = true; }\n        if (!anim) {\n            Dom_1.$$(this.toggleContainer).addClass('coveo-no-transition');\n        }\n        if (visible) {\n            this.toggleContainer.style.display = 'block';\n            this.toggleContainer.style.height = this.containerHeight;\n        }\n        else {\n            this.toggleContainer.style.height = '0';\n        }\n        if (!anim) {\n            this.toggleContainer.offsetHeight; // Force reflow\n            Dom_1.$$(this.toggleContainer).removeClass('coveo-no-transition');\n        }\n    };\n    Object.defineProperty(FieldTable.prototype, \"containerHeight\", {\n        get: function () {\n            if (!this.toggleContainerHeight) {\n                this.updateToggleContainerHeight();\n            }\n            return this.toggleContainerHeight + 'px';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FieldTable.prototype.updateToggleContainerHeight = function () {\n        this.toggleContainerHeight = this.toggleContainer.scrollHeight;\n    };\n    FieldTable.ID = 'FieldTable';\n    FieldTable.doExport = function () {\n        GlobalExports_1.exportGlobally({\n            FieldTable: FieldTable,\n            FieldValue: FieldValue_1.FieldValue\n        });\n    };\n    /**\n     * The options for the component\n     * @componentOptions\n     */\n    FieldTable.options = {\n        /**\n         * Specifies whether to allow the minimization (collapsing) of the FieldTable.\n         *\n         * If you set this option to `false`, the component will not create the **Minimize** / **Expand** toggle links.\n         *\n         * See also {@link FieldTable.options.expandedTitle}, {@link FieldTable.options.minimizedTitle} and\n         * {@link FieldTable.options.minimizedByDefault}.\n         *\n         * Default value is `true`.\n         */\n        allowMinimization: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: true }),\n        /**\n         * If {@link FieldTable.options.allowMinimization} is `true`, specifies the caption to show on the **Minimize** link\n         * (the link that appears when the FieldTable is expanded).\n         *\n         * Default value is `\"Details\"`.\n         */\n        expandedTitle: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({\n            localizedString: function () { return Strings_1.l('Details'); },\n            depend: 'allowMinimization'\n        }),\n        /**\n         * If {@link FieldTable.options.allowMinimization} is `true`, specifies the caption to show on the **Expand** link\n         * (the link that appears when the FieldTable is minimized).\n         *\n         * Default value is `\"Details\"`.\n         */\n        minimizedTitle: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption({\n            localizedString: function () { return Strings_1.l('Details'); },\n            depend: 'allowMinimization'\n        }),\n        /**\n         * If {@link FieldTable.options.allowMinimization} is `true`, specifies whether to minimize the table by default.\n         *\n         * Default value is `undefined`, and the FieldTable will collapse by default if the result it is associated with has\n         * a non-empty excerpt.\n         */\n        minimizedByDefault: ComponentOptions_1.ComponentOptions.buildBooleanOption({ depend: 'allowMinimization' })\n    };\n    return FieldTable;\n}(Component_1.Component));\nexports.FieldTable = FieldTable;\nInitialization_1.Initialization.registerAutoCreateComponent(FieldTable);\nvar ValueRow = /** @class */ (function (_super) {\n    __extends(ValueRow, _super);\n    function ValueRow(element, options, bindings, result) {\n        var _this = _super.call(this, element, options, bindings, result, ValueRow.ID) || this;\n        _this.element = element;\n        _this.options = options;\n        _this.result = result;\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ValueRow, options);\n        var caption = Dom_1.$$('th').el;\n        caption.appendChild(document.createTextNode(_this.options.caption.toLocaleString()));\n        _this.element.insertBefore(caption, _this.getValueContainer());\n        return _this;\n    }\n    ValueRow.prototype.getValueContainer = function () {\n        if (this.valueContainer == null) {\n            this.valueContainer = document.createElement('td');\n            this.element.appendChild(this.valueContainer);\n        }\n        return this.valueContainer;\n    };\n    ValueRow.ID = 'ValueRow';\n    ValueRow.options = {\n        caption: ComponentOptions_1.ComponentOptions.buildStringOption({\n            postProcessing: function (value, options) { return value || options.field.substr(1); }\n        })\n    };\n    ValueRow.parent = FieldValue_1.FieldValue;\n    return ValueRow;\n}(FieldValue_1.FieldValue));\n\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path='Facet.ts' />\nvar StringUtils_1 = __webpack_require__(22);\nvar QueryUtils_1 = __webpack_require__(21);\nvar FileTypes_1 = __webpack_require__(117);\nvar DateUtils_1 = __webpack_require__(33);\nvar Utils_1 = __webpack_require__(4);\nvar Dom_1 = __webpack_require__(1);\nvar _ = __webpack_require__(0);\nvar Strings_1 = __webpack_require__(6);\nvar FacetUtils = /** @class */ (function () {\n    function FacetUtils() {\n    }\n    FacetUtils.getRegexToUseForFacetSearch = function (value, ignoreAccent) {\n        return new RegExp(StringUtils_1.StringUtils.stringToRegex(value, ignoreAccent), 'i');\n    };\n    FacetUtils.getDisplayValueFromValueCaption = function (value, field, valueCaption) {\n        var returnValue = this.tryToGetTranslatedCaption(field, value, false);\n        return valueCaption[value] || returnValue;\n    };\n    FacetUtils.getValuesToUseForSearchInFacet = function (original, facet) {\n        var ret = [original];\n        var regex = this.getRegexToUseForFacetSearch(original, facet.options.facetSearchIgnoreAccents);\n        if (facet.options.valueCaption) {\n            _.chain(facet.options.valueCaption)\n                .pairs()\n                .filter(function (pair) {\n                return regex.test(pair[1]);\n            })\n                .each(function (match) {\n                ret.push(match[0]);\n            });\n            if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') ||\n                QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {\n                _.each(FileTypes_1.FileTypes.getFileTypeCaptions(), function (value, key) {\n                    if (!(key in facet.options.valueCaption) && regex.test(value)) {\n                        ret.push(key);\n                    }\n                });\n            }\n        }\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') ||\n            QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {\n            _.each(_.filter(_.pairs(FileTypes_1.FileTypes.getFileTypeCaptions()), function (pair) {\n                return regex.test(pair[1]);\n            }), function (match) {\n                ret.push(match[0]);\n            });\n        }\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@month')) {\n            _.each(_.range(1, 13), function (month) {\n                if (regex.test(DateUtils_1.DateUtils.monthToString(month - 1))) {\n                    ret.push(('0' + month.toString()).substr(-2));\n                }\n            });\n        }\n        return ret;\n    };\n    FacetUtils.buildFacetSearchPattern = function (values) {\n        values = _.map(values, function (value) {\n            return Utils_1.Utils.escapeRegexCharacter(value);\n        });\n        values[0] = '.*' + values[0] + '.*';\n        return values.join('|');\n    };\n    FacetUtils.needAnotherFacetSearch = function (currentSearchLength, newSearchLength, oldSearchLength, desiredSearchLength) {\n        // Something was removed (currentSearch < newSearch)\n        // && we might want to display more facet search result(currentSearch < desiredSearch)\n        // && the new query returned more stuff than the old one so there's still more results(currentSearchLength > oldLength)\n        return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && currentSearchLength > oldSearchLength;\n    };\n    FacetUtils.addNoStateCssClassToFacetValues = function (facet, container) {\n        // This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet\n        if (facet.values.getSelected().length != 0) {\n            var noStates = Dom_1.$$(container).findAll('li:not(.coveo-selected)');\n            _.each(noStates, function (noState) {\n                Dom_1.$$(noState).addClass('coveo-no-state');\n            });\n        }\n    };\n    FacetUtils.tryToGetTranslatedCaption = function (field, value, fallbackOnLocalization) {\n        if (fallbackOnLocalization === void 0) { fallbackOnLocalization = true; }\n        var found;\n        if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@filetype')) {\n            found = FileTypes_1.FileTypes.getFileType(value, fallbackOnLocalization).caption;\n        }\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@objecttype')) {\n            found = FileTypes_1.FileTypes.getObjectType(value, fallbackOnLocalization).caption;\n        }\n        else if (FacetUtils.isMonthFieldValue(field, value)) {\n            var month = parseInt(value, 10);\n            found = DateUtils_1.DateUtils.monthToString(month - 1);\n        }\n        else if (fallbackOnLocalization) {\n            found = Strings_1.l(value);\n        }\n        return found != undefined && Utils_1.Utils.isNonEmptyString(found) ? found : value;\n    };\n    FacetUtils.isMonthFieldValue = function (field, value) {\n        if (!QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@month')) {\n            return false;\n        }\n        var asInt = parseInt(value, 10);\n        if (isNaN(asInt)) {\n            return false;\n        }\n        if (asInt < 1 || asInt > 12) {\n            return false;\n        }\n        return true;\n    };\n    return FacetUtils;\n}());\nexports.FacetUtils = FacetUtils;\n\n\n/***/ }),\n\n/***/ 539:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isFacetFieldValueCompatible(facet) {\n    return !!facet['isFieldValueCompatible'];\n}\nexports.isFacetFieldValueCompatible = isFacetFieldValueCompatible;\n\n\n/***/ }),\n\n/***/ 619:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// FieldTable.min__e0ba7abe7a50f2532f41.js","import { contains, each, escape, extend, filter, find, isArray, isObject, isString, keys, map, omit } from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport { Assert } from '../../misc/Assert';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { l } from '../../strings/Strings';\nimport { AccessibleButton } from '../../utils/AccessibleButton';\nimport { DateUtils, IDateToStringOptions } from '../../utils/DateUtils';\nimport { $$ } from '../../utils/Dom';\nimport { StringUtils } from '../../utils/StringUtils';\nimport { Utils } from '../../utils/Utils';\nimport { analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\nimport { Component } from '../Base/Component';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { IComponentOptionsObjectOptionArgs, IFieldConditionOption, IFieldOption } from '../Base/IComponentOptions';\nimport { Initialization } from '../Base/Initialization';\nimport { FacetUtils } from '../Facet/FacetUtils';\nimport { TemplateFieldsEvaluator } from '../Templates/TemplateFieldsEvaluator';\nimport { TemplateHelpers } from '../Templates/TemplateHelpers';\nimport { IFieldValueCompatibleFacet, isFacetFieldValueCompatible } from './IFieldValueCompatibleFacet';\nimport { ComponentsTypes } from '../../utils/ComponentsTypes';\n\nexport interface IFieldValueOptions {\n  field?: IFieldOption;\n  facet?: string;\n  dynamicFacet?: string;\n  htmlValue?: boolean;\n  helper?: string;\n  helperOptions?: { [key: string]: any };\n  splitValues?: boolean;\n  separator?: string;\n  displaySeparator?: string;\n  textCaption?: string;\n  conditions?: IFieldConditionOption[];\n}\n\nexport interface IAnalyticsFieldValueMeta {\n  facetId: string;\n  facetField: string;\n  facetValue?: string;\n  facetTitle?: string;\n}\n\nfunction showOnlyWithHelper<T>(helpers: string[], options?: T): T {\n  if (options == null) {\n    options = <any>{};\n  }\n  (<any>options).helpers = helpers;\n  return options;\n}\n\n/**\n * The FieldValue component displays the value of a field associated to its parent search result. It is normally usable\n * within a {@link FieldTable}.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n *\n * A common use of this component is to display a specific field value which also happens to be an existing\n * {@link Facet.options.field}. When the user clicks on the FieldValue component, it activates the corresponding Facet.\n */\nexport class FieldValue extends Component {\n  static ID = 'FieldValue';\n\n  static doExport = () => {\n    exportGlobally({\n      FieldValue: FieldValue\n    });\n  };\n\n  /**\n   * The options for the component\n   * @componentOptions\n   */\n  static options: IFieldValueOptions = {\n    /**\n     * Specifies the field that the FieldValue should display.\n     *\n     * Specifying a value for this parameter is required in order for the FieldValue component to work.\n     */\n    field: ComponentOptions.buildFieldOption({ defaultValue: '@field', required: true }),\n\n    /**\n     * Specifies the {@link Facet} component to toggle when the end user clicks the FieldValue.\n     *\n     * Default value is the value of {@link FieldValue.options.field}.\n     *\n     * **Note:**\n     * > If the target {@link Facet.options.id} is is not the same as its {@link Facet.options.field}), you must specify\n     * > this option manually in order to link to the correct Facet.\n     */\n    facet: ComponentOptions.buildStringOption({ postProcessing: (value, options) => value || options.field }),\n\n    /**\n     * Specifies whether the content to display is an HTML element.\n     *\n     * Default value is `false`.\n     */\n    htmlValue: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * Specifies whether to split the FieldValue at each {@link FieldValue.options.separator}.\n     *\n     * This is useful for splitting groups using a {@link Facet.options.field}.\n     *\n     * When this option is `true`, the displayed values are split by the {@link FieldValue.options.displaySeparator}.\n     *\n     * Default value is `false`.\n     */\n    splitValues: ComponentOptions.buildBooleanOption({ defaultValue: false }),\n\n    /**\n     * If {@link FieldValue.options.splitValues} is `true`, specifies the separator string which separates multi-value\n     * fields in the index.\n     *\n     * See {@link FieldValue.options.displaySeparator}.\n     *\n     * Default value is `\";\"`.\n     */\n    separator: ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ';' }),\n\n    /**\n     * If {@link FieldValue.options.splitValues} is `true`, specifies the string to use when displaying multi-value\n     * fields in the UI.\n     *\n     * The component will insert this string between each value it displays from a multi-value field.\n     *\n     * See also {@link FieldValue.options.separator}.\n     *\n     * Default value is `\", \"`.\n     */\n    displaySeparator: ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ', ' }),\n\n    /**\n     * Specifies the helper that the FieldValue should use to display its content.\n     *\n     * While several helpers exist by default (see {@link ICoreHelpers}), it is also possible for you to create your own\n     * custom helpers (see {@link TemplateHelpers}).\n     */\n    helper: ComponentOptions.buildHelperOption(),\n\n    /**\n     * Specifies the options to call on the specified helper.\n     */\n    helperOptions: ComponentOptions.buildObjectOption(<IComponentOptionsObjectOptionArgs>{\n      subOptions: {\n        text: ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\n        target: ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\n        class: ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\n\n        format: ComponentOptions.buildStringOption(showOnlyWithHelper(['number'])),\n\n        decimals: ComponentOptions.buildNumberOption(showOnlyWithHelper(['currency'], { min: 0 })),\n        symbol: ComponentOptions.buildStringOption(showOnlyWithHelper(['currency'])),\n\n        useTodayYesterdayAndTomorrow: ComponentOptions.buildBooleanOption(\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\n        ),\n        useWeekdayIfThisWeek: ComponentOptions.buildBooleanOption(\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\n        ),\n        omitYearIfCurrentOne: ComponentOptions.buildBooleanOption(\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\n        ),\n        useLongDateFormat: ComponentOptions.buildBooleanOption(\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })\n        ),\n        includeTimeIfToday: ComponentOptions.buildBooleanOption(\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\n        ),\n        includeTimeIfThisWeek: ComponentOptions.buildBooleanOption(\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\n        ),\n        alwaysIncludeTime: ComponentOptions.buildBooleanOption(\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })\n        ),\n        predefinedFormat: ComponentOptions.buildStringOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'])),\n\n        companyDomain: ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\n        me: ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\n        lengthLimit: ComponentOptions.buildNumberOption(showOnlyWithHelper(['email'], { min: 1 })),\n        truncateName: ComponentOptions.buildBooleanOption(showOnlyWithHelper(['email'])),\n\n        alt: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n        height: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n        width: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n        srcTemplate: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\n\n        precision: ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 2 })),\n        base: ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 0 })),\n        isMilliseconds: ComponentOptions.buildBooleanOption(showOnlyWithHelper(['timeSpan'])),\n\n        length: ComponentOptions.buildNumberOption(showOnlyWithHelper(['shorten', 'shortenPath', 'shortenUri'], { defaultValue: 200 }))\n      }\n    }),\n\n    /**\n     * Specifies a caption to display before the value.\n     *\n     * Default value is `undefined`.\n     *\n     * @availablesince [January 2017 Release (v1.1865.9)](https://docs.coveo.com/en/396/#january-2017-release-v118659)\n     */\n    textCaption: ComponentOptions.buildLocalizedStringOption(),\n\n    /**\n     * A field-based condition that must be satisfied by the query result item for the component to be rendered.\n     *\n     * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\n     *\n     * **Examples:**\n     * Render the component if the query result item's @documenttype field value is Article or Documentation.\n     * ```html\n     * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\n     * ```\n     * Render the component if the query result item's @documenttype field value is anything but Case.\n     * ```html\n     * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\n     * ```\n     * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\n     * ```html\n     * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\n     * ```\n     * Default value is `undefined`.\n     */\n    conditions: ComponentOptions.buildFieldConditionOption()\n  };\n\n  static simpleOptions = omit(FieldValue.options, 'helperOptions');\n\n  static helperOptions = <any>{\n    helperOptions: FieldValue.options.helperOptions\n  };\n\n  /**\n   * Creates a new FieldValue.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the FieldValue component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param result The result to associate the component with.\n   */\n  constructor(\n    public element: HTMLElement,\n    public options: IFieldValueOptions,\n    bindings?: IComponentBindings,\n    public result?: IQueryResult,\n    fieldValueClassId: string = FieldValue.ID\n  ) {\n    super(element, fieldValueClassId, bindings);\n\n    this.options = ComponentOptions.initOptions(element, FieldValue.simpleOptions, options, FieldValue.ID);\n\n    if (this.options.helper != null) {\n      this.normalizeHelperAndOptions();\n    }\n\n    this.result = this.result || this.resolveResult();\n    Assert.exists(this.result);\n\n    if (TemplateFieldsEvaluator.evaluateFieldsToMatch(this.options.conditions, this.result) && !Utils.isNullOrUndefined(this.getValue())) {\n      this.initialize();\n    } else if (this.element.parentElement != null) {\n      this.element.parentElement.removeChild(this.element);\n    }\n  }\n\n  private initialize() {\n    let loadedValueFromComponent = this.getValue();\n    let values: string[];\n\n    if (isArray(loadedValueFromComponent)) {\n      values = loadedValueFromComponent;\n    } else if (this.options.splitValues) {\n      if (isString(loadedValueFromComponent)) {\n        values = map(loadedValueFromComponent.split(this.options.separator), (v: string) => {\n          return v.trim();\n        });\n      }\n    } else {\n      loadedValueFromComponent = loadedValueFromComponent.toString();\n      values = [loadedValueFromComponent];\n    }\n    this.appendValuesToDom(values);\n    if (this.options.textCaption != null) {\n      this.prependTextCaptionToDom();\n    }\n  }\n\n  /**\n   * Gets the current FieldValue from the current {@link IQueryResult}.\n   *\n   * @returns {any} The current FieldValue or `null` if value is and `Object`.\n   */\n  public getValue() {\n    let value = Utils.getFieldValue(this.result, <string>this.options.field);\n    if (!isArray(value) && isObject(value)) {\n      value = null;\n    }\n    return value;\n  }\n\n  /**\n   * Renders a value to HTML using all of the current FieldValue component options.\n   * @param value The value to render.\n   * @returns {HTMLElement} The element containing the rendered value.\n   */\n  public renderOneValue(value: string): HTMLElement {\n    const element = $$('span').el;\n    let toRender = this.getCaption(value);\n\n    if (this.options.helper) {\n      // Try to resolve and execute version 2 of each helper function if available\n      const helper = TemplateHelpers.getHelper(`${this.options.helper}v2`) || TemplateHelpers.getHelper(`${this.options.helper}`);\n\n      if (Utils.exists(helper)) {\n        toRender = helper.call(this, value, this.getHelperOptions(), this.result);\n      } else {\n        this.logger.warn(\n          `Helper ${this.options.helper} is not found in available helpers. The list of supported helpers is :`,\n          keys(TemplateHelpers.getHelpers())\n        );\n      }\n\n      const fullDateStr = this.getFullDate(value, this.options.helper);\n      if (fullDateStr) {\n        element.setAttribute('title', fullDateStr);\n      }\n      if (this.options.helper == 'date' || this.options.helper == 'dateTime' || this.options.helper == 'emailDateTime') {\n        toRender = StringUtils.capitalizeFirstLetter(toRender);\n      }\n    }\n\n    if (this.options.htmlValue) {\n      element.innerHTML = toRender;\n    } else {\n      element.appendChild(document.createTextNode(toRender));\n    }\n    this.bindEventOnValue(element, value, toRender);\n    return element;\n  }\n\n  protected getValueContainer() {\n    return this.element;\n  }\n\n  private normalizeHelperAndOptions() {\n    this.options = ComponentOptions.initOptions(this.element, FieldValue.helperOptions, this.options, FieldValue.ID);\n    const toFilter = keys(FieldValue.options.helperOptions['subOptions']);\n    const toKeep = filter(toFilter, optionKey => {\n      const optionDefinition = FieldValue.options.helperOptions['subOptions'][optionKey];\n      if (optionDefinition) {\n        const helpers = optionDefinition.helpers;\n        return helpers != null && contains(helpers, this.options.helper);\n      }\n      return false;\n    });\n    this.options.helperOptions = omit(this.options.helperOptions, (value, key) => {\n      return !contains(toKeep, key);\n    });\n  }\n\n  private getHelperOptions() {\n    const inlineOptions = ComponentOptions.loadStringOption(this.element, 'helperOptions', {});\n    if (Utils.isNonEmptyString(inlineOptions)) {\n      return extend({}, this.options.helperOptions, eval('(' + inlineOptions + ')'));\n    }\n    return this.options.helperOptions;\n  }\n\n  private getFullDate(date: string, helper: string) {\n    const fullDateOptions: IDateToStringOptions = {\n      useLongDateFormat: true,\n      useTodayYesterdayAndTomorrow: false,\n      useWeekdayIfThisWeek: false,\n      omitYearIfCurrentOne: false\n    };\n\n    if (helper == 'date') {\n      return DateUtils.dateToString(new Date(parseInt(date)), fullDateOptions);\n    } else if (helper == 'dateTime' || helper == 'emailDateTime') {\n      return DateUtils.dateTimeToString(new Date(parseInt(date)), fullDateOptions);\n    }\n    return '';\n  }\n\n  private appendValuesToDom(values: string[]): void {\n    each(values, (value, index) => {\n      if (value != undefined) {\n        this.getValueContainer().appendChild(this.renderOneValue(value));\n        if (index !== values.length - 1) {\n          this.getValueContainer().appendChild(document.createTextNode(this.options.displaySeparator));\n        }\n      }\n    });\n  }\n\n  private renderTextCaption(): HTMLElement {\n    const element = $$('span', { className: 'coveo-field-caption' }, escape(this.options.textCaption));\n    return element.el;\n  }\n\n  protected prependTextCaptionToDom(): void {\n    const elem = this.getValueContainer();\n    $$(elem).prepend(this.renderTextCaption());\n    // Add a class to the container so the value and the caption wrap together.\n    $$(elem).addClass('coveo-with-label');\n  }\n\n  private bindEventOnValue(element: HTMLElement, originalFacetValue: string, renderedFacetValue: string) {\n    this.bindFacets(element, originalFacetValue, renderedFacetValue);\n  }\n\n  private getCaption(value: string) {\n    for (let facet of this.getFacets()) {\n      const caption = facet.getCaptionForStringValue(value);\n      if (caption) {\n        return caption;\n      }\n    }\n    return FacetUtils.tryToGetTranslatedCaption(this.options.field as string, value);\n  }\n\n  private getFacets() {\n    const facets = ComponentsTypes.getAllFacetsFromSearchInterface(this.searchInterface)\n      .filter(isFacetFieldValueCompatible)\n      .filter(facet => !facet.disabled);\n\n    const facetsWithMatchingId = facets.filter(facet => facet.options.id === this.options.facet);\n    if (facetsWithMatchingId.length) {\n      return facetsWithMatchingId;\n    }\n    return facets.filter(facet => facet.options.field === this.options.field);\n  }\n\n  private bindFacets(element: HTMLElement, originalFacetValue: string, renderedFacetValue: string) {\n    const facets = this.getFacets();\n\n    if (!facets.length) {\n      return;\n    }\n\n    const isValueSelected = !!find(facets, facet => facet.hasSelectedValue(originalFacetValue));\n    const selectAction = () => this.handleFacetSelection(isValueSelected, facets, originalFacetValue);\n    this.buildClickableElement(element, isValueSelected, renderedFacetValue, selectAction);\n  }\n\n  private buildClickableElement(element: HTMLElement, isSelected: boolean, value: string, selectAction: () => void) {\n    const label = isSelected ? l('RemoveFilterOn', value) : l('FilterOn', value);\n    new AccessibleButton().withTitle(label).withElement(element).withSelectAction(selectAction).build();\n\n    if (isSelected) {\n      $$(element).addClass('coveo-selected');\n    }\n    $$(element).addClass('coveo-clickable');\n  }\n\n  private handleFacetSelection(isValueSelected: boolean, facets: IFieldValueCompatibleFacet[], value: string) {\n    facets.forEach(facet => {\n      isValueSelected ? facet.deselectValue(value) : facet.selectValue(value);\n    });\n\n    this.executeQuery(value);\n  }\n\n  private executeQuery(value: string) {\n    this.queryController.deferExecuteQuery({\n      beforeExecuteQuery: () =>\n        this.usageAnalytics.logSearchEvent<IAnalyticsFieldValueMeta>(analyticsActionCauseList.documentField, {\n          facetId: this.options.facet,\n          facetField: this.options.field.toString(),\n          facetValue: value.toLowerCase()\n        })\n    });\n  }\n}\n\nInitialization.registerAutoCreateComponent(FieldValue);\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldValue/FieldValue.ts","import 'styling/_FieldTable';\nimport { each, uniqueId } from 'underscore';\nimport { exportGlobally } from '../../GlobalExports';\nimport { IQueryResult } from '../../rest/QueryResult';\nimport { l } from '../../strings/Strings';\nimport { AccessibleButton } from '../../utils/AccessibleButton';\nimport { $$ } from '../../utils/Dom';\nimport { QueryUtils } from '../../utils/QueryUtils';\nimport { SVGDom } from '../../utils/SVGDom';\nimport { SVGIcons } from '../../utils/SVGIcons';\nimport { Component } from '../Base/Component';\nimport { IComponentBindings } from '../Base/ComponentBindings';\nimport { ComponentOptions } from '../Base/ComponentOptions';\nimport { Initialization } from '../Base/Initialization';\nimport { FieldValue, IFieldValueOptions } from '../FieldValue/FieldValue';\n\nexport interface IFieldTableOptions {\n  allowMinimization: boolean;\n  expandedTitle: string;\n  minimizedTitle: string;\n  minimizedByDefault: boolean;\n}\n\n/**\n * The FieldTable component displays a set of {@link FieldValue} components in a table that can optionally be\n * expandable and minimizable. This component automatically takes care of not displaying empty field values.\n *\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\n *\n * **Example:**\n *\n * ```\n * // This is the FieldTable component itself, which holds a list of table rows.\n * // Each row is a FieldValue component.\n * <table class='CoveoFieldTable'>\n *    // Items\n *    <tr data-field='@sysdate' data-caption='Date' data-helper='dateTime' />\n *    <tr data-field='@sysauthor' data-caption='Author' />\n *    <tr data-field='@clickuri' data-html-value='true' data-caption='URL' data-helper='anchor' data-helper-options='{text: \\\"<%= raw.syssource %>\\\" , target:\\\"_blank\\\"}'>\n * </table>\n * ```\n */\nexport class FieldTable extends Component {\n  static ID = 'FieldTable';\n\n  static doExport = () => {\n    exportGlobally({\n      FieldTable: FieldTable,\n      FieldValue: FieldValue\n    });\n  };\n\n  /**\n   * The options for the component\n   * @componentOptions\n   */\n  static options: IFieldTableOptions = {\n    /**\n     * Specifies whether to allow the minimization (collapsing) of the FieldTable.\n     *\n     * If you set this option to `false`, the component will not create the **Minimize** / **Expand** toggle links.\n     *\n     * See also {@link FieldTable.options.expandedTitle}, {@link FieldTable.options.minimizedTitle} and\n     * {@link FieldTable.options.minimizedByDefault}.\n     *\n     * Default value is `true`.\n     */\n    allowMinimization: ComponentOptions.buildBooleanOption({ defaultValue: true }),\n\n    /**\n     * If {@link FieldTable.options.allowMinimization} is `true`, specifies the caption to show on the **Minimize** link\n     * (the link that appears when the FieldTable is expanded).\n     *\n     * Default value is `\"Details\"`.\n     */\n    expandedTitle: ComponentOptions.buildLocalizedStringOption({\n      localizedString: () => l('Details'),\n      depend: 'allowMinimization'\n    }),\n\n    /**\n     * If {@link FieldTable.options.allowMinimization} is `true`, specifies the caption to show on the **Expand** link\n     * (the link that appears when the FieldTable is minimized).\n     *\n     * Default value is `\"Details\"`.\n     */\n    minimizedTitle: ComponentOptions.buildLocalizedStringOption({\n      localizedString: () => l('Details'),\n      depend: 'allowMinimization'\n    }),\n\n    /**\n     * If {@link FieldTable.options.allowMinimization} is `true`, specifies whether to minimize the table by default.\n     *\n     * Default value is `undefined`, and the FieldTable will collapse by default if the result it is associated with has\n     * a non-empty excerpt.\n     */\n    minimizedByDefault: ComponentOptions.buildBooleanOption({ depend: 'allowMinimization' })\n  };\n  private toggleButton: HTMLElement;\n  private toggleCaption: HTMLElement;\n  private toggleButtonSVGContainer: HTMLElement;\n  private toggleButtonInsideTable: HTMLElement;\n  private toggleContainer: HTMLElement;\n  private toggleContainerHeight: number;\n\n  /**\n   * Creates a new FieldTable.\n   * @param element The HTMLElement on which to instantiate the component.\n   * @param options The options for the FieldTable component.\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\n   * automatically resolved (with a slower execution time).\n   * @param result The result to associate the component with.\n   */\n  constructor(\n    public element: HTMLElement,\n    public options?: IFieldTableOptions,\n    bindings?: IComponentBindings,\n    public result?: IQueryResult\n  ) {\n    super(element, ValueRow.ID, bindings);\n    this.options = ComponentOptions.initComponentOptions(element, FieldTable, options);\n\n    var rows = $$(this.element).findAll('tr[data-field]');\n    each(rows, (e: HTMLElement) => {\n      new ValueRow(e, {}, bindings, result);\n    });\n\n    if ($$(this.element).find('tr') == null) {\n      $$(element).detach();\n    }\n\n    if (this.isTogglable()) {\n      const className = 'coveo-field-table-toggle-container';\n      this.toggleContainer = $$('div', { className, id: uniqueId(className) }).el;\n      this.buildToggle();\n      $$(this.toggleContainer).insertBefore(this.element);\n      this.toggleContainer.appendChild(this.element);\n      this.toggleContainer.appendChild(this.toggleButtonInsideTable);\n    }\n  }\n\n  public get isExpanded() {\n    return !this.toggleButton || this.toggleButton.getAttribute('aria-expanded') === 'true';\n  }\n\n  public set isExpanded(expanded: boolean) {\n    if (this.toggleButton) {\n      this.toggleButton.setAttribute('aria-expanded', expanded.toString());\n    }\n  }\n\n  /**\n   * Toggles between expanding (showing) and minimizing (collapsing) the FieldTable.\n   *\n   * @param anim Specifies whether to show a sliding animation when toggling the display of the FieldTable.\n   */\n  public toggle(anim = false) {\n    this.isExpanded ? this.minimize(anim) : this.expand(anim);\n  }\n\n  /**\n   * Expands (shows) the FieldTable,\n   * @param anim Specifies whether to show a sliding animation when expanding the FieldTable.\n   */\n  public expand(anim = false) {\n    if (this.isTogglable()) {\n      this.isExpanded = true;\n      this.toggleCaption.textContent = this.options.expandedTitle;\n      SVGDom.addClassToSVGInContainer(this.toggleButtonSVGContainer, 'coveo-opened');\n      SVGDom.addClassToSVGInContainer(this.toggleButtonInsideTable, 'coveo-opened');\n      anim ? this.slideToggle(true) : this.slideToggle(true, false);\n    }\n  }\n\n  /**\n   * Minimizes (collapses) the FieldTable.\n   * @param anim Specifies whether to show a sliding animation when minimizing the FieldTable.\n   */\n  public minimize(anim = false) {\n    if (this.isTogglable()) {\n      this.isExpanded = false;\n      this.toggleCaption.textContent = this.options.minimizedTitle;\n      SVGDom.removeClassFromSVGInContainer(this.toggleButtonSVGContainer, 'coveo-opened');\n      SVGDom.removeClassFromSVGInContainer(this.toggleButtonInsideTable, 'coveo-opened');\n      anim ? this.slideToggle(false) : this.slideToggle(false, false);\n    }\n  }\n\n  /**\n   * Updates the toggle height if the content was dynamically resized, so that the expanding and minimizing animation\n   * can match the new content size.\n   */\n  public updateToggleHeight() {\n    this.updateToggleContainerHeight();\n    this.isExpanded ? this.expand() : this.minimize();\n  }\n\n  protected isTogglable() {\n    if (this.options.allowMinimization) {\n      return true;\n    }\n    return false;\n  }\n\n  private buildToggle() {\n    this.toggleCaption = $$('span', {\n      className: 'coveo-field-table-toggle-caption'\n    }).el;\n\n    this.toggleButton = $$('div', {\n      className: 'coveo-field-table-toggle coveo-field-table-toggle-down',\n      ariaControls: this.toggleContainer.id\n    }).el;\n    this.toggleButtonSVGContainer = $$('span', null, SVGIcons.icons.arrowDown).el;\n    SVGDom.addClassToSVGInContainer(this.toggleButtonSVGContainer, 'coveo-field-table-toggle-down-svg');\n    this.toggleButton.appendChild(this.toggleCaption);\n    this.toggleButton.appendChild(this.toggleButtonSVGContainer);\n    $$(this.toggleButton).insertBefore(this.element);\n\n    this.toggleButtonInsideTable = $$(\n      'span',\n      { className: 'coveo-field-table-toggle coveo-field-table-toggle-up' },\n      SVGIcons.icons.arrowUp\n    ).el;\n    SVGDom.addClassToSVGInContainer(this.toggleButtonInsideTable, 'coveo-field-table-toggle-up-svg');\n\n    if (this.options.minimizedByDefault === true) {\n      this.isExpanded = false;\n    } else if (this.options.minimizedByDefault === false) {\n      this.isExpanded = true;\n    } else {\n      this.isExpanded = !QueryUtils.hasExcerpt(this.result);\n    }\n\n    requestAnimationFrame(() => this.updateToggleHeight());\n\n    const toggleAction = () => this.toggle(true);\n\n    new AccessibleButton()\n      .withElement(this.toggleButton)\n      .withSelectAction(() => toggleAction())\n      .withOwner(this.bind)\n      .withLabel(l('Details'))\n      .build();\n\n    $$(this.toggleButtonInsideTable).on('click', toggleAction);\n  }\n\n  private slideToggle(visible: boolean = true, anim: boolean = true) {\n    if (!anim) {\n      $$(this.toggleContainer).addClass('coveo-no-transition');\n    }\n\n    if (visible) {\n      this.toggleContainer.style.display = 'block';\n      this.toggleContainer.style.height = this.containerHeight;\n    } else {\n      this.toggleContainer.style.height = '0';\n    }\n    if (!anim) {\n      this.toggleContainer.offsetHeight; // Force reflow\n      $$(this.toggleContainer).removeClass('coveo-no-transition');\n    }\n  }\n\n  private get containerHeight() {\n    if (!this.toggleContainerHeight) {\n      this.updateToggleContainerHeight();\n    }\n\n    return this.toggleContainerHeight + 'px';\n  }\n\n  private updateToggleContainerHeight() {\n    this.toggleContainerHeight = this.toggleContainer.scrollHeight;\n  }\n}\n\nInitialization.registerAutoCreateComponent(FieldTable);\n\nexport interface IValueRowOptions extends IFieldValueOptions {\n  caption?: string;\n}\n\nclass ValueRow extends FieldValue {\n  static ID = 'ValueRow';\n  static options: IValueRowOptions = {\n    caption: ComponentOptions.buildStringOption({\n      postProcessing: (value, options) => value || options.field.substr(1)\n    })\n  };\n\n  static parent = FieldValue;\n  private valueContainer: HTMLElement;\n\n  constructor(public element: HTMLElement, public options: IValueRowOptions, bindings?: IComponentBindings, public result?: IQueryResult) {\n    super(element, options, bindings, result, ValueRow.ID);\n    this.options = ComponentOptions.initComponentOptions(element, ValueRow, options);\n\n    var caption = $$('th').el;\n    caption.appendChild(document.createTextNode(this.options.caption.toLocaleString()));\n    this.element.insertBefore(caption, this.getValueContainer());\n  }\n\n  protected getValueContainer() {\n    if (this.valueContainer == null) {\n      this.valueContainer = document.createElement('td');\n      this.element.appendChild(this.valueContainer);\n    }\n    return this.valueContainer;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldTable/FieldTable.ts","/// <reference path='Facet.ts' />\nimport { StringUtils } from '../../utils/StringUtils';\nimport { QueryUtils } from '../../utils/QueryUtils';\nimport { FileTypes } from '../Misc/FileTypes';\nimport { DateUtils } from '../../utils/DateUtils';\nimport { Utils } from '../../utils/Utils';\nimport { $$ } from '../../utils/Dom';\nimport * as _ from 'underscore';\nimport FacetModuleDefinition = require('./Facet');\nimport { l } from '../../strings/Strings';\n\nexport class FacetUtils {\n  static getRegexToUseForFacetSearch(value: string, ignoreAccent: boolean) {\n    return new RegExp(StringUtils.stringToRegex(value, ignoreAccent), 'i');\n  }\n\n  static getDisplayValueFromValueCaption(value: string, field: string, valueCaption: Record<string, string>) {\n    const returnValue = this.tryToGetTranslatedCaption(field, value, false);\n    return valueCaption[value] || returnValue;\n  }\n\n  static getValuesToUseForSearchInFacet(original: string, facet: FacetModuleDefinition.Facet): string[] {\n    let ret = [original];\n    let regex = this.getRegexToUseForFacetSearch(original, facet.options.facetSearchIgnoreAccents);\n    if (facet.options.valueCaption) {\n      _.chain(facet.options.valueCaption)\n        .pairs()\n        .filter(pair => {\n          return regex.test(pair[1]);\n        })\n        .each(match => {\n          ret.push(match[0]);\n        });\n      if (\n        QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@objecttype') ||\n        QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@filetype')\n      ) {\n        _.each(FileTypes.getFileTypeCaptions(), (value: string, key: string) => {\n          if (!(key in facet.options.valueCaption) && regex.test(value)) {\n            ret.push(key);\n          }\n        });\n      }\n    } else if (\n      QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@objecttype') ||\n      QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@filetype')\n    ) {\n      _.each(\n        _.filter(_.pairs(FileTypes.getFileTypeCaptions()), pair => {\n          return regex.test(pair[1]);\n        }),\n        match => {\n          ret.push(match[0]);\n        }\n      );\n    } else if (QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@month')) {\n      _.each(_.range(1, 13), month => {\n        if (regex.test(DateUtils.monthToString(month - 1))) {\n          ret.push(('0' + month.toString()).substr(-2));\n        }\n      });\n    }\n    return ret;\n  }\n\n  static buildFacetSearchPattern(values: string[]) {\n    values = _.map(values, value => {\n      return Utils.escapeRegexCharacter(value);\n    });\n    values[0] = '.*' + values[0] + '.*';\n    return values.join('|');\n  }\n\n  static needAnotherFacetSearch(\n    currentSearchLength: number,\n    newSearchLength: number,\n    oldSearchLength: number,\n    desiredSearchLength: number\n  ) {\n    // Something was removed (currentSearch < newSearch)\n    // && we might want to display more facet search result(currentSearch < desiredSearch)\n    // && the new query returned more stuff than the old one so there's still more results(currentSearchLength > oldLength)\n    return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && currentSearchLength > oldSearchLength;\n  }\n\n  static addNoStateCssClassToFacetValues(facet: FacetModuleDefinition.Facet, container: HTMLElement) {\n    // This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet\n    if (facet.values.getSelected().length != 0) {\n      let noStates = $$(container).findAll('li:not(.coveo-selected)');\n      _.each(noStates, noState => {\n        $$(noState).addClass('coveo-no-state');\n      });\n    }\n  }\n\n  static tryToGetTranslatedCaption(field: string, value: string, fallbackOnLocalization = true) {\n    let found: string;\n\n    if (QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@filetype')) {\n      found = FileTypes.getFileType(value, fallbackOnLocalization).caption;\n    } else if (QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@objecttype')) {\n      found = FileTypes.getObjectType(value, fallbackOnLocalization).caption;\n    } else if (FacetUtils.isMonthFieldValue(field, value)) {\n      const month = parseInt(value, 10);\n      found = DateUtils.monthToString(month - 1);\n    } else if (fallbackOnLocalization) {\n      found = l(value);\n    }\n    return found != undefined && Utils.isNonEmptyString(found) ? found : value;\n  }\n\n  static isMonthFieldValue(field: string, value: string) {\n    if (!QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@month')) {\n      return false;\n    }\n\n    const asInt = parseInt(value, 10);\n\n    if (isNaN(asInt)) {\n      return false;\n    }\n\n    if (asInt < 1 || asInt > 12) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Facet/FacetUtils.ts","import { Component } from '../Base/Component';\n\nexport function isFacetFieldValueCompatible(facet: Component): facet is IFieldValueCompatibleFacet {\n  return !!facet['isFieldValueCompatible'];\n}\n\nexport interface IFieldValueCompatibleFacet extends Component {\n  isFieldValueCompatible: boolean;\n  hasSelectedValue(value: string): boolean;\n  selectValue(value: string): void;\n  deselectValue(value: string): void;\n  getCaptionForStringValue(value: string): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldValue/IFieldValueCompatibleFacet.ts"],"sourceRoot":""}