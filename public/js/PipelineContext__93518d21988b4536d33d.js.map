{"version":3,"sources":["./src/ui/PipelineContext/PipelineContext.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+BAAgC;AAChC,4CAAgF;AAChF,6CAAqD;AACrD,mCAAqC;AACrC,qCAA0C;AAC1C,yCAA8C;AAE9C,gDAA4D;AAC5D,8CAAwD;AAOxD;;;;;;;GAOG;AACH;IAAqC,mCAAS;IAY5C,yBAA0B,OAAoB,EAAS,OAAiC,EAAS,QAA6B;QAA9H,YACE,kBAAM,OAAO,EAAE,eAAe,CAAC,EAAE,EAAE,QAAQ,CAAC,SAQ7C;QATyB,aAAO,GAAP,OAAO,CAAa;QAAS,aAAO,GAAP,OAAO,CAA0B;QAAS,cAAQ,GAAR,QAAQ,CAAqB;QAFtH,oBAAc,GAAY,EAAE,CAAC;QAInC,KAAI,CAAC,OAAO,GAAG,mCAAgB,CAAC,oBAAoB,CAAC,OAAO,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QACxF,KAAI,CAAC,UAAU,CACb,QAAE,CAAC,KAAI,CAAC,OAAO,CAAC;aACb,IAAI,EAAE;aACN,IAAI,EAAE,CACV,CAAC;QACF,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,yBAAW,CAAC,aAAa,EAAE,UAAC,IAA6B,IAAK,YAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC;;IACxH,CAAC;IAED;;;;;;OAMG;IACI,oCAAU,GAAjB,UAAkB,UAA4B;QAC5C,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YAC1B,IAAM,aAAa,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;YACjE,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;SACrC;aAAM;YACL,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;SAClC;IACH,CAAC;IAED;;OAEG;IACI,oCAAU,GAAjB;QAAA,iBAGC;QAFC,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACnC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,aAAG,IAAI,YAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAzB,CAAyB,CAAC,CAAC,CAAC;IACvE,CAAC;IAED;;;;;;OAMG;IACI,yCAAe,GAAtB,UAAuB,UAAkB,EAAE,YAA+B;QACxE,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;IACjD,CAAC;IAED;;;OAGG;IACI,wCAAc,GAArB;QACE,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;;OAQG;IACI,yCAAe,GAAtB,UAAuB,GAAW;QAAlC,iBAYC;QAXC,IAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC3B,IAAM,eAAa,GAAG,EAAE,CAAC;YACzB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,eAAK;gBACpC,eAAa,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YACH,OAAO,eAAa,CAAC;SACtB;aAAM,IAAI,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;SAC3C;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,6CAAmB,GAA3B,UAA4B,IAA6B;QAAzD,iBAKC;QAJC,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,GAAW;YACvB,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,GAAG,EAAE,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mDAAyB,GAAjC,UAAkC,eAAuB;QACvD,IAAI,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;YAC9B,OAAO,EAAE,CAAC;SACX;QACD,IAAI;YACF,2DAA2D;YAC3D,OAAO,IAAI,CAAC,KAAK,CAAC,aAAK,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CAAC;SAC9D;QAAC,OAAO,CAAC,EAAE;YACV,IAAI;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;aACpC;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wEAAwE,EAAE,CAAC,CAAC,CAAC;gBAC/F,OAAO,IAAI,CAAC;aACb;SACF;IACH,CAAC;IAEO,yCAAe,GAAvB,UAAwB,KAAa;QACnC;;;;;;;;UAQE;QACF,OAAO,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAC,GAAW,EAAE,UAAkB;YACtE,IAAM,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;YACrC,IAAI,KAAK,CAAC,OAAO,IAAI,UAAU,IAAI,KAAK,CAAC,OAAO,EAAE;gBAChD,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aAClC;iBAAM,IAAI,UAAU,IAAI,eAAe,CAAC,WAAW,EAAE;gBACpD,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;aAC7B;YACD,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IAnIM,kBAAE,GAAG,iBAAiB,CAAC;IACvB,2BAAW,GAAG,YAAY,CAAC;IAE3B,wBAAQ,GAAG;QAChB,8BAAc,CAAC;YACb,eAAe,EAAE,eAAe;SACjC,CAAC,CAAC;IACL,CAAC,CAAC;IA6HJ,sBAAC;CAAA,CArIoC,qBAAS,GAqI7C;AArIY,0CAAe;AAuI5B,+BAAc,CAAC,2BAA2B,CAAC,eAAe,CAAC,CAAC","file":"PipelineContext__93518d21988b4536d33d.js","sourcesContent":["import * as _ from 'underscore';\r\nimport { IBuildingQueryEventArgs, QueryEvents } from '../../events/QueryEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { Context, IPipelineContextProvider } from './PipelineGlobalExports';\r\n\r\ndeclare const Coveo;\r\n\r\nexport interface IPipelineContextOptions {}\r\n\r\n/**\r\n * The `PipelineContext` component injects custom contextual information into the search requests and usage analytics search events sent from a search interface.\r\n *\r\n * This component is meant to be initialized on a `script` HTML tag whose `type` attribute is set to `text/context` and whose optional JSON content defines the custom information to send (each value can be set to a string or array of strings).\r\n *\r\n * See [Sending Custom Context Information](https://docs.coveo.com/en/399/).\r\n * Note: To customize the context sent on all usage analytics events, see [Sending Custom Metadata with Search, Click, or Custom Events](https://docs.coveo.com/en/2004/javascript-search-framework/sending-custom-metadata-with-search-click-or-custom-events).\r\n */\r\nexport class PipelineContext extends Component implements IPipelineContextProvider {\r\n  static ID = 'PipelineContext';\r\n  static CURRENT_URL = 'CurrentUrl';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      PipelineContext: PipelineContext\r\n    });\r\n  };\r\n\r\n  private contextContent: Context = {};\r\n\r\n  public constructor(public element: HTMLElement, public options?: IPipelineContextOptions, public bindings?: IComponentBindings) {\r\n    super(element, PipelineContext.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, PipelineContext, options);\r\n    this.setContext(\r\n      $$(this.element)\r\n        .text()\r\n        .trim()\r\n    );\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n  }\r\n\r\n  /**\r\n   * **Available since the [December 2017 Release](https://docs.coveo.com/en/373).**\r\n   *\r\n   * Sets a new context, replacing the previous context if applicable.\r\n   *\r\n   * @param newContext The new context to set, which can be directly passed as a JSON, or as a stringified JSON.\r\n   */\r\n  public setContext(newContext: string | Context) {\r\n    if (_.isString(newContext)) {\r\n      const contextParsed = this.tryParseContextFromString(newContext);\r\n      this.contextContent = contextParsed;\r\n    } else {\r\n      this.contextContent = newContext;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current context\r\n   */\r\n  public getContext(): Context {\r\n    const keys = this.getContextKeys();\r\n    return _.object(keys, _.map(keys, key => this.getContextValue(key)));\r\n  }\r\n\r\n  /**\r\n   * **Available since the [December 2017 Release](https://docs.coveo.com/en/373).**\r\n   *\r\n   * Sets a value for a context key, replacing the previous value if applicable.\r\n   * @param contextKey\r\n   * @param contextValue\r\n   */\r\n  public setContextValue(contextKey: string, contextValue: string | string[]) {\r\n    this.contextContent[contextKey] = contextValue;\r\n  }\r\n\r\n  /**\r\n   * Return all the context keys configured for context.\r\n   * @returns {string[]}\r\n   */\r\n  public getContextKeys(): string[] {\r\n    return _.keys(this.contextContent);\r\n  }\r\n\r\n  /**\r\n   * Get the context value associated to the given key.\r\n   *\r\n   * If the global variable Coveo.context contains the requested key, this method will return the value contained in Coveo.context instead of the one contained internally.\r\n   *\r\n   * This is especially useful in a Coveo for Salesforce context, where context values can be extracted from a backend service.\r\n   * @param key\r\n   * @returns {string}\r\n   */\r\n  public getContextValue(key: string): string | string[] {\r\n    const contextValue = this.contextContent[key];\r\n    if (_.isArray(contextValue)) {\r\n      const contextValues = [];\r\n      _.each(this.contextContent[key], value => {\r\n        contextValues.push(this.getModifiedData(value));\r\n      });\r\n      return contextValues;\r\n    } else if (_.isString(contextValue)) {\r\n      return this.getModifiedData(contextValue);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\r\n    let keys = this.getContextKeys();\r\n    _.each(keys, (key: string) => {\r\n      args.queryBuilder.addContextValue(key, this.getContextValue(key));\r\n    });\r\n  }\r\n\r\n  private tryParseContextFromString(contextAsString: string): Context {\r\n    if (_.isEmpty(contextAsString)) {\r\n      return {};\r\n    }\r\n    try {\r\n      // Context could be HTML encoded (eg: Coveo for Salesforce)\r\n      return JSON.parse(Utils.decodeHTMLEntities(contextAsString));\r\n    } catch (e) {\r\n      try {\r\n        return JSON.parse(contextAsString);\r\n      } catch (e) {\r\n        this.logger.error(`Error while trying to parse context from the PipelineContext component`, e);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  private getModifiedData(value: string) {\r\n    /* We need to modify the data to escape special salesforce characters. eg: {! }\r\n     If we find the matching value in the global Coveo.context variable, we return that one instead of the one present locally.\r\n     So, concretely, the component could contain : \r\n     {\r\n       \"productName\" : \"{! productValueFromSalesforce }\"\r\n     }\r\n\r\n     This means that in those case, we would try to access Coveo.context.productValueFromSalesforce (which would in theory be a \"real\" product value from salesforce, and not a placeholder/variable)\r\n    */\r\n    return value.replace(/\\{\\!([^\\}]+)\\}/g, (all: string, contextKey: string) => {\r\n      const trimmedKey = contextKey.trim();\r\n      if (Coveo.context && trimmedKey in Coveo.context) {\r\n        return Coveo.context[trimmedKey];\r\n      } else if (trimmedKey == PipelineContext.CURRENT_URL) {\r\n        return window.location.href;\r\n      }\r\n      return '';\r\n    });\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(PipelineContext);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/PipelineContext/PipelineContext.ts"],"sourceRoot":""}