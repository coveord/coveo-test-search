{"version":3,"sources":["Aggregate.min__5f3280c404a1ee75a113.js","./src/ui/Aggregate/Aggregate.ts"],"names":["webpackJsonpCoveo__temporary","234","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","Aggregate","ID","ComponentOptions","initComponentOptions","bind","onRootElement","QueryEvents","buildingQuery","args","handleBuildingQuery","querySuccess","handleQuerySuccess","$$","hide","_this","doExport","exportGlobally","request","field","maximumNumberOfValues","computedFields","operation","index","queryBuilder","groupByRequests","length","push","_","isNumber","results","groupByResults","gbr","aggregate","globalComputedFieldResults","text","Globalize","format","show","buildFieldOption","required","buildStringOption","defaultValue","Component","Initialization","registerAutoCreateComponent"],"mappings":"AAAAA,8BAA8B,KAExBC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAEA,IAAIC,GAAaC,MAAQA,KAAKD,WAAc,WACxC,GAAIE,GAAgBC,OAAOC,iBACpBC,uBAA2BC,QAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIC,KAAKD,GAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,IACzE,OAAO,UAAUF,EAAGC,GAEhB,QAASG,KAAOV,KAAKW,YAAcL,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaL,OAAOW,OAAON,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,OAGvFR,QAAOY,eAAejB,EAAS,cAAgBkB,OAAO,GCjBtD,YAEA,OAEA,QAEA,OACA,OACA,QACA,OACA,OAaA,cAyDE,WAAmBC,EAA6BC,EAA6BC,GAA7E,MACE,YAAMF,EAASG,EAAUC,GAAIF,IAAS,IDjClC,OCgCa,GAAAF,UAA6B,EAAAC,UAG9C,EAAKA,QAAU,EAAAI,iBAAiBC,qBAAqBN,EAASG,EAAWF,GAEzE,EAAKM,KAAKC,cAAc,EAAAC,YAAYC,cAAe,SAACC,GAAkC,SAAKC,oBAAoBD,KAC/G,EAAKJ,KAAKC,cAAc,EAAAC,YAAYI,aAAc,SAACF,GAAiC,SAAKG,mBAAmBH,KAC5G,EAAAI,GAAG,EAAKf,SAASgB,ODvCNC,ECoEf,MA7F+B,QAGtB,EAAAC,SAAP,WACE,EAAAC,gBACEhB,UAAWA,KA8DP,YAAAS,oBAAR,SAA4BD,GAC1B,GAAIS,IACFC,MAAerC,KAAKiB,QAAQoB,MAC5BC,sBAAuB,EACvBC,iBAEIF,MAAerC,KAAKiB,QAAQoB,MAC5BG,UAAWxC,KAAKiB,QAAQuB,YAK9BxC,MAAKyC,MAAQd,EAAKe,aAAaC,gBAAgBC,OAC/CjB,EAAKe,aAAaC,gBAAgBE,KAAKT,IAGjC,YAAAN,mBAAR,SAA2BH,GACzB,GAAImB,EAAEC,SAAS/C,KAAKyC,QAAgD,GAAtCd,EAAKqB,QAAQC,eAAeL,OAAa,CACrE,GAAIM,GAAMvB,EAAKqB,QAAQC,eAAejD,KAAKyC,OACvCU,EAAYD,EAAIE,2BAA2B,EAC/C,GAAArB,GAAG/B,KAAKgB,SAASqC,KAAKC,EAAUC,OAAOJ,EAAWnD,KAAKiB,QAAQsC,SAC/D,EAAAxB,GAAG/B,KAAKgB,SAASwC,WAEjB,GAAAzB,GAAG/B,KAAKgB,SAASgB,QAzFd,EAAAZ,GAAK,YAYL,EAAAH,SAILoB,MAAO,EAAAhB,iBAAiBoC,kBAAmBC,UAAU,IAarDlB,UAAW,EAAAnB,iBAAiBsC,mBAAoBC,aAAc,QAe9DL,OAAQ,EAAAlC,iBAAiBsC,mBAAoBC,aAAc,QAgD/D,GA7F+B,EAAAC,UAAlB,GAAA1C,YA+Fb,EAAA2C,eAAeC,4BAA4B5C","file":"Aggregate.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([87],{\n\n/***/ 234:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar QueryEvents_1 = __webpack_require__(11);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar Globalize = __webpack_require__(23);\r\nvar _ = __webpack_require__(0);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\n/**\r\n * The Aggregate component allows to display the result on an aggregate operation on the index.\r\n *\r\n * It hooks itself to the query to add a new {@link IGroupByRequest}, then displays the result.\r\n */\r\nvar Aggregate = /** @class */ (function (_super) {\r\n    __extends(Aggregate, _super);\r\n    /**\r\n     * Creates a new Aggregate component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the Aggregate component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function Aggregate(element, options, bindings) {\r\n        var _this = _super.call(this, element, Aggregate.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Aggregate, options);\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.buildingQuery, function (args) { return _this.handleBuildingQuery(args); });\r\n        _this.bind.onRootElement(QueryEvents_1.QueryEvents.querySuccess, function (args) { return _this.handleQuerySuccess(args); });\r\n        Dom_1.$$(_this.element).hide();\r\n        return _this;\r\n    }\r\n    Aggregate.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Aggregate: Aggregate\r\n        });\r\n    };\r\n    Aggregate.prototype.handleBuildingQuery = function (args) {\r\n        var request = {\r\n            field: this.options.field,\r\n            maximumNumberOfValues: 0,\r\n            computedFields: [\r\n                {\r\n                    field: this.options.field,\r\n                    operation: this.options.operation\r\n                }\r\n            ]\r\n        };\r\n        this.index = args.queryBuilder.groupByRequests.length;\r\n        args.queryBuilder.groupByRequests.push(request);\r\n    };\r\n    Aggregate.prototype.handleQuerySuccess = function (args) {\r\n        if (_.isNumber(this.index) && args.results.groupByResults.length != 0) {\r\n            var gbr = args.results.groupByResults[this.index];\r\n            var aggregate = gbr.globalComputedFieldResults[0];\r\n            Dom_1.$$(this.element).text(Globalize.format(aggregate, this.options.format));\r\n            Dom_1.$$(this.element).show();\r\n        }\r\n        else {\r\n            Dom_1.$$(this.element).hide();\r\n        }\r\n    };\r\n    Aggregate.ID = 'Aggregate';\r\n    /**\r\n     * The options for the component\r\n     * @componentOptions\r\n     */\r\n    Aggregate.options = {\r\n        /**\r\n         * Specifies the field on which to do the aggregate operation. This parameter is mandatory.\r\n         */\r\n        field: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),\r\n        /**\r\n         * Specifies the aggregate operation to perform.\r\n         *\r\n         * The possible values are:\r\n         * - `sum` - Computes the sum of the computed field values.\r\n         * - `average` - Computes the average of the computed field values.\r\n         * - `minimum` - Finds the minimum value of the computed field values.\r\n         * - `maximum` - Finds the maximum value of the computed field values.\r\n         *\r\n         * Default value is `sum`.\r\n         */\r\n        operation: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'sum' }),\r\n        /**\r\n         * Specifies how to format the value.\r\n         *\r\n         * The available formats are defined in the Globalize library (see\r\n         * [Globalize](https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-).\r\n         *\r\n         * The most commonly used formats are:\r\n         * - `c0` - Formats the value as a currency.\r\n         * - `n0` - Formats the value as an integer.\r\n         * - `n2` - Formats the value as a floating point with 2 decimal digits.\r\n         *\r\n         * Default value is `c0`.\r\n         */\r\n        format: ComponentOptions_1.ComponentOptions.buildStringOption({ defaultValue: 'c0' })\r\n    };\r\n    return Aggregate;\r\n}(Component_1.Component));\r\nexports.Aggregate = Aggregate;\r\nInitialization_1.Initialization.registerAutoCreateComponent(Aggregate);\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Aggregate.min__5f3280c404a1ee75a113.js","import { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { QueryEvents, IBuildingQueryEventArgs, IQuerySuccessEventArgs } from '../../events/QueryEvents';\r\nimport { IGroupByRequest } from '../../rest/GroupByRequest';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as Globalize from 'globalize';\r\nimport * as _ from 'underscore';\r\nimport { exportGlobally } from '../../GlobalExports';\r\n\r\nexport interface IAggregateOptions {\r\n  field: IFieldOption;\r\n  operation?: string;\r\n  format?: string;\r\n}\r\n\r\n/**\r\n * The Aggregate component allows to display the result on an aggregate operation on the index.\r\n *\r\n * It hooks itself to the query to add a new {@link IGroupByRequest}, then displays the result.\r\n */\r\nexport class Aggregate extends Component {\r\n  static ID = 'Aggregate';\r\n\r\n  static doExport() {\r\n    exportGlobally({\r\n      Aggregate: Aggregate\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IAggregateOptions = {\r\n    /**\r\n     * Specifies the field on which to do the aggregate operation. This parameter is mandatory.\r\n     */\r\n    field: ComponentOptions.buildFieldOption({ required: true }),\r\n\r\n    /**\r\n     * Specifies the aggregate operation to perform.\r\n     *\r\n     * The possible values are:\r\n     * - `sum` - Computes the sum of the computed field values.\r\n     * - `average` - Computes the average of the computed field values.\r\n     * - `minimum` - Finds the minimum value of the computed field values.\r\n     * - `maximum` - Finds the maximum value of the computed field values.\r\n     *\r\n     * Default value is `sum`.\r\n     */\r\n    operation: ComponentOptions.buildStringOption({ defaultValue: 'sum' }),\r\n\r\n    /**\r\n     * Specifies how to format the value.\r\n     *\r\n     * The available formats are defined in the Globalize library (see\r\n     * [Globalize](https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-).\r\n     *\r\n     * The most commonly used formats are:\r\n     * - `c0` - Formats the value as a currency.\r\n     * - `n0` - Formats the value as an integer.\r\n     * - `n2` - Formats the value as a floating point with 2 decimal digits.\r\n     *\r\n     * Default value is `c0`.\r\n     */\r\n    format: ComponentOptions.buildStringOption({ defaultValue: 'c0' })\r\n  };\r\n\r\n  private index: number;\r\n\r\n  /**\r\n   * Creates a new Aggregate component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Aggregate component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IAggregateOptions, bindings?: IComponentBindings) {\r\n    super(element, Aggregate.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Aggregate, options);\r\n\r\n    this.bind.onRootElement(QueryEvents.buildingQuery, (args: IBuildingQueryEventArgs) => this.handleBuildingQuery(args));\r\n    this.bind.onRootElement(QueryEvents.querySuccess, (args: IQuerySuccessEventArgs) => this.handleQuerySuccess(args));\r\n    $$(this.element).hide();\r\n  }\r\n\r\n  private handleBuildingQuery(args: IBuildingQueryEventArgs) {\r\n    var request: IGroupByRequest = {\r\n      field: <string>this.options.field,\r\n      maximumNumberOfValues: 0,\r\n      computedFields: [\r\n        {\r\n          field: <string>this.options.field,\r\n          operation: this.options.operation\r\n        }\r\n      ]\r\n    };\r\n\r\n    this.index = args.queryBuilder.groupByRequests.length;\r\n    args.queryBuilder.groupByRequests.push(request);\r\n  }\r\n\r\n  private handleQuerySuccess(args: IQuerySuccessEventArgs) {\r\n    if (_.isNumber(this.index) && args.results.groupByResults.length != 0) {\r\n      var gbr = args.results.groupByResults[this.index];\r\n      var aggregate = gbr.globalComputedFieldResults[0];\r\n      $$(this.element).text(Globalize.format(aggregate, this.options.format));\r\n      $$(this.element).show();\r\n    } else {\r\n      $$(this.element).hide();\r\n    }\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(Aggregate);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Aggregate/Aggregate.ts"],"sourceRoot":""}