{"version":3,"sources":["ImageFieldValue.min__5f3280c404a1ee75a113.js","./src/ui/FieldValue/FieldValue.ts","./src/ui/FieldImage/ImageFieldValue.ts","./src/ui/Facet/FacetUtils.ts","./src/ui/FieldValue/IFieldValueCompatibleFacet.ts"],"names":["webpackJsonpCoveo__temporary","118","module","exports","__webpack_require__","showOnlyWithHelper","helpers","options","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","bindings","result","fieldValueClassId","FieldValue","ID","ComponentOptions","initOptions","simpleOptions","helper","normalizeHelperAndOptions","resolveResult","Assert","exists","TemplateFieldsEvaluator","evaluateFieldsToMatch","conditions","getValue","initialize","parentElement","removeChild","_this","values","loadedValueFromComponent","isArray","splitValues","isString","map","split","separator","v","trim","toString","appendValuesToDom","textCaption","prependTextCaptionToDom","Utils","getFieldValue","field","isObject","renderOneValue","$$","el","toRender","getCaption","TemplateHelpers","getHelper","call","getHelperOptions","logger","warn","keys","getHelpers","fullDateStr","getFullDate","setAttribute","StringUtils","capitalizeFirstLetter","htmlValue","innerHTML","appendChild","document","createTextNode","bindEventOnValue","getValueContainer","helperOptions","toFilter","toKeep","filter","optionKey","optionDefinition","contains","omit","key","inlineOptions","loadStringOption","isNonEmptyString","extend","eval","date","fullDateOptions","useLongDateFormat","useTodayYesterdayAndTomorrow","useWeekdayIfThisWeek","omitYearIfCurrentOne","DateUtils","dateToString","Date","parseInt","dateTimeToString","each","index","undefined","length","displaySeparator","renderTextCaption","className","escape","elem","prepend","addClass","originalFacetValue","renderedFacetValue","bindFacets","getFacets","facet","caption","getCaptionForStringValue","FacetUtils","tryToGetTranslatedCaption","facets","ComponentsTypes","getAllFacetsFromSearchInterface","searchInterface","isFacetFieldValueCompatible","disabled","facetsWithMatchingId","id","isValueSelected","find","hasSelectedValue","selectAction","handleFacetSelection","buildClickableElement","isSelected","label","l","AccessibleButton","withTitle","withElement","withSelectAction","build","forEach","deselectValue","selectValue","executeQuery","queryController","deferExecuteQuery","beforeExecuteQuery","usageAnalytics","logSearchEvent","analyticsActionCauseList","documentField","facetId","facetField","facetValue","toLowerCase","doExport","exportGlobally","buildFieldOption","defaultValue","required","buildStringOption","postProcessing","buildBooleanOption","depend","buildHelperOption","buildObjectOption","subOptions","text","target","class","format","decimals","buildNumberOption","min","symbol","includeTimeIfToday","includeTimeIfThisWeek","alwaysIncludeTime","predefinedFormat","companyDomain","me","lengthLimit","truncateName","alt","height","width","srcTemplate","precision","base","isMilliseconds","buildLocalizedStringOption","buildFieldConditionOption","Component","Initialization","registerAutoCreateComponent","193","ImageFieldValue","initComponentOptions","fieldValueOption","title","39","getRegexToUseForFacetSearch","ignoreAccent","RegExp","stringToRegex","getDisplayValueFromValueCaption","valueCaption","returnValue","getValuesToUseForSearchInFacet","original","ret","regex","facetSearchIgnoreAccents","_","chain","pairs","pair","test","match","push","QueryUtils","isStratusAgnosticField","FileTypes","getFileTypeCaptions","range","month","monthToString","substr","buildFacetSearchPattern","escapeRegexCharacter","join","needAnotherFacetSearch","currentSearchLength","newSearchLength","oldSearchLength","desiredSearchLength","addNoStateCssClassToFacetValues","container","getSelected","noStates","findAll","noState","found","getFileType","getObjectType","isMonthFieldValue","asInt","isNaN","534"],"mappings":"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","file":"ImageFieldValue.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([29,38],{\n\n/***/ 118:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar underscore_1 = __webpack_require__(0);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nvar DateUtils_1 = __webpack_require__(32);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar StringUtils_1 = __webpack_require__(22);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar AnalyticsActionListMeta_1 = __webpack_require__(10);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar FacetUtils_1 = __webpack_require__(39);\r\nvar TemplateFieldsEvaluator_1 = __webpack_require__(132);\r\nvar TemplateHelpers_1 = __webpack_require__(115);\r\nvar IFieldValueCompatibleFacet_1 = __webpack_require__(534);\r\nvar ComponentsTypes_1 = __webpack_require__(45);\r\nfunction showOnlyWithHelper(helpers, options) {\r\n    if (options == null) {\r\n        options = {};\r\n    }\r\n    options.helpers = helpers;\r\n    return options;\r\n}\r\n/**\r\n * The FieldValue component displays the value of a field associated to its parent search result. It is normally usable\r\n * within a {@link FieldTable}.\r\n *\r\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\r\n *\r\n * A common use of this component is to display a specific field value which also happens to be an existing\r\n * {@link Facet.options.field}. When the user clicks on the FieldValue component, it activates the corresponding Facet.\r\n */\r\nvar FieldValue = /** @class */ (function (_super) {\r\n    __extends(FieldValue, _super);\r\n    /**\r\n     * Creates a new FieldValue.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the FieldValue component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     * @param result The result to associate the component with.\r\n     */\r\n    function FieldValue(element, options, bindings, result, fieldValueClassId) {\r\n        if (fieldValueClassId === void 0) { fieldValueClassId = FieldValue.ID; }\r\n        var _this = _super.call(this, element, fieldValueClassId, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.result = result;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initOptions(element, FieldValue.simpleOptions, options, FieldValue.ID);\r\n        if (_this.options.helper != null) {\r\n            _this.normalizeHelperAndOptions();\r\n        }\r\n        _this.result = _this.result || _this.resolveResult();\r\n        Assert_1.Assert.exists(_this.result);\r\n        if (TemplateFieldsEvaluator_1.TemplateFieldsEvaluator.evaluateFieldsToMatch(_this.options.conditions, _this.result) && _this.getValue()) {\r\n            _this.initialize();\r\n        }\r\n        else if (_this.element.parentElement != null) {\r\n            _this.element.parentElement.removeChild(_this.element);\r\n        }\r\n        return _this;\r\n    }\r\n    FieldValue.prototype.initialize = function () {\r\n        var loadedValueFromComponent = this.getValue();\r\n        var values;\r\n        if (underscore_1.isArray(loadedValueFromComponent)) {\r\n            values = loadedValueFromComponent;\r\n        }\r\n        else if (this.options.splitValues) {\r\n            if (underscore_1.isString(loadedValueFromComponent)) {\r\n                values = underscore_1.map(loadedValueFromComponent.split(this.options.separator), function (v) {\r\n                    return v.trim();\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            loadedValueFromComponent = loadedValueFromComponent.toString();\r\n            values = [loadedValueFromComponent];\r\n        }\r\n        this.appendValuesToDom(values);\r\n        if (this.options.textCaption != null) {\r\n            this.prependTextCaptionToDom();\r\n        }\r\n    };\r\n    /**\r\n     * Gets the current FieldValue from the current {@link IQueryResult}.\r\n     *\r\n     * @returns {any} The current FieldValue or `null` if value is and `Object`.\r\n     */\r\n    FieldValue.prototype.getValue = function () {\r\n        var value = Utils_1.Utils.getFieldValue(this.result, this.options.field);\r\n        if (!underscore_1.isArray(value) && underscore_1.isObject(value)) {\r\n            value = null;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Renders a value to HTML using all of the current FieldValue component options.\r\n     * @param value The value to render.\r\n     * @returns {HTMLElement} The element containing the rendered value.\r\n     */\r\n    FieldValue.prototype.renderOneValue = function (value) {\r\n        var element = Dom_1.$$('span').el;\r\n        var toRender = this.getCaption(value);\r\n        if (this.options.helper) {\r\n            // Try to resolve and execute version 2 of each helper function if available\r\n            var helper = TemplateHelpers_1.TemplateHelpers.getHelper(this.options.helper + \"v2\") || TemplateHelpers_1.TemplateHelpers.getHelper(\"\" + this.options.helper);\r\n            if (Utils_1.Utils.exists(helper)) {\r\n                toRender = helper.call(this, value, this.getHelperOptions());\r\n            }\r\n            else {\r\n                this.logger.warn(\"Helper \" + this.options.helper + \" is not found in available helpers. The list of supported helpers is :\", underscore_1.keys(TemplateHelpers_1.TemplateHelpers.getHelpers()));\r\n            }\r\n            var fullDateStr = this.getFullDate(value, this.options.helper);\r\n            if (fullDateStr) {\r\n                element.setAttribute('title', fullDateStr);\r\n            }\r\n            if (this.options.helper == 'date' || this.options.helper == 'dateTime' || this.options.helper == 'emailDateTime') {\r\n                toRender = StringUtils_1.StringUtils.capitalizeFirstLetter(toRender);\r\n            }\r\n        }\r\n        if (this.options.htmlValue) {\r\n            element.innerHTML = toRender;\r\n        }\r\n        else {\r\n            element.appendChild(document.createTextNode(toRender));\r\n        }\r\n        this.bindEventOnValue(element, value, toRender);\r\n        return element;\r\n    };\r\n    FieldValue.prototype.getValueContainer = function () {\r\n        return this.element;\r\n    };\r\n    FieldValue.prototype.normalizeHelperAndOptions = function () {\r\n        var _this = this;\r\n        this.options = ComponentOptions_1.ComponentOptions.initOptions(this.element, FieldValue.helperOptions, this.options, FieldValue.ID);\r\n        var toFilter = underscore_1.keys(FieldValue.options.helperOptions['subOptions']);\r\n        var toKeep = underscore_1.filter(toFilter, function (optionKey) {\r\n            var optionDefinition = FieldValue.options.helperOptions['subOptions'][optionKey];\r\n            if (optionDefinition) {\r\n                var helpers = optionDefinition.helpers;\r\n                return helpers != null && underscore_1.contains(helpers, _this.options.helper);\r\n            }\r\n            return false;\r\n        });\r\n        this.options.helperOptions = underscore_1.omit(this.options.helperOptions, function (value, key) {\r\n            return !underscore_1.contains(toKeep, key);\r\n        });\r\n    };\r\n    FieldValue.prototype.getHelperOptions = function () {\r\n        var inlineOptions = ComponentOptions_1.ComponentOptions.loadStringOption(this.element, 'helperOptions', {});\r\n        if (Utils_1.Utils.isNonEmptyString(inlineOptions)) {\r\n            return underscore_1.extend({}, this.options.helperOptions, eval('(' + inlineOptions + ')'));\r\n        }\r\n        return this.options.helperOptions;\r\n    };\r\n    FieldValue.prototype.getFullDate = function (date, helper) {\r\n        var fullDateOptions = {\r\n            useLongDateFormat: true,\r\n            useTodayYesterdayAndTomorrow: false,\r\n            useWeekdayIfThisWeek: false,\r\n            omitYearIfCurrentOne: false\r\n        };\r\n        if (helper == 'date') {\r\n            return DateUtils_1.DateUtils.dateToString(new Date(parseInt(date)), fullDateOptions);\r\n        }\r\n        else if (helper == 'dateTime' || helper == 'emailDateTime') {\r\n            return DateUtils_1.DateUtils.dateTimeToString(new Date(parseInt(date)), fullDateOptions);\r\n        }\r\n        return '';\r\n    };\r\n    FieldValue.prototype.appendValuesToDom = function (values) {\r\n        var _this = this;\r\n        underscore_1.each(values, function (value, index) {\r\n            if (value != undefined) {\r\n                _this.getValueContainer().appendChild(_this.renderOneValue(value));\r\n                if (index !== values.length - 1) {\r\n                    _this.getValueContainer().appendChild(document.createTextNode(_this.options.displaySeparator));\r\n                }\r\n            }\r\n        });\r\n    };\r\n    FieldValue.prototype.renderTextCaption = function () {\r\n        var element = Dom_1.$$('span', { className: 'coveo-field-caption' }, underscore_1.escape(this.options.textCaption));\r\n        return element.el;\r\n    };\r\n    FieldValue.prototype.prependTextCaptionToDom = function () {\r\n        var elem = this.getValueContainer();\r\n        Dom_1.$$(elem).prepend(this.renderTextCaption());\r\n        // Add a class to the container so the value and the caption wrap together.\r\n        Dom_1.$$(elem).addClass('coveo-with-label');\r\n    };\r\n    FieldValue.prototype.bindEventOnValue = function (element, originalFacetValue, renderedFacetValue) {\r\n        this.bindFacets(element, originalFacetValue, renderedFacetValue);\r\n    };\r\n    FieldValue.prototype.getCaption = function (value) {\r\n        for (var _i = 0, _a = this.getFacets(); _i < _a.length; _i++) {\r\n            var facet = _a[_i];\r\n            var caption = facet.getCaptionForStringValue(value);\r\n            if (caption) {\r\n                return caption;\r\n            }\r\n        }\r\n        return FacetUtils_1.FacetUtils.tryToGetTranslatedCaption(this.options.field, value);\r\n    };\r\n    FieldValue.prototype.getFacets = function () {\r\n        var _this = this;\r\n        var facets = ComponentsTypes_1.ComponentsTypes.getAllFacetsFromSearchInterface(this.searchInterface)\r\n            .filter(IFieldValueCompatibleFacet_1.isFacetFieldValueCompatible)\r\n            .filter(function (facet) { return !facet.disabled; });\r\n        var facetsWithMatchingId = facets.filter(function (facet) { return facet.options.id === _this.options.facet; });\r\n        if (facetsWithMatchingId.length) {\r\n            return facetsWithMatchingId;\r\n        }\r\n        return facets.filter(function (facet) { return facet.options.field === _this.options.field; });\r\n    };\r\n    FieldValue.prototype.bindFacets = function (element, originalFacetValue, renderedFacetValue) {\r\n        var _this = this;\r\n        var facets = this.getFacets();\r\n        if (!facets.length) {\r\n            return;\r\n        }\r\n        var isValueSelected = !!underscore_1.find(facets, function (facet) { return facet.hasSelectedValue(originalFacetValue); });\r\n        var selectAction = function () { return _this.handleFacetSelection(isValueSelected, facets, originalFacetValue); };\r\n        this.buildClickableElement(element, isValueSelected, renderedFacetValue, selectAction);\r\n    };\r\n    FieldValue.prototype.buildClickableElement = function (element, isSelected, value, selectAction) {\r\n        var label = isSelected ? Strings_1.l('RemoveFilterOn', value) : Strings_1.l('FilterOn', value);\r\n        new AccessibleButton_1.AccessibleButton().withTitle(label).withElement(element).withSelectAction(selectAction).build();\r\n        if (isSelected) {\r\n            Dom_1.$$(element).addClass('coveo-selected');\r\n        }\r\n        Dom_1.$$(element).addClass('coveo-clickable');\r\n    };\r\n    FieldValue.prototype.handleFacetSelection = function (isValueSelected, facets, value) {\r\n        facets.forEach(function (facet) {\r\n            isValueSelected ? facet.deselectValue(value) : facet.selectValue(value);\r\n        });\r\n        this.executeQuery(value);\r\n    };\r\n    FieldValue.prototype.executeQuery = function (value) {\r\n        var _this = this;\r\n        this.queryController.deferExecuteQuery({\r\n            beforeExecuteQuery: function () {\r\n                return _this.usageAnalytics.logSearchEvent(AnalyticsActionListMeta_1.analyticsActionCauseList.documentField, {\r\n                    facetId: _this.options.facet,\r\n                    facetField: _this.options.field.toString(),\r\n                    facetValue: value.toLowerCase()\r\n                });\r\n            }\r\n        });\r\n    };\r\n    FieldValue.ID = 'FieldValue';\r\n    FieldValue.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            FieldValue: FieldValue\r\n        });\r\n    };\r\n    /**\r\n     * The options for the component\r\n     * @componentOptions\r\n     */\r\n    FieldValue.options = {\r\n        /**\r\n         * Specifies the field that the FieldValue should display.\r\n         *\r\n         * Specifying a value for this parameter is required in order for the FieldValue component to work.\r\n         */\r\n        field: ComponentOptions_1.ComponentOptions.buildFieldOption({ defaultValue: '@field', required: true }),\r\n        /**\r\n         * Specifies the {@link Facet} component to toggle when the end user clicks the FieldValue.\r\n         *\r\n         * Default value is the value of {@link FieldValue.options.field}.\r\n         *\r\n         * **Note:**\r\n         * > If the target {@link Facet.options.id} is is not the same as its {@link Facet.options.field}), you must specify\r\n         * > this option manually in order to link to the correct Facet.\r\n         */\r\n        facet: ComponentOptions_1.ComponentOptions.buildStringOption({ postProcessing: function (value, options) { return value || options.field; } }),\r\n        /**\r\n         * Specifies whether the content to display is an HTML element.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        htmlValue: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n        /**\r\n         * Specifies whether to split the FieldValue at each {@link FieldValue.options.separator}.\r\n         *\r\n         * This is useful for splitting groups using a {@link Facet.options.field}.\r\n         *\r\n         * When this option is `true`, the displayed values are split by the {@link FieldValue.options.displaySeparator}.\r\n         *\r\n         * Default value is `false`.\r\n         */\r\n        splitValues: ComponentOptions_1.ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n        /**\r\n         * If {@link FieldValue.options.splitValues} is `true`, specifies the separator string which separates multi-value\r\n         * fields in the index.\r\n         *\r\n         * See {@link FieldValue.options.displaySeparator}.\r\n         *\r\n         * Default value is `\";\"`.\r\n         */\r\n        separator: ComponentOptions_1.ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ';' }),\r\n        /**\r\n         * If {@link FieldValue.options.splitValues} is `true`, specifies the string to use when displaying multi-value\r\n         * fields in the UI.\r\n         *\r\n         * The component will insert this string between each value it displays from a multi-value field.\r\n         *\r\n         * See also {@link FieldValue.options.separator}.\r\n         *\r\n         * Default value is `\", \"`.\r\n         */\r\n        displaySeparator: ComponentOptions_1.ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ', ' }),\r\n        /**\r\n         * Specifies the helper that the FieldValue should use to display its content.\r\n         *\r\n         * While several helpers exist by default (see {@link ICoreHelpers}), it is also possible for you to create your own\r\n         * custom helpers (see {@link TemplateHelpers}).\r\n         */\r\n        helper: ComponentOptions_1.ComponentOptions.buildHelperOption(),\r\n        /**\r\n         * Specifies the options to call on the specified helper.\r\n         */\r\n        helperOptions: ComponentOptions_1.ComponentOptions.buildObjectOption({\r\n            subOptions: {\r\n                text: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\r\n                target: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\r\n                class: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\r\n                format: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['number'])),\r\n                decimals: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['currency'], { min: 0 })),\r\n                symbol: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['currency'])),\r\n                useTodayYesterdayAndTomorrow: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\r\n                useWeekdayIfThisWeek: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\r\n                omitYearIfCurrentOne: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\r\n                useLongDateFormat: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })),\r\n                includeTimeIfToday: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\r\n                includeTimeIfThisWeek: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })),\r\n                alwaysIncludeTime: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })),\r\n                predefinedFormat: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'])),\r\n                companyDomain: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\r\n                me: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\r\n                lengthLimit: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['email'], { min: 1 })),\r\n                truncateName: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['email'])),\r\n                alt: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n                height: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n                width: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n                srcTemplate: ComponentOptions_1.ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n                precision: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 2 })),\r\n                base: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 0 })),\r\n                isMilliseconds: ComponentOptions_1.ComponentOptions.buildBooleanOption(showOnlyWithHelper(['timeSpan'])),\r\n                length: ComponentOptions_1.ComponentOptions.buildNumberOption(showOnlyWithHelper(['shorten', 'shortenPath', 'shortenUri'], { defaultValue: 200 }))\r\n            }\r\n        }),\r\n        /**\r\n         * Specifies a caption to display before the value.\r\n         *\r\n         * Default value is `undefined`.\r\n         *\r\n         * @availablesince [January 2017 Release (v1.1865.9)](https://docs.coveo.com/en/396/#january-2017-release-v118659)\r\n         */\r\n        textCaption: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption(),\r\n        /**\r\n         * A field-based condition that must be satisfied by the query result item for the component to be rendered.\r\n         *\r\n         * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\r\n         *\r\n         * **Examples:**\r\n         * Render the component if the query result item's @documenttype field value is Article or Documentation.\r\n         * ```html\r\n         * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\r\n         * ```\r\n         * Render the component if the query result item's @documenttype field value is anything but Case.\r\n         * ```html\r\n         * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\r\n         * ```\r\n         * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\r\n         * ```html\r\n         * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\r\n         * ```\r\n         * Default value is `undefined`.\r\n         */\r\n        conditions: ComponentOptions_1.ComponentOptions.buildFieldConditionOption()\r\n    };\r\n    FieldValue.simpleOptions = underscore_1.omit(FieldValue.options, 'helperOptions');\r\n    FieldValue.helperOptions = {\r\n        helperOptions: FieldValue.options.helperOptions\r\n    };\r\n    return FieldValue;\r\n}(Component_1.Component));\r\nexports.FieldValue = FieldValue;\r\nInitialization_1.Initialization.registerAutoCreateComponent(FieldValue);\r\n\n\n/***/ }),\n\n/***/ 193:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Core_1 = __webpack_require__(20);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar FieldValue_1 = __webpack_require__(118);\r\n/**\r\n * This component renders an image from a URL retrieved in a given [`field`]{@link ImageFieldValue.options.field}.\r\n *\r\n * A typical use case of this component is to display product images in the context of commerce.\r\n *\r\n * @isresulttemplatecomponent\r\n * @availablesince [September 2019 Release (v2.7023)](https://docs.coveo.com/en/2990/)\r\n */\r\nvar ImageFieldValue = /** @class */ (function (_super) {\r\n    __extends(ImageFieldValue, _super);\r\n    /**\r\n     * Creates a new ImageFieldValue.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the ImageFieldValue component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     * @param result The result to associate the component with.\r\n     */\r\n    function ImageFieldValue(element, options, bindings, result) {\r\n        var _this = _super.call(this, element, ImageFieldValue.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.result = result;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, ImageFieldValue, options);\r\n        var fieldValueOption = {\r\n            field: _this.options.field,\r\n            helper: 'image',\r\n            htmlValue: true,\r\n            helperOptions: {\r\n                height: _this.options.height,\r\n                width: _this.options.width,\r\n                alt: result.title,\r\n                srcTemplate: _this.options.srcTemplate\r\n            }\r\n        };\r\n        new FieldValue_1.FieldValue(element, fieldValueOption, bindings, result);\r\n        return _this;\r\n    }\r\n    ImageFieldValue.ID = 'ImageFieldValue';\r\n    ImageFieldValue.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            ImageFieldValue: ImageFieldValue\r\n        });\r\n    };\r\n    /**\r\n     * The options for the component\r\n     * @componentOptions\r\n     */\r\n    ImageFieldValue.options = {\r\n        /**\r\n         * **Required**. The name of a field whose value is the URL of the image to display.\r\n         *\r\n         * **Note:** The component uses the value of this field to set the `src` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.\r\n         */\r\n        field: ComponentOptions_1.ComponentOptions.buildFieldOption({ required: true }),\r\n        /**\r\n         * The width of the image (in pixels).\r\n         *\r\n         * **Note:** The component uses this value to set the `width` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.\r\n         */\r\n        width: ComponentOptions_1.ComponentOptions.buildNumberOption(),\r\n        /**\r\n         * The height of the image (in pixels).\r\n         *\r\n         * **Note:** The component uses this value to set the `height` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.\r\n         */\r\n        height: ComponentOptions_1.ComponentOptions.buildNumberOption(),\r\n        /**\r\n         * A [template literal](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)\r\n         * from which to generate the `img` tag's `src` attribute value.\r\n         *\r\n         * This option overrides the [`field`]{@link ImageFieldValue.options.field} option value.\r\n         *\r\n         * The template literal can reference any number of fields from the parent result. It can also reference global\r\n         * scope properties.\r\n         *\r\n         * **Examples:**\r\n         *\r\n         * - The following markup generates an `src` value such as `http://uri.com?id=itemTitle`:\r\n         *\r\n         * ```html\r\n         * <a class='CoveoImageFieldValue' data-src-template='${clickUri}?id=${raw.title}'></a>\r\n         * ```\r\n         *\r\n         * - The following markup generates an `src` value such as `localhost/fooBar`:\r\n         *\r\n         * ```html\r\n         * <a class='CoveoImageFieldValue' data-src-template='${window.location.hostname}/{Foo.Bar}'></a>\r\n         * ```\r\n         *\r\n         * Default value is `undefined`.\r\n         */\r\n        srcTemplate: ComponentOptions_1.ComponentOptions.buildStringOption()\r\n    };\r\n    return ImageFieldValue;\r\n}(Core_1.Component));\r\nexports.ImageFieldValue = ImageFieldValue;\r\nCore_1.Initialization.registerAutoCreateComponent(ImageFieldValue);\r\n\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/// <reference path='Facet.ts' />\r\nvar StringUtils_1 = __webpack_require__(22);\r\nvar QueryUtils_1 = __webpack_require__(21);\r\nvar FileTypes_1 = __webpack_require__(113);\r\nvar DateUtils_1 = __webpack_require__(32);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar _ = __webpack_require__(0);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar FacetUtils = /** @class */ (function () {\r\n    function FacetUtils() {\r\n    }\r\n    FacetUtils.getRegexToUseForFacetSearch = function (value, ignoreAccent) {\r\n        return new RegExp(StringUtils_1.StringUtils.stringToRegex(value, ignoreAccent), 'i');\r\n    };\r\n    FacetUtils.getDisplayValueFromValueCaption = function (value, field, valueCaption) {\r\n        var returnValue = this.tryToGetTranslatedCaption(field, value);\r\n        return valueCaption[value] || returnValue;\r\n    };\r\n    FacetUtils.getValuesToUseForSearchInFacet = function (original, facet) {\r\n        var ret = [original];\r\n        var regex = this.getRegexToUseForFacetSearch(original, facet.options.facetSearchIgnoreAccents);\r\n        if (facet.options.valueCaption) {\r\n            _.chain(facet.options.valueCaption)\r\n                .pairs()\r\n                .filter(function (pair) {\r\n                return regex.test(pair[1]);\r\n            })\r\n                .each(function (match) {\r\n                ret.push(match[0]);\r\n            });\r\n            if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') ||\r\n                QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {\r\n                _.each(FileTypes_1.FileTypes.getFileTypeCaptions(), function (value, key) {\r\n                    if (!(key in facet.options.valueCaption) && regex.test(value)) {\r\n                        ret.push(key);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@objecttype') ||\r\n            QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@filetype')) {\r\n            _.each(_.filter(_.pairs(FileTypes_1.FileTypes.getFileTypeCaptions()), function (pair) {\r\n                return regex.test(pair[1]);\r\n            }), function (match) {\r\n                ret.push(match[0]);\r\n            });\r\n        }\r\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(facet.options.field, '@month')) {\r\n            _.each(_.range(1, 13), function (month) {\r\n                if (regex.test(DateUtils_1.DateUtils.monthToString(month - 1))) {\r\n                    ret.push(('0' + month.toString()).substr(-2));\r\n                }\r\n            });\r\n        }\r\n        return ret;\r\n    };\r\n    FacetUtils.buildFacetSearchPattern = function (values) {\r\n        values = _.map(values, function (value) {\r\n            return Utils_1.Utils.escapeRegexCharacter(value);\r\n        });\r\n        values[0] = '.*' + values[0] + '.*';\r\n        return values.join('|');\r\n    };\r\n    FacetUtils.needAnotherFacetSearch = function (currentSearchLength, newSearchLength, oldSearchLength, desiredSearchLength) {\r\n        // Something was removed (currentSearch < newSearch)\r\n        // && we might want to display more facet search result(currentSearch < desiredSearch)\r\n        // && the new query returned more stuff than the old one so there's still more results(currentSearchLength > oldLength)\r\n        return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && currentSearchLength > oldSearchLength;\r\n    };\r\n    FacetUtils.addNoStateCssClassToFacetValues = function (facet, container) {\r\n        // This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet\r\n        if (facet.values.getSelected().length != 0) {\r\n            var noStates = Dom_1.$$(container).findAll('li:not(.coveo-selected)');\r\n            _.each(noStates, function (noState) {\r\n                Dom_1.$$(noState).addClass('coveo-no-state');\r\n            });\r\n        }\r\n    };\r\n    FacetUtils.tryToGetTranslatedCaption = function (field, value) {\r\n        var found;\r\n        if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@filetype')) {\r\n            found = FileTypes_1.FileTypes.getFileType(value).caption;\r\n        }\r\n        else if (QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@objecttype')) {\r\n            found = FileTypes_1.FileTypes.getObjectType(value).caption;\r\n        }\r\n        else if (FacetUtils.isMonthFieldValue(field, value)) {\r\n            var month = parseInt(value, 10);\r\n            found = DateUtils_1.DateUtils.monthToString(month - 1);\r\n        }\r\n        else {\r\n            found = Strings_1.l(value);\r\n        }\r\n        return found != undefined && Utils_1.Utils.isNonEmptyString(found) ? found : value;\r\n    };\r\n    FacetUtils.isMonthFieldValue = function (field, value) {\r\n        if (!QueryUtils_1.QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@month')) {\r\n            return false;\r\n        }\r\n        var asInt = parseInt(value, 10);\r\n        if (isNaN(asInt)) {\r\n            return false;\r\n        }\r\n        if (asInt < 1 || asInt > 12) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    return FacetUtils;\r\n}());\r\nexports.FacetUtils = FacetUtils;\r\n\n\n/***/ }),\n\n/***/ 534:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction isFacetFieldValueCompatible(facet) {\r\n    return !!facet['isFieldValueCompatible'];\r\n}\r\nexports.isFacetFieldValueCompatible = isFacetFieldValueCompatible;\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// ImageFieldValue.min__5f3280c404a1ee75a113.js","import { contains, each, escape, extend, filter, find, isArray, isObject, isString, keys, map, omit } from 'underscore';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { l } from '../../strings/Strings';\r\nimport { AccessibleButton } from '../../utils/AccessibleButton';\r\nimport { DateUtils, IDateToStringOptions } from '../../utils/DateUtils';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { StringUtils } from '../../utils/StringUtils';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { analyticsActionCauseList } from '../Analytics/AnalyticsActionListMeta';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IComponentOptionsObjectOptionArgs, IFieldConditionOption, IFieldOption } from '../Base/IComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { FacetUtils } from '../Facet/FacetUtils';\r\nimport { TemplateFieldsEvaluator } from '../Templates/TemplateFieldsEvaluator';\r\nimport { TemplateHelpers } from '../Templates/TemplateHelpers';\r\nimport { IFieldValueCompatibleFacet, isFacetFieldValueCompatible } from './IFieldValueCompatibleFacet';\r\nimport { ComponentsTypes } from '../../utils/ComponentsTypes';\r\n\r\nexport interface IFieldValueOptions {\r\n  field?: IFieldOption;\r\n  facet?: string;\r\n  dynamicFacet?: string;\r\n  htmlValue?: boolean;\r\n  helper?: string;\r\n  helperOptions?: { [key: string]: any };\r\n  splitValues?: boolean;\r\n  separator?: string;\r\n  displaySeparator?: string;\r\n  textCaption?: string;\r\n  conditions?: IFieldConditionOption[];\r\n}\r\n\r\nexport interface IAnalyticsFieldValueMeta {\r\n  facetId: string;\r\n  facetField: string;\r\n  facetValue?: string;\r\n  facetTitle?: string;\r\n}\r\n\r\nfunction showOnlyWithHelper<T>(helpers: string[], options?: T): T {\r\n  if (options == null) {\r\n    options = <any>{};\r\n  }\r\n  (<any>options).helpers = helpers;\r\n  return options;\r\n}\r\n\r\n/**\r\n * The FieldValue component displays the value of a field associated to its parent search result. It is normally usable\r\n * within a {@link FieldTable}.\r\n *\r\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\r\n *\r\n * A common use of this component is to display a specific field value which also happens to be an existing\r\n * {@link Facet.options.field}. When the user clicks on the FieldValue component, it activates the corresponding Facet.\r\n */\r\nexport class FieldValue extends Component {\r\n  static ID = 'FieldValue';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      FieldValue: FieldValue\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IFieldValueOptions = {\r\n    /**\r\n     * Specifies the field that the FieldValue should display.\r\n     *\r\n     * Specifying a value for this parameter is required in order for the FieldValue component to work.\r\n     */\r\n    field: ComponentOptions.buildFieldOption({ defaultValue: '@field', required: true }),\r\n\r\n    /**\r\n     * Specifies the {@link Facet} component to toggle when the end user clicks the FieldValue.\r\n     *\r\n     * Default value is the value of {@link FieldValue.options.field}.\r\n     *\r\n     * **Note:**\r\n     * > If the target {@link Facet.options.id} is is not the same as its {@link Facet.options.field}), you must specify\r\n     * > this option manually in order to link to the correct Facet.\r\n     */\r\n    facet: ComponentOptions.buildStringOption({ postProcessing: (value, options) => value || options.field }),\r\n\r\n    /**\r\n     * Specifies whether the content to display is an HTML element.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    htmlValue: ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n\r\n    /**\r\n     * Specifies whether to split the FieldValue at each {@link FieldValue.options.separator}.\r\n     *\r\n     * This is useful for splitting groups using a {@link Facet.options.field}.\r\n     *\r\n     * When this option is `true`, the displayed values are split by the {@link FieldValue.options.displaySeparator}.\r\n     *\r\n     * Default value is `false`.\r\n     */\r\n    splitValues: ComponentOptions.buildBooleanOption({ defaultValue: false }),\r\n\r\n    /**\r\n     * If {@link FieldValue.options.splitValues} is `true`, specifies the separator string which separates multi-value\r\n     * fields in the index.\r\n     *\r\n     * See {@link FieldValue.options.displaySeparator}.\r\n     *\r\n     * Default value is `\";\"`.\r\n     */\r\n    separator: ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ';' }),\r\n\r\n    /**\r\n     * If {@link FieldValue.options.splitValues} is `true`, specifies the string to use when displaying multi-value\r\n     * fields in the UI.\r\n     *\r\n     * The component will insert this string between each value it displays from a multi-value field.\r\n     *\r\n     * See also {@link FieldValue.options.separator}.\r\n     *\r\n     * Default value is `\", \"`.\r\n     */\r\n    displaySeparator: ComponentOptions.buildStringOption({ depend: 'splitValues', defaultValue: ', ' }),\r\n\r\n    /**\r\n     * Specifies the helper that the FieldValue should use to display its content.\r\n     *\r\n     * While several helpers exist by default (see {@link ICoreHelpers}), it is also possible for you to create your own\r\n     * custom helpers (see {@link TemplateHelpers}).\r\n     */\r\n    helper: ComponentOptions.buildHelperOption(),\r\n\r\n    /**\r\n     * Specifies the options to call on the specified helper.\r\n     */\r\n    helperOptions: ComponentOptions.buildObjectOption(<IComponentOptionsObjectOptionArgs>{\r\n      subOptions: {\r\n        text: ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\r\n        target: ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\r\n        class: ComponentOptions.buildStringOption(showOnlyWithHelper(['anchor'])),\r\n\r\n        format: ComponentOptions.buildStringOption(showOnlyWithHelper(['number'])),\r\n\r\n        decimals: ComponentOptions.buildNumberOption(showOnlyWithHelper(['currency'], { min: 0 })),\r\n        symbol: ComponentOptions.buildStringOption(showOnlyWithHelper(['currency'])),\r\n\r\n        useTodayYesterdayAndTomorrow: ComponentOptions.buildBooleanOption(\r\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\r\n        ),\r\n        useWeekdayIfThisWeek: ComponentOptions.buildBooleanOption(\r\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\r\n        ),\r\n        omitYearIfCurrentOne: ComponentOptions.buildBooleanOption(\r\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\r\n        ),\r\n        useLongDateFormat: ComponentOptions.buildBooleanOption(\r\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })\r\n        ),\r\n        includeTimeIfToday: ComponentOptions.buildBooleanOption(\r\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\r\n        ),\r\n        includeTimeIfThisWeek: ComponentOptions.buildBooleanOption(\r\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: true })\r\n        ),\r\n        alwaysIncludeTime: ComponentOptions.buildBooleanOption(\r\n          showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'], { defaultValue: false })\r\n        ),\r\n        predefinedFormat: ComponentOptions.buildStringOption(showOnlyWithHelper(['date', 'dateTime', 'emailDateTime', 'time'])),\r\n\r\n        companyDomain: ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\r\n        me: ComponentOptions.buildStringOption(showOnlyWithHelper(['email'])),\r\n        lengthLimit: ComponentOptions.buildNumberOption(showOnlyWithHelper(['email'], { min: 1 })),\r\n        truncateName: ComponentOptions.buildBooleanOption(showOnlyWithHelper(['email'])),\r\n\r\n        alt: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n        height: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n        width: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n        srcTemplate: ComponentOptions.buildStringOption(showOnlyWithHelper(['image'])),\r\n\r\n        precision: ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 2 })),\r\n        base: ComponentOptions.buildNumberOption(showOnlyWithHelper(['size'], { min: 0, defaultValue: 0 })),\r\n        isMilliseconds: ComponentOptions.buildBooleanOption(showOnlyWithHelper(['timeSpan'])),\r\n\r\n        length: ComponentOptions.buildNumberOption(showOnlyWithHelper(['shorten', 'shortenPath', 'shortenUri'], { defaultValue: 200 }))\r\n      }\r\n    }),\r\n\r\n    /**\r\n     * Specifies a caption to display before the value.\r\n     *\r\n     * Default value is `undefined`.\r\n     *\r\n     * @availablesince [January 2017 Release (v1.1865.9)](https://docs.coveo.com/en/396/#january-2017-release-v118659)\r\n     */\r\n    textCaption: ComponentOptions.buildLocalizedStringOption(),\r\n\r\n    /**\r\n     * A field-based condition that must be satisfied by the query result item for the component to be rendered.\r\n     *\r\n     * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\r\n     *\r\n     * **Examples:**\r\n     * Render the component if the query result item's @documenttype field value is Article or Documentation.\r\n     * ```html\r\n     * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\r\n     * ```\r\n     * Render the component if the query result item's @documenttype field value is anything but Case.\r\n     * ```html\r\n     * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\r\n     * ```\r\n     * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\r\n     * ```html\r\n     * <div class=\"CoveoFieldValue\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\r\n     * ```\r\n     * Default value is `undefined`.\r\n     */\r\n    conditions: ComponentOptions.buildFieldConditionOption()\r\n  };\r\n\r\n  static simpleOptions = omit(FieldValue.options, 'helperOptions');\r\n\r\n  static helperOptions = <any>{\r\n    helperOptions: FieldValue.options.helperOptions\r\n  };\r\n\r\n  /**\r\n   * Creates a new FieldValue.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the FieldValue component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   * @param result The result to associate the component with.\r\n   */\r\n  constructor(\r\n    public element: HTMLElement,\r\n    public options: IFieldValueOptions,\r\n    bindings?: IComponentBindings,\r\n    public result?: IQueryResult,\r\n    fieldValueClassId: string = FieldValue.ID\r\n  ) {\r\n    super(element, fieldValueClassId, bindings);\r\n\r\n    this.options = ComponentOptions.initOptions(element, FieldValue.simpleOptions, options, FieldValue.ID);\r\n\r\n    if (this.options.helper != null) {\r\n      this.normalizeHelperAndOptions();\r\n    }\r\n\r\n    this.result = this.result || this.resolveResult();\r\n    Assert.exists(this.result);\r\n\r\n    if (TemplateFieldsEvaluator.evaluateFieldsToMatch(this.options.conditions, this.result) && this.getValue()) {\r\n      this.initialize();\r\n    } else if (this.element.parentElement != null) {\r\n      this.element.parentElement.removeChild(this.element);\r\n    }\r\n  }\r\n\r\n  private initialize() {\r\n    let loadedValueFromComponent = this.getValue();\r\n    let values: string[];\r\n\r\n    if (isArray(loadedValueFromComponent)) {\r\n      values = loadedValueFromComponent;\r\n    } else if (this.options.splitValues) {\r\n      if (isString(loadedValueFromComponent)) {\r\n        values = map(loadedValueFromComponent.split(this.options.separator), (v: string) => {\r\n          return v.trim();\r\n        });\r\n      }\r\n    } else {\r\n      loadedValueFromComponent = loadedValueFromComponent.toString();\r\n      values = [loadedValueFromComponent];\r\n    }\r\n    this.appendValuesToDom(values);\r\n    if (this.options.textCaption != null) {\r\n      this.prependTextCaptionToDom();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current FieldValue from the current {@link IQueryResult}.\r\n   *\r\n   * @returns {any} The current FieldValue or `null` if value is and `Object`.\r\n   */\r\n  public getValue() {\r\n    let value = Utils.getFieldValue(this.result, <string>this.options.field);\r\n    if (!isArray(value) && isObject(value)) {\r\n      value = null;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Renders a value to HTML using all of the current FieldValue component options.\r\n   * @param value The value to render.\r\n   * @returns {HTMLElement} The element containing the rendered value.\r\n   */\r\n  public renderOneValue(value: string): HTMLElement {\r\n    const element = $$('span').el;\r\n    let toRender = this.getCaption(value);\r\n\r\n    if (this.options.helper) {\r\n      // Try to resolve and execute version 2 of each helper function if available\r\n      const helper = TemplateHelpers.getHelper(`${this.options.helper}v2`) || TemplateHelpers.getHelper(`${this.options.helper}`);\r\n\r\n      if (Utils.exists(helper)) {\r\n        toRender = helper.call(this, value, this.getHelperOptions());\r\n      } else {\r\n        this.logger.warn(\r\n          `Helper ${this.options.helper} is not found in available helpers. The list of supported helpers is :`,\r\n          keys(TemplateHelpers.getHelpers())\r\n        );\r\n      }\r\n\r\n      const fullDateStr = this.getFullDate(value, this.options.helper);\r\n      if (fullDateStr) {\r\n        element.setAttribute('title', fullDateStr);\r\n      }\r\n      if (this.options.helper == 'date' || this.options.helper == 'dateTime' || this.options.helper == 'emailDateTime') {\r\n        toRender = StringUtils.capitalizeFirstLetter(toRender);\r\n      }\r\n    }\r\n\r\n    if (this.options.htmlValue) {\r\n      element.innerHTML = toRender;\r\n    } else {\r\n      element.appendChild(document.createTextNode(toRender));\r\n    }\r\n    this.bindEventOnValue(element, value, toRender);\r\n    return element;\r\n  }\r\n\r\n  protected getValueContainer() {\r\n    return this.element;\r\n  }\r\n\r\n  private normalizeHelperAndOptions() {\r\n    this.options = ComponentOptions.initOptions(this.element, FieldValue.helperOptions, this.options, FieldValue.ID);\r\n    const toFilter = keys(FieldValue.options.helperOptions['subOptions']);\r\n    const toKeep = filter(toFilter, optionKey => {\r\n      const optionDefinition = FieldValue.options.helperOptions['subOptions'][optionKey];\r\n      if (optionDefinition) {\r\n        const helpers = optionDefinition.helpers;\r\n        return helpers != null && contains(helpers, this.options.helper);\r\n      }\r\n      return false;\r\n    });\r\n    this.options.helperOptions = omit(this.options.helperOptions, (value, key) => {\r\n      return !contains(toKeep, key);\r\n    });\r\n  }\r\n\r\n  private getHelperOptions() {\r\n    const inlineOptions = ComponentOptions.loadStringOption(this.element, 'helperOptions', {});\r\n    if (Utils.isNonEmptyString(inlineOptions)) {\r\n      return extend({}, this.options.helperOptions, eval('(' + inlineOptions + ')'));\r\n    }\r\n    return this.options.helperOptions;\r\n  }\r\n\r\n  private getFullDate(date: string, helper: string) {\r\n    const fullDateOptions: IDateToStringOptions = {\r\n      useLongDateFormat: true,\r\n      useTodayYesterdayAndTomorrow: false,\r\n      useWeekdayIfThisWeek: false,\r\n      omitYearIfCurrentOne: false\r\n    };\r\n\r\n    if (helper == 'date') {\r\n      return DateUtils.dateToString(new Date(parseInt(date)), fullDateOptions);\r\n    } else if (helper == 'dateTime' || helper == 'emailDateTime') {\r\n      return DateUtils.dateTimeToString(new Date(parseInt(date)), fullDateOptions);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private appendValuesToDom(values: string[]): void {\r\n    each(values, (value, index) => {\r\n      if (value != undefined) {\r\n        this.getValueContainer().appendChild(this.renderOneValue(value));\r\n        if (index !== values.length - 1) {\r\n          this.getValueContainer().appendChild(document.createTextNode(this.options.displaySeparator));\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private renderTextCaption(): HTMLElement {\r\n    const element = $$('span', { className: 'coveo-field-caption' }, escape(this.options.textCaption));\r\n    return element.el;\r\n  }\r\n\r\n  protected prependTextCaptionToDom(): void {\r\n    const elem = this.getValueContainer();\r\n    $$(elem).prepend(this.renderTextCaption());\r\n    // Add a class to the container so the value and the caption wrap together.\r\n    $$(elem).addClass('coveo-with-label');\r\n  }\r\n\r\n  private bindEventOnValue(element: HTMLElement, originalFacetValue: string, renderedFacetValue: string) {\r\n    this.bindFacets(element, originalFacetValue, renderedFacetValue);\r\n  }\r\n\r\n  private getCaption(value: string) {\r\n    for (let facet of this.getFacets()) {\r\n      const caption = facet.getCaptionForStringValue(value);\r\n      if (caption) {\r\n        return caption;\r\n      }\r\n    }\r\n    return FacetUtils.tryToGetTranslatedCaption(this.options.field as string, value);\r\n  }\r\n\r\n  private getFacets() {\r\n    const facets = ComponentsTypes.getAllFacetsFromSearchInterface(this.searchInterface)\r\n      .filter(isFacetFieldValueCompatible)\r\n      .filter(facet => !facet.disabled);\r\n\r\n    const facetsWithMatchingId = facets.filter(facet => facet.options.id === this.options.facet);\r\n    if (facetsWithMatchingId.length) {\r\n      return facetsWithMatchingId;\r\n    }\r\n    return facets.filter(facet => facet.options.field === this.options.field);\r\n  }\r\n\r\n  private bindFacets(element: HTMLElement, originalFacetValue: string, renderedFacetValue: string) {\r\n    const facets = this.getFacets();\r\n\r\n    if (!facets.length) {\r\n      return;\r\n    }\r\n\r\n    const isValueSelected = !!find(facets, facet => facet.hasSelectedValue(originalFacetValue));\r\n    const selectAction = () => this.handleFacetSelection(isValueSelected, facets, originalFacetValue);\r\n    this.buildClickableElement(element, isValueSelected, renderedFacetValue, selectAction);\r\n  }\r\n\r\n  private buildClickableElement(element: HTMLElement, isSelected: boolean, value: string, selectAction: () => void) {\r\n    const label = isSelected ? l('RemoveFilterOn', value) : l('FilterOn', value);\r\n    new AccessibleButton().withTitle(label).withElement(element).withSelectAction(selectAction).build();\r\n\r\n    if (isSelected) {\r\n      $$(element).addClass('coveo-selected');\r\n    }\r\n    $$(element).addClass('coveo-clickable');\r\n  }\r\n\r\n  private handleFacetSelection(isValueSelected: boolean, facets: IFieldValueCompatibleFacet[], value: string) {\r\n    facets.forEach(facet => {\r\n      isValueSelected ? facet.deselectValue(value) : facet.selectValue(value);\r\n    });\r\n\r\n    this.executeQuery(value);\r\n  }\r\n\r\n  private executeQuery(value: string) {\r\n    this.queryController.deferExecuteQuery({\r\n      beforeExecuteQuery: () =>\r\n        this.usageAnalytics.logSearchEvent<IAnalyticsFieldValueMeta>(analyticsActionCauseList.documentField, {\r\n          facetId: this.options.facet,\r\n          facetField: this.options.field.toString(),\r\n          facetValue: value.toLowerCase()\r\n        })\r\n    });\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(FieldValue);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldValue/FieldValue.ts","import { Component, Initialization } from '../../Core';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldOption } from '../Base/IComponentOptions';\r\nimport { FieldValue, IFieldValueOptions } from '../FieldValue/FieldValue';\r\n\r\nexport interface IImageFieldValue {\r\n  field?: IFieldOption;\r\n  width?: number;\r\n  height?: number;\r\n  alt?: string;\r\n  srcTemplate?: string;\r\n}\r\n\r\n/**\r\n * This component renders an image from a URL retrieved in a given [`field`]{@link ImageFieldValue.options.field}.\r\n *\r\n * A typical use case of this component is to display product images in the context of commerce.\r\n *\r\n * @isresulttemplatecomponent\r\n * @availablesince [September 2019 Release (v2.7023)](https://docs.coveo.com/en/2990/)\r\n */\r\nexport class ImageFieldValue extends Component {\r\n  static ID = 'ImageFieldValue';\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      ImageFieldValue: ImageFieldValue\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the component\r\n   * @componentOptions\r\n   */\r\n  static options: IImageFieldValue = {\r\n    /**\r\n     * **Required**. The name of a field whose value is the URL of the image to display.\r\n     *\r\n     * **Note:** The component uses the value of this field to set the `src` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.\r\n     */\r\n    field: ComponentOptions.buildFieldOption({ required: true }),\r\n    /**\r\n     * The width of the image (in pixels).\r\n     *\r\n     * **Note:** The component uses this value to set the `width` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.\r\n     */\r\n    width: ComponentOptions.buildNumberOption(),\r\n    /**\r\n     * The height of the image (in pixels).\r\n     *\r\n     * **Note:** The component uses this value to set the `height` attribute of the [`img`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) HTML tag it generates.\r\n     */\r\n    height: ComponentOptions.buildNumberOption(),\r\n    /**\r\n     * A [template literal](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)\r\n     * from which to generate the `img` tag's `src` attribute value.\r\n     *\r\n     * This option overrides the [`field`]{@link ImageFieldValue.options.field} option value.\r\n     *\r\n     * The template literal can reference any number of fields from the parent result. It can also reference global\r\n     * scope properties.\r\n     *\r\n     * **Examples:**\r\n     *\r\n     * - The following markup generates an `src` value such as `http://uri.com?id=itemTitle`:\r\n     *\r\n     * ```html\r\n     * <a class='CoveoImageFieldValue' data-src-template='${clickUri}?id=${raw.title}'></a>\r\n     * ```\r\n     *\r\n     * - The following markup generates an `src` value such as `localhost/fooBar`:\r\n     *\r\n     * ```html\r\n     * <a class='CoveoImageFieldValue' data-src-template='${window.location.hostname}/{Foo.Bar}'></a>\r\n     * ```\r\n     *\r\n     * Default value is `undefined`.\r\n     */\r\n    srcTemplate: ComponentOptions.buildStringOption()\r\n  };\r\n\r\n  /**\r\n   * Creates a new ImageFieldValue.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the ImageFieldValue component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   * @param result The result to associate the component with.\r\n   */\r\n  constructor(public element: HTMLElement, public options: IImageFieldValue, bindings?: IComponentBindings, public result?: IQueryResult) {\r\n    super(element, ImageFieldValue.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, ImageFieldValue, options);\r\n\r\n    const fieldValueOption: IFieldValueOptions = {\r\n      field: this.options.field,\r\n      helper: 'image',\r\n      htmlValue: true,\r\n      helperOptions: {\r\n        height: this.options.height,\r\n        width: this.options.width,\r\n        alt: result.title,\r\n        srcTemplate: this.options.srcTemplate\r\n      }\r\n    };\r\n    new FieldValue(element, fieldValueOption, bindings, result);\r\n  }\r\n}\r\n\r\nInitialization.registerAutoCreateComponent(ImageFieldValue);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldImage/ImageFieldValue.ts","/// <reference path='Facet.ts' />\r\nimport { StringUtils } from '../../utils/StringUtils';\r\nimport { QueryUtils } from '../../utils/QueryUtils';\r\nimport { FileTypes } from '../Misc/FileTypes';\r\nimport { DateUtils } from '../../utils/DateUtils';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { $$ } from '../../utils/Dom';\r\nimport * as _ from 'underscore';\r\nimport FacetModuleDefinition = require('./Facet');\r\nimport { l } from '../../strings/Strings';\r\n\r\nexport class FacetUtils {\r\n  static getRegexToUseForFacetSearch(value: string, ignoreAccent: boolean) {\r\n    return new RegExp(StringUtils.stringToRegex(value, ignoreAccent), 'i');\r\n  }\r\n\r\n  static getDisplayValueFromValueCaption(value: string, field: string, valueCaption: Record<string, string>) {\r\n    const returnValue = this.tryToGetTranslatedCaption(field, value);\r\n    return valueCaption[value] || returnValue;\r\n  }\r\n\r\n  static getValuesToUseForSearchInFacet(original: string, facet: FacetModuleDefinition.Facet): string[] {\r\n    let ret = [original];\r\n    let regex = this.getRegexToUseForFacetSearch(original, facet.options.facetSearchIgnoreAccents);\r\n    if (facet.options.valueCaption) {\r\n      _.chain(facet.options.valueCaption)\r\n        .pairs()\r\n        .filter(pair => {\r\n          return regex.test(pair[1]);\r\n        })\r\n        .each(match => {\r\n          ret.push(match[0]);\r\n        });\r\n      if (\r\n        QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@objecttype') ||\r\n        QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@filetype')\r\n      ) {\r\n        _.each(FileTypes.getFileTypeCaptions(), (value: string, key: string) => {\r\n          if (!(key in facet.options.valueCaption) && regex.test(value)) {\r\n            ret.push(key);\r\n          }\r\n        });\r\n      }\r\n    } else if (\r\n      QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@objecttype') ||\r\n      QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@filetype')\r\n    ) {\r\n      _.each(\r\n        _.filter(_.pairs(FileTypes.getFileTypeCaptions()), pair => {\r\n          return regex.test(pair[1]);\r\n        }),\r\n        match => {\r\n          ret.push(match[0]);\r\n        }\r\n      );\r\n    } else if (QueryUtils.isStratusAgnosticField(<string>facet.options.field, '@month')) {\r\n      _.each(_.range(1, 13), month => {\r\n        if (regex.test(DateUtils.monthToString(month - 1))) {\r\n          ret.push(('0' + month.toString()).substr(-2));\r\n        }\r\n      });\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  static buildFacetSearchPattern(values: string[]) {\r\n    values = _.map(values, value => {\r\n      return Utils.escapeRegexCharacter(value);\r\n    });\r\n    values[0] = '.*' + values[0] + '.*';\r\n    return values.join('|');\r\n  }\r\n\r\n  static needAnotherFacetSearch(\r\n    currentSearchLength: number,\r\n    newSearchLength: number,\r\n    oldSearchLength: number,\r\n    desiredSearchLength: number\r\n  ) {\r\n    // Something was removed (currentSearch < newSearch)\r\n    // && we might want to display more facet search result(currentSearch < desiredSearch)\r\n    // && the new query returned more stuff than the old one so there's still more results(currentSearchLength > oldLength)\r\n    return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && currentSearchLength > oldSearchLength;\r\n  }\r\n\r\n  static addNoStateCssClassToFacetValues(facet: FacetModuleDefinition.Facet, container: HTMLElement) {\r\n    // This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet\r\n    if (facet.values.getSelected().length != 0) {\r\n      let noStates = $$(container).findAll('li:not(.coveo-selected)');\r\n      _.each(noStates, noState => {\r\n        $$(noState).addClass('coveo-no-state');\r\n      });\r\n    }\r\n  }\r\n\r\n  static tryToGetTranslatedCaption(field: string, value: string) {\r\n    let found: string;\r\n\r\n    if (QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@filetype')) {\r\n      found = FileTypes.getFileType(value).caption;\r\n    } else if (QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@objecttype')) {\r\n      found = FileTypes.getObjectType(value).caption;\r\n    } else if (FacetUtils.isMonthFieldValue(field, value)) {\r\n      const month = parseInt(value, 10);\r\n      found = DateUtils.monthToString(month - 1);\r\n    } else {\r\n      found = l(value);\r\n    }\r\n    return found != undefined && Utils.isNonEmptyString(found) ? found : value;\r\n  }\r\n\r\n  static isMonthFieldValue(field: string, value: string) {\r\n    if (!QueryUtils.isStratusAgnosticField(field.toLowerCase(), '@month')) {\r\n      return false;\r\n    }\r\n\r\n    const asInt = parseInt(value, 10);\r\n\r\n    if (isNaN(asInt)) {\r\n      return false;\r\n    }\r\n\r\n    if (asInt < 1 || asInt > 12) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Facet/FacetUtils.ts","import { Component } from '../Base/Component';\r\n\r\nexport function isFacetFieldValueCompatible(facet: Component): facet is IFieldValueCompatibleFacet {\r\n  return !!facet['isFieldValueCompatible'];\r\n}\r\n\r\nexport interface IFieldValueCompatibleFacet extends Component {\r\n  isFieldValueCompatible: boolean;\r\n  hasSelectedValue(value: string): boolean;\r\n  selectValue(value: string): void;\r\n  deselectValue(value: string): void;\r\n  getCaptionForStringValue(value: string): string;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/FieldValue/IFieldValueCompatibleFacet.ts"],"sourceRoot":""}