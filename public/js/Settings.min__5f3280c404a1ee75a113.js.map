{"version":3,"sources":["Settings.min__5f3280c404a1ee75a113.js","./src/ui/Settings/Settings.ts"],"names":["webpackJsonpCoveo__temporary","279","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","Settings","ID","isOpened","ComponentOptions","initComponentOptions","bind","onRootElement","InitializationEvents","afterInitialization","init","_this","open","menu","$$","detach","buildMenu","insertAfter","placement","modifiers","offset","preventOverflow","boundariesElement","root","close","toggle","square","className","el","squares","times","appendChild","cloneNode","AccessibleButton","withElement","withOwner","withSelectAction","withFocusAndMouseEnterAction","onfocus","withBlurAndMouseLeaveAction","onblur","withLabel","l","build","settingsPopulateMenuArgs","settings","menuData","trigger","SettingsEvents","settingsPopulateMenu","each","menuItem","menuItemElement","menuItemIcon","menuItemText","buildMenuItem","selectAction","onClose","onOpen","tooltip","text","buildMenuItemIcon","buildMenuItemText","iconElement","svgIcon","innerHTML","svgIconClassName","SVGDom","addClassToSVGInContainer","escape","clearTimeout","closeTimeout","window","setTimeout","menuDelay","doExport","exportGlobally","buildNumberOption","defaultValue","min","Component","Initialization","registerAutoCreateComponent","666"],"mappings":"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","file":"Settings.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([60],{\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar popper_js_1 = __webpack_require__(93);\r\n__webpack_require__(666);\r\nvar underscore_1 = __webpack_require__(0);\r\nvar InitializationEvents_1 = __webpack_require__(17);\r\nvar SettingsEvents_1 = __webpack_require__(53);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar Strings_1 = __webpack_require__(6);\r\nvar AccessibleButton_1 = __webpack_require__(15);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar SVGDom_1 = __webpack_require__(16);\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Initialization_1 = __webpack_require__(2);\r\n/**\r\n * The Settings component renders a **Settings** button that the end user can click to access a popup menu from which\r\n * it is possible to perform several contextual actions. The usual location of the **Settings** button in the page is to\r\n * the right of the {@link Searchbox}.\r\n *\r\n * This component can reference several components to populate its popup menu:\r\n * - {@link AdvancedSearch}\r\n * - {@link ExportToExcel}\r\n * - {@link PreferencesPanel} (see also {@link ResultsFiltersPreferences} and {@link ResultsPreferences})\r\n * - {@link SearchAlerts} (see also {@link SearchAlertsMessage})\r\n * - {@link ShareQuery}\r\n */\r\nvar Settings = /** @class */ (function (_super) {\r\n    __extends(Settings, _super);\r\n    /**\r\n     * Creates a new Settings component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the Settings component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     */\r\n    function Settings(element, options, bindings) {\r\n        var _this = _super.call(this, element, Settings.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.isOpened = false;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Settings, options);\r\n        _this.bind.onRootElement(InitializationEvents_1.InitializationEvents.afterInitialization, function () { return _this.init(); });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Opens the **Settings** popup menu.\r\n     */\r\n    Settings.prototype.open = function () {\r\n        this.isOpened = true;\r\n        if (this.menu != null) {\r\n            Dom_1.$$(this.menu).detach();\r\n        }\r\n        this.menu = this.buildMenu();\r\n        Dom_1.$$(this.menu).insertAfter(this.element);\r\n        new popper_js_1.default(this.element, this.menu, {\r\n            placement: 'bottom-end',\r\n            modifiers: {\r\n                offset: {\r\n                    offset: '0, 5'\r\n                },\r\n                preventOverflow: {\r\n                    boundariesElement: this.root\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Closes the **Settings** popup menu.\r\n     */\r\n    Settings.prototype.close = function () {\r\n        this.isOpened = false;\r\n        if (this.menu != null) {\r\n            Dom_1.$$(this.menu).detach();\r\n            this.menu = null;\r\n        }\r\n    };\r\n    Settings.prototype.toggle = function () {\r\n        if (this.isOpened) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    };\r\n    Settings.prototype.init = function () {\r\n        var _this = this;\r\n        var square = Dom_1.$$('span', { className: 'coveo-settings-square' }).el;\r\n        var squares = Dom_1.$$('span', { className: 'coveo-settings-squares' }).el;\r\n        underscore_1.times(3, function () { return squares.appendChild(square.cloneNode()); });\r\n        this.element.appendChild(squares);\r\n        new AccessibleButton_1.AccessibleButton()\r\n            .withElement(this.element)\r\n            .withOwner(this.bind)\r\n            .withSelectAction(function () { return _this.toggle(); })\r\n            .withFocusAndMouseEnterAction(function () { return _this.onfocus(); })\r\n            .withBlurAndMouseLeaveAction(function () { return _this.onblur(); })\r\n            .withLabel(Strings_1.l('Settings'))\r\n            .build();\r\n    };\r\n    Settings.prototype.buildMenu = function () {\r\n        var _this = this;\r\n        var menu = Dom_1.$$('div', { className: 'coveo-settings-advanced-menu' }).el;\r\n        var settingsPopulateMenuArgs = {\r\n            settings: this,\r\n            menuData: []\r\n        };\r\n        Dom_1.$$(this.root).trigger(SettingsEvents_1.SettingsEvents.settingsPopulateMenu, settingsPopulateMenuArgs);\r\n        underscore_1.each(settingsPopulateMenuArgs.menuData, function (menuItem) {\r\n            var _a = _this.buildMenuItem(menuItem, settingsPopulateMenuArgs), menuItemElement = _a.menuItemElement, menuItemIcon = _a.menuItemIcon, menuItemText = _a.menuItemText;\r\n            menuItemElement.appendChild(menuItemIcon);\r\n            menuItemElement.appendChild(menuItemText);\r\n            menu.appendChild(menuItemElement);\r\n        });\r\n        return menu;\r\n    };\r\n    Settings.prototype.buildMenuItem = function (menuItem, settingsPopulateMenuArgs) {\r\n        var _this = this;\r\n        var menuItemElement = Dom_1.$$('div', {\r\n            className: \"coveo-settings-item \" + menuItem.className\r\n        }).el;\r\n        var selectAction = function () {\r\n            underscore_1.each(settingsPopulateMenuArgs.menuData, function (menuItem) {\r\n                menuItem.onClose && menuItem.onClose();\r\n            });\r\n            _this.close();\r\n            menuItem.onOpen();\r\n        };\r\n        new AccessibleButton_1.AccessibleButton()\r\n            .withElement(menuItemElement)\r\n            .withSelectAction(selectAction)\r\n            .withFocusAndMouseEnterAction(function () { return _this.onfocus(); })\r\n            .withBlurAndMouseLeaveAction(function () { return _this.onblur(); })\r\n            .withLabel(menuItem.tooltip || menuItem.text)\r\n            .build();\r\n        return {\r\n            menuItemElement: menuItemElement,\r\n            menuItemIcon: this.buildMenuItemIcon(menuItem),\r\n            menuItemText: this.buildMenuItemText(menuItem)\r\n        };\r\n    };\r\n    Settings.prototype.buildMenuItemIcon = function (menuItem) {\r\n        var iconElement = Dom_1.$$('div', {\r\n            className: 'coveo-icon'\r\n        }).el;\r\n        if (menuItem.svgIcon) {\r\n            iconElement.innerHTML = menuItem.svgIcon;\r\n        }\r\n        if (menuItem.svgIconClassName) {\r\n            SVGDom_1.SVGDom.addClassToSVGInContainer(iconElement, menuItem.svgIconClassName);\r\n        }\r\n        return iconElement;\r\n    };\r\n    Settings.prototype.buildMenuItemText = function (menuItem) {\r\n        var textElement = Dom_1.$$('div', {\r\n            className: 'coveo-settings-text'\r\n        }, underscore_1.escape(menuItem.text)).el;\r\n        return textElement;\r\n    };\r\n    Settings.prototype.onblur = function () {\r\n        var _this = this;\r\n        clearTimeout(this.closeTimeout);\r\n        this.closeTimeout = window.setTimeout(function () {\r\n            _this.close();\r\n        }, this.options.menuDelay);\r\n    };\r\n    Settings.prototype.onfocus = function () {\r\n        clearTimeout(this.closeTimeout);\r\n    };\r\n    Settings.ID = 'Settings';\r\n    Settings.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Settings: Settings\r\n        });\r\n    };\r\n    /**\r\n     * The options for Settings\r\n     * @componentOptions\r\n     */\r\n    Settings.options = {\r\n        /**\r\n         * Specifies the delay (in milliseconds) before hiding the popup menu when the cursor is not hovering over it.\r\n         *\r\n         * Default value is `300`. Minimum value is `0 `.\r\n         */\r\n        menuDelay: ComponentOptions_1.ComponentOptions.buildNumberOption({ defaultValue: 300, min: 0 })\r\n    };\r\n    return Settings;\r\n}(Component_1.Component));\r\nexports.Settings = Settings;\r\nInitialization_1.Initialization.registerAutoCreateComponent(Settings);\r\n\n\n/***/ }),\n\n/***/ 666:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Settings.min__5f3280c404a1ee75a113.js","import PopperJs from 'popper.js';\r\nimport 'styling/_Settings';\r\nimport { each, escape, times } from 'underscore';\r\nimport { InitializationEvents } from '../../events/InitializationEvents';\r\nimport { SettingsEvents } from '../../events/SettingsEvents';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { l } from '../../strings/Strings';\r\nimport { AccessibleButton } from '../../utils/AccessibleButton';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { SVGDom } from '../../utils/SVGDom';\r\nimport { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { IMenuItem } from '../Menu/MenuItem';\r\n\r\nexport interface ISettingsPopulateMenuArgs {\r\n  settings: Settings;\r\n  menuData: IMenuItem[];\r\n}\r\n\r\nexport interface ISettingsOptions {\r\n  menuDelay: number;\r\n}\r\n\r\n/**\r\n * The Settings component renders a **Settings** button that the end user can click to access a popup menu from which\r\n * it is possible to perform several contextual actions. The usual location of the **Settings** button in the page is to\r\n * the right of the {@link Searchbox}.\r\n *\r\n * This component can reference several components to populate its popup menu:\r\n * - {@link AdvancedSearch}\r\n * - {@link ExportToExcel}\r\n * - {@link PreferencesPanel} (see also {@link ResultsFiltersPreferences} and {@link ResultsPreferences})\r\n * - {@link SearchAlerts} (see also {@link SearchAlertsMessage})\r\n * - {@link ShareQuery}\r\n */\r\nexport class Settings extends Component {\r\n  static ID = 'Settings';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Settings: Settings\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for Settings\r\n   * @componentOptions\r\n   */\r\n  static options: ISettingsOptions = {\r\n    /**\r\n     * Specifies the delay (in milliseconds) before hiding the popup menu when the cursor is not hovering over it.\r\n     *\r\n     * Default value is `300`. Minimum value is `0 `.\r\n     */\r\n    menuDelay: ComponentOptions.buildNumberOption({ defaultValue: 300, min: 0 })\r\n  };\r\n\r\n  private menu: HTMLElement;\r\n  private closeTimeout: number;\r\n  private isOpened: boolean = false;\r\n\r\n  /**\r\n   * Creates a new Settings component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Settings component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   */\r\n  constructor(public element: HTMLElement, public options: ISettingsOptions, bindings?: IComponentBindings) {\r\n    super(element, Settings.ID, bindings);\r\n    this.options = ComponentOptions.initComponentOptions(element, Settings, options);\r\n    this.bind.onRootElement(InitializationEvents.afterInitialization, () => this.init());\r\n  }\r\n\r\n  /**\r\n   * Opens the **Settings** popup menu.\r\n   */\r\n  public open() {\r\n    this.isOpened = true;\r\n    if (this.menu != null) {\r\n      $$(this.menu).detach();\r\n    }\r\n\r\n    this.menu = this.buildMenu();\r\n    $$(this.menu).insertAfter(this.element);\r\n\r\n    new PopperJs(this.element, this.menu, {\r\n      placement: 'bottom-end',\r\n      modifiers: {\r\n        offset: {\r\n          offset: '0, 5'\r\n        },\r\n        preventOverflow: {\r\n          boundariesElement: this.root\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Closes the **Settings** popup menu.\r\n   */\r\n  public close() {\r\n    this.isOpened = false;\r\n    if (this.menu != null) {\r\n      $$(this.menu).detach();\r\n      this.menu = null;\r\n    }\r\n  }\r\n\r\n  private toggle() {\r\n    if (this.isOpened) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  private init() {\r\n    const square = $$('span', { className: 'coveo-settings-square' }).el;\r\n    const squares = $$('span', { className: 'coveo-settings-squares' }).el;\r\n    times(3, () => squares.appendChild(square.cloneNode()));\r\n    this.element.appendChild(squares);\r\n\r\n    new AccessibleButton()\r\n      .withElement(this.element)\r\n      .withOwner(this.bind)\r\n      .withSelectAction(() => this.toggle())\r\n      .withFocusAndMouseEnterAction(() => this.onfocus())\r\n      .withBlurAndMouseLeaveAction(() => this.onblur())\r\n      .withLabel(l('Settings'))\r\n      .build();\r\n  }\r\n\r\n  private buildMenu(): HTMLElement {\r\n    const menu = $$('div', { className: 'coveo-settings-advanced-menu' }).el;\r\n    const settingsPopulateMenuArgs: ISettingsPopulateMenuArgs = {\r\n      settings: this,\r\n      menuData: []\r\n    };\r\n    $$(this.root).trigger(SettingsEvents.settingsPopulateMenu, settingsPopulateMenuArgs);\r\n\r\n    each(settingsPopulateMenuArgs.menuData, menuItem => {\r\n      const { menuItemElement, menuItemIcon, menuItemText } = this.buildMenuItem(menuItem, settingsPopulateMenuArgs);\r\n\r\n      menuItemElement.appendChild(menuItemIcon);\r\n      menuItemElement.appendChild(menuItemText);\r\n\r\n      menu.appendChild(menuItemElement);\r\n    });\r\n    return menu;\r\n  }\r\n\r\n  private buildMenuItem(menuItem: IMenuItem, settingsPopulateMenuArgs: ISettingsPopulateMenuArgs) {\r\n    const menuItemElement = $$('div', {\r\n      className: `coveo-settings-item ${menuItem.className}`\r\n    }).el;\r\n\r\n    const selectAction = () => {\r\n      each(settingsPopulateMenuArgs.menuData, menuItem => {\r\n        menuItem.onClose && menuItem.onClose();\r\n      });\r\n      this.close();\r\n      menuItem.onOpen();\r\n    };\r\n\r\n    new AccessibleButton()\r\n      .withElement(menuItemElement)\r\n      .withSelectAction(selectAction)\r\n      .withFocusAndMouseEnterAction(() => this.onfocus())\r\n      .withBlurAndMouseLeaveAction(() => this.onblur())\r\n      .withLabel(menuItem.tooltip || menuItem.text)\r\n      .build();\r\n\r\n    return {\r\n      menuItemElement,\r\n      menuItemIcon: this.buildMenuItemIcon(menuItem),\r\n      menuItemText: this.buildMenuItemText(menuItem)\r\n    };\r\n  }\r\n\r\n  private buildMenuItemIcon(menuItem: IMenuItem) {\r\n    const iconElement = $$('div', {\r\n      className: 'coveo-icon'\r\n    }).el;\r\n\r\n    if (menuItem.svgIcon) {\r\n      iconElement.innerHTML = menuItem.svgIcon;\r\n    }\r\n\r\n    if (menuItem.svgIconClassName) {\r\n      SVGDom.addClassToSVGInContainer(iconElement, menuItem.svgIconClassName);\r\n    }\r\n\r\n    return iconElement;\r\n  }\r\n\r\n  private buildMenuItemText(menuItem: IMenuItem) {\r\n    const textElement = $$(\r\n      'div',\r\n      {\r\n        className: 'coveo-settings-text'\r\n      },\r\n      escape(menuItem.text)\r\n    ).el;\r\n\r\n    return textElement;\r\n  }\r\n\r\n  private onblur() {\r\n    clearTimeout(this.closeTimeout);\r\n    this.closeTimeout = window.setTimeout(() => {\r\n      this.close();\r\n    }, this.options.menuDelay);\r\n  }\r\n\r\n  private onfocus() {\r\n    clearTimeout(this.closeTimeout);\r\n  }\r\n}\r\nInitialization.registerAutoCreateComponent(Settings);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Settings/Settings.ts"],"sourceRoot":""}