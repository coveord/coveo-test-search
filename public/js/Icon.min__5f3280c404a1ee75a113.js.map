{"version":3,"sources":["Icon.min__5f3280c404a1ee75a113.js","./src/ui/Icon/Icon.ts"],"names":["webpackJsonpCoveo__temporary","188","module","exports","__webpack_require__","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","element","options","bindings","result","Icon","ID","ComponentOptions","initComponentOptions","resolveResult","Assert","exists","TemplateFieldsEvaluator","evaluateFieldsToMatch","conditions","initialize","parentElement","removeChild","_this","possibleInternalQuickview","$$","find","Component","computeCssClassNameForType","Utils","isNullOrUndefined","QueryUtils","hasHTMLVersion","addClass","on","get","open","createIcon","el","info","FileTypes","searchInterface","getBindings","preprocessIconInfo","toggleClass","small","undefined","indexOf","icon","replace","setAttribute","caption","shouldDisplayLabel","appendChild","className","withLabel","labelValue","doExport","exportGlobally","buildStringOption","buildBooleanOption","buildLocalizedStringOption","buildFieldConditionOption","Initialization","registerAutoCreateComponent"],"mappings":"AAAAA,8BAA8B,KAExBC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAEA,IAAIC,GAAaC,MAAQA,KAAKD,WAAc,WACxC,GAAIE,GAAgBC,OAAOC,iBACpBC,uBAA2BC,QAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIC,KAAKD,GAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,IACzE,OAAO,UAAUF,EAAGC,GAEhB,QAASG,KAAOV,KAAKW,YAAcL,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaL,OAAOW,OAAON,IAAMG,EAAGE,UAAYL,EAAEK,UAAW,GAAIF,OAGvFR,QAAOY,eAAejB,EAAS,cAAgBkB,OAAO,GCjBtD,YAEA,OAGA,OACA,QACA,OACA,OACA,SACA,OACA,OACA,SAoBA,cAkFE,WAAmBC,EAA6BC,EAAwBC,EAAsCC,GAA9G,MACE,YAAMH,EAASI,EAAKC,GAAIH,IAAS,IDxD7B,OCuDa,GAAAF,UAA6B,EAAAC,UAA8D,EAAAE,SAG5G,EAAKF,QAAU,EAAAK,iBAAiBC,qBAAqBP,EAASI,EAAMH,GACpE,EAAKE,OAAS,EAAKA,QAAU,EAAKK,gBAClC,EAAAC,OAAOC,OAAO,EAAKP,QAEf,EAAAQ,wBAAwBC,sBAAsB,EAAKX,QAAQY,WAAY,EAAKV,QAC9E,EAAKW,WAAWd,EAASE,GACc,MAA9B,EAAKF,QAAQe,eACtB,EAAKf,QAAQe,cAAcC,YAAY,EAAKhB,SDjEnCiB,ECkJf,MA7K0B,QAgGhB,YAAAH,WAAR,SAAmBd,EAAsBE,GACvC,GAAMgB,GAA4B,EAAAC,GAAGnC,KAAKgB,SAASoB,KAAK,IAAM,EAAAC,UAAUC,2BAA2B,eAC9F,EAAAC,MAAMC,kBAAkBN,IAA8B,EAAAO,WAAWC,eAAe1C,KAAKmB,UACxF,EAAAgB,GAAGnC,KAAKgB,SAAS2B,SAAS,wBAC1B,EAAAR,GAAGnC,KAAKgB,SAAS4B,GAAG,QAAS,WACX,EAAAP,UAAUQ,IAAIX,GAC3BY,UAIP1B,EAAK2B,WAAW/C,KAAKmB,OAAQnB,KAAKiB,QAASD,EAASE,IAG/C,EAAA6B,WAAP,SAAkB5B,EAAsBF,EAA4BD,EAAqCE,OAAjE,KAAAD,cAA4B,KAAAD,MAAuB,EAAAmB,GAAG,OAAOa,GACnG,IAAIC,GAAO,EAAAC,UAAUL,IAAI1B,EAoCzB,QAnCKD,GAAYC,EAAOgC,kBAEtBjC,EAAWC,EAAOgC,gBAAgBC,eAEpCH,EAAO7B,EAAKiC,mBAAmBpC,EAASgC,GACxC,EAAAd,GAAGnB,GAASsC,YAAY,eAAiC,IAAlBrC,EAAQsC,WAE1BC,IAAjBvC,EAAQF,SACY,IAAlBE,EAAQsC,QAC8B,GAApCtC,EAAQF,MAAM0C,QAAQ,YACxBR,EAAKS,MAAQ,WAGK,IAAlBzC,EAAQsC,QAC8B,GAApCtC,EAAQF,MAAM0C,QAAQ,YACxBR,EAAKS,KAAOT,EAAKS,KAAKC,QAAQ,SAAU,MAI9C,EAAAxB,GAAGnB,GAAS2B,SAASM,EAAKS,MAC1B1C,EAAQ4C,aAAa,QAASX,EAAKY,SAE/BzC,EAAK0C,mBAAmB7C,EAASC,KACnCF,EAAQ+C,YACN,EAAA5B,GACE,QAEE6B,UAAW,8BAEbf,EAAKY,SACLb,IAEJ,EAAAb,GAAGnB,GAAS2B,SAAS,mCACrB,EAAAR,GAAGnB,GAAS4C,aAAa,kBAAmB,SAEvC5C,GAGF,EAAA8C,mBAAP,SAA0B7C,EAAuBC,GAM/C,OAA6B,IAAtBD,EAAQgD,WAGV,EAAAZ,mBAAP,SAA0BpC,EAAuBgC,GAa/C,MAZ0B,OAAtBhC,EAAQiD,aACVjB,EAAKY,QAAU5C,EAAQiD,YAEJ,MAAjBjD,EAAQF,QACVkC,EAAKS,KAAO,cAAgBzC,EAAQF,OAElB,MAAhBkC,EAAKY,UACPZ,EAAKY,QAAU,IAEA,MAAbZ,EAAKS,OACPT,EAAKS,KAAO,mCAEPT,GA1KF,EAAA5B,GAAK,OAEL,EAAA8C,SAAW,WAChB,EAAAC,gBACEhD,KAAMA,KAQH,EAAAH,SAOLF,MAAO,EAAAO,iBAAiB+C,oBAOxBd,MAAO,EAAAjC,iBAAiBgD,qBAaxBL,UAAW,EAAA3C,iBAAiBgD,qBAQ5BJ,WAAY,EAAA5C,iBAAiBiD,6BAuB7B1C,WAAY,EAAAP,iBAAiBkD,6BAsGjC,GA7K0B,EAAAnC,UAAb,GAAAjB,OA8Kb,EAAAqD,eAAeC,4BAA4BtD","file":"Icon.min__5f3280c404a1ee75a113.js","sourcesContent":["webpackJsonpCoveo__temporary([81],{\n\n/***/ 188:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Component_1 = __webpack_require__(7);\r\nvar ComponentOptions_1 = __webpack_require__(8);\r\nvar Assert_1 = __webpack_require__(5);\r\nvar QueryUtils_1 = __webpack_require__(21);\r\nvar Initialization_1 = __webpack_require__(2);\r\nvar Utils_1 = __webpack_require__(4);\r\nvar FileTypes_1 = __webpack_require__(113);\r\nvar Dom_1 = __webpack_require__(1);\r\nvar GlobalExports_1 = __webpack_require__(3);\r\nvar TemplateFieldsEvaluator_1 = __webpack_require__(132);\r\n/**\r\n * The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\r\n * from those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\r\n * outputs a generic icon.\r\n *\r\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\r\n */\r\nvar Icon = /** @class */ (function (_super) {\r\n    __extends(Icon, _super);\r\n    /**\r\n     * Creates a new Icon component.\r\n     * @param element The HTMLElement on which to instantiate the component.\r\n     * @param options The options for the Icon component.\r\n     * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n     * automatically resolved (with a slower execution time).\r\n     * @param result The result to associate the component with.\r\n     */\r\n    function Icon(element, options, bindings, result) {\r\n        var _this = _super.call(this, element, Icon.ID, bindings) || this;\r\n        _this.element = element;\r\n        _this.options = options;\r\n        _this.result = result;\r\n        _this.options = ComponentOptions_1.ComponentOptions.initComponentOptions(element, Icon, options);\r\n        _this.result = _this.result || _this.resolveResult();\r\n        Assert_1.Assert.exists(_this.result);\r\n        if (TemplateFieldsEvaluator_1.TemplateFieldsEvaluator.evaluateFieldsToMatch(_this.options.conditions, _this.result)) {\r\n            _this.initialize(element, bindings);\r\n        }\r\n        else if (_this.element.parentElement != null) {\r\n            _this.element.parentElement.removeChild(_this.element);\r\n        }\r\n        return _this;\r\n    }\r\n    Icon.prototype.initialize = function (element, bindings) {\r\n        var possibleInternalQuickview = Dom_1.$$(this.element).find('.' + Component_1.Component.computeCssClassNameForType('Quickview'));\r\n        if (!Utils_1.Utils.isNullOrUndefined(possibleInternalQuickview) && QueryUtils_1.QueryUtils.hasHTMLVersion(this.result)) {\r\n            Dom_1.$$(this.element).addClass('coveo-with-quickview');\r\n            Dom_1.$$(this.element).on('click', function () {\r\n                var qv = Component_1.Component.get(possibleInternalQuickview);\r\n                qv.open();\r\n            });\r\n        }\r\n        Icon.createIcon(this.result, this.options, element, bindings);\r\n    };\r\n    Icon.createIcon = function (result, options, element, bindings) {\r\n        if (options === void 0) { options = {}; }\r\n        if (element === void 0) { element = Dom_1.$$('div').el; }\r\n        var info = FileTypes_1.FileTypes.get(result);\r\n        if (!bindings && result.searchInterface) {\r\n            // try to resolve results bindings automatically\r\n            bindings = result.searchInterface.getBindings();\r\n        }\r\n        info = Icon.preprocessIconInfo(options, info);\r\n        Dom_1.$$(element).toggleClass('coveo-small', options.small === true);\r\n        if (options.value != undefined) {\r\n            if (options.small === true) {\r\n                if (options.value.indexOf('-small') == -1) {\r\n                    info.icon += '-small';\r\n                }\r\n            }\r\n            if (options.small === false) {\r\n                if (options.value.indexOf('-small') != -1) {\r\n                    info.icon = info.icon.replace('-small', '');\r\n                }\r\n            }\r\n        }\r\n        Dom_1.$$(element).addClass(info.icon);\r\n        element.setAttribute('title', info.caption);\r\n        if (Icon.shouldDisplayLabel(options, bindings)) {\r\n            element.appendChild(Dom_1.$$('span', {\r\n                className: 'coveo-icon-caption-overlay'\r\n            }, info.caption).el);\r\n            Dom_1.$$(element).addClass('coveo-icon-with-caption-overlay');\r\n            Dom_1.$$(element).setAttribute('data-with-label', 'true');\r\n        }\r\n        return element;\r\n    };\r\n    Icon.shouldDisplayLabel = function (options, bindings) {\r\n        // If withLabel is explicitely set to false, the label will never display\r\n        // If withLabel is explicitely set to true, the label will always display\r\n        // If withLabel is set to default value (not a hard true or false), the label will display based on ./core/filetypes/**.json\r\n        // with the property shouldDisplayLabel set on each file type/ objecttype\r\n        // In this case, the generated css will take care of outputting the correct css to display : block\r\n        return options.withLabel !== false;\r\n    };\r\n    Icon.preprocessIconInfo = function (options, info) {\r\n        if (options.labelValue != null) {\r\n            info.caption = options.labelValue;\r\n        }\r\n        if (options.value != null) {\r\n            info.icon = 'coveo-icon ' + options.value;\r\n        }\r\n        if (info.caption == null) {\r\n            info.caption = '';\r\n        }\r\n        if (info.icon == null) {\r\n            info.icon = 'coveo-icon coveo-sprites-custom';\r\n        }\r\n        return info;\r\n    };\r\n    Icon.ID = 'Icon';\r\n    Icon.doExport = function () {\r\n        GlobalExports_1.exportGlobally({\r\n            Icon: Icon\r\n        });\r\n    };\r\n    /**\r\n     * The options for the Icon\r\n     * @componentOptions\r\n     */\r\n    Icon.options = {\r\n        /**\r\n         * Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.\r\n         *\r\n         * Default value is `undefined`, which means that the Coveo JavaScript Search Framework outputs a suitable icon\r\n         * depending on the result file type.\r\n         */\r\n        value: ComponentOptions_1.ComponentOptions.buildStringOption(),\r\n        /**\r\n         * Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.\r\n         *\r\n         * Default value is `undefined`.\r\n         */\r\n        small: ComponentOptions_1.ComponentOptions.buildBooleanOption(),\r\n        /**\r\n         * Specifies whether the Icon component should force the output icon to display its caption/label.\r\n         *\r\n         * **Note:**\r\n         *\r\n         * > Due to limited screen real estate, setting this option to `true` has no effect on icons used inside Coveo for\r\n         * > Salesforce Insight Panels.\r\n         *\r\n         * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines whether the icon\r\n         * needs to display a caption/label depending on the result file type.\r\n         */\r\n        withLabel: ComponentOptions_1.ComponentOptions.buildBooleanOption(),\r\n        /**\r\n         * Specifies what text to display as the icon caption/label.\r\n         *\r\n         * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines what text the icon\r\n         * needs to display depending on the result file type.\r\n         */\r\n        labelValue: ComponentOptions_1.ComponentOptions.buildLocalizedStringOption(),\r\n        /**\r\n         * A field-based condition that must be satisfied by the query result item for the component to be rendered.\r\n         *\r\n         * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\r\n         *\r\n         * **Examples:**\r\n         * Render the component if the query result item's @documenttype field value is Article or Documentation.\r\n         * ```html\r\n         * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\r\n         * ```\r\n         *\r\n         * Render the component if the query result item's @documenttype field value is anything but Case.\r\n         * ```html\r\n         * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\r\n         * ```\r\n         * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\r\n         * ```html\r\n         * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\r\n         * ```\r\n         * Default value is `undefined`.\r\n         */\r\n        conditions: ComponentOptions_1.ComponentOptions.buildFieldConditionOption()\r\n    };\r\n    return Icon;\r\n}(Component_1.Component));\r\nexports.Icon = Icon;\r\nInitialization_1.Initialization.registerAutoCreateComponent(Icon);\r\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// Icon.min__5f3280c404a1ee75a113.js","import { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldConditionOption } from '../Base/IComponentOptions';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { QueryUtils } from '../../utils/QueryUtils';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { FileTypes, IFileTypeInfo } from '../Misc/FileTypes';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { TemplateFieldsEvaluator } from '../Templates/TemplateFieldsEvaluator';\r\n\r\n/**\r\n * Available options for the {@link Icon} component.\r\n */\r\nexport interface IIconOptions {\r\n  value?: string;\r\n  small?: boolean;\r\n  withLabel?: boolean;\r\n  labelValue?: string;\r\n  conditions?: IFieldConditionOption[];\r\n}\r\n\r\n/**\r\n * The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\r\n * from those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\r\n * outputs a generic icon.\r\n *\r\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\r\n */\r\nexport class Icon extends Component {\r\n  static ID = 'Icon';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Icon: Icon\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the Icon\r\n   * @componentOptions\r\n   */\r\n  static options: IIconOptions = {\r\n    /**\r\n     * Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.\r\n     *\r\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework outputs a suitable icon\r\n     * depending on the result file type.\r\n     */\r\n    value: ComponentOptions.buildStringOption(),\r\n\r\n    /**\r\n     * Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.\r\n     *\r\n     * Default value is `undefined`.\r\n     */\r\n    small: ComponentOptions.buildBooleanOption(),\r\n\r\n    /**\r\n     * Specifies whether the Icon component should force the output icon to display its caption/label.\r\n     *\r\n     * **Note:**\r\n     *\r\n     * > Due to limited screen real estate, setting this option to `true` has no effect on icons used inside Coveo for\r\n     * > Salesforce Insight Panels.\r\n     *\r\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines whether the icon\r\n     * needs to display a caption/label depending on the result file type.\r\n     */\r\n    withLabel: ComponentOptions.buildBooleanOption(),\r\n\r\n    /**\r\n     * Specifies what text to display as the icon caption/label.\r\n     *\r\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines what text the icon\r\n     * needs to display depending on the result file type.\r\n     */\r\n    labelValue: ComponentOptions.buildLocalizedStringOption(),\r\n\r\n    /**\r\n     * A field-based condition that must be satisfied by the query result item for the component to be rendered.\r\n     *\r\n     * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\r\n     *\r\n     * **Examples:**\r\n     * Render the component if the query result item's @documenttype field value is Article or Documentation.\r\n     * ```html\r\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\r\n     * ```\r\n     *\r\n     * Render the component if the query result item's @documenttype field value is anything but Case.\r\n     * ```html\r\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\r\n     * ```\r\n     * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\r\n     * ```html\r\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\r\n     * ```\r\n     * Default value is `undefined`.\r\n     */\r\n    conditions: ComponentOptions.buildFieldConditionOption()\r\n  };\r\n\r\n  /**\r\n   * Creates a new Icon component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Icon component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   * @param result The result to associate the component with.\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IIconOptions, bindings?: IComponentBindings, public result?: IQueryResult) {\r\n    super(element, Icon.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Icon, options);\r\n    this.result = this.result || this.resolveResult();\r\n    Assert.exists(this.result);\r\n\r\n    if (TemplateFieldsEvaluator.evaluateFieldsToMatch(this.options.conditions, this.result)) {\r\n      this.initialize(element, bindings);\r\n    } else if (this.element.parentElement != null) {\r\n      this.element.parentElement.removeChild(this.element);\r\n    }\r\n  }\r\n\r\n  private initialize(element: HTMLElement, bindings: IComponentBindings) {\r\n    const possibleInternalQuickview = $$(this.element).find('.' + Component.computeCssClassNameForType('Quickview'));\r\n    if (!Utils.isNullOrUndefined(possibleInternalQuickview) && QueryUtils.hasHTMLVersion(this.result)) {\r\n      $$(this.element).addClass('coveo-with-quickview');\r\n      $$(this.element).on('click', () => {\r\n        const qv = <any>Component.get(possibleInternalQuickview);\r\n        qv.open();\r\n      });\r\n    }\r\n\r\n    Icon.createIcon(this.result, this.options, element, bindings);\r\n  }\r\n\r\n  static createIcon(result: IQueryResult, options: IIconOptions = {}, element: HTMLElement = $$('div').el, bindings?: IComponentBindings) {\r\n    let info = FileTypes.get(result);\r\n    if (!bindings && result.searchInterface) {\r\n      // try to resolve results bindings automatically\r\n      bindings = result.searchInterface.getBindings();\r\n    }\r\n    info = Icon.preprocessIconInfo(options, info);\r\n    $$(element).toggleClass('coveo-small', options.small === true);\r\n\r\n    if (options.value != undefined) {\r\n      if (options.small === true) {\r\n        if (options.value.indexOf('-small') == -1) {\r\n          info.icon += '-small';\r\n        }\r\n      }\r\n      if (options.small === false) {\r\n        if (options.value.indexOf('-small') != -1) {\r\n          info.icon = info.icon.replace('-small', '');\r\n        }\r\n      }\r\n    }\r\n    $$(element).addClass(info.icon);\r\n    element.setAttribute('title', info.caption);\r\n\r\n    if (Icon.shouldDisplayLabel(options, bindings)) {\r\n      element.appendChild(\r\n        $$(\r\n          'span',\r\n          {\r\n            className: 'coveo-icon-caption-overlay'\r\n          },\r\n          info.caption\r\n        ).el\r\n      );\r\n      $$(element).addClass('coveo-icon-with-caption-overlay');\r\n      $$(element).setAttribute('data-with-label', 'true');\r\n    }\r\n    return element;\r\n  }\r\n\r\n  static shouldDisplayLabel(options: IIconOptions, bindings: IComponentBindings) {\r\n    // If withLabel is explicitely set to false, the label will never display\r\n    // If withLabel is explicitely set to true, the label will always display\r\n    // If withLabel is set to default value (not a hard true or false), the label will display based on ./core/filetypes/**.json\r\n    // with the property shouldDisplayLabel set on each file type/ objecttype\r\n    // In this case, the generated css will take care of outputting the correct css to display : block\r\n    return options.withLabel !== false;\r\n  }\r\n\r\n  static preprocessIconInfo(options: IIconOptions, info: IFileTypeInfo) {\r\n    if (options.labelValue != null) {\r\n      info.caption = options.labelValue;\r\n    }\r\n    if (options.value != null) {\r\n      info.icon = 'coveo-icon ' + options.value;\r\n    }\r\n    if (info.caption == null) {\r\n      info.caption = '';\r\n    }\r\n    if (info.icon == null) {\r\n      info.icon = 'coveo-icon coveo-sprites-custom';\r\n    }\r\n    return info;\r\n  }\r\n}\r\nInitialization.registerAutoCreateComponent(Icon);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Icon/Icon.ts"],"sourceRoot":""}