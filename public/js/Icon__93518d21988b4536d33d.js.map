{"version":3,"sources":["./src/ui/Icon/Icon.ts"],"names":[],"mappings":"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","file":"Icon__93518d21988b4536d33d.js","sourcesContent":["import { Component } from '../Base/Component';\r\nimport { IComponentBindings } from '../Base/ComponentBindings';\r\nimport { ComponentOptions } from '../Base/ComponentOptions';\r\nimport { IFieldConditionOption } from '../Base/IComponentOptions';\r\nimport { IQueryResult } from '../../rest/QueryResult';\r\nimport { Assert } from '../../misc/Assert';\r\nimport { QueryUtils } from '../../utils/QueryUtils';\r\nimport { Initialization } from '../Base/Initialization';\r\nimport { Utils } from '../../utils/Utils';\r\nimport { FileTypes, IFileTypeInfo } from '../Misc/FileTypes';\r\nimport { $$ } from '../../utils/Dom';\r\nimport { exportGlobally } from '../../GlobalExports';\r\nimport { TemplateFieldsEvaluator } from '../Templates/TemplateFieldsEvaluator';\r\n\r\n/**\r\n * Available options for the {@link Icon} component.\r\n */\r\nexport interface IIconOptions {\r\n  value?: string;\r\n  small?: boolean;\r\n  withLabel?: boolean;\r\n  labelValue?: string;\r\n  conditions?: IFieldConditionOption[];\r\n}\r\n\r\n/**\r\n * The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\r\n * from those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\r\n * outputs a generic icon.\r\n *\r\n * This component is a result template component (see [Result Templates](https://docs.coveo.com/en/413/)).\r\n */\r\nexport class Icon extends Component {\r\n  static ID = 'Icon';\r\n\r\n  static doExport = () => {\r\n    exportGlobally({\r\n      Icon: Icon\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The options for the Icon\r\n   * @componentOptions\r\n   */\r\n  static options: IIconOptions = {\r\n    /**\r\n     * Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.\r\n     *\r\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework outputs a suitable icon\r\n     * depending on the result file type.\r\n     */\r\n    value: ComponentOptions.buildStringOption(),\r\n\r\n    /**\r\n     * Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.\r\n     *\r\n     * Default value is `undefined`.\r\n     */\r\n    small: ComponentOptions.buildBooleanOption(),\r\n\r\n    /**\r\n     * Specifies whether the Icon component should force the output icon to display its caption/label.\r\n     *\r\n     * **Note:**\r\n     *\r\n     * > Due to limited screen real estate, setting this option to `true` has no effect on icons used inside Coveo for\r\n     * > Salesforce Insight Panels.\r\n     *\r\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines whether the icon\r\n     * needs to display a caption/label depending on the result file type.\r\n     */\r\n    withLabel: ComponentOptions.buildBooleanOption(),\r\n\r\n    /**\r\n     * Specifies what text to display as the icon caption/label.\r\n     *\r\n     * Default value is `undefined`, which means that the Coveo JavaScript Search Framework determines what text the icon\r\n     * needs to display depending on the result file type.\r\n     */\r\n    labelValue: ComponentOptions.buildLocalizedStringOption(),\r\n\r\n    /**\r\n     * A field-based condition that must be satisfied by the query result item for the component to be rendered.\r\n     *\r\n     * Note: This option uses a distinctive markup configuration syntax allowing multiple conditions to be expressed. Its underlying logic is the same as that of the field value conditions mechanism used by result templates.\r\n     *\r\n     * **Examples:**\r\n     * Render the component if the query result item's @documenttype field value is Article or Documentation.\r\n     * ```html\r\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article, Documentation\"></div>\r\n     * ```\r\n     *\r\n     * Render the component if the query result item's @documenttype field value is anything but Case.\r\n     * ```html\r\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-not-documenttype=\"Case\"></div>\r\n     * ```\r\n     * Render the component if the query result item's @documenttype field value is Article, and if its @author field value is anything but Anonymous.\r\n     * ```html\r\n     * <div class=\"CoveoIcon\" data-field=\"@author\" data-condition-field-documenttype=\"Article\" data-condition-field-not-author=\"Anonymous\"></div>\r\n     * ```\r\n     * Default value is `undefined`.\r\n     */\r\n    conditions: ComponentOptions.buildFieldConditionOption()\r\n  };\r\n\r\n  /**\r\n   * Creates a new Icon component.\r\n   * @param element The HTMLElement on which to instantiate the component.\r\n   * @param options The options for the Icon component.\r\n   * @param bindings The bindings that the component requires to function normally. If not set, these will be\r\n   * automatically resolved (with a slower execution time).\r\n   * @param result The result to associate the component with.\r\n   */\r\n  constructor(public element: HTMLElement, public options?: IIconOptions, bindings?: IComponentBindings, public result?: IQueryResult) {\r\n    super(element, Icon.ID, bindings);\r\n\r\n    this.options = ComponentOptions.initComponentOptions(element, Icon, options);\r\n    this.result = this.result || this.resolveResult();\r\n    Assert.exists(this.result);\r\n\r\n    if (TemplateFieldsEvaluator.evaluateFieldsToMatch(this.options.conditions, this.result)) {\r\n      this.initialize(element, bindings);\r\n    } else if (this.element.parentElement != null) {\r\n      this.element.parentElement.removeChild(this.element);\r\n    }\r\n  }\r\n\r\n  private initialize(element: HTMLElement, bindings: IComponentBindings) {\r\n    const possibleInternalQuickview = $$(this.element).find('.' + Component.computeCssClassNameForType('Quickview'));\r\n    if (!Utils.isNullOrUndefined(possibleInternalQuickview) && QueryUtils.hasHTMLVersion(this.result)) {\r\n      $$(this.element).addClass('coveo-with-quickview');\r\n      $$(this.element).on('click', () => {\r\n        const qv = <any>Component.get(possibleInternalQuickview);\r\n        qv.open();\r\n      });\r\n    }\r\n\r\n    Icon.createIcon(this.result, this.options, element, bindings);\r\n  }\r\n\r\n  static createIcon(result: IQueryResult, options: IIconOptions = {}, element: HTMLElement = $$('div').el, bindings?: IComponentBindings) {\r\n    let info = FileTypes.get(result);\r\n    if (!bindings && result.searchInterface) {\r\n      // try to resolve results bindings automatically\r\n      bindings = result.searchInterface.getBindings();\r\n    }\r\n    info = Icon.preprocessIconInfo(options, info);\r\n    $$(element).toggleClass('coveo-small', options.small === true);\r\n\r\n    if (options.value != undefined) {\r\n      if (options.small === true) {\r\n        if (options.value.indexOf('-small') == -1) {\r\n          info.icon += '-small';\r\n        }\r\n      }\r\n      if (options.small === false) {\r\n        if (options.value.indexOf('-small') != -1) {\r\n          info.icon = info.icon.replace('-small', '');\r\n        }\r\n      }\r\n    }\r\n    $$(element).addClass(info.icon);\r\n    element.setAttribute('title', info.caption);\r\n\r\n    if (Icon.shouldDisplayLabel(options, bindings)) {\r\n      element.appendChild(\r\n        $$(\r\n          'span',\r\n          {\r\n            className: 'coveo-icon-caption-overlay'\r\n          },\r\n          info.caption\r\n        ).el\r\n      );\r\n      $$(element).addClass('coveo-icon-with-caption-overlay');\r\n      $$(element).setAttribute('data-with-label', 'true');\r\n    }\r\n    return element;\r\n  }\r\n\r\n  static shouldDisplayLabel(options: IIconOptions, bindings: IComponentBindings) {\r\n    // If withLabel is explicitely set to false, the label will never display\r\n    // If withLabel is explicitely set to true, the label will always display\r\n    // If withLabel is set to default value (not a hard true or false), the label will display based on ./core/filetypes/**.json\r\n    // with the property shouldDisplayLabel set on each file type/ objecttype\r\n    // In this case, the generated css will take care of outputting the correct css to display : block\r\n    return options.withLabel !== false;\r\n  }\r\n\r\n  static preprocessIconInfo(options: IIconOptions, info: IFileTypeInfo) {\r\n    if (options.labelValue != null) {\r\n      info.caption = options.labelValue;\r\n    }\r\n    if (options.value != null) {\r\n      info.icon = 'coveo-icon ' + options.value;\r\n    }\r\n    if (info.caption == null) {\r\n      info.caption = '';\r\n    }\r\n    if (info.icon == null) {\r\n      info.icon = 'coveo-icon coveo-sprites-custom';\r\n    }\r\n    return info;\r\n  }\r\n}\r\nInitialization.registerAutoCreateComponent(Icon);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui/Icon/Icon.ts"],"sourceRoot":""}