var Coveo;
(function (Coveo) {
    var ModalBox;
    (function (ModalBox) {
        /**
         * The button to use when creating a ModalBox
         */
        (function (BUTTON) {
            BUTTON[BUTTON["OK"] = 1] = "OK";
            BUTTON[BUTTON["APPLY"] = 2] = "APPLY";
            BUTTON[BUTTON["YES"] = 4] = "YES";
            BUTTON[BUTTON["NO"] = 8] = "NO";
            BUTTON[BUTTON["CANCEL"] = 16] = "CANCEL";
        })(ModalBox.BUTTON || (ModalBox.BUTTON = {}));
        var BUTTON = ModalBox.BUTTON;
        var closeFunctions = [];
        /**
         * Open a modal box with the given content
         * @param content The content to display, as an HTMLElement
         * @param options The {@link Options} to use for this modal box
         * @returns {{modalBox: (HTMLDivElement|HTMLElement), overlay: (HTMLDivElement|HTMLElement), wrapper: (HTMLDivElement|HTMLElement), buttons: HTMLElement, content: HTMLElement, close: (function(BUTTON=, boolean=): (boolean|boolean))}}
         */
        function open(content, options) {
            if (options === void 0) { options = {}; }
            var body = options.body || document.body;
            if (body.className) {
                body.className += ' coveo-modalBox-opened';
            }
            else {
                body.className = 'coveo-modalBox-opened';
            }
            var modalBox = document.createElement('div');
            modalBox.className = 'coveo-modalBox';
            body.appendChild(modalBox);
            if (options.fullscreen === true) {
                modalBox.className += ' coveo-fullscreen';
            }
            var overlay = document.createElement('div');
            overlay.className = 'coveo-overlay';
            modalBox.appendChild(overlay);
            var wrapper = document.createElement('div');
            wrapper.className = 'coveo-wrapper';
            modalBox.appendChild(wrapper);
            if (options.title != null) {
                var title = document.createElement('div');
                title.className = 'coveo-title';
                wrapper.appendChild(title);
                title.innerHTML = options.title;
                if (options.titleClose === true) {
                    title.addEventListener('click', function () { return close(); });
                }
            }
            content.className += ' coveo-body';
            wrapper.appendChild(content);
            var close = function (button, forceClose) {
                if (button === void 0) { button = 0; }
                if (forceClose === void 0) { forceClose = false; }
                var valid = options.validation == null || options.validation(button);
                if (valid !== false || forceClose) {
                    modalBox.parentElement && modalBox.parentElement.removeChild(modalBox);
                    var index = closeFunctions.indexOf(close);
                    if (index >= 0) {
                        closeFunctions.splice(index, 1);
                    }
                    if (body.querySelector('.coveo-modalBox') == null) {
                        removeClassName(body, 'coveo-modalBox-opened');
                    }
                    return true;
                }
                return false;
            };
            var buttonsContainer;
            var buildButton = function (text, type) {
                var btn = document.createElement('div');
                btn.className = 'coveo-button';
                btn.textContent = text;
                btn.addEventListener('click', function () { return close(type); });
                buttonsContainer.appendChild(btn);
            };
            if (options.buttons != null) {
                buttonsContainer = document.createElement('div');
                buttonsContainer.className = 'coveo-buttons';
                wrapper.appendChild(buttonsContainer);
                if (options.buttons & BUTTON.OK) {
                    buildButton('Ok', BUTTON.OK);
                }
                if (options.buttons & BUTTON.APPLY) {
                    buildButton('Apply', BUTTON.APPLY);
                }
                if (options.buttons & BUTTON.YES) {
                    buildButton('Yes', BUTTON.YES);
                }
                if (options.buttons & BUTTON.NO) {
                    buildButton('No', BUTTON.NO);
                }
                if (options.buttons & BUTTON.CANCEL) {
                    buildButton('Cancel', BUTTON.CANCEL);
                }
            }
            closeFunctions.push(close);
            if (options.overlayClose === true) {
                overlay.addEventListener('click', function (e) { return close(); });
            }
            if (options.className != null) {
                modalBox.className += ' ' + options.className;
            }
            return {
                modalBox: modalBox,
                overlay: overlay,
                wrapper: wrapper,
                buttons: buttonsContainer,
                content: content,
                close: close
            };
        }
        ModalBox.open = open;
        /**
         * Close all open modal box instance
         * @param forceClose Will skip validation
         */
        function close(forceClose) {
            if (forceClose === void 0) { forceClose = false; }
            var i = 0;
            while (closeFunctions.length > i) {
                var closed = closeFunctions[i](0, forceClose);
                if (!closed) {
                    i++;
                }
            }
        }
        ModalBox.close = close;
        function removeClassName(el, className) {
            el.className = el.className.replace(new RegExp("(^|\\s)" + className + "(\\s|\\b)", 'g'), '$1');
        }
    })(ModalBox = Coveo.ModalBox || (Coveo.ModalBox = {}));
})(Coveo || (Coveo = {}));
