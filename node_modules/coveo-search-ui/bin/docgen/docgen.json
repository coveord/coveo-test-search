[
	{
		"name": "Aggregate",
		"comment": "<p>This simple component allows to display the result on an aggregate operation on the index.<br/>\nIt hook itself on the query to add a new group by request, then display the result.</p>\n"
	},
	{
		"name": "Aggregate.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Aggregate.options.field",
		"comment": "<p>The field on which to do the aggregate operation</p>\n"
	},
	{
		"name": "Aggregate.options.format",
		"comment": "<p>Specifies how to format the value<br/>\nThe formats available are defined by the Globalize library. The most common used formats are:</p>\n<p><ul>\n  <li>c0 - Formats the value as a currency.</li>\n  <li>n0 - Formats the value as an integer.</li>\n  <li>n2 - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\nSee : <a href='https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-'>Globalize</a> for more informations.<br/>\nDefault value is &#39;c0</p>\n"
	},
	{
		"name": "Aggregate.options.operation",
		"comment": "<p>The aggregate operation to perform.<br/>\nThe available values are:</p>\n<p><ul>\n  <li>sum - Computes the sum of the computed field values.</li>\n  <li>average - Computes the average of the computed field values.</li>\n  <li>minimum - Finds the minimum value of the computed field values.</li>\n  <li>maximum - Finds the maximum value of the computed field values.</li>\n</ul><br/>\nThe default value is sum.</p>\n"
	},
	{
		"name": "Aggregate.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Aggregate.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Aggregate.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Aggregate.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Aggregate.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Aggregate.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Aggregate.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Aggregate.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Aggregate.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Aggregate.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Aggregate.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Aggregate.constructor",
		"comment": "<p>Create a new Aggregate component</p>\n"
	},
	{
		"name": "Analytics",
		"comment": "<p>This component logs all user actions performed in the search interface and sends them to a REST web service exposed through the Coveo Cloud platform.<br/>\nYou can use this data to evaluate how users are interacting with the search interface, improve relevance and produce analytics dashboards in the Coveo platform.</p>\n"
	},
	{
		"name": "Analytics.options",
		"comment": "<p>Options for the component</p>\n"
	},
	{
		"name": "Analytics.options.anonymous",
		"comment": "<p>Specifies whether the search user identities are converted in a unique hash in the logged analytics data to prevent analytics reviewers and managers to identify who performs which queries.<br/>\nWhen enabled, the Coveo Analytics Platform can still properly identify sessions made by anonymous users, versus ones from users that are authenticated in some way with the site containing the search page.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Analytics.options.endpoint",
		"comment": "<p>Specifies the URL of the analytics logger for rare cases where it is different from the default usage analytics Coveo Cloud endpoint (<a href=\"https://usageanalytics.coveo.com\">https://usageanalytics.coveo.com</a>).</p>\n"
	},
	{
		"name": "Analytics.options.organization",
		"comment": "<p>Specifies the organization bound to the access token. This is necessary when using an access token because it can be associated with more than organization.\nIf this parameter is not specified, it will fallback on the organization used for the search endpoint.</p>\n"
	},
	{
		"name": "Analytics.options.searchHub",
		"comment": "<p>Sets the Search Hub dimension on the search events.<br/>\nThe Search Hub dimension is typically a name that refers to a specific search page. For example, one could use the CommunitySite value to refer to a search page on a company&#39;s public community site.<br/>\nThe default value is default.</p>\n"
	},
	{
		"name": "Analytics.options.splitTestRunName",
		"comment": "<p>Specifies the name of the split test run that the search page is a part of.<br/>\nThis dimension can be used to perform A/B testing using different search page layouts and features, inside the Coveo Query pipeline.<br/>\nBy default, this value is not specified and no split test run name is reported to the Coveo Analytics Platform.</p>\n"
	},
	{
		"name": "Analytics.options.splitTestRunVersion",
		"comment": "<p>Specifies the version name for the page when a split test run is active.<br/>\nWhen reporting on A/B testing analytics data, this value specifies the test run version name that has been presented to the user.<br/>\nBy default, this value is not specified.</p>\n"
	},
	{
		"name": "Analytics.options.token",
		"comment": "<p>Specifies the token used to gain access the analytics endpoint.<br/>\nThis attribute is optional, the component will use the search token by default.</p>\n"
	},
	{
		"name": "Analytics.options.user",
		"comment": "<p>Specifies the name of the user for usage analytics logs.</p>\n"
	},
	{
		"name": "Analytics.options.userDisplayName",
		"comment": "<p>Specifies the name of the user display name for usage analytics logs.</p>\n"
	},
	{
		"name": "Analytics.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Analytics.client",
		"comment": "<p>A reference to the analyticsClient, which will perform the heavy duty part of logging the actual events on the service.</p>\n"
	},
	{
		"name": "Analytics.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Analytics.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Analytics.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Analytics.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Analytics.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Analytics.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Analytics.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Analytics.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Analytics.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Analytics.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Analytics.constructor",
		"comment": "<p>Create a new Analytics component. Create the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsclient.html\">IAnalyticsClient</a></p>\n"
	},
	{
		"name": "AnalyticsSuggestions",
		"comment": "<p>This component is used to provide query suggestions based on the most commonly logged queries by a Coveo Analytics service.\nIn order to provide relevant suggestions, they are shown in order of successful document views: thus, queries resulting in no clicks from users or that require refinements are not suggested if better options exist.\nThese suggestions appear in the Omnibox Component. This component is thus highly related to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> Component.\nWhile a user is typing in a query box, he will be able to see and select the most commonly used queries.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options.headerTitle",
		"comment": "<p>Specifies the title in the Omnibox for this group of suggestions. This option is not available when using the Lightning Friendly Theme, which is the default design.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options.numberOfSuggestions",
		"comment": "<p>The number of suggestions that should be requested and displayed in the omnibox.<br/>\nThe default value is <code>5</code></p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options.omniboxZIndex",
		"comment": "<p>The index at which the suggestions should render in the omnibox. Higher value = placed first.<br/>\nThe default value is <code>52</code></p>\n"
	},
	{
		"name": "AnalyticsSuggestions.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "AnalyticsSuggestions.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "AnalyticsSuggestions.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "AnalyticsSuggestions.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "AuthenticationProvider",
		"comment": "<p>This component arranges for queries to be executed with an identity obtained\nusing an Authentication Provider configured on the Coveo Search API\n(see <a href=\"https://developers.coveo.com/display/public/SearchREST/On-Premises+SharePoint+Claims+Authentication\">On-Premises SharePoint Claims Authentication</a>).\nWhen needed, the component will handle redirecting the browser to the address\nthat starts the authentication process.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options",
		"comment": "<p>The options for the component.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options.caption",
		"comment": "<p>Specifies the friendly name of the authentication provider that will be\ndisplayed in the user interface while logging in.<br/>\nIf not specified, it will default to <a href=\"https://coveo.github.io/search-ui/components/authenticationprovider.html#options.name\">name</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options.name",
		"comment": "<p>Specifies the name of the authentication provider as specified in the\n<a href=\"https://developers.coveo.com/display/public/SearchREST/Windows+Service+Configuration+File\">Windows Service Configuration File</a></p>\n"
	},
	{
		"name": "AuthenticationProvider.options.showIFrame",
		"comment": "<p>Specifies whether the <code>&lt;iframe&gt;</code> used for authentication will be made\nvisible to the user (inside a popup).<br/>\nBy default, this option is set to <code>true</code>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options.useIFrame",
		"comment": "<p>Specifies whether an <code>&lt;iframe&gt;</code> will be used to host the chain of\nredirections that make up the authentication process.<br/>\nBy default, this option is set to <code>false</code>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "AuthenticationProvider.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "AuthenticationProvider.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AuthenticationProvider.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "AuthenticationProvider.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "AuthenticationProvider.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "AuthenticationProvider.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AuthenticationProvider.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "AuthenticationProvider.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "AuthenticationProvider.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "AuthenticationProvider.constructor",
		"comment": "<p>Build a new AuthenticationProvider component</p>\n"
	},
	{
		"name": "Breadcrumb",
		"comment": "<p>This component displays a summary of the filters currently active in the query.</p>\n"
	},
	{
		"name": "Breadcrumb.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Breadcrumb.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Breadcrumb.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Breadcrumb.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Breadcrumb.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Breadcrumb.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Breadcrumb.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Breadcrumb.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Breadcrumb.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Breadcrumb.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Breadcrumb.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Breadcrumb.constructor",
		"comment": "<p>Create a new breadcrumb element, bind event on deferredQuerySuccess to draw the breadcrumb</p>\n"
	},
	{
		"name": "CurrentTab",
		"comment": "<p>This component is used to display the name of the currently selected tab.\nIf no tabs are selected, this component is hidden.</p>\n"
	},
	{
		"name": "CurrentTab.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "CurrentTab.options.tabSectionToOpen",
		"comment": "<p>Specifies the css selector to the section which contains the tab.\nClicking this component will toggle between opening and closing this section.</p>\n"
	},
	{
		"name": "CurrentTab.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "CurrentTab.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "CurrentTab.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CurrentTab.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "CurrentTab.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "CurrentTab.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "CurrentTab.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CurrentTab.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "CurrentTab.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "CurrentTab.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "CurrentTab.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "CurrentTab.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "DidYouMean",
		"comment": "<p>This component is responsible for displaying query corrections. If this component is in the page\nand the query returns no results, but finds a possible query correction, the component either\nsuggests the correction or automatically triggers a new query with the suggested term.</p>\n"
	},
	{
		"name": "DidYouMean.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "DidYouMean.options.enableAutoCorrection",
		"comment": "<p>This option allows the DidYouMean component to automatically trigger a new query\nwhen there are no results and a correction is available <br/>\nThe default value is <code>true</code></p>\n"
	},
	{
		"name": "DidYouMean.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "DidYouMean.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "DidYouMean.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "DidYouMean.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "DidYouMean.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "DidYouMean.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "DidYouMean.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "DidYouMean.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "DidYouMean.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "DidYouMean.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "DidYouMean.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "DidYouMean.constructor",
		"comment": "<p>Create a new DidYouMean component</p>\n"
	},
	{
		"name": "ErrorReport",
		"comment": "<p>This component takes care of handling fatal error when doing a query on the index / search API.<br/>\nFor example, it will display a message when the service responds with something like a 401 or 503.<br/>\nIt will also render a small text area with the JSON content of the error response, for debugging purpose.</p>\n"
	},
	{
		"name": "ErrorReport.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ErrorReport.options.showDetailedError",
		"comment": "<p>Display the detailed error message as a JSON in a text content area.<br/>\nThe default value is <code>true</code></p>\n"
	},
	{
		"name": "ErrorReport.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ErrorReport.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ErrorReport.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ErrorReport.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ErrorReport.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ErrorReport.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ErrorReport.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ErrorReport.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ErrorReport.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ErrorReport.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ErrorReport.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ErrorReport.constructor",
		"comment": "<p>Create a new ErrorReport component</p>\n"
	},
	{
		"name": "Excerpt",
		"comment": "<p>This component, located in a result template, is used to render the document&#39;s excerpt,\nas well as highlighting searched <strong>keywords</strong> using the appropriate template helpers.</p>\n"
	},
	{
		"name": "Excerpt.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Excerpt.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Excerpt.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Excerpt.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Excerpt.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Excerpt.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Excerpt.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Excerpt.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Excerpt.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Excerpt.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Excerpt.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Excerpt.constructor",
		"comment": "<p>Create a new Excerpt component</p>\n"
	},
	{
		"name": "ExportToExcel",
		"comment": "<p>This component allows users to export the current search results in a Microsoft Excel (.xlsx) format.\nIt populates the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component&#39;s menu.</p>\n"
	},
	{
		"name": "ExportToExcel.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ExportToExcel.options.numberOfResults",
		"comment": "<p>The number of results included in the exported Excel file.<br/>\nThe default value of <code>100</code> makes the generation and the download of the resulting Excel file\nlast about 1 second.<br/>\nIncreasing this value will exponentially increase the time needed to create the Excel file.<br/>\nIt is not recommended to go above the default index limit of 1000 search results.</p>\n"
	},
	{
		"name": "ExportToExcel.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ExportToExcel.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ExportToExcel.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ExportToExcel.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ExportToExcel.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ExportToExcel.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ExportToExcel.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ExportToExcel.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ExportToExcel.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ExportToExcel.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ExportToExcel.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ExportToExcel.constructor",
		"comment": "<p>Create a new ExportToExcel component</p>\n"
	},
	{
		"name": "Facet",
		"comment": "<p>This component displays a facet of the results for the current query. A facet consists of a list of values for a given field occurring in the results, ordered using a configurable criteria.<br/>\nThe list of values is obtained using a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> operation performed at the same time as the main query.<br/>\nThe Facet component allows the user to drill down inside results by restricting to certain field values. It also allows filtering out values, and can provide a search box to look for specific values inside larger sets.<br/>\nIt is probably the most complex component in the Coveo UI, and as such allows many different options.</p>\n"
	},
	{
		"name": "Facet.options",
		"comment": "<p>The possible options for a facet</p>\n"
	},
	{
		"name": "Facet.options.additionalFilter",
		"comment": "<p>Specifies an additional query expression (query override) to add to each group by that this facet performs.<br/>\nSee : <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.<br/>\nExample : @date&gt;=2014/01/01</p>\n"
	},
	{
		"name": "Facet.options.allowedValues",
		"comment": "<p>Specifies an explicit list of allowedValues in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.<br/>\nThis will whitelist the facet content to some specific values.<br/>\nExample  [&quot;File&quot;, &quot;People&quot;].</p>\n"
	},
	{
		"name": "Facet.options.availableSorts",
		"comment": "<p>Specifies the sort criteria options you want to be displayed in the facet settings menu.<br/>\nOf course <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\">Facet.options.enableSettings</a> needs to be true.<br/>\nPossible values are : occurrences, score, alphaAscending, alphaDescending, computedfieldascending, computedfielddescending, custom\nThe default value is occurrences,score,alphaAscending,alphaDescending.</p>\n"
	},
	{
		"name": "Facet.options.computedField",
		"comment": "<p>Specifies the name of a field on which an aggregate operation should be executed for all distinct values of the facet&#39;s field.<br/>\nThe result of the operation is displayed along with the number of occurrences for each value.<br/>\nYou can use this option to compute the sum of a field (like a money amount) for each facet value that is listed.<br/>\nWorks in conjunction with <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldoperation\">Facet.options.computedFieldOperation</a> , <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldformat\">Facet.options.computedFieldFormat</a>, <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldcaption\">Facet.options.computedFieldCaption</a></p>\n"
	},
	{
		"name": "Facet.options.computedFieldCaption",
		"comment": "<p>Specifies what will be the caption of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfield\">Facet.options.computedField</a> in the settings menu for sort.<br/>\nFor example, the value Money will be displayed as Money Ascending for computed field ascending.<br/>\nThe default value is Computed Field.</p>\n"
	},
	{
		"name": "Facet.options.computedFieldFormat",
		"comment": "<p>Specifies how to format the values resulting from a <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldoperation\">Facet.options.computedFieldOperation</a>.<br/>\nThe formats available are defined by the Globalize library. The most common used formats are:</p>\n<p><ul>\n  <li>c0 - Formats the value as a currency.</li>\n  <li>n0 - Formats the value as an integer.</li>\n  <li>n2 - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\nSee : <a href='https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-'>Globalize</a> for more informations.<br/>\nDefault value is &#39;c0</p>\n"
	},
	{
		"name": "Facet.options.computedFieldOperation",
		"comment": "<p>Specifies the type of aggregate operation to use on the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfield\">Facet.options.computedField</a>.<br/>\nThe available values are:</p>\n<p><ul>\n  <li>sum - Computes the sum of the computed field values.</li>\n  <li>average - Computes the average of the computed field values.</li>\n  <li>minimum - Finds the minimum value of the computed field values.</li>\n  <li>maximum - Finds the maximum value of the computed field values.</li>\n</ul><br/>\nThe default value is sum.</p>\n"
	},
	{
		"name": "Facet.options.customSort",
		"comment": "<p>Specifies a custom order by which facet values are sorted.<br/>\nFor example, you could use this to specify a logical order for support tickets -&gt; customSort : [&quot;New&quot;,&quot;Opened&quot;,&quot;Feedback&quot;,&quot;Resolved&quot;,&quot;Feedback&quot;].<br/></p>\n"
	},
	{
		"name": "Facet.options.dependsOn",
		"comment": "<p>Specifies that the facet appears only when a value is selected in its &quot;parent&quot; facet.<br/>\nTo specify the parent facet, use it&#39;s <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">Facet.options.id</a>. Remember that be default, the id of a facet is it&#39;s <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.<br/>\nExample -&gt; dependsOn : @parentfacetField</p>\n"
	},
	{
		"name": "Facet.options.enableCollapse",
		"comment": "<p>Specifies if the facet is collapsible.<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "Facet.options.enableFacetSearch",
		"comment": "<p>Specifies whether the search box for searching inside the available values will be displayed at the bottom of the facet.<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "Facet.options.enableMoreLess",
		"comment": "<p>Specifies if the more/less button is enabled.<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "Facet.options.enableResponsiveMode",
		"comment": "<p>Specifies if the responsive mode should be enabled on the facets. Responsive mode will make the facet dissapear and instead be\navailaible using a dropdown button. Responsive facets are enabled when the width of the element the search interface is bound to\nreaches 800 pixels. This value can be modified using <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.responsivebreakpoint\">Facet.options.responsiveBreakpoint</a>.</p>\n"
	},
	{
		"name": "Facet.options.enableSettings",
		"comment": "<p>Specifies whether to show the facet settings menu.<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "Facet.options.enableSettingsFacetState",
		"comment": "<p>Specifies if the save state menu option is available on the facet setting menu.<br/>\nOf course <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\">Facet.options.enableSettings</a> needs to be true.<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "Facet.options.enableTogglingOperator",
		"comment": "<p>Specifies whether the user is allowed to toggle between OR and AND mode, using an icon in the top right corner of the facet.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Facet.options.facetSearchDelay",
		"comment": "<p>Specifies the delay (in milliseconds) before a search is sent to the server when the user starts typing in the facet search box.<br/>\nUsing a smaller value means that results will arrive faster, but it increases the chances that many of the requests sent to the server get cancelled as the user continues typing in characters.<br/>\nDefault is 100</p>\n"
	},
	{
		"name": "Facet.options.facetSearchIgnoreAccents",
		"comment": "<p>Specifies if the accents are ignored in the facet search.<br/>\nThe default value is false</p>\n"
	},
	{
		"name": "Facet.options.field",
		"comment": "<p>Specifies the index field whose values will be use in the facet.<br/>\nThis require the given field to be configured correctly in the index as a facet field.<br/>\nThis is a required option and cannot be omitted, otherwise the facet component will not work.</p>\n"
	},
	{
		"name": "Facet.options.headerIcon",
		"comment": "<p>Specifies the css class to change the facet header icon.<br/></p>\n"
	},
	{
		"name": "Facet.options.id",
		"comment": "<p>Specifies a unique identifier for a facet. This identifier will be used to save the facet state in the url hash, for example.<br/>\nOptional, since the default will be the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a> option.<br/>\nIf you have two facets with the same field on the same page, you should specify an id for at least one of those two facets.<br/>\nThat id need to be unique on the page.</p>\n"
	},
	{
		"name": "Facet.options.includeInBreadcrumb",
		"comment": "<p>Specifies if the facet should push data to the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>.<br/>\nThe default value is true</p>\n"
	},
	{
		"name": "Facet.options.includeInOmnibox",
		"comment": "<p>Specifies if the facet should push data to the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>.<br/>\nIt can have a real negative impact on index performance.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Facet.options.injectionDepth",
		"comment": "<p>Specifies the injection depth that will be used for the group by operation.<br/>\nThe injection depth determines how many results are scanned in the index to ensure all potential facet values are listed. Increasing this value enhances the accuracy of the listed values, at the cost of performance.<br/>\nThe default value is 1000.</p>\n"
	},
	{
		"name": "Facet.options.isMultiValueField",
		"comment": "<p>Specifies if the field is configured in the index as a multi value field (meaning: comma separated values).<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "Facet.options.lookupField",
		"comment": "<p>Specifies the field whose values will be displayed in the facet.<br/></p>\n"
	},
	{
		"name": "Facet.options.numberOfValues",
		"comment": "<p>Specifies the maximum number of field values that will be displayed by default in the facet, before the user click on &quot;More&quot;.<br/>\nThe default value is 5.</p>\n"
	},
	{
		"name": "Facet.options.numberOfValuesInBreadcrumb",
		"comment": "<p>Specifies the maximum number of values that the facet should display in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>, before outputting a &quot;See more&quot; button.<br/>\nDefault is 5 on desktop, 3 on mobile</p>\n"
	},
	{
		"name": "Facet.options.numberOfValuesInFacetSearch",
		"comment": "<p>Specifies the number of values displayed in the facet search results popup.<br/>\nThe default value is 15.</p>\n"
	},
	{
		"name": "Facet.options.numberOfValuesInOmnibox",
		"comment": "<p>Specifies the number of values to populate the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> with.<br/>\nOf course, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.includeinomnibox\">Facet.options.includeInOmnibox</a> option needs to be &quot;true&quot;.<br/>\nIt can have a real negative impact on index performance.<br/>\nThe default value is 5 on desktop, 3 on mobile.</p>\n"
	},
	{
		"name": "Facet.options.paddingContainer",
		"comment": "<p>Specifies the parent container of the facets.<br/>\nUsed for the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.preserveposition\">Facet.options.preservePosition</a>.<br/>\nThe default value is element.parentElement.</p>\n"
	},
	{
		"name": "Facet.options.pageSize",
		"comment": "<p>Specifies the number of additional results to fetch when clicking on &quot;More&quot; in the facet search.<br/>\nThe default value is 10.</p>\n"
	},
	{
		"name": "Facet.options.preservePosition",
		"comment": "<p>Specifies whether the facet should remain stable in its current position in the viewport while the mouse is over it.<br/>\nWhenever values are selected in a facet, a new query is automatically performed. This new query might cause other elements in the page to be resized (typically other facets above the one being used).<br/>\nWhen this option is enabled, the facet will adjust the scroll amount of the page to ensure that it does not move relative to the mouse when the results are updated.<br/>\nIn some cases, the facet will also add margin to the scrollContainer, if scrolling alone is not enough to preserve position.<br/>\nThis is the option that will add a div &#39;coveo-topSpace&#39; / &#39;coveo-bottomSpace` around the facet container.\nThe default value is true.</p>\n"
	},
	{
		"name": "Facet.options.responsiveBreakpoint",
		"comment": "<p>Specifies the width of the search interface, in pixels, at which the facets will go into responsive mode. The responsive mode will\nbe triggered when the width is equal or below this value. The search interface corresponds to the element with the class\n<code>CoveoSearchInterface</code>.\nThe default value is <code>800</code>.</p>\n"
	},
	{
		"name": "Facet.options.scrollContainer",
		"comment": "<p>Specifies the HTML element (through a CSS selector) whose scroll amount the facet should adjust to preserve its position <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.preserveposition\">Facet.options.preservePosition</a> when results are updated.<br/>\nThe default value is document.body.</p>\n"
	},
	{
		"name": "Facet.options.showIcon",
		"comment": "<p>Specifies whether an icon is displayed next to each facet value.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Facet.options.sortCriteria",
		"comment": "<p>Specifies the criteria used to sort facet values.<br/>\nSee <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> for the list of available values.<br/>\nThe default value is the first value of <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.availablesorts\">Facet.options.availableSorts</a> list, or &#39;occurrences&#39; if there&#39;s none specified.</p>\n"
	},
	{
		"name": "Facet.options.title",
		"comment": "<p>Specifies the title displayed at the top of the facet.<br/>\nDefault is the localized string for &quot;No Title&quot;</p>\n"
	},
	{
		"name": "Facet.options.useAnd",
		"comment": "<p>Specifies whether the filter generated when multiple values are selected uses the AND operator, meaning that only documents having all selected values matches the resulting query.<br/>\nBy default filters are using the OR operator, and the resulting query matches all documents with at least one of the selected values.</p>\n"
	},
	{
		"name": "Facet.options.valueCaption",
		"comment": "<p>Specifies a JSON object describing a mapping of facet values to desired captions.</p>\n"
	},
	{
		"name": "Facet.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Facet.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Facet.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Facet.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Facet.facetSearch",
		"comment": "<p>Render and handle the facet search part of the component</p>\n"
	},
	{
		"name": "Facet.facetSettings",
		"comment": "<p>Render and handle the facet settings part of the component</p>\n"
	},
	{
		"name": "Facet.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Facet.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Facet.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Facet.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Facet.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Facet.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Facet.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Facet.constructor",
		"comment": "<p>Create a new Facet component, bind multiple query events as well</p>\n"
	},
	{
		"name": "FacetSlider",
		"comment": "<p>The FacetSlider component allows to create a facet that renders a slider widget to filter on a range of numerical values\nrather than the classic multi-select facet with a label and a count for each values.<br/>\nNote that this component does <em>NOT</em> inherit from a standard <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>, and thus does not offer all the same options.\nAlso note that many options for the slider component cannot be set as an HTML attribute on the component, and must be configured in javascript</p>\n"
	},
	{
		"name": "FacetSlider.options",
		"comment": "<p>The component options</p>\n"
	},
	{
		"name": "FacetSlider.options.dateField",
		"comment": "<p>Specifies whether the field for which you are requesting a range is a date field.<br/>\nThis allow the facet to correctly build the outgoing group by request, as well as render it correctly.<br/></p>\n"
	},
	{
		"name": "FacetSlider.options.dateFormat",
		"comment": "<p>Specifies the format used to display values if they are date.<br/>\nDefault value is <code>MMM dd, yyyy</code></p>\n"
	},
	{
		"name": "FacetSlider.options.displayAsPercent",
		"comment": "<p>Specifies the percentage caption that you want to display the field values.<br/>\nAvailable options are :</p>\n<ul>\n  <li>enable : (data-display-as-percent-enable) <code>boolean</code> : Specifies wether the caption should be displayed as a percentage. Default is <code>false</code></li>\n  <li>separator : (data-display-as-percent-separator) <code>string</code> : Specifies the character(s) to use as a separator in the caption. Default is -.</li>\n</ul>"
	},
	{
		"name": "FacetSlider.options.displayAsValue",
		"comment": "<p>Specifies the caption that you want to display the field values.<br/>\nAvailable options are :</p>\n<ul>\n  <li>enable : (data-display-as-value-enable) <code>boolean</code> : Specifies wether the caption should be displayed as a value. Default is <code>true</code></li>\n  <li>unitSign : (data-display-as-value-unit-sign) <code>string</code> : Specifies the unit sign for this value.</li>\n  <li>separator : (data-display-as-value-separator) <code>string</code> : Specifies the character(s) to use as a separator in the caption. Default is -.</li>\n</ul>"
	},
	{
		"name": "FacetSlider.options.enableResponsiveMode",
		"comment": "<p>Specifies if the responsive mode should be enabled on the facets. Responsive mode will make the facet dissapear and instead be\navailaible using a dropdown button. Responsive facets are enabled when the width of the element the search interface is bound to\nreaches 800 pixels. This value can be modified using Facet..optionsresponsiveBreakpoint.\nThe default value is <code>true</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.end",
		"comment": "<p>Specifies the ending boundary of the slider.<br/>\nDates values are rounded on the year when the field used is a date type.<br/>\nOptional: Takes the highest value available in the index by default.</p>\n"
	},
	{
		"name": "FacetSlider.options.excludeOuterBounds",
		"comment": "<p>Specifies if you want to exclude the outer bounds of your slider in the generated query, when they are not active.<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "FacetSlider.options.field",
		"comment": "<p>Specifies the index field whose values will be use in the facet.<br/>\nThis require the given field to be configured correctly in the index as a facet field.<br/>\nThis is a required option and cannot be omitted, otherwise the facet component will not work.</p>\n"
	},
	{
		"name": "FacetSlider.options.getSteps",
		"comment": "<p>Specifies a function that will generate the steps for the slider. The function receives the slider boundaries must return an array of number (the steps).</p>\n"
	},
	{
		"name": "FacetSlider.options.graph",
		"comment": "<p>Specifies that you wish to display a small graph on top of the slider.<br/>\nAvailable options are :</p>\n"
	},
	{
		"name": "FacetSlider.options.id",
		"comment": "<p>Specifies a unique identifier for a facet. This identifier will be used to save the facet state in the url hash, for example.<br/>\nOptional, since the default will be the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.field\">FacetSlider.options.field</a> option.<br/>\nIf you have two facets with the same field on the same page, you should specify an id for at least one of those two facets.<br/>\nThat id need to be unique on the page.</p>\n"
	},
	{
		"name": "FacetSlider.options.queryOverride",
		"comment": "<p>Specifies the query to filter automatic minimum and maximum range of the slider.<br/>\nThis is especially useful for date range, where the index may contain values which are not set, and thus the automatic range will return value from the year 1400 (min date from the boost c++ library)<br/>\nCan be used to do something like queryOverride : @date&gt;2000/01/01 or some arbitrary date which will filter out unwanted values</p>\n"
	},
	{
		"name": "FacetSlider.options.rangeSlider",
		"comment": "<p>Specifies whether you want a slider with two buttons, or only one.<br/>\nOptional. By default only one button appears in the slider.</p>\n"
	},
	{
		"name": "FacetSlider.options.responsiveBreakpoint",
		"comment": "<p>Specifies the width of the search interface, in pixels, at which the facets will go into responsive mode. The responsive mode will\nbe triggered when the width is equal or below this value. The search interface corresponds to the element with the class\n<code>CoveoSearchInterface</code>.\nThe default value is <code>800</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.rounded",
		"comment": "<p>Specifies to how many decimal digit displayed numerical values are rounded.<br/>\nOptional. By default, the number rounds to 0 decimal digits.</p>\n"
	},
	{
		"name": "FacetSlider.options.start",
		"comment": "<p>Specifies the starting boundary of the slider.<br/>\nDates values are rounded on the year when the field used is a date type.<br/>\nOptional: Takes the lowest value available in the index by default.</p>\n"
	},
	{
		"name": "FacetSlider.options.steps",
		"comment": "<p>Specifies the number of steps that you want in your slider.<br/>\nFor example, if your range is [ 0 , 100 ] and you specify 10 steps, then the end user is allowed to move the slider only to the values [ 0, 10, 20. 30 ... , 100 ].<br/>\nOptional. By default the slider will allow all values.</p>\n"
	},
	{
		"name": "FacetSlider.options.title",
		"comment": "<p>The title on top of the facet component.<br/>\nDefault value is the localized string for &#39;No title&#39;</p>\n"
	},
	{
		"name": "FacetSlider.options.valueCaption",
		"comment": "<p>Specifies a function that will generate the caption for the slider. Receives the current slider values (number[]) and must return the caption (string).</p>\n"
	},
	{
		"name": "FacetSlider.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FacetSlider.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "FacetSlider.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetSlider.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "FacetSlider.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "FacetSlider.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FacetSlider.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetSlider.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "FacetSlider.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "FacetSlider.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FacetSlider.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FacetSlider.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "FieldSuggestions",
		"comment": "<p>This component provides query suggestions based on a particular facet field.\nFor example, this can be used to provide auto-complete suggestions when you type in document titles.</p>\n"
	},
	{
		"name": "FieldSuggestions.options.field",
		"comment": "<p>Specifies the field from which suggestions are provided.<br/>\nThis is a required option</p>\n"
	},
	{
		"name": "FieldSuggestions.options.headerTitle",
		"comment": "<p>Specifies the title in the Omnibox for this group of suggestions. This option is not available when using the Lightning Friendly Theme, which is the default design.</p>\n"
	},
	{
		"name": "FieldSuggestions.options.numberOfSuggestions",
		"comment": "<p>Specifies the number of suggestions that should be rendered in the omnibox.<br/>\nDefault value is <code>5</code></p>\n"
	},
	{
		"name": "FieldSuggestions.options.omniboxZIndex",
		"comment": "<p>Specifies the position at which the suggestions should render when there are multiple suggestions providers. (eg : <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> or <a href=\"https://coveo.github.io/search-ui/components/analyticssuggestions.html\">AnalyticsSuggestions</a>).<br/>\nThe default value is <code>51</code></p>\n"
	},
	{
		"name": "FieldSuggestions.options.onSelect",
		"comment": "<p>The event handler function to execute when a value is selected in the Omnibox. By default, the query box text is replaced by what was selected and a new query is executed. You can however replace this default text by providing a callback function to execute when the value is selected.\nFor example:</p>\n"
	},
	{
		"name": "FieldSuggestions.options.queryOverride",
		"comment": "<p>Specifies a query override (any query expression) which should be applied when retrieving suggestions</p>\n"
	},
	{
		"name": "FieldSuggestions.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FieldSuggestions.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "FieldSuggestions.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldSuggestions.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "FieldSuggestions.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "FieldSuggestions.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FieldSuggestions.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldSuggestions.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "FieldSuggestions.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "FieldSuggestions.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FieldSuggestions.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FieldSuggestions.constructor",
		"comment": "<p>Create a new FieldSuggestions component</p>\n"
	},
	{
		"name": "FieldTable",
		"comment": "<p>This component is used to display a set of <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html\">FieldValue</a> components in a table which\ncan be optionally expanded and minimized.<br/>\nAutomatically, it will take care of not displaying empty field values.</p>\n"
	},
	{
		"name": "FieldTable.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FieldTable.options.allowMinimization",
		"comment": "<p>Specifies whether to allow the minimization (collapsing) of the FieldTable.<br/>\nThis creates a &#39;minimize&#39; and &#39;expand&#39; link above the table.</p>\n"
	},
	{
		"name": "FieldTable.options.expandedTitle",
		"comment": "<p>Specifies the caption to show on the minimize link (when the table is expanded).<br/>\nBy default, it is set to the localized version of &quot;Details&quot;.</p>\n"
	},
	{
		"name": "FieldTable.options.minimizedByDefault",
		"comment": "<p>Specifies whether the table is minimized by default.</p>\n"
	},
	{
		"name": "FieldTable.options.minimizedTitle",
		"comment": "<p>Specifies the caption to show on the expand link (when the table is minimized).<br/>\nBy default, it is set to the localized version of &quot;Details&quot;.</p>\n"
	},
	{
		"name": "FieldTable.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FieldTable.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "FieldTable.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldTable.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "FieldTable.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "FieldTable.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FieldTable.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldTable.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "FieldTable.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "FieldTable.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FieldTable.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FieldTable.constructor",
		"comment": "<p>Create a new FieldTable</p>\n"
	},
	{
		"name": "FieldValue",
		"comment": "<p>This component can be used as part of a result template to display the value of a field\nassociated with the current search result.<br/>\nThis component is usually located inside a <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html\">FieldTable</a>.<br/>\nA common use of this component is to display a specific field value, when that field also\nhappens to be a facet. When the field value is clicked on, the corresponding facet is activated.</p>\n"
	},
	{
		"name": "FieldValue.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FieldValue.options.displaySeparator",
		"comment": "<p>Specifies the string used to display multi-value fields in the UI.\nIt is inserted between the displayed values.\nThe default value is <code>, </code>.</p>\n"
	},
	{
		"name": "FieldValue.options.facet",
		"comment": "<p>Specifies the facet to be toggled when the component is clicked on.<br/>\nWhen no value is specified, the value of the <code>field</code> option is used.<br/>\nIf the facet id is custom (e.g. not the same name as its field), you must specify\nmanually this option in order to link the correct facet.</p>\n"
	},
	{
		"name": "FieldValue.options.field",
		"comment": "<p>Specifies the field to be displayed by the FieldValue.<br/>\nThis field is required.</p>\n"
	},
	{
		"name": "FieldValue.options.helper",
		"comment": "<p>Specifies the helper to be used by the FieldValue to display its content.<br/>\nA few helpers exist by default (see <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html\">ICoreHelpers</a>), and new ones can be\ncustom-created (see <a href=\"https://coveo.github.io/search-ui/classes/templatehelpers.html\">TemplateHelpers</a>).</p>\n"
	},
	{
		"name": "FieldValue.options.helperOptions",
		"comment": "<p>Specifies the options to call on the specified helper.<br/></p>\n"
	},
	{
		"name": "FieldValue.options.htmlValue",
		"comment": "<p>Specifies if the content to display is an HTML element.<br/>\nThe default value is <code>false</code></p>\n"
	},
	{
		"name": "FieldValue.options.separator",
		"comment": "<p>Specifies the string used to split multi-value fields from the index.\nThe default value is <code>;</code>.</p>\n"
	},
	{
		"name": "FieldValue.options.splitValues",
		"comment": "<p>Specifies if the field value is to be split at each <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.separator\">FieldValue.options.separator</a>.\nThis is useful for splitting groups by a facet field.<br/>\nThe values displayed are split by the <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.displayseparator\">FieldValue.options.displaySeparator</a>.<br/>\nThe default value is <code>false</code>.</p>\n"
	},
	{
		"name": "FieldValue.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FieldValue.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "FieldValue.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldValue.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "FieldValue.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "FieldValue.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FieldValue.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldValue.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "FieldValue.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "FieldValue.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FieldValue.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FieldValue.constructor",
		"comment": "<p>Build a new FieldValue</p>\n"
	},
	{
		"name": "Folding",
		"comment": "<p>This component is used to display search results that share a common field hierarchically.\nIt is typically used to display email conversations and message board threads.\nThe different messages in a given conversation typically have a unique conversation ID.\nGiven that this ID is indexed in a field, you can use it to fold search results</p>\n"
	},
	{
		"name": "Folding.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Folding.options.childField",
		"comment": "<p>Specifies the field that determines that a result is a child of another top result.<br/>\nThe default value is <code>@topparentid</code></p>\n"
	},
	{
		"name": "Folding.options.enableExpand",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query\nto load all the conversation of a given thread.</p>\n"
	},
	{
		"name": "Folding.options.expandExpression",
		"comment": "<p>Specifies a customized constant expression to send when querying the expanded results.</p>\n"
	},
	{
		"name": "Folding.options.field",
		"comment": "<p>The name of the field on which the folding is done.<br/>\nThis option is required.</p>\n"
	},
	{
		"name": "Folding.options.getMoreResults",
		"comment": "<p>This function manages folding of all results.</p>\n"
	},
	{
		"name": "Folding.options.getResult",
		"comment": "<p>This function manages folding individually for each result.</p>\n"
	},
	{
		"name": "Folding.options.maximumExpandedResults",
		"comment": "<p>Specifies the maximum number of expanded results.</p>\n"
	},
	{
		"name": "Folding.options.parentField",
		"comment": "<p>Specifies the field that determines that a result is a top result containing other child results<br/>\nThe default value is <code>@syscontainsattachment</code></p>\n"
	},
	{
		"name": "Folding.options.range",
		"comment": "<p>The number of child results to fold.</p>\n"
	},
	{
		"name": "Folding.options.rearrange",
		"comment": "<p>Specifies how the top result and its related child results, following the sort criteria format\n(<code>date ascending</code>, <code>@somefield ascending</code>, etc.).</p>\n"
	},
	{
		"name": "Folding.options.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Folding.options.options.childField",
		"comment": "<p>Specifies the field that determines that a result is a child of another top result.<br/>\nThe default value is <code>@topparentid</code></p>\n"
	},
	{
		"name": "Folding.options.options.enableExpand",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query\nto load all the conversation of a given thread.</p>\n"
	},
	{
		"name": "Folding.options.options.expandExpression",
		"comment": "<p>Specifies a customized constant expression to send when querying the expanded results.</p>\n"
	},
	{
		"name": "Folding.options.options.field",
		"comment": "<p>The name of the field on which the folding is done.<br/>\nThis option is required.</p>\n"
	},
	{
		"name": "Folding.options.options.getMoreResults",
		"comment": "<p>This function manages folding of all results.</p>\n"
	},
	{
		"name": "Folding.options.options.getResult",
		"comment": "<p>This function manages folding individually for each result.</p>\n"
	},
	{
		"name": "Folding.options.options.maximumExpandedResults",
		"comment": "<p>Specifies the maximum number of expanded results.</p>\n"
	},
	{
		"name": "Folding.options.options.parentField",
		"comment": "<p>Specifies the field that determines that a result is a top result containing other child results<br/>\nThe default value is <code>@syscontainsattachment</code></p>\n"
	},
	{
		"name": "Folding.options.options.range",
		"comment": "<p>The number of child results to fold.</p>\n"
	},
	{
		"name": "Folding.options.options.rearrange",
		"comment": "<p>Specifies how the top result and its related child results, following the sort criteria format\n(<code>date ascending</code>, <code>@somefield ascending</code>, etc.).</p>\n"
	},
	{
		"name": "Folding.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Folding.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Folding.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Folding.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Folding.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Folding.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Folding.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Folding.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Folding.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Folding.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Folding.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Folding.constructor",
		"comment": "<p>Create a new Folding component</p>\n"
	},
	{
		"name": "FollowItem",
		"comment": "<p>This component allows the user to follow a particular result.\nBy following a result, the user will receive emails informing him when the result has changed.\nA <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component must be present in the page for this component to work.</p>\n"
	},
	{
		"name": "FollowItem.options",
		"comment": "<p>The options for the follow item component</p>\n"
	},
	{
		"name": "FollowItem.options.modifiedDateField",
		"comment": "<p>Specifies the modifiedDateField to use when sending the follow query request.\nThis default value is undefined.</p>\n"
	},
	{
		"name": "FollowItem.options.watchedFields",
		"comment": "<p>Specifies the watchedFields to use when sending the follow query request.\nThis default value is undefined.</p>\n"
	},
	{
		"name": "FollowItem.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FollowItem.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "FollowItem.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FollowItem.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "FollowItem.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "FollowItem.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FollowItem.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FollowItem.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "FollowItem.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "FollowItem.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FollowItem.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FollowItem.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "HiddenQuery",
		"comment": "<p>This component job is to handle an &#39;hidden&#39; query parameter.<br/>\nConcretely, this means that a search interface loaded with #hq=foo&amp;hd=bar will add &#39;foo&#39; as an expression to the query (&#39;hq&#39;=&gt; hidden query) and render &#39;bar&#39; in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a><br/></p>\n"
	},
	{
		"name": "HiddenQuery.options",
		"comment": "<p>Possible options for the HiddenQuery component</p>\n"
	},
	{
		"name": "HiddenQuery.options.maximumDescriptionLength",
		"comment": "<p>Specifies a maximum character length for a description.<br/>\nAfter this length, the component will slice the descrption and add [...].<br/>\nDefault value is 100</p>\n"
	},
	{
		"name": "HiddenQuery.options.title",
		"comment": "<p>Specifies a title that will appear in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> when it is populated by the HiddenQuery component.<br/>\nBy default, it is a localized string for &#39;Additional filters :&#39;</p>\n"
	},
	{
		"name": "HiddenQuery.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "HiddenQuery.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "HiddenQuery.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HiddenQuery.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "HiddenQuery.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "HiddenQuery.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "HiddenQuery.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HiddenQuery.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "HiddenQuery.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "HiddenQuery.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "HiddenQuery.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "HiddenQuery.constructor",
		"comment": "<p>Create a new HiddenQuery component, which bind multiple events (building query as well as <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> events</p>\n"
	},
	{
		"name": "Icon",
		"comment": "<p>An icon component is a Result template component which outputs the corresponding icon for a give filetype. It uses the\navailable icons in the framework, and if no suitable one are found, it fallback on a generic icon.</p>\n"
	},
	{
		"name": "Icon.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Icon.options.labelValue",
		"comment": "<p>Setting this option allow to set the label that should be displayed.<br/>\nDefault value is <code>undefined</code>, and the framework will determine the label that will be displayed.</p>\n"
	},
	{
		"name": "Icon.options.small",
		"comment": "<p>Setting this value to true will output the smaller version of the auto-generated icon.<br/>\nDefault is <code>false</code>.</p>\n"
	},
	{
		"name": "Icon.options.value",
		"comment": "<p>Setting this value will tell the Icon component to output this value as it&#39;s css class, instead of the auto-selected one.<br/>\nDefault is <code>undefined</code>, and the framework will determine an icon from the result filetype.</p>\n"
	},
	{
		"name": "Icon.options.withLabel",
		"comment": "<p>Setting this to true will force the caption/label to appear.<br/>\nSetting this to false will force the caption/label to never appear.<br/>\nDefault value is <code>undefined</code>, and the framework will determine if a label needs to be displayed.</p>\n"
	},
	{
		"name": "Icon.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Icon.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Icon.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Icon.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Icon.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Icon.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Icon.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Icon.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Icon.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Icon.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Icon.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Icon.constructor",
		"comment": "<p>Create a new Icon component</p>\n"
	},
	{
		"name": "Matrix",
		"comment": "<p>This component uses the values of two fields (row and column) to display the results of the specified computed field in a table.<br/>\nThe values to use for the columns are specified by the user while those for the rows are obtained by a groupBy operation performed at the same time as the main query (see <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>).<br/>\nLike a <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>, selecting a cell allows the user to drill down inside results by restricting the row field and the column field to match the values of the selected cell.</p>\n"
	},
	{
		"name": "Matrix.options",
		"comment": "<p>The possible options for the component</p>\n"
	},
	{
		"name": "Matrix.options.cellFontSize",
		"comment": "<p>Specifies the font-size of the cells.<br/>\nThis option is mainly used to reduce the cell font-size when some values are cropped because there are too many columns in the matrix.<br/>\nOther options to fix this problem are to remove less important columns or modify the CSS to give more place to the matrix.</p>\n"
	},
	{
		"name": "Matrix.options.columnField",
		"comment": "<p>Specifies the field to use for the columns.<br/>\nRequired options, otherwise the component will not work</p>\n"
	},
	{
		"name": "Matrix.options.columnFieldValues",
		"comment": "<p>Specifies the field values to use for each column.<br/>\nIf not specified, you won&#39;t generate any column except one for the &#39;Total&#39; column.</p>\n"
	},
	{
		"name": "Matrix.options.columnHeader",
		"comment": "<p>Specifies the label for the first column on the left, as a description of the columnField.</p>\n"
	},
	{
		"name": "Matrix.options.columnLabels",
		"comment": "<p>Specifies the labels values to use for each column.<br/>\nThe array should match the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.columnfieldvalues\">Matrix.options.columnFieldValues</a>.</p>\n"
	},
	{
		"name": "Matrix.options.computedField",
		"comment": "<p>Specifies the field whose computed values are displayed in the cells.</p>\n"
	},
	{
		"name": "Matrix.options.computedFieldFormat",
		"comment": "<p>Specifies how to format the values resulting from a computed field operation.<br/>\nThe available formats are the same as those for the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldformat\">Facet.options.computedFieldFormat</a>.<br/>\nThe formats available are defined by the Globalize library. The most common used formats are:</p>\n<p><ul>\n  <li>c0 - Formats the value as a currency.</li>\n  <li>n0 - Formats the value as an integer.</li>\n  <li>n2 - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\nThe default value is c0.</p>\n"
	},
	{
		"name": "Matrix.options.computedFieldOperation",
		"comment": "<p>Specifies the type of aggregate operation to use on the computed field.<br/>\nThe available values are the same as those for the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldoperation\">Facet.options.computedFieldOperation</a>.<br/>\nThe available values are:</p>\n<p><ul>\n  <li>sum - Computes the sum of the computed field values.</li>\n  <li>average - Computes the average of the computed field values.</li>\n  <li>minimum - Finds the minimum value of the computed field values.</li>\n  <li>maximum - Finds the maximum value of the computed field values.</li>\n</ul>\nThe default value is sum.</p>\n"
	},
	{
		"name": "Matrix.options.enableColumnTotals",
		"comment": "<p>Specifies whether to add a total row which contains the total for each column.<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "Matrix.options.enableHoverPreview",
		"comment": "<p>Specifies whether to show a preview popup of cell results on hover. The default value is true.</p>\n"
	},
	{
		"name": "Matrix.options.enableRowTotals",
		"comment": "<p>Specifies whether to add a total column which contains the total for each row.<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "Matrix.options.maximumNumberOfRows",
		"comment": "<p>Specifies the maximum number of rows to display in the matrix.<br/>\nThe default value is 10.</p>\n"
	},
	{
		"name": "Matrix.options.maximumNumberOfValuesInGroupBy",
		"comment": "<p>Specifies the maximum number of results to include in the group by requests for the columns.<br/>\nThis value should always be greater than <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.maximumnumberofrows\">Matrix.options.maximumNumberOfRows</a>. If it is too small, some results won&#39;t be displayed in the matrix.<br/>\nThe default value is 100.</p>\n"
	},
	{
		"name": "Matrix.options.previewDelay",
		"comment": "<p>Specifies the delay (in milliseconds) before the query used to get the preview results is sent.<br/>\nThe default value is 500.</p>\n"
	},
	{
		"name": "Matrix.options.previewMaxWidth",
		"comment": "<p>Specifies the maximum width of the preview pop-up.<br/>\nThe default value is 500px.</p>\n"
	},
	{
		"name": "Matrix.options.previewMinWidth",
		"comment": "<p>Specifies the minimum width of the preview pop-up.<br/>\nThe default value is 0.</p>\n"
	},
	{
		"name": "Matrix.options.previewSortCriteria",
		"comment": "<p>Specifies the criteria to use to sort the results of the hover preview.<br/>\nThe available sort criteria values are the same as those of the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a>.\nPossible values are :</p>\n<p><ul>\n   <li> relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.</li>\n   <li> dateascending / datedescending : Sort using the value of the @date field, which is typically the last modification date of an item in the index.</li>\n   <li> qre : Sort using only the weights applied through ranking expressions. This is much like using Relevancy except that automatic weights based on keyword proximity etc, are not computed.<li/>\n   <li> nosort : Do not sort the results. The order in which items are returned is essentially random.</li>\n   <li> fieldascending / fielddescending : Sort using the value of a custom field.</li>\n</ul>\nThe default value is &#39;FieldDescending&#39;.</p>\n"
	},
	{
		"name": "Matrix.options.previewSortField",
		"comment": "<p>Specifies the field to use when the previewSortCriteria option is FieldDescending or FieldAscending.<br/>\nBy default, the value of the computedField option is used.</p>\n"
	},
	{
		"name": "Matrix.options.previewTemplate",
		"comment": "<p>Specifies the ID or CSS selector of the template to use to render the results of the hover preview.<br/>\nEg : <code>data-template-id=&#39;TemplateId&#39;</code> , <code>data-template-selector=&#39;.templateSelector&#39;</code><br/></p>\n"
	},
	{
		"name": "Matrix.options.rowField",
		"comment": "<p>Specifies the field to use for the rows.<br/>\nRequired options, otherwise the component will not work</p>\n"
	},
	{
		"name": "Matrix.options.sortCriteria",
		"comment": "<p>Specifies the criteria used to sort the rows. The available sort criteria are the same as those for the Group By parameter (see Group By Parameters - sortCriteria).<br/>\nThe default value is &#39;ComputedFieldDescending&#39;.</p>\n"
	},
	{
		"name": "Matrix.options.title",
		"comment": "<p>Specifies the text to display at the top of the matrix.</p>\n"
	},
	{
		"name": "Matrix.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Matrix.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Matrix.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Matrix.data",
		"comment": "<p>Holds the data for the matrix</p>\n"
	},
	{
		"name": "Matrix.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Matrix.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Matrix.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Matrix.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Matrix.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Matrix.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Matrix.selectedColumnValue",
		"comment": "<p>The currently selected column value, or undefined if nothing is selected</p>\n"
	},
	{
		"name": "Matrix.selectedRowValue",
		"comment": "<p>The currently selected row value, or undefined if nothing is selected</p>\n"
	},
	{
		"name": "Matrix.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Matrix.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Matrix.constructor",
		"comment": "<p>Create a new matrix, check if the options are valid and makes sense. Bind query events.</p>\n"
	},
	{
		"name": "Omnibox",
		"comment": "<p>This component is very similar to the simpler <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> Component and support all the same options/behavior except for the search-as-you-type feature.<br/>\nIn addition, it takes care of adding a type-ahead capability. The type-ahead and the suggestions it displays are customizable and extensible by any custom component.<br/>\nThe type-ahead is configurable by activating addon which are provided OOTB (facets, analytics suggestions, reveal suggestions, and advanced coveo syntax suggestions).<br/>\nIt is also possible for external code to provide suggestions.</p>\n"
	},
	{
		"name": "Omnibox.options",
		"comment": "<p>The options for the omnibox</p>\n"
	},
	{
		"name": "Omnibox.options.enableFieldAddon",
		"comment": "<p>Specifies whether the field addon should be enabled.<br/>\nThe field addon allows the search box to highlight and complete field syntax.<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "Omnibox.options.enableQueryExtensionAddon",
		"comment": "<p>Specifies whether the query extension addon should be enabled.<br/>\nThis allows the omnibox to complete the syntax for query extensions.<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "Omnibox.options.enableRevealQuerySuggestAddon",
		"comment": "<p>Specifies whether the reveal query suggestions should be enabled.<br/>\nThis implies that your integration has a proper reveal integration configured.<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "Omnibox.options.enableSearchAsYouType",
		"comment": "<p>Specifies whether a new query is automatically triggered whenever the user types new text inside the query box.<br/>\nActivate this as well a inline + reveal suggestions for a cool effect !<br/>\nThe default is false.</p>\n"
	},
	{
		"name": "Omnibox.options.inline",
		"comment": "<p>Specifies that suggestions appearing in the omnibox should push the result down, instead of appearing over the results.<br/>\nActivate this as well a searchAsYouType + reveal suggestions for a cool effect !<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "Omnibox.options.omniboxTimeout",
		"comment": "<p>Specifies a timeout before rejecting suggestions in the omnibox.<br/>\nDefault value is 2000 (2 seconds)</p>\n"
	},
	{
		"name": "Omnibox.options.placeholder",
		"comment": "<p>Specifies a placeholder for input</p>\n"
	},
	{
		"name": "Omnibox.options.searchAsYouTypeDelay",
		"comment": "<p>When search as you type is enabled, specifies the delay in milliseconds before a new query is triggered when the user types new text inside the query box.<br/>\nThe default value is 2000 milliseconds.</p>\n"
	},
	{
		"name": "Omnibox.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Omnibox.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Omnibox.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Omnibox.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Omnibox.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Omnibox.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Omnibox.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Omnibox.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Omnibox.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Omnibox.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Omnibox.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Omnibox.constructor",
		"comment": "<p>Create a new omnibox with, enable required addons, and bind events on letious query events</p>\n"
	},
	{
		"name": "Pager",
		"comment": "<p>This component attaches itself to a div and allows users to navigate through the different result pages.<br/>\nIt takes care of triggering a query with the correct range whenever a user selects a page or uses the navigation buttons (Previous, Next).</p>\n"
	},
	{
		"name": "Pager.options",
		"comment": "<p>The options for the Pager</p>\n"
	},
	{
		"name": "Pager.options.enableNavigationButton",
		"comment": "<p>Specifies whether the Previous and Next buttons appear at each end of the pager when appropriate.<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "Pager.options.maxNumberOfPages",
		"comment": "<p>Specifies the maximum number of pages that will be displayed if enough results are available.<br/>\nThe default value is 100 pages.<br/>\nThis property is typically set when the default number of accessible results from the index has been changed from it&#39;s default value of 1000. (So 10 per page X 100 maximumNumberOfPage)</p>\n"
	},
	{
		"name": "Pager.options.numberOfPages",
		"comment": "<p>Specifies how many page links to display in the pager.<br/>\nThe default value is 5 pages on desktop, 3 on mobile</p>\n"
	},
	{
		"name": "Pager.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Pager.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Pager.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Pager.currentPage",
		"comment": "<p>The current page (1 based index)</p>\n"
	},
	{
		"name": "Pager.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Pager.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Pager.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Pager.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Pager.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Pager.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Pager.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Pager.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Pager.constructor",
		"comment": "<p>Create a new Pager. Bind multiple query events (new query, building query, query success).<br/>\nRender itself on every query success.</p>\n"
	},
	{
		"name": "PreferencesPanel",
		"comment": "<p>A panel that is displayed inside the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component, and allows end user to select some customization for their interface, saved in local storage.</p>\n"
	},
	{
		"name": "PreferencesPanel.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "PreferencesPanel.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "PreferencesPanel.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PreferencesPanel.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "PreferencesPanel.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "PreferencesPanel.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "PreferencesPanel.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PreferencesPanel.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "PreferencesPanel.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "PreferencesPanel.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "PreferencesPanel.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "PreferencesPanel.constructor",
		"comment": "<p>Create a new PreferencesPanel</p>\n"
	},
	{
		"name": "PrintableUri",
		"comment": "<p>This component is meant to be used inside a result template to display the URI or path to access a result.</p>\n"
	},
	{
		"name": "PrintableUri.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "PrintableUri.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "PrintableUri.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PrintableUri.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "PrintableUri.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "PrintableUri.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "PrintableUri.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PrintableUri.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "PrintableUri.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "PrintableUri.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "PrintableUri.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "PrintableUri.constructor",
		"comment": "<p>Create a new PrintableUri</p>\n"
	},
	{
		"name": "QueryDuration",
		"comment": "<p>This component is used to display the time it took to execute the query.\nWhen a <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> event is called, it shows itself and displays\nthe global duration, the index duration, the proxy duration, and the client duration in a tooltip.<br/>\nIf a <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a> event is called, it hides.</p>\n"
	},
	{
		"name": "QueryDuration.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "QueryDuration.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "QueryDuration.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "QueryDuration.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QueryDuration.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "QueryDuration.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "QueryDuration.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "QueryDuration.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QueryDuration.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "QueryDuration.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "QueryDuration.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "QueryDuration.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QueryDuration.constructor",
		"comment": "<p>Create a new QueryDuration component.</p>\n"
	},
	{
		"name": "QuerySummary",
		"comment": "<p>This component displays information about the current range of results being displayed (ex: 1-10 of 123).<br/>\nIf the query matches no documents, it will display advices and tip for the end user on how to remedy the problem.</p>\n"
	},
	{
		"name": "QuerySummary.options",
		"comment": "<p>Options for the component</p>\n"
	},
	{
		"name": "QuerySummary.options.enableSearchTips",
		"comment": "<p>Specifies whether the search tips are displayed to the end user when there are no search results.<br/>\nThe default value is <code>true</code>.</p>\n"
	},
	{
		"name": "QuerySummary.options.onlyDisplaySearchTips",
		"comment": "<p>Specifies whether to hide the information about the current range of results being displayed and only display the search tips.<br/>\nThe default value is <code>false</code>.</p>\n"
	},
	{
		"name": "QuerySummary.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "QuerySummary.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "QuerySummary.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuerySummary.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "QuerySummary.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "QuerySummary.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "QuerySummary.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuerySummary.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "QuerySummary.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "QuerySummary.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "QuerySummary.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QuerySummary.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "Querybox",
		"comment": "<p>A component that allows a user to enter a query inside an input.<br/>\nThe component will trigger a query when submitted (the &#39;Enter&#39; keypress) and log the proper analytics data.<br/>\nIt must be instantiated on a div (and not directly on an input element) : This is for styling purpose (ghost type ahead, for example).</p>\n"
	},
	{
		"name": "Querybox.options",
		"comment": "<p>The options for the Querybox.</p>\n"
	},
	{
		"name": "Querybox.options.autoFocus",
		"comment": "<p>Specifies whether the <code>QueryBox</code> gets the focus and is selected on initialization.\nThe default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Querybox.options.enableLowercaseOperators",
		"comment": "<p>If true, the or and and keywords in the query box will be treated as boolean operators for the query when they are typed in lowercase.<br/>\nThis applies for all operators<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "Querybox.options.enablePartialMatch",
		"comment": "<p>Specifies whether a query containing a large number of keywords (see partialMatchKeywords) is automatically converted to a partial match expression in order to match documents containing only a subset of the keywords (see partialMatchThreshold for defining the subset).<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Querybox.options.enableQuerySyntax",
		"comment": "<p>Specifies whether the Coveo Platform does try to interpret special query syntax such as field references in the query entered through the query box.<br/>\nThis means that a\nThe default value is true.</p>\n"
	},
	{
		"name": "Querybox.options.enableQuestionMarks",
		"comment": "<p>Specifies whether the Coveo Platform expands keywords containing question mark characters (?) to the possible matching keywords to broaden the query.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Querybox.options.enableSearchAsYouType",
		"comment": "<p>Specify if search as you type should be enabled.<br/>\nDefault to false.</p>\n"
	},
	{
		"name": "Querybox.options.enableWildcards",
		"comment": "<p>Specifies whether the Coveo Platform expands keywords containing wildcard characters (*) to the possible matching keywords to broaden the query.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Querybox.options.partialMatchKeywords",
		"comment": "<p>When partial match is enabled, specifies the minimum number of keywords that must be present in the query to activate the partial match.<br/>\nThe default value is 5.</p>\n"
	},
	{
		"name": "Querybox.options.partialMatchThreshold",
		"comment": "<p>When partial match is enabled, specifies either an absolute or percentage value indicating the minimum number of keywords a document must contain in order to match the query.<br/>\nThe default value is 50%.</p>\n"
	},
	{
		"name": "Querybox.options.placeholder",
		"comment": "<p>Specifies a placeholder for input.</p>\n"
	},
	{
		"name": "Querybox.options.searchAsYouTypeDelay",
		"comment": "<p>If enableSearchAsYouType is enabled, this option specify the delay (in ms) between a keypress and a query being triggered<br/>\nDefault to 500 ms</p>\n"
	},
	{
		"name": "Querybox.options.triggerQueryOnClear",
		"comment": "<p>Specifies whether or not to trigger a query when the searchbox is cleared.\nThe default value is true.</p>\n"
	},
	{
		"name": "Querybox.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Querybox.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Querybox.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Querybox.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Querybox.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Querybox.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Querybox.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Querybox.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Querybox.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Querybox.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Querybox.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Querybox.constructor",
		"comment": "<p>Create a new Querybox.<br/>\nCreate a new Coveo.Magicbox instance and wrap magic box method (on blur, on submit etc).<br/>\nBind event on buildingQuery and on redirection (for standalone box).</p>\n"
	},
	{
		"name": "Quickview",
		"comment": "<p>This component is meant to exist within a result template.\nIt allows to create a button/link inside the result list that opens a modal box for a given result.</p>\n"
	},
	{
		"name": "Quickview.options.alwaysShow",
		"comment": "<p>Specifies whether the quickview is always shown, even when the index body for a document is empty.<br/>\nIn such cases, the <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.contenttemplate\">Quickview.options.contentTemplate</a> specifies what appears in the quickview.<br/>\nIf there is no quickview for the document, you <em>MUST</em> specify a contentTemplate otherwise the component will throw an error when opened.</p>\n"
	},
	{
		"name": "Quickview.options.contentTemplate",
		"comment": "<p>Specifies the template to use to present the Quick View content in the modal window.<br/>\neg : <br/>\n    <div class=\"CoveoQuickview\" data-template-id=\"TemplateId\"></div>\n    <div class=\"CoveoQuickview\" data-template-selector=\".templateSelector\"></div></p>\n"
	},
	{
		"name": "Quickview.options.showDate",
		"comment": "<p>Specifies whether to show the document date in the Quick View modal window header.<br/>\nThe default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Quickview.options.size",
		"comment": "<p>Specifies the Quick View modal window size (width and height) relative to the full window.<br/>\nThe default value is 95% on a desktop and 100% on a mobile device.</p>\n"
	},
	{
		"name": "Quickview.options.title",
		"comment": "<p>Specifies the title of your choice that appears at the top of the Quick View modal window.</p>\n"
	},
	{
		"name": "Quickview.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Quickview.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Quickview.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Quickview.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Quickview.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Quickview.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Quickview.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Quickview.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Quickview.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Quickview.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Quickview.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Quickview.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "QuickviewDocument",
		"comment": "<p>The QuickviewDocument component is meant to exist within Result Templates, more specifically inside a <a href=\"https://coveo.github.io/search-ui/components/quickview.html\">Quickview</a> Component.\nThe sole purpose of this component is to include an iframe which will load the correct HTML version of the current document.\nBy default, this component is included in the default template for a <a href=\"https://coveo.github.io/search-ui/components/quickview.html\">Quickview</a> Component.</p>\n"
	},
	{
		"name": "QuickviewDocument.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "QuickviewDocument.options.maximumDocumentSize",
		"comment": "<p>Specifies the maximum document size (the preview) that should be returned by the index.</p>\n"
	},
	{
		"name": "QuickviewDocument.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "QuickviewDocument.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "QuickviewDocument.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuickviewDocument.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "QuickviewDocument.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "QuickviewDocument.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "QuickviewDocument.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuickviewDocument.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "QuickviewDocument.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "QuickviewDocument.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "QuickviewDocument.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QuickviewDocument.constructor",
		"comment": "<p>Create a new instance of the component</p>\n"
	},
	{
		"name": "ResultAttachments",
		"comment": "<p>This component is used to render attachments in a result set, for example when displaying emails.<br/>\nIt is intended to be used inside a result template when there is an active <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component\ninside the page.</p>\n"
	},
	{
		"name": "ResultAttachments.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultAttachments.options.maximumAttachmentLevel",
		"comment": "<p>Specifies the maximum nesting depth at which the component should stop rendering sub-attachments.<br/>\nThe default value is 5.</p>\n"
	},
	{
		"name": "ResultAttachments.options.resultTemplate",
		"comment": "<p>Specifies the template to use to render each of the attachments for a top result.<br/>\nBy default, it will use the template specified in a child element with a <code>&lt;script&gt;</code> tag.<br/>\nThis can be specified directly as an attribute to the element, for example :</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultFolding\"</span> <span class=\"hljs-attr\">data-result-template-id</span>=<span class=\"hljs-string\">\"Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>which will use a previously registered template ID (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>)</p>\n"
	},
	{
		"name": "ResultAttachments.options.subResultTemplate",
		"comment": "<p>Specifies the template to use to render sub-attachments, which are attachments within other attachments,\nfor example multiple files embedded in a .zip attachment.<br/>\nSub-attachments can also contain other sub-attachments.<br/>\nThe template can be specified the same way as <a href=\"https://coveo.github.io/search-ui/components/resultattachments.html#options.resulttemplate\">resultTemplate</a></p>\n"
	},
	{
		"name": "ResultAttachments.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultAttachments.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultAttachments.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultAttachments.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultAttachments.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultAttachments.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultAttachments.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultAttachments.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultAttachments.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultAttachments.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultAttachments.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultAttachments.constructor",
		"comment": "<p>Build a new ResultAttachments component</p>\n"
	},
	{
		"name": "ResultFolding",
		"comment": "<p>This component is used to render folded result sets. It is intended to be used inside a\n<a href='https://developers.coveo.com/display/public/JsSearchV1/Result+Templates'>Result Template</a>\nwhen there is an active <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component on the page. This component takes care of rendering\nthe parent result and its child results in a coherent manner.</p>\n"
	},
	{
		"name": "ResultFolding.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultFolding.options.expandedCaption",
		"comment": "<p>Specifies the caption to show at the top of the child results when the conversation is expanded.<br/>\nBy default, the value is undefined, which doesn&#39;t show any caption.</p>\n"
	},
	{
		"name": "ResultFolding.options.lessCaption",
		"comment": "<p>Specifies the caption to show on the link to shrink the loaded conversation back to only the top result.\nThe default value is the localized version of <code>ShowLess</code>.</p>\n"
	},
	{
		"name": "ResultFolding.options.moreCaption",
		"comment": "<p>Specifies the caption to show on the link to expand / show child results\nThe default value is the localized version of <code>ShowMore</code>.</p>\n"
	},
	{
		"name": "ResultFolding.options.normalCaption",
		"comment": "<p>Specifies the caption to show at the top of the child results when the conversation is not expanded.<br/>\nBy default, the value is undefined, which doesn&#39;t show any caption.</p>\n"
	},
	{
		"name": "ResultFolding.options.oneResultCaption",
		"comment": "<p>Specifies the caption to show when there is only one result in a conversation.\nThe default value is the localized version of <code>DisplayingTheOnlyMessage</code>.</p>\n"
	},
	{
		"name": "ResultFolding.options.resultTemplate",
		"comment": "<p>Specifies the template to use to render each of the child results for a top result.<br/>\nBy default, it will use the template specified in a child element with a <code>&lt;script&gt;</code> tag.<br/>\nThis can be specified directly as an attribute to the element, for example :</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultFolding'</span> <span class=\"hljs-attr\">data-result-template-id</span>=<span class=\"hljs-string\">'Foo'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>which will use a previously registered template ID (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>)</p>\n"
	},
	{
		"name": "ResultFolding.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultFolding.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultFolding.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultFolding.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultFolding.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultFolding.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultFolding.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultFolding.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultFolding.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultFolding.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultFolding.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultFolding.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "ResultLink",
		"comment": "<p>This component is intended to be placed inside a result template, which itself is used inside a <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component.\nThe ResultLink component automatically transforms a search result title into a clickable link that points to the original document.</p>\n"
	},
	{
		"name": "ResultLink.options",
		"comment": "<p>The options for the ResultLink</p>\n"
	},
	{
		"name": "ResultLink.options.alwaysOpenInNewWindow",
		"comment": "<p>Specifies whether the result link always opens in a new window ( <a target='_blank' /> ).\nDefault is false</p>\n"
	},
	{
		"name": "ResultLink.options.field",
		"comment": "<p>Specifies the field that the result link uses to output its href.\nBy default, the clickUri available on the document is used, but you can override this with this option.\nTip:\nWhen you do not include a field option, in your result template, you can include an href attribute on the ResultLink element.</p>\n"
	},
	{
		"name": "ResultLink.options.hrefTemplate",
		"comment": "<p>Specifies a template string to use to generate the href.</p>\n"
	},
	{
		"name": "ResultLink.options.onClick",
		"comment": "<p>Binds an event handler function that is executed when the component link is clicked. The handler function takes an EventObject and a <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\">IQueryResult</a> as its parameters.</p>\n"
	},
	{
		"name": "ResultLink.options.openInOutlook",
		"comment": "<p>Specifies whether the result link tries to open in Microsoft Outlook. This is normally intended for ResultLink related to Microsoft Exchange emails.\nDefault value is false.</p>\n"
	},
	{
		"name": "ResultLink.options.openQuickview",
		"comment": "<p>Specifies whether the result link should open in the Quick View rather than loading through the original URL.\nDefault value is false.</p>\n"
	},
	{
		"name": "ResultLink.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultLink.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultLink.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultLink.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultLink.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultLink.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultLink.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultLink.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultLink.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultLink.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultLink.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultLink.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "ResultList",
		"comment": "<p>This component is responsible for displaying the results of the current query using one or more result templates.<br/>\nIt supports many additional features such as infinite scrolling.</p>\n"
	},
	{
		"name": "ResultList.options",
		"comment": "<p>The options for the ResultList</p>\n"
	},
	{
		"name": "ResultList.options.autoSelectFieldsToInclude",
		"comment": "<p>Specifies that the result list should scan it&#39;s template and discover which field it will need to render every results.<br/>\nThis is to ensure that fields that are not needed for the UI to function are not sent by the search API.<br/>\nDefault value is false.<br/>\nNB: Many interface created by the interface editor will actually explicitly set this option to true.</p>\n"
	},
	{
		"name": "ResultList.options.enableInfiniteScroll",
		"comment": "<p>Specifies whether the ResultList automatically retrieves an additional page of results and appends them to those already being displayed whenever the user scrolls to the end of the infiniteScrollContainer.<br/>\nThe waitAnimation will be displayed while additional results are fetched.<br/>\nDefault value is false</p>\n"
	},
	{
		"name": "ResultList.options.enableInfiniteScrollWaitingAnimation",
		"comment": "<p>Specifies if the wait animation should be displayed when a query is being performed using infinite scroll.<br/>\nDefault value is true</p>\n"
	},
	{
		"name": "ResultList.options.fieldsToInclude",
		"comment": "<p>Specifies a list of fields to include in the query.<br/>\nThis is to ensure that fields that are not needed for the UI to function are not sent by the search API.<br/>\nBy default, this list is empty.<br/>\nNote that this option has an interaction with autoSelectFieldsToInclude</p>\n"
	},
	{
		"name": "ResultList.options.infiniteScrollContainer",
		"comment": "<p>When infinite scrolling is enabled, specifies the element whose scrolling is monitored to trigger fetching of additional results.<br/>\nBy default, the framework will try to find the first scrolling parent it encounter, starting from the ResultList itself<br/>\nThis also means that if it encounter no parent that are scrollable (in css this means having overflow-y: scroll), then the window itself will be the scroll container</p>\n"
	},
	{
		"name": "ResultList.options.infiniteScrollPageSize",
		"comment": "<p>When infiniteScroll is enabled, specifies the number of additional results that are fetched when the user scrolls to the bottom of the infiniteScrollContainer.<br/>\nDefault value is 10</p>\n"
	},
	{
		"name": "ResultList.options.resultContainer",
		"comment": "<p>Specifies the element within which the rendered templates for results are inserted.<br/>\nThe content of this element is cleared when a new query is performed. If this option is not specified, a &lt;div&gt; element will by dynamically created in javascript and appended to the result list and used as a result container.<br/>\nYou can change the container by specifying it&#39;s selector: Eg  data-result-container-selector=&quot;#someCssSelector&quot;</p>\n"
	},
	{
		"name": "ResultList.options.waitAnimation",
		"comment": "<p>Specifies the type of animation to display while waiting for a new query to finish executing.<br/>\nPossible values are :<br/>\n&#39;fade&#39; : Fades out the currently displayed results while the query is executing.<br/>\n&#39;spinner&#39; : Shows a spinning animation while the query is executing.<br/>\n&#39;none&#39; : Use no animation during queries.<br/>\nDefault value is &#39;none&#39;</p>\n"
	},
	{
		"name": "ResultList.options.waitAnimationContainer",
		"comment": "<p>Specifies the element inside which an animation is displayed while waiting for a new query to finish executing.<br/>\nYou can change this by specifying a css selector.<br/>\nEg : data-wait-animation-container-selector=&quot;#someCssSelector&quot;\nBy default, the animation appears in the the resultContainer.</p>\n"
	},
	{
		"name": "ResultList.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultList.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultList.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultList.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultList.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultList.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultList.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultList.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultList.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultList.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultList.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultList.constructor",
		"comment": "<p>Create a new ResultList.<br/>\nBind various event related to queries (eg : on querySuccess -&gt; renderResults)<br/>\nBind scroll event if infinite scrolling is enabled.</p>\n"
	},
	{
		"name": "ResultRating",
		"comment": "<p>Component used to render document rating. Allows search users to rate a result with a 5-star representation.\nInteractive rating is possible if collaborative rating is enabled.</p>\n"
	},
	{
		"name": "ResultRating.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultRating.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultRating.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultRating.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultRating.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultRating.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultRating.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultRating.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultRating.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultRating.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultRating.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultRating.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "ResultTagging",
		"comment": "<p>This component can be used as part of a result template to list the current tag field values for the search result\nand display a control that allows end-users to add a value to a tag field.</p>\n"
	},
	{
		"name": "ResultTagging.options.autoCompleteTimer",
		"comment": "<p>Specifies how long to wait in milliseconds until the suggested item list disappears when you focus out.<br/>\nDefault valus is 2000</p>\n"
	},
	{
		"name": "ResultTagging.options.field",
		"comment": "<p>Specifies the tag field used by the component.<br/>\nIt is required, and if not specified, the component will not load.</p>\n"
	},
	{
		"name": "ResultTagging.options.suggestBoxSize",
		"comment": "<p>Specifies the number of items to show in the suggested item list.<br/>\nDefault value is 5.</p>\n"
	},
	{
		"name": "ResultTagging.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultTagging.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultTagging.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultTagging.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultTagging.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultTagging.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultTagging.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultTagging.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultTagging.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultTagging.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultTagging.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultTagging.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "ResultsFiltersPreferences",
		"comment": "<p>This component allows end-users to create their own customized filters to apply to their search.<br/>\nIt is a feature meant for advanced user that understand the Coveo Query syntax.<br/>\nThese preferences are saved in the localStorage of each user.<br/>\nThis component is normally accessible visually using the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu.<br/>\nIt is usually located, in the DOM, inside the <a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\">PreferencesPanel</a> component.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options.filters",
		"comment": "<p>Specifies default filters that all users will see.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options.includeInBreadcrumb",
		"comment": "<p>Specifies whether to include the active filter(s) in the breadcrumb.<br/>\nDefault is <code>true</code>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options.showAdvancedFilters",
		"comment": "<p>Specifies whether to show or hide the Create button to allow end-users to create their own filters.<br/>\nIf set to false, only pre-populated filter created on initialization using js code will be available to the end user.\nDefault is <code>true</code>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "ResultsPerPage",
		"comment": "<p>This component attaches itself to a div and allows users to choose the number of results displayed per page.<br/></p>\n"
	},
	{
		"name": "ResultsPerPage.options",
		"comment": "<p>The options for the ResultsPerPage</p>\n"
	},
	{
		"name": "ResultsPerPage.options.choicesDisplayed",
		"comment": "<p>Specifies the possible values of the number of results to display per page.<br/>\nThe default value is 10, 25, 50, 100</p>\n"
	},
	{
		"name": "ResultsPerPage.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultsPerPage.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultsPerPage.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPerPage.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultsPerPage.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultsPerPage.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultsPerPage.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPerPage.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultsPerPage.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultsPerPage.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultsPerPage.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultsPerPage.constructor",
		"comment": "<p>Create a new ResultsPerPage<br/>\nRender itself on every query success.</p>\n"
	},
	{
		"name": "ResultsPreferences",
		"comment": "<p>This component allows users to select preferences related to their search results.<br/>\nThese preferences are saved in the localStorage of each user.<br/>\nThis component is normally accessible visually using the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu.<br/>\nIt is usually located, in the DOM, inside the <a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\">PreferencesPanel</a> component.</p>\n"
	},
	{
		"name": "ResultsPreferences.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultsPreferences.options.enableOpenInNewWindow",
		"comment": "<p>Enable or disable the options to open results in a new window.<br/>\nDefault value is <code>true</code></p>\n"
	},
	{
		"name": "ResultsPreferences.options.enableOpenInOutlook",
		"comment": "<p>Enable or disable the options to open results in outlook.<br/>\nDefault value is <code>true</code></p>\n"
	},
	{
		"name": "ResultsPreferences.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultsPreferences.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ResultsPreferences.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPreferences.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ResultsPreferences.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ResultsPreferences.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultsPreferences.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPreferences.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ResultsPreferences.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ResultsPreferences.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultsPreferences.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultsPreferences.constructor",
		"comment": "<p>Create a new ResultsPreference component</p>\n"
	},
	{
		"name": "SearchAlerts",
		"comment": "<p>This component allows the user to manage his search alerts and to follow queries by adding menu items in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component.\nBy following queries, the user will receive emails informing him when the results of the query have changed.</p>\n"
	},
	{
		"name": "SearchAlerts.options",
		"comment": "<p>The options for the search alerts</p>\n"
	},
	{
		"name": "SearchAlerts.options.enableFollowQuery",
		"comment": "<p>Specifies whether to add a menu item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component to allow the user to follow the last query.\nThe default value is true.</p>\n"
	},
	{
		"name": "SearchAlerts.options.enableManagePanel",
		"comment": "<p>Specifies whether to add a menu item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component to allow the user to manage his search alerts.\nThe default value is true.</p>\n"
	},
	{
		"name": "SearchAlerts.options.enableMessage",
		"comment": "<p>Specifies whether to display info and error messages when search alerts actions are performed.\nThis default value is true.</p>\n"
	},
	{
		"name": "SearchAlerts.options.messageCloseDelay",
		"comment": "<p>Specifies how long to display the search alerts messages (in ms).\nThis default value is 3000.</p>\n"
	},
	{
		"name": "SearchAlerts.options.modifiedDateField",
		"comment": "<p>Specifies the modifiedDateField to use when sending the follow query request.\nThis default value is undefined.</p>\n"
	},
	{
		"name": "SearchAlerts.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "SearchAlerts.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "SearchAlerts.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlerts.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "SearchAlerts.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "SearchAlerts.message",
		"comment": "<p>A reference to a <a href=\"https://coveo.github.io/search-ui/components/searchalertsmessage.html\">SearchAlertsMessage</a> component used to display message.\nThis attribute is set only when the enableMessage option is true.</p>\n"
	},
	{
		"name": "SearchAlerts.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "SearchAlerts.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlerts.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "SearchAlerts.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "SearchAlerts.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "SearchAlerts.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchAlerts.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "SearchAlertsMessage",
		"comment": "<p>This component allows the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component to display messages.\nThis component should not be included in a web page. Instead, use a <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component and access its message attribute.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.options",
		"comment": "<p>The options for the SearchAlertsMessage component</p>\n"
	},
	{
		"name": "SearchAlertsMessage.options.closeDelay",
		"comment": "<p>Specifies how long to display the search alerts messages (in ms).\nThis default value is 3000.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "SearchAlertsMessage.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "SearchAlertsMessage.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "SearchAlertsMessage.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "SearchAlertsMessage.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "SearchAlertsMessage.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchAlertsMessage.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "SearchButton",
		"comment": "<p>A component that allows user to trigger a query by clicking on it.<br/>\nThis component will instantiate on an element and add a search icon.<br/>\nIt will also sends an analytics event to the coveo platform when clicked.</p>\n"
	},
	{
		"name": "SearchButton.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "SearchButton.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "SearchButton.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchButton.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "SearchButton.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "SearchButton.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "SearchButton.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchButton.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "SearchButton.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "SearchButton.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "SearchButton.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchButton.constructor",
		"comment": "<p>Create a new SearchButton on the given element with the given options\nBind a click event on the element\nAdds a search icon on the element</p>\n"
	},
	{
		"name": "Searchbox",
		"comment": "<p>This component is mostly used for simplicity purpose because it creates 2 component that are very frequently used together.<br/>\nThis component attaches itself to a div and takes care of instantiating a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> Component or a <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> Component, depending on the options.<br/>\nAdd a <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a> Component if desired, and appends them to the same div.</p>\n"
	},
	{
		"name": "Searchbox.options",
		"comment": "<p>Possible options for the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a></p>\n"
	},
	{
		"name": "Searchbox.options.addSearchButton",
		"comment": "<p>Specifies whether the search box instantiates a <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a>.<br/>\nDefault value is true.</p>\n"
	},
	{
		"name": "Searchbox.options.enableOmnibox",
		"comment": "<p>Specifies whether the search box instantiates a <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> Component.<br/>\nOtherwise, the search box instantiates a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> Component.<br/>\nDefault value is false.</p>\n"
	},
	{
		"name": "Searchbox.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Searchbox.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Searchbox.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Searchbox.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Searchbox.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Searchbox.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Searchbox.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Searchbox.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Searchbox.searchButton",
		"comment": "<p>Instance of the <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a></p>\n"
	},
	{
		"name": "Searchbox.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Searchbox.searchbox",
		"comment": "<p>Instance of compomnent that allows user to input query.<br/>\nCan be a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> or <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a></p>\n"
	},
	{
		"name": "Searchbox.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Searchbox.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Searchbox.constructor",
		"comment": "<p>Create a new Searchbox<br/>\nCreate a new Coveo.Magicbox instance and wrap magic box method (on blur, on submit etc)<br/>\nBind event on buildingQuery and on redirection (for standalone box)</p>\n"
	},
	{
		"name": "Settings",
		"comment": "<p>The Settings component is comprised of a settings button (usually located\non the right of the search box) which allows for some contextual actions.<br/>\nThis component references other components to show in its menu, for example\nthe <a href=\"https://coveo.github.io/search-ui/components/sharequery.html\">ShareQuery</a> component.</p>\n"
	},
	{
		"name": "Settings.options",
		"comment": "<p>The options for Settings</p>\n"
	},
	{
		"name": "Settings.options.menuDelay",
		"comment": "<p>The delay before hiding the popup menu when the mouse leaves it.<br/>\nThe default value is <code>300</code></p>\n"
	},
	{
		"name": "Settings.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Settings.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Settings.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Settings.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Settings.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Settings.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Settings.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Settings.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Settings.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Settings.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Settings.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Settings.constructor",
		"comment": "<p>Create a new Settings component</p>\n"
	},
	{
		"name": "ShareQuery",
		"comment": "<p>ShareQuery shows 2 text boxes, one with a shareable link and the\nother with the complete query expression of the currently performed query.<br/>\nIt populates the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component&#39;s menu for easy access.</p>\n"
	},
	{
		"name": "ShareQuery.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ShareQuery.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ShareQuery.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ShareQuery.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ShareQuery.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ShareQuery.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ShareQuery.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ShareQuery.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ShareQuery.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ShareQuery.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ShareQuery.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ShareQuery.constructor",
		"comment": "<p>Create a new ShareQuery component.</p>\n"
	},
	{
		"name": "Sort",
		"comment": "<p>This component displays a sort criteria for searching.</p>\n"
	},
	{
		"name": "Sort.options",
		"comment": "<p>Options for the component</p>\n"
	},
	{
		"name": "Sort.options.caption",
		"comment": "<p>The caption to display on the element<br/>\nIf not specified, the component will use the tag&#39;s body</p>\n"
	},
	{
		"name": "Sort.options.sortCriteria",
		"comment": "<p>The criteria for sorting<br/>\nThe available criteria are:</p>\n<ul>\n  <li><code>relevancy</code></li>\n  <li><code>Date</code></li>\n  <li><code>qre</code></li>\n  <li><code>@fieldname</code> (replace fieldname with an actual field name (e.g. <code>@syssize</code>)</li>\n</ul>"
	},
	{
		"name": "Sort.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Sort.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Sort.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Sort.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Sort.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Sort.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Sort.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Sort.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Sort.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Sort.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Sort.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Sort.constructor",
		"comment": "<p>Create a new Sort component.</p>\n"
	},
	{
		"name": "Tab",
		"comment": "<p>This component is a bar allowing users to select a search interface.</p>\n"
	},
	{
		"name": "Tab.options",
		"comment": "<p>The options for a Tab</p>\n"
	},
	{
		"name": "Tab.options.caption",
		"comment": "<p>The caption for the tab.<br/>\nThis is mandatory and required for the tab to function properly</p>\n"
	},
	{
		"name": "Tab.options.constant",
		"comment": "<p>Specifies whether the filter expression should be included in the constant part of the query.<br/>\nThe constant part of the query is specially optimized by the index to execute faster, but you must be careful not to include dynamic query expressions otherwise the cache would lose its efficiency.<br/>\nBy default, this option is set to true.</p>\n"
	},
	{
		"name": "Tab.options.enableDuplicateFiltering",
		"comment": "<p>Specifies whether to filter duplicates on the search results.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "Tab.options.enableResponsiveMode",
		"comment": "<p>Specifies if the responsive mode should be enabled for the tabs. Responsive mode will make the overflowing tabs dissapear and instead\nbe availaible using a dropdown button. Responsive tabs are enabled when tabs overflow or when the width of the search interface\nbecomes too small.</p>\n"
	},
	{
		"name": "Tab.options.endpoint",
		"comment": "<p>Specifies the endpoint that a tab should point to when performing query inside that tab.<br/>\nThis is optional, by default the tab will use the &quot;default&quot; endpoint</p>\n"
	},
	{
		"name": "Tab.options.expression",
		"comment": "<p>Specifies an advanced expression / filter that this tab adds to any outgoing query.<br/>\neg : @objecttype==Message.<br/>\nThis is optional, normally a &quot;All Content&quot; tab would not set any filter on the query.</p>\n"
	},
	{
		"name": "Tab.options.icon",
		"comment": "<p>Specify an icon for the tab.<br/>\nThis options is mostly kept for legacy reason. Do not use one if not needed.</p>\n"
	},
	{
		"name": "Tab.options.id",
		"comment": "<p>The unique ID for a tab.<br/>\nThis is mandatory and required for the tab to function properly</p>\n"
	},
	{
		"name": "Tab.options.maximumAge",
		"comment": "<p>Specifies the maximum age in milliseconds that cached query results can have in order to be used (instead of performing a new query on the index).<br/>\nThe cache is located in the Coveo Search API (which resides between the index and search interface).<br/>\nIf cached results are available but are older than the specified age, a new query will be performed on the index.<br/>\nBy default, this is left undefined and the Coveo Search API will decide the cache duration.</p>\n"
	},
	{
		"name": "Tab.options.pipeline",
		"comment": "<p>Specifies the name of the query pipeline to use for the queries, in the Coveo platform ( Query Pipeline in the cloud admin).<br/>\nIf not specified, the default value is null, in which case pipeline selection conditions defined in a Coveo Cloud organization apply.</p>\n"
	},
	{
		"name": "Tab.options.sort",
		"comment": "<p>Specifies the default sort when this tab is selected. A <a href=\"https://coveo.github.io/search-ui/components/sort.html\">Sort</a> Component configured with the same specified parameter needs to be in the interface in order for this this option to function properly.<br/>\neg : relevancy / date descending<br/>\nOptional, by default the normal <a href=\"https://coveo.github.io/search-ui/components/sort.html\">Sort</a> component behavior will operate</p>\n"
	},
	{
		"name": "Tab.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Tab.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Tab.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Tab.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Tab.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Tab.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Tab.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Tab.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Tab.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Tab.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Tab.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Tab.constructor",
		"comment": "<p>Create a new Tab. Bind on buildingQuery event as well as on click of the element</p>\n"
	},
	{
		"name": "Text",
		"comment": "<p>This component only role is to be embedded in a result template and to output a simple text value.<br/>\nThus, the only purpose is to be able to easily add different text value with the interface editor.<br/>\nIf you are not designing a search using the interface editor, the usage of this component is not pertinent.</p>\n"
	},
	{
		"name": "Text.options.marginBottom",
		"comment": "<p>The margin bottom of the text (set as the margin-bottom css property)</p>\n"
	},
	{
		"name": "Text.options.marginLeft",
		"comment": "<p>The margin left of the text (set as the margin-left css property)</p>\n"
	},
	{
		"name": "Text.options.marginRight",
		"comment": "<p>The margin right of the text (set as the margin-right css property)</p>\n"
	},
	{
		"name": "Text.options.marginTop",
		"comment": "<p>The margin top of the text (set as the margin-top css property)</p>\n"
	},
	{
		"name": "Text.options.paddingBottom",
		"comment": "<p>The padding bottom of the text (set as the padding-bottom css property)</p>\n"
	},
	{
		"name": "Text.options.paddingLeft",
		"comment": "<p>The padding left of the text (set as the padding-left css property)</p>\n"
	},
	{
		"name": "Text.options.paddingRight",
		"comment": "<p>The padding right of the text (set as the padding-right css property)</p>\n"
	},
	{
		"name": "Text.options.paddingTop",
		"comment": "<p>The padding top of the text (set as the padding-top css property)</p>\n"
	},
	{
		"name": "Text.options.size",
		"comment": "<p>The size of the text (set as the font-size css property)</p>\n"
	},
	{
		"name": "Text.options.style",
		"comment": "<p>The style of the text (set as the font-style css property)</p>\n"
	},
	{
		"name": "Text.options.textAlign",
		"comment": "<p>The alignment of the text (set as the text-align css property)</p>\n"
	},
	{
		"name": "Text.options.value",
		"comment": "<p>The localized string value that the component should render</p>\n"
	},
	{
		"name": "Text.options.weight",
		"comment": "<p>The weight of the text (set as the font-weight css property)</p>\n"
	},
	{
		"name": "Text.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Text.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Text.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Text.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Text.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Text.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Text.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Text.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Text.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Text.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Text.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Text.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "Thumbnail",
		"comment": "<p>This component automatically fetches the thumbnail of the result object\nand formats an HTML image tag (<code>img</code>) with it.</p>\n"
	},
	{
		"name": "Thumbnail.options",
		"comment": "<p>Options for the Thumbnail</p>\n"
	},
	{
		"name": "Thumbnail.options.clickable",
		"comment": "<p>Specifies if a clickable <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> is to be created around the Thumbnail.<br/>\nUses all the same options as as <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> except <code>field</code><br/>\nDefault value is <code>false</code></p>\n"
	},
	{
		"name": "Thumbnail.options.noThumbnailClass",
		"comment": "<p>Specifies the CSS class to use on the thumbnail image tag when a result\nhas no thumbnail in the index.<br/>\nDefault value: <code>coveo-no-thumbnail</code></p>\n"
	},
	{
		"name": "Thumbnail.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Thumbnail.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Thumbnail.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Thumbnail.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Thumbnail.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Thumbnail.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Thumbnail.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Thumbnail.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Thumbnail.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Thumbnail.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Thumbnail.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Thumbnail.constructor",
		"comment": "<p>Create a new Thumbnail component</p>\n"
	},
	{
		"name": "Triggers",
		"comment": "<p>This component enables the use of triggers (<code>notify</code>, <code>execute</code>, <code>query</code>, <code>redirect</code>) generated by the Search API\nbased on <a href='https://developers.coveo.com/display/public/SearchREST/Trigger'>Trigger statements</a>\nin the query pipeline (See <a href='https://developers.coveo.com/display/public/SearchREST/Managing+the+Query+Pipeline'>Managing the Query Pipeline</a>)</p>\n"
	},
	{
		"name": "Triggers.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Triggers.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Triggers.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Triggers.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Triggers.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Triggers.notifications",
		"comment": "<p>The list of notifications returned by the Search API for the current query (via &#39;notify&#39; triggers).<br/>\nThis list is automatically displayed visually in the component.</p>\n"
	},
	{
		"name": "Triggers.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Triggers.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Triggers.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Triggers.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Triggers.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Triggers.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Triggers.constructor",
		"comment": "<p>Build a new Triggers component</p>\n"
	},
	{
		"name": "Badge",
		"comment": "<p>This component is used to easily output a field value with customizable colors and an icon preceding it.<br/>\nIt extends <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html\">FieldValue</a>, so any options on that component can be used on Badge.<br/>\nIt is possible to configure the default colors, but also to set colors specific to\nthe current field value.</p>\n"
	},
	{
		"name": "Badge.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Badge.options.colors",
		"comment": "<p>Specifies the colors for the badge.</p>\n"
	},
	{
		"name": "Badge.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Badge.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Badge.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Badge.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Badge.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Badge.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Badge.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Badge.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Badge.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Badge.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Badge.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Badge.constructor",
		"comment": "<p>Build a new Badge component</p>\n"
	},
	{
		"name": "BaseComponent",
		"comment": "<p>Every component in the framework ultimately inherits from this base component class.</p>\n"
	},
	{
		"name": "BaseComponent.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "BaseComponent.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "BaseComponent.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "BreadcrumbEvents",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>.</p>\n"
	},
	{
		"name": "BreadcrumbEvents.clearBreadcrumb",
		"comment": "<p>Triggered when the user clicks the Clear All button in the breadcrumb. When this event is raised, every filter that is included in the breadcrumb should be removed.</p>\n"
	},
	{
		"name": "BreadcrumbEvents.populateBreadcrumb",
		"comment": "<p>Triggered when the breadcrumb needs to update its content. External code can use this event to provide bits of HTML that should be included in the breadcrumb.</p>\n"
	},
	{
		"name": "Cell",
		"comment": "<p>Represent a single cell of data in the <a href=\"https://coveo.github.io/search-ui/components/matrix.html\">Matrix</a> component</p>\n"
	},
	{
		"name": "Component",
		"comment": "<p>The base class for every Component in the framework</p>\n"
	},
	{
		"name": "Component.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Component.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "Component.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Component.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Component.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Component.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Component.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Component.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "Component.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "Component.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Component.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Component.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a><br/></p>\n"
	},
	{
		"name": "ComponentEvents",
		"comment": "<p>Used by the various Coveo Component to trigger and bind event.<br/>\nIt adds a small logic to execute handler or triggers only when the component is &quot;enabled&quot;.<br/>\nA component is disabled by calling {Component.disable}<br/>\nTypically, a Component is disabled when it is not active in the current {Tab}.<br/>\nIt can also be disabled by external code.<br/>\nThe class serves as a way to not execute handler on component that are invisible and inactive in the query.</p>\n"
	},
	{
		"name": "ComponentEvents.constructor",
		"comment": "<p>Create a new ComponentEvents for the given <a href=\"https://coveo.github.io/search-ui/classes/component.html\">Component</a></p>\n"
	},
	{
		"name": "Dom",
		"comment": "<p>This is essentially an helper class for dom manipulation.<br/>\nThis is intended to provide some basic functionality normally offered by jQuery.<br/>\nTo minimize the multiple jQuery conflict we have while integrating in various system, we implemented the very small subset that the framework needs.<br/>\nSee <a href=\"https://coveo.github.io/search-ui/modules/coveo.magicbox.html#__\">$$</a>, which is a function that wraps this class constructor, for less verbose code.</p>\n"
	},
	{
		"name": "Dom.constructor",
		"comment": "<p>Create a new Dom object with the given HTMLElement</p>\n"
	},
	{
		"name": "EndpointCaller",
		"comment": "<p>This class is in charge of calling an endpoint (eg: a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a>).</p>\n"
	},
	{
		"name": "EndpointCaller.useJsonp",
		"comment": "<p>Set this property to true to enable Jsonp call to the endpoint.<br/>\nBe aware that jsonp is &quot;easier&quot; to setup endpoint wise, but has a lot of drawback and limitation for the client code.<br/>\nDefault to false.</p>\n"
	},
	{
		"name": "EndpointCaller.constructor",
		"comment": "<p>Create a new EndpointCaller.</p>\n"
	},
	{
		"name": "ExpressionBuilder",
		"comment": "<p>An ExpressionBuilder that is mostly used by the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a><br/>\nIt is used to build a single query expression.<br/>\nIt allows combining multiple expression parts into a single string and provides utilities to generate common expression parts.</p>\n"
	},
	{
		"name": "FacetRange",
		"comment": "<p>This component displays a facet with values expressed as ranges. These ranges are computed from the results of the current query. This component inherits from the Facet component.</p>\n"
	},
	{
		"name": "FacetRange.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FacetRange.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FacetRange.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "FacetRange.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetRange.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "FacetRange.facetSearch",
		"comment": "<p>Render and handle the facet search part of the component</p>\n"
	},
	{
		"name": "FacetRange.facetSettings",
		"comment": "<p>Render and handle the facet settings part of the component</p>\n"
	},
	{
		"name": "FacetRange.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "FacetRange.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FacetRange.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetRange.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "FacetRange.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "FacetRange.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FacetRange.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FacetRange.constructor",
		"comment": "<p>Create a new Facet component, bind multiple query events as well</p>\n"
	},
	{
		"name": "FacetSearch",
		"comment": "<p>Used by the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component to render and handle the facet search part of each facet.</p>\n"
	},
	{
		"name": "FacetSettings",
		"comment": "<p>Handle the rendering of the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> settings menu (typically the ... in the facet header)</p>\n"
	},
	{
		"name": "FacetValue",
		"comment": "<p>A class which holds information and operation available on a single facet value returned by a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.<br/>\nThis class is used extensibely in the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component.</p>\n"
	},
	{
		"name": "FoldingForThread",
		"comment": "<p>This component inherits from the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.\nFolding conversations and threads requires different processing.\nWhen you need to fold children under a parent item, use this component.<br/>\n<b>This component works well with Chatter and Lithium</b></p>\n"
	},
	{
		"name": "FoldingForThread.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FoldingForThread.options.childField",
		"comment": "<p>Specifies the field that determines that a result is a child of another top result.<br/>\nThe default value is <code>@topparentid</code></p>\n"
	},
	{
		"name": "FoldingForThread.options.enableExpand",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query\nto load all the conversation of a given thread.</p>\n"
	},
	{
		"name": "FoldingForThread.options.expandExpression",
		"comment": "<p>Specifies a customized constant expression to send when querying the expanded results.</p>\n"
	},
	{
		"name": "FoldingForThread.options.field",
		"comment": "<p>The name of the field on which the folding is done.<br/>\nThis option is required.</p>\n"
	},
	{
		"name": "FoldingForThread.options.getMoreResults",
		"comment": "<p>This function manages folding of all results.</p>\n"
	},
	{
		"name": "FoldingForThread.options.getResult",
		"comment": "<p>This function manages folding individually for each result.</p>\n"
	},
	{
		"name": "FoldingForThread.options.maximumExpandedResults",
		"comment": "<p>Specifies the maximum number of expanded results.</p>\n"
	},
	{
		"name": "FoldingForThread.options.parentField",
		"comment": "<p>Specifies the field that determines that a result is a top result containing other child results<br/>\nThe default value is <code>@syscontainsattachment</code></p>\n"
	},
	{
		"name": "FoldingForThread.options.range",
		"comment": "<p>The number of child results to fold.</p>\n"
	},
	{
		"name": "FoldingForThread.options.rearrange",
		"comment": "<p>Specifies how the top result and its related child results, following the sort criteria format\n(<code>date ascending</code>, <code>@somefield ascending</code>, etc.).</p>\n"
	},
	{
		"name": "FoldingForThread.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FoldingForThread.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "FoldingForThread.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FoldingForThread.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "FoldingForThread.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "FoldingForThread.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FoldingForThread.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FoldingForThread.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "FoldingForThread.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "FoldingForThread.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FoldingForThread.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FoldingForThread.constructor",
		"comment": "<p>Create a new FoldingForThread component</p>\n"
	},
	{
		"name": "HierarchicalFacet",
		"comment": "<p>This component inherits all of its options and behavior from the normal <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component, but is meant to be used for hierarchical values.<br/>\nThe HierarchicalFacet component could be used to display files in a file system, or categories for documents in a hierarchy.<br/>\nThis facet require a group by field with a special format in order to work correctly.<br/>\nLet&#39;s say we have the following files indexed on a filesystem:</p>\n<pre><code>C:<span class=\"hljs-string\">\\</span>\n   folder1<span class=\"hljs-string\">\\</span>\n       text1.txt\n   folder2<span class=\"hljs-string\">\\</span>\n     folder3<span class=\"hljs-string\">\\</span>\n       text2.txt\n</code></pre><p>The document <code>text1.txt</code> would need to have a field with the following format:<br/>\n<code>@field : c; c|folder1;</code><br/>\nThe document <code>text2.txt</code> would have a field with the following format:<br/>\n<code>@field: c; c|folder2; c|folder2|folder3;</code><br/>\nThe | character allows the facet to build its hierarchy (<code>folder3</code> inside <code>folder2</code> inside <code>c</code>)<br/>\nSince both documents contain the <code>c</code> value, selecting that value in the facet would return both documents.<br/>\nSelecting the <code>folder3</code> value in the facet would only return the <code>text2.txt</code> document.</p>\n"
	},
	{
		"name": "HierarchicalFacet.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "HierarchicalFacet.options.delimitingCharacter",
		"comment": "<p>The character that allows to specify the hierarchy dependency.<br/>\nThe default value is <code>|</code>.<br/>\nFor example, if your field has the following values : @field: c; c&gt;folder2; c&gt;folder2&gt;folder3; Then your delimiting character would be <code>&gt;</code></p>\n"
	},
	{
		"name": "HierarchicalFacet.options.levelEnd",
		"comment": "<p>Specifies at which level (0 based index) of the hierarchy you want your facet to stop displaying it&#39;s values.<br/>\nThe default value is undefined, meaning it will render all levels.</p>\n"
	},
	{
		"name": "HierarchicalFacet.options.levelStart",
		"comment": "<p>Specifies at which level (0 based index) of the hierarchy you want your facet to start displaying it&#39;s values.<br/>\nThe default value is <code>0</code>.<br/>\nUsing this example :</p>\n<pre><code>C:<span class=\"hljs-string\">\\</span>\n   folder1<span class=\"hljs-string\">\\</span>\n       text1.txt\n   folder2<span class=\"hljs-string\">\\</span>\n     folder3<span class=\"hljs-string\">\\</span>\n       text2.txt\n</code></pre><p>Setting levelStart to 1 would only display folder1 and folder2, and omit c:</p>\n"
	},
	{
		"name": "HierarchicalFacet.options.marginByLevel",
		"comment": "<p>Specifies the margin, in pixel, between each level, when they are expanded.<br/>\nDefault value is <code>10</code>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "HierarchicalFacet.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "HierarchicalFacet.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HierarchicalFacet.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "HierarchicalFacet.facetSearch",
		"comment": "<p>Render and handle the facet search part of the component</p>\n"
	},
	{
		"name": "HierarchicalFacet.facetSettings",
		"comment": "<p>Render and handle the facet settings part of the component</p>\n"
	},
	{
		"name": "HierarchicalFacet.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "HierarchicalFacet.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "HierarchicalFacet.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HierarchicalFacet.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "HierarchicalFacet.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "HierarchicalFacet.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "HierarchicalFacet.constructor",
		"comment": "<p>Create a new instance of the Hierarchical component</p>\n"
	},
	{
		"name": "HistoryController",
		"comment": "<p>This component is instantiated automatically by the framework on the root if the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>.<br/>\nWhen the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> option is set to true, this component is instantiated.<br/>\nIt&#39;s only job is to apply changes in the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> to the hash in the URL, and vice versa.<br/>\nThis component does <em>not</em> hold the state of the interface, it only represent it in the URL.</p>\n"
	},
	{
		"name": "HistoryController.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "HistoryController.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "HistoryController.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "HistoryController.constructor",
		"comment": "<p>Create a new history controller</p>\n"
	},
	{
		"name": "ImageResultList",
		"comment": "<p>This component is an extension of the ResultList component to display image results.</p>\n"
	},
	{
		"name": "ImageResultList.options",
		"comment": "<p>The options for the component.\nThis component inherits the options of the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component.</p>\n"
	},
	{
		"name": "ImageResultList.options.columnWidth",
		"comment": "<p>Specifies the width of a column in a column layout.\nThe default value is 170.</p>\n"
	},
	{
		"name": "ImageResultList.options.heightThreshold",
		"comment": "<p>Specifies the maximum height of a row in a row layout.\nThe default value is 250.</p>\n"
	},
	{
		"name": "ImageResultList.options.layoutType",
		"comment": "<p>Specifies the type of layout used to display images results.\nThe available values are:\n   row - Displays resized images that fit to the width of the container and have the same height for a row.\n   column - Displays the images in fixed-size columns.\nThe default value is row.</p>\n"
	},
	{
		"name": "ImageResultList.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ImageResultList.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "ImageResultList.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ImageResultList.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "ImageResultList.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "ImageResultList.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ImageResultList.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ImageResultList.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "ImageResultList.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "ImageResultList.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ImageResultList.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ImageResultList.constructor",
		"comment": "<p>Create a new ResultList.<br/>\nBind various event related to queries (eg : on querySuccess -&gt; renderResults)<br/>\nBind scroll event if infinite scrolling is enabled.</p>\n"
	},
	{
		"name": "Initialization",
		"comment": "<p>The main purpose of this class is to initialize the framework (a.k.a the code executed when calling Coveo.init).<br/>\nIt&#39;s also in charge or registering the available components, as well as the method that we expost to the global Coveo scope.<br/>\nFor example, the Coveo.executeQuery function will be registed in this class by the <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html\">QueryController</a>.</p>\n"
	},
	{
		"name": "LocalStorageHistoryController",
		"comment": "<p>This component acts like the <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a> excepts that is saves the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> in the local storage.<br/>\nThis will not allow &#39;back&#39; and &#39;forward&#39; navigation in the history, like the standard <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a> allows. Instead, it load the query state only on page load.<br/>\nTo enable this component, you should set the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html#options.uselocalstorageforhistory\">SearchInterface.options.useLocalStorageForHistory</a> as well as the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> options to true.</p>\n"
	},
	{
		"name": "LocalStorageHistoryController.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "LocalStorageHistoryController.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "LocalStorageHistoryController.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "LocalStorageHistoryController.constructor",
		"comment": "<p>Create a new LocalStorageHistoryController instance</p>\n"
	},
	{
		"name": "Model",
		"comment": "<p>A model is basically a key -&gt; value store that trigger letious javascript event when one of the value for each of it&#39;s key changes.<br/>\nThis is a class that is meant to be extended : the most important one probably being the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a><br/>\nComponent set values in this key -&gt; value store, and listen to event triggered to react accordingly.<br/></p>\n"
	},
	{
		"name": "Model.attributes",
		"comment": "<p>The attributes contained in this model. Normally, you should not set attribute directly on this property, as this will not cause the required events to be triggered.</p>\n"
	},
	{
		"name": "Model.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Model.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Model.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Model.eventTypes",
		"comment": "<p>The event type that can be triggered :<br/>\n-- preprocess -&gt; triggered before a value is set on an attribute, to allow to modify it before it&#39;s set.<br/>\n-- changeOne -&gt; triggered when a single value change.</p>\n"
	},
	{
		"name": "OmniboxResultList",
		"comment": "<p>This component is exactly like a normal ResultList Component, except that it will render itself inside the Omnibox Component.\nThis will provide a kind of search as you type functionnality, allowing you to easily render complex Result Templates inside the Omnibox Component.</p>\n"
	},
	{
		"name": "OmniboxResultList.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "OmniboxResultList.options.headerTitle",
		"comment": "<p>Specifies the title that you want for this section.</p>\n"
	},
	{
		"name": "OmniboxResultList.options.omniboxZIndex",
		"comment": "<p>Specifies the index at which the result list should render itself inside the Omnibox</p>\n"
	},
	{
		"name": "OmniboxResultList.options.onSelect",
		"comment": "<p>Specifies the function you wish to execute when a result suggestion is selected.</p>\n"
	},
	{
		"name": "OmniboxResultList.options.queryOverride",
		"comment": "<p>Specifies the override you want to use on the query sent to the OmniboxResultList component.</p>\n"
	},
	{
		"name": "OmniboxResultList.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "OmniboxResultList.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "OmniboxResultList.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "OmniboxResultList.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "OmniboxResultList.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "OmniboxResultList.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "OmniboxResultList.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "OmniboxResultList.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a>)</p>\n"
	},
	{
		"name": "OmniboxResultList.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "OmniboxResultList.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "OmniboxResultList.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "OmniboxResultList.constructor",
		"comment": "<p>Create a new ResultList.<br/>\nBind various event related to queries (eg : on querySuccess -&gt; renderResults)<br/>\nBind scroll event if infinite scrolling is enabled.</p>\n"
	},
	{
		"name": "QueryBuilder",
		"comment": "<p>The QueryBuilder is used to build a <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a> that will be able to be executed using the Search API.<br/>\nThe class exposes several members and methods that help components and external code to build up the final query that is sent to the Search API.<br/></p>\n"
	},
	{
		"name": "QueryBuilder.actionsHistory",
		"comment": "<p>The actions history represents the past actions a user made and is used by reveal to suggest recommendations.\nIt is generated by the page view script (<a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>)</p>\n"
	},
	{
		"name": "QueryBuilder.advancedExpression",
		"comment": "<p>Used to build the advanced part of the query expression.<br/>\nThis part is typically formed of filter expressions generated by components such as facets, external code, etc.</p>\n"
	},
	{
		"name": "QueryBuilder.childField",
		"comment": "<p>Specifies the childField when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n"
	},
	{
		"name": "QueryBuilder.constantExpression",
		"comment": "<p>Used to build the advanced part of the query expression.<br/>\nThis part is similar to advancedExpression, but its content is interpreted as a constant expression by the index and it takes advantage of special caching features.</p>\n"
	},
	{
		"name": "QueryBuilder.context",
		"comment": "<p>The context is a map of key_value that can be used in the Query pipeline in the Coveo platform.<br/></p>\n"
	},
	{
		"name": "QueryBuilder.disableQuerySyntax",
		"comment": "<p>Whether to disable the special query syntax such as field references for the basic query expression (parameter q).\nIt is equivalent to a No syntax block applied to the basic query expression.\nIf not specified, the parameter defaults to false</p>\n"
	},
	{
		"name": "QueryBuilder.disjunctionExpression",
		"comment": "<p>Used to build the disjunctive part of the query expression.<br/>\nWhen present, this part is evaluated separately from the other expressions and the matching results are merged to those matching expression, advancedExpression and constantExpression.<br/>\nThe final boolean expression for the query is thus (basic advanced constant) OR (disjunction).</p>\n"
	},
	{
		"name": "QueryBuilder.enableCollaborativeRating",
		"comment": "<p>Whether the index should take collaborative rating in account when ranking result. See : <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a></p>\n"
	},
	{
		"name": "QueryBuilder.enableDebug",
		"comment": "<p>Whether to enable debug info on the query.<br/>\nThis will return additional information on the resulting JSON response from the Search API.<br/>\nMostly : execution report (a detailed breakdown of the parsed and executed query)</p>\n"
	},
	{
		"name": "QueryBuilder.enableDidYouMean",
		"comment": "<p>Whether to enable query corrections on this query. See <a href=\"https://coveo.github.io/search-ui/components/didyoumean.html\">DidYouMean</a></p>\n"
	},
	{
		"name": "QueryBuilder.enableLowercaseOperators",
		"comment": "<p>Whether to enable the support for operator in lowercase (AND OR -&gt; and or)</p>\n"
	},
	{
		"name": "QueryBuilder.enablePartialMatch",
		"comment": "<p>Whether to enable partial matching of the basic expression keywords.<br/>\nBy activating this, when the basic expression contains at least <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchkeywords\">IQuery.partialMatchKeywords</a>, documents containing only the number of keywords specified by <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchthreshold\">IQuery.partialMatchThreshold</a> will also match the query.<br/>\nWithout this option, documents are required to contain all the keywords in order to match the query.<br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "QueryBuilder.enableQuestionMarks",
		"comment": "<p>Whether to enable question marks with wildcards.<br/>\nThis enables using the question mark ? character within wildcard expressions.</p>\n"
	},
	{
		"name": "QueryBuilder.enableWildcards",
		"comment": "<p>Whether to enable wildcards on the basic expression keywords.<br/>\nThis enables the wildcard features of the index. Coveo Platform will expand keywords containing wildcard characters to the possible matching keywords to broaden the query.<br/>\nSee : <a href=\"https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm\">https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm</a><br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "QueryBuilder.excerptLength",
		"comment": "<p>This specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.<br/>\nThe index includes the top most interesting sentences (in the order they appear in the document) that fit in the specified number of characters.<br/>\nWhen not specified, the default value is 200.</p>\n"
	},
	{
		"name": "QueryBuilder.expression",
		"comment": "<p>Used to build the basic part of the query expression.<br/>\nThis part typically consists of user-entered content such as query keywords, etc.</p>\n"
	},
	{
		"name": "QueryBuilder.filterField",
		"comment": "<p>This specifies a field on which <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> should be performed.<br/>\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.<br/>\nIt&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\n"
	},
	{
		"name": "QueryBuilder.filterFieldRange",
		"comment": "<p>Number of results that should be folded, using the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#filterfield\">IQuery.filterField</a></p>\n"
	},
	{
		"name": "QueryBuilder.firstResult",
		"comment": "<p>This is the 0-based index of the first result to return.<br/>\nIf not specified, this parameter defaults to 0.</p>\n"
	},
	{
		"name": "QueryBuilder.groupByRequests",
		"comment": "<p>This specifies an array of Group By operations that can be performed on the query results to extract facets</p>\n"
	},
	{
		"name": "QueryBuilder.maximumAge",
		"comment": "<p>The maximum age for cached query results, in milliseconds.<br/>\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.<br/>\nOtherwise, the query will be sent to the index.</p>\n"
	},
	{
		"name": "QueryBuilder.numberOfResults",
		"comment": "<p>This is the number of results to return, starting from <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#firstresult\">IQuery.firstResult</a>.<br/>\nIf not specified, this parameter defaults to 10.</p>\n"
	},
	{
		"name": "QueryBuilder.parentField",
		"comment": "<p>Specifies the parentField when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n"
	},
	{
		"name": "QueryBuilder.partialMatchKeywords",
		"comment": "<p>The minimum number of keywords needed to activate partial match.<br/>\nThis specifies the minimum number of keywords needed for the partial match feature to activate.<br/>\nIf the basic expression contains less than this number of keywords, no transformation is applied on the query.<br/>\nIf not specified, this parameter defaults to 5.</p>\n"
	},
	{
		"name": "QueryBuilder.partialMatchThreshold",
		"comment": "<p>The threshold to use for matching documents when partial match is enabled.<br/>\nThis specifies the minimum number of query keywords that a document must contain when partial match is enabled. This value can either be an absolute number or a percentage value based on the total number of keywords.<br/>\nIf not specified, this parameter defaults to 50%.</p>\n"
	},
	{
		"name": "QueryBuilder.pipeline",
		"comment": "<p>Name of the query pipeline to use.<br/>\nThis specifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\n"
	},
	{
		"name": "QueryBuilder.queryFunctions",
		"comment": "<p>This specifies an array of Query Function operation that will be executed on the results.</p>\n"
	},
	{
		"name": "QueryBuilder.rankingFunctions",
		"comment": "<p>This specifies an array of Ranking Function operations that will be executed on the result</p>\n"
	},
	{
		"name": "QueryBuilder.recommendation",
		"comment": "<p>This is the id of the recommendation interface that generated the query.</p>\n"
	},
	{
		"name": "QueryBuilder.searchHub",
		"comment": "<p>The hub value set from the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component.<br/>\nUsed for analytics reporting in the Coveo platform</p>\n"
	},
	{
		"name": "QueryBuilder.sortCriteria",
		"comment": "<p>This specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to Relevancy.<br/>\nPossible values are : <br/>\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\n-- dateascending / datedescending : Sort using the value of the @date field, which is typically the last modification date of an item in the index.<br/>\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using Relevancy except that automatic weights based on keyword proximity etc, are not computed.<br/>\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\n-- @field ascending / @field descending : Sort using the value of a custom field.</p>\n"
	},
	{
		"name": "QueryBuilder.tab",
		"comment": "<p>The tab value set from the <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component.</p>\n"
	},
	{
		"name": "QueryController",
		"comment": "<p>This class is automatically instantiated and bound to the root of your search interface when you initialize the framework.<br/>\nIt is essentially a singleton that wraps the access to the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> endpoint to execute query, and is in charge of triggering the different query events.<br/>\nThis is what every component of the framework uses internally to execute query or access the endpoint.<br/>\nWhen calling <code>Coveo.executeQuery</code> this class is used.</p>\n"
	},
	{
		"name": "QueryController.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "QueryController.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "QueryController.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QueryController.constructor",
		"comment": "<p>Create a new query controller</p>\n"
	},
	{
		"name": "QueryEvents",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to query.</p>\n"
	},
	{
		"name": "QueryEvents.buildingQuery",
		"comment": "<p>Triggered when the query is being built.</p>\n"
	},
	{
		"name": "QueryEvents.deferredQuerySuccess",
		"comment": "<p>Triggered after the main query success event has finished executing.</p>\n"
	},
	{
		"name": "QueryEvents.doneBuildingQuery",
		"comment": "<p>Triggered when the query is done being built.</p>\n"
	},
	{
		"name": "QueryEvents.duringFetchMoreQuery",
		"comment": "<p>Triggered when more results is being fetched on the search API (think : Infinite scrolling, or pager).</p>\n"
	},
	{
		"name": "QueryEvents.duringQuery",
		"comment": "<p>Triggered when the query is being executed on the search API.</p>\n"
	},
	{
		"name": "QueryEvents.fetchMoreSuccess",
		"comment": "<p>Triggered when a more results were successfully returned from the search API. (think : Infinite scrolling, or page).</p>\n"
	},
	{
		"name": "QueryEvents.newQuery",
		"comment": "<p>Triggered when a new query is launched.</p>\n"
	},
	{
		"name": "QueryEvents.noResults",
		"comment": "<p>Triggered when there is no results for a particular query.</p>\n"
	},
	{
		"name": "QueryEvents.preprocessMoreResults",
		"comment": "<p>Triggered before the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#fetchmoresuccess\">QueryEvents.fetchMoreSuccess</a> event.</p>\n"
	},
	{
		"name": "QueryEvents.preprocessResults",
		"comment": "<p>Triggered before the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> event.</p>\n"
	},
	{
		"name": "QueryEvents.queryError",
		"comment": "<p>Triggered when there was an error executing a query on the search API.</p>\n"
	},
	{
		"name": "QueryEvents.querySuccess",
		"comment": "<p>Triggered when a query successfully return from the search API.</p>\n"
	},
	{
		"name": "QueryStateModel",
		"comment": "<p>The QueryStateModel is a key-&gt;value store of the state of every component that can affect a query.<br/>\nComponent set values in this key -&gt; value store, and listen to event triggered to react accordingly.<br/>\nFor example, when a query is launched, the searchbox will set the &#39;q&#39; attribute, the pager will set the &#39;first&#39; attribute, etc.<br/>\nAt the same time, this class will trigger the associated event when a value is modified.<br/>\neg : The user change the content of the searchbox, and submit a query. This will trigger the following events :<br/>\n-- state:change:q (because the value of &#39;q&#39; changed)</br>\n-- state:change (because at least one value changed in the query state)<br/>\nComponent or external code could hook handler on those events : document.addEventListener(&#39;state:change:q&#39;, handler);<br/>\nSee : <a href=\"https://coveo.github.io/search-ui/classes/model.html\">Model</a>, as all the relevant method are exposed in the base class.<br/>\nOptionally, the state can be persisted to the query string to allow browser history management : See <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a></p>\n"
	},
	{
		"name": "QueryStateModel.attributes",
		"comment": "<p>The attributes contained in this model. Normally, you should not set attribute directly on this property, as this will not cause the required events to be triggered.</p>\n"
	},
	{
		"name": "QueryStateModel.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "QueryStateModel.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "QueryStateModel.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QueryStateModel.eventTypes",
		"comment": "<p>The event type that can be triggered :<br/>\n-- preprocess -&gt; triggered before a value is set on an attribute, to allow to modify it before it&#39;s set.<br/>\n-- changeOne -&gt; triggered when a single value change.</p>\n"
	},
	{
		"name": "QueryStateModel.constructor",
		"comment": "<p>Create a new QueryState</p>\n"
	},
	{
		"name": "Recommendation",
		"comment": "<p>This component is a <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a> that will display recommendations based on the user history.\nTo get recommendations, the page view script must also be included in the page. View: <a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>\nThis component listens when the main search interface generates a query and it generates another to get the recommendations at the same time.</p>\n"
	},
	{
		"name": "Recommendation.options",
		"comment": "<p>The options for the recommendation component</p>\n"
	},
	{
		"name": "Recommendation.options.hideIfNoResults",
		"comment": "<p>Hides the component if there a no results / recommendations.\nThe default value is false.</p>\n"
	},
	{
		"name": "Recommendation.options.id",
		"comment": "<p>Specifies the id of the interface.\nIt is used by the analytics to know which recommendation interface was selected.\nThe default value is &quot;Recommendation&quot; for the first one and &quot;Recommendation_{number}&quot; where {number} depends on the number of recommendation interface with default ids in the page for the others.</p>\n"
	},
	{
		"name": "Recommendation.options.mainSearchInterface",
		"comment": "<p>Specifies the main <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a> to listen to.</p>\n"
	},
	{
		"name": "Recommendation.options.optionsToUse",
		"comment": "<p>Specifies which options from the main <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> to use in the triggered query.\nEx: <code data-options-to-use=\"expression, advancedExpression\"></code> would add the expression and the advanced expression parts from the main query in the triggered query.\nThe default value is undefined.</p>\n"
	},
	{
		"name": "Recommendation.options.sendActionsHistory",
		"comment": "<p>Specifies whether or not to send the actions history along with the triggered query.\nDisabling this option means this component won&#39;t be able to get Reveal recommendations.\nHowever, it could be useful to display side results in a search page.\nThe default value is true.</p>\n"
	},
	{
		"name": "Recommendation.options.userContext",
		"comment": "<p>Specifies the user context to send to Coveo analytics.\nIt will be sent with the query alongside the user history to get the recommendations.</p>\n"
	},
	{
		"name": "Recommendation.getComponents",
		"comment": "<p>Get all the components for a given type</p>\n"
	},
	{
		"name": "Recommendation.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "Recommendation.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "Recommendation.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Recommendation.constructor",
		"comment": "<p>Create a new search interface. Initialize letious singleton for the interface (eg : Usage analytic, query controller, state model, etc.)<br/>\nBind event related to the query.<br/>\nWill hide and show the loading animation, if activated.<br/></p>\n"
	},
	{
		"name": "SearchEndpoint",
		"comment": "<p>A search endpoint allows to execute letious actions against the Coveo Search API and index.<br/>\nFor example, you can search, list field values, get the quickview content for a document, etc.<br/>\nAny actions that you execute using this class will not trigger a full query cycle for the Coveo components.<br/>\nThis is because this class will not trigger any query events directly.<br/>\nIf you wish to execute a query that all components will react to (and trigger the corresponding query events), use the <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html\">QueryController</a></p>\n"
	},
	{
		"name": "SearchEndpoint.endpoints",
		"comment": "<p>A map of all the initialized endpoint.<br/>\neg : Coveo.SearchEndpoint.endpoints[&#39;default&#39;] will return the default endpoint that was created at initialization</p>\n"
	},
	{
		"name": "SearchEndpoint.constructor",
		"comment": "<p>Create a new SearchEndpoint.<br/>\nWill use a set of sane default options, and merge them with the options parameter.<br/>\nWill create an <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a> and use it to communicate with the endpoint internally</p>\n"
	},
	{
		"name": "SearchInterface",
		"comment": "<p>This component is the root and main component of your search interface.<br/>\nYou should place every other component inside this component.<br/>\nIt is also on this component that you call the initialization function.<br/>\nSince this component is the root of your search UI, it is recommended that you give it a unique HTML id attribute in order to reference it easily.</p>\n"
	},
	{
		"name": "SearchInterface.options",
		"comment": "<p>The options for the search interface</p>\n"
	},
	{
		"name": "SearchInterface.options.autoTriggerQuery",
		"comment": "<p>Specifies whether the init function should trigger the first query automatically when the page is loaded.<br/>\nNote that if you set this to false, then the hideUntilFirstQuery option still applies. This means that the animation will still show until a query is triggered.<br/>\nDefault is true.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableAutomaticResponsiveMode",
		"comment": "<p>Specifies wether the UI should use an automatic responsive mode (eg : The tab(s) and facet(s) being placed automatically under the search box)<br/>\nThis can be disabled for design reasons, if it does not fit with the implementation needs.<br/>\nThe default value is <code>true</code></p>\n"
	},
	{
		"name": "SearchInterface.options.enableCollaborativeRating",
		"comment": "<p>Specifies whether to enable the collaborative rating for the index and and include the user rating on each results to the normal index ranking.<br/>\nIf activated, this option can be leveraged with the <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a> component.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableDebugInfo",
		"comment": "<p>Specifies whether to enable the feature that allows users to ALT + double click on any results to get the Debug page with a detailed view of all the properties and fields for a given result.<br/>\nThis has no security concern (as all those informations are visible to users through the browser developer console or by calling the Coveo API directly).<br/>\nThe default value is true.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableDuplicateFiltering",
		"comment": "<p>Specifies whether to filter duplicates on the search results.<br/>\nWhen true, duplicates do not appear in search results, but they however are included in facet counts, which can be sometimes confusing for the users. This is a limitation of the index.<br/>\nExample: The user narrows a query to one document that has a duplicate. Only one document appears in search results, but the facet count is 2.<br/>\nThe default value is false.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableHistory",
		"comment": "<p>Specifies whether your search interface allows users to navigate in the search history using the browser back/forward buttons.<br/>\nWhen enabled, the search interface saves the state of the current query in the hash portion of the URL.<br/>\nFor example #q=foobar.<br/>\nThe default value is <code>false</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.excerptLength",
		"comment": "<p>Specifies the number of characters of the excerpt to get at query time and display for each query result.<br/>\nThis setting is global and can not be modified on a per result basis.<br/>\nThe default value is 200.</p>\n"
	},
	{
		"name": "SearchInterface.options.expression",
		"comment": "<p>Specifies an expression to add to each query.<br/>\nThis should be use if you wish to add a global filter for your whole search interface that applies for all tab.<br/>\nDo not use this for security concern ... (It&#39;s javascript after all).<br/>\nBy default none is added.</p>\n"
	},
	{
		"name": "SearchInterface.options.filterField",
		"comment": "<p>Specifies the name of a field to use as a custom filter when executing the query (also referred to as &#39;folding&#39;).<br/>\nSetting this option causes the index to return only one result having any particular value inside the filter field. Any other matching result is &#39;folded&#39; inside the childResults member of each JSON query result.<br/>\nThis feature is typically used with threaded conversations to include only one top-level result per conversation. Thus, the field specified in this option typically is a value unique to each thread that is shared by all items (e.g., posts, emails, etc.) in the thread.<br/>\nThis is obviously an advanced feature. Instead, look into using the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component, which covers a lot of different use cases.<br/>\nBy default none is added</p>\n"
	},
	{
		"name": "SearchInterface.options.firstLoadingAnimation",
		"comment": "<p>Specifies the animation that you wish to use for your interface.<br/>\nThis can be either a selector, or an element that matches the correct css class.<br/>\nEg : firstLoadingAnimation : &#39;.CustomFirstLoadingAnimation&#39; / data-first-loading-animation=&#39;.CustomFirstLoadingAnimation&#39;.</br>\nEg : &lt;element class=&#39;CoveoSearchInterface&#39;&gt;&lt;element class=&#39;coveo-first-loading-animation&#39;/&gt;&lt;/element&gt;<br/>\nBy default, this will be a Coveo CSS animation (which can also be customized with css)</p>\n"
	},
	{
		"name": "SearchInterface.options.hideUntilFirstQuery",
		"comment": "<p>Specifies whether the interface should display a loading animation before the first query has completed successfully.<br/>\nNote that if you set autoTriggerQuery to false, this means that the loading animation won&#39;t go away automatically.<br/>\nDefault is true.</p>\n"
	},
	{
		"name": "SearchInterface.options.maximumAge",
		"comment": "<p>Specifies the maximum age in milliseconds that cached query results can have in order to be used (instead of performing a new query on the index).<br/>\nIf cached results are available but are older than the specified age, a new query will be performed on the index.<br/>\nOn high-volume public web sites, having a larger maximum age can greatly improve query response time at the cost of result freshness.<br/>\nBy default, the Coveo Search API will determine the cache length. This is typically 15 minutes.</p>\n"
	},
	{
		"name": "SearchInterface.options.pipeline",
		"comment": "<p>Specifies the name of the query pipeline to use for the queries. If not specified, the default value is default, which means the default query pipeline will be used.<br/>\nYou can use this parameter for example when your index is in a Coveo Cloud Organization where you created pipelines (see <a href=\"https://onlinehelp.coveo.com/en/cloud/creating_and_managing_query_pipelines.htm\">https://onlinehelp.coveo.com/en/cloud/creating_and_managing_query_pipelines.htm</a>).<br/>\nDefault value is &#39;default&#39;.</p>\n"
	},
	{
		"name": "SearchInterface.options.resultsPerPage",
		"comment": "<p>Specifies the number of results that each page displays.<br/>\nDefault is 10.</p>\n"
	},
	{
		"name": "SearchInterface.options.searchPageUri",
		"comment": "<p>Specifies the search page you wish to navigate to when instantiating a standalone search box interface.<br/>\nBy default this is undefined, meaning the search interface will not redirect.</p>\n"
	},
	{
		"name": "SearchInterface.options.timezone",
		"comment": "<p>Specifies the timezone in which the search interface is loaded. This allows the index to recognize some special query syntax.<br/>\nThis must be an IANA zone info key (aka the Olson time zone database). For example : &#39;America/New_York&#39;.<br/>\nBy default, we use a library that tries to detect the timezone automatically.<br/></p>\n"
	},
	{
		"name": "SearchInterface.options.useLocalStorageForHistory",
		"comment": "<p>Specifies that you wish to use the local storage of the browser to store the state of the interface.<br/>\nThis can be used for very specific purpose, and only if you know what you are doing.<br/>\nDefault value is false.</p>\n"
	},
	{
		"name": "SearchInterface.getComponents",
		"comment": "<p>Get all the components for a given type</p>\n"
	},
	{
		"name": "SearchInterface.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a></p>\n"
	},
	{
		"name": "SearchInterface.logger",
		"comment": "<p>Allows component to log in the dev console</p>\n"
	},
	{
		"name": "SearchInterface.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchInterface.constructor",
		"comment": "<p>Create a new search interface. Initialize letious singleton for the interface (eg : Usage analytic, query controller, state model, etc.)<br/>\nBind event related to the query.<br/>\nWill hide and show the loading animation, if activated.<br/></p>\n"
	},
	{
		"name": "TemplateCache",
		"comment": "<p>Holds a reference to all template available in the framework</p>\n"
	},
	{
		"name": "TemplateHelpers",
		"comment": "<p>Allow to register and return template helpers (essentially : Utility functions that can be executed in the context of a template to render complex elements)</p>\n"
	},
	{
		"name": "BaseJQueryEventObject",
		"comment": "<p>Interface of the JQuery extension of the W3C event object</p>\n"
	},
	{
		"name": "IAnalyticsActionCause",
		"comment": "<p>Describe the cause of an event for the analytics service</p>\n"
	},
	{
		"name": "IAnalyticsActionCause.name",
		"comment": "<p>The name of the event. Should be unique for each event.<br/>\nEg : searchBoxSubmit or resultSort</p>\n"
	},
	{
		"name": "IAnalyticsActionCause.type",
		"comment": "<p>The type of the event. Allow to regroup similar event type together when doing reporting.<br/>\nFor example, all search box event will be of type &quot;search box&quot;</p>\n"
	},
	{
		"name": "IAnalyticsClient",
		"comment": "<p>Describe an analytics client, that can log events or return information from the service</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta",
		"comment": "<p>The expected metadata when loggin a click event / document view</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta.author",
		"comment": "<p>The author of the clicked document</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta.documentTitle",
		"comment": "<p>The title of the clicked document</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta.documentURL",
		"comment": "<p>The url of the clicked document</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions",
		"comment": "<p>Options for building an <code>&lt;a&gt;</code> tag.</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions.class",
		"comment": "<p>The CSS class(es) of the tag.</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions.target",
		"comment": "<p>The target (<code>href</code> attribute).</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions.text",
		"comment": "<p>The tag&#39;s text content.</p>\n"
	},
	{
		"name": "IBreadcrumbItem",
		"comment": "<p>Represent an item to insert in the breadcrumb</p>\n"
	},
	{
		"name": "IBreadcrumbItem.element",
		"comment": "<p>The HTMLElement to insert in the breadcrumb</p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#buildingquery\">QueryEvents.buildingQuery</a></p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs.cancel",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs.queryBuilder",
		"comment": "<p>Allow handlers to modify the query by using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a></p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IComponentBindings",
		"comment": "<p>The bindings, or environment in which each component exists.</p>\n"
	},
	{
		"name": "IComponentBindings.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "IComponentBindings.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IComponentBindings.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "IComponentBindings.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IComponentBindings.root",
		"comment": "<p>The root HTMLElement of the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a> in which the component exists.</p>\n"
	},
	{
		"name": "IComponentBindings.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "IComponentBindings.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "IComponentDefinition",
		"comment": "<p>Definition for a Component.</p>\n"
	},
	{
		"name": "IComponentDefinition.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "IComponentDefinition.className",
		"comment": "<p>The generated className for this component.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "IComponentDefinition.fields",
		"comment": "<p>The optional index fields that the component possess or display</p>\n"
	},
	{
		"name": "IComponentDefinition.options",
		"comment": "<p>The available options for the component</p>\n"
	},
	{
		"name": "IComponentDefinition.parent",
		"comment": "<p>The optional parent of the component, which will be a component itself.</p>\n"
	},
	{
		"name": "IComponentDefinition.constructor",
		"comment": "<p>Constructor for each component</p>\n"
	},
	{
		"name": "IComputedFieldRequest",
		"comment": "<p>Describe a computed field request<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Computed+Field+Parameters\">https://developers.coveo.com/display/SearchREST/Computed+Field+Parameters</a></p>\n"
	},
	{
		"name": "IComputedFieldRequest.field",
		"comment": "<p>This specifies the field on which the aggregate operation will be performed. This field is typically a numerical value.</p>\n"
	},
	{
		"name": "IComputedFieldRequest.operation",
		"comment": "<p>This specifies the operation to execute on the field value.<br/>\nPossible operations:\n-- sum: Computes the sum of all values.\n-- average: Computes the average of all values.\n--minimum: Retrieves the smallest of all values.\n--maximum: Retrieves the largest of all values.</p>\n"
	},
	{
		"name": "ICoreHelpers",
		"comment": "<p>The core template helpers provided by default.</p>\n"
	},
	{
		"name": "ICoreHelpers.anchor",
		"comment": "<p>Formats a clickable HTML link (<code>&lt;a&gt;</code>).</p>\n"
	},
	{
		"name": "ICoreHelpers.currency",
		"comment": "<p>Formats a currency value to a string using the specified options.</p>\n"
	},
	{
		"name": "ICoreHelpers.date",
		"comment": "<p>Formats a date value to a date-only string using the specified options.</p>\n"
	},
	{
		"name": "ICoreHelpers.dateTime",
		"comment": "<p>Formats a date value to a date and time string using the specified\noptions.</p>\n"
	},
	{
		"name": "ICoreHelpers.email",
		"comment": "<p>Renders one or several email values in <code>mailto:</code> hyperlinks.</p>\n"
	},
	{
		"name": "ICoreHelpers.emailDateTime",
		"comment": "<p>Formats a date value to a date and time string using options suitable for\nemail dates</p>\n"
	},
	{
		"name": "ICoreHelpers.fromFileTypeToIcon",
		"comment": "<p>Generates an icon based on the file type of the current result. The icon\nwill be contained inside a <code>&lt;span&gt;</code> element with the appropriate CSS\nclass.</p>\n"
	},
	{
		"name": "ICoreHelpers.highlight",
		"comment": "<p>Highlights a string using the provided highlight information.</p>\n"
	},
	{
		"name": "ICoreHelpers.highlightStreamHTML",
		"comment": "<p>This helper operates exactly like the <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html#highlightstreamtext\">highlightStreamText</a> helper, except\nthat it should be used to highlight HTML content. The helper takes care\nof not highlighting the HTML markup.</p>\n"
	},
	{
		"name": "ICoreHelpers.highlightStreamText",
		"comment": "<p>This helper highlights the provided terms in a given string.<br/>\nBy default, the terms to highlight are the current query and the\nassociated stemming words from the index.</p>\n"
	},
	{
		"name": "ICoreHelpers.image",
		"comment": "<p>Formats an HTML image tag (<code>&lt;img&gt;</code>).</p>\n"
	},
	{
		"name": "ICoreHelpers.loadTemplate",
		"comment": "<p>Loads a partial template in the current template, by passing the ID of\nthe template to load, the condition for which this template should be\nloaded, and the context object (the object that the loaded template will\nuse as its data). By default, the context object will be the same as the\ntemplate that called this helper function. So, for example, in a\nResultList Component, the contextObject would, by default, be the Query\nResults.</p>\n"
	},
	{
		"name": "ICoreHelpers.number",
		"comment": "<p>Formats a numeric value using the format string.</p>\n"
	},
	{
		"name": "ICoreHelpers.shorten",
		"comment": "<p>Shortens a string so that its length does not exceed a specific number of\ncharacters. An ellipsis is appended to the string if it exceeds the\nmaximum length.</p>\n"
	},
	{
		"name": "ICoreHelpers.shortenPath",
		"comment": "<p>Shortens a string using an algorithm suitable for file paths. The helper\nwill insert an ellipsis in the string where text has been removed when\nthe path exceeds the maximum length.</p>\n"
	},
	{
		"name": "ICoreHelpers.shortenUri",
		"comment": "<p>Shortens a string using an algorithm suitable for URIs. The helper will\ninsert an ellipsis in the string where text has been removed when the URI\nexceeds the maximum length.</p>\n"
	},
	{
		"name": "ICoreHelpers.thumbnail",
		"comment": "<p>Formats an HTML image tag (<code>&lt;img&gt;</code>), and automatically uses the result\nobject to query the REST API to get the thumbnail for this result. For\nexample, this can be used to great effect when designing a template\nshowing users or preview of files.</p>\n<ul>\n<li><code>result</code>: The current result object inside your template. In\nunderscore, it is referenced as <code>obj</code>. Optional, by default the result\nwill be resolved automatically from your current template function (\nMeaning the nearest result in the current call stack execution inside\nyour template)</li>\n<li><code>endpoint</code>: Optional. The name of the endpoint to use for your\nthumbnail. Default is default.</li>\n<li><code>options</code>: The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/iimageutilsoptions.html\">IImageUtilsOptions</a>).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.time",
		"comment": "<p>Formats a date value to a time-only string using the sepcified options.</p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#donebuildingquery\">QueryEvents.doneBuildingQuery</a></p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs.cancel",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs.queryBuilder",
		"comment": "<p>Allow handlers to modify the query by using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a></p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#duringquery\">QueryEvents.duringQuery</a></p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.promise",
		"comment": "<p>A promises for the results that will be returned by the search API</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IEndpointCallOptions",
		"comment": "<p>Available options when calling against the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a></p>\n"
	},
	{
		"name": "IEndpointCallParameters",
		"comment": "<p>Parameters that can be used when calling an <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a></p>\n"
	},
	{
		"name": "IEndpointCallParameters.errorsAsSuccess",
		"comment": "<p>Flag to specify if the endpoint should return different type of error as actual 200 success for the browser, but with the error code/message contained in the response.</p>\n"
	},
	{
		"name": "IEndpointCallParameters.method",
		"comment": "<p>Or HTTP verb : GET, POST, PUT, etc.</p>\n"
	},
	{
		"name": "IEndpointCallParameters.queryString",
		"comment": "<p>Array of query string params.<br/>\neg: [&#39;foo=1&#39;,&#39;bar=2&#39;]</p>\n"
	},
	{
		"name": "IEndpointCallParameters.requestData",
		"comment": "<p>Body of the request.<br/>\nkey -&gt; value map (JSON)</p>\n"
	},
	{
		"name": "IEndpointCallParameters.requestDataType",
		"comment": "<p>Request data type.<br/>\neg: &quot;application/json&quot;, &quot;application/x-www-form-urlencoded; charset=\\&quot;UTF-8\\&quot;&quot;</p>\n"
	},
	{
		"name": "IEndpointCallParameters.responseType",
		"comment": "<p>responseType of the request.</br>\neg: &quot;text&quot;, &quot;arraybuffer&quot; etc.</p>\n"
	},
	{
		"name": "IEndpointCallParameters.url",
		"comment": "<p>Url to target</p>\n"
	},
	{
		"name": "IEndpointCallerOptions",
		"comment": "<p>Possible options when creating a <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a></p>\n"
	},
	{
		"name": "IEndpointCallerOptions.accessToken",
		"comment": "<p>The access token to use for this endpoint.</p>\n"
	},
	{
		"name": "IEndpointCallerOptions.password",
		"comment": "<p>The password to use to log into this endpoint. Used for basic auth.<br/>\nNot used if accessToken is provided.</p>\n"
	},
	{
		"name": "IEndpointCallerOptions.username",
		"comment": "<p>The username to use to log into this endpoint. Used for basic auth.<br/>\nNot used if accessToken is provided.</p>\n"
	},
	{
		"name": "IErrorResponse",
		"comment": "<p>An error response</p>\n"
	},
	{
		"name": "IErrorResponse.data",
		"comment": "<p>Data about the error</p>\n"
	},
	{
		"name": "IErrorResponse.statusCode",
		"comment": "<p>Status code for the error</p>\n"
	},
	{
		"name": "IExtension",
		"comment": "<p>Information about a query extension</p>\n"
	},
	{
		"name": "IExtension.argumentNames",
		"comment": "<p>An array of all possible arguments</p>\n"
	},
	{
		"name": "IExtension.name",
		"comment": "<p>The name of the extension</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#fetchmoresuccess\">QueryEvents.fetchMoreSuccess</a></p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IFieldDescription",
		"comment": "<p>Information about a single field in the index</p>\n"
	},
	{
		"name": "IFieldDescription.defaultValue",
		"comment": "<p>The default value of the field</p>\n"
	},
	{
		"name": "IFieldDescription.description",
		"comment": "<p>A small(ish) description of the field</p>\n"
	},
	{
		"name": "IFieldDescription.fieldSourceType",
		"comment": "<p>It&#39;s fieldSourceType, as a string.</p>\n"
	},
	{
		"name": "IFieldDescription.fieldType",
		"comment": "<p>It&#39;s fieldType, as a string.<br/>\neg: Date, Double, Integer, LargeString, Long, SmallString</p>\n"
	},
	{
		"name": "IFieldDescription.groupByField",
		"comment": "<p>Gets whether the field is considered groupBy (facet)</p>\n"
	},
	{
		"name": "IFieldDescription.includeInQuery",
		"comment": "<p>Gets whether the field can be referenced in a query.</p>\n"
	},
	{
		"name": "IFieldDescription.includeInResults",
		"comment": "<p>Gets whether the field is returned with results.</p>\n"
	},
	{
		"name": "IFieldDescription.name",
		"comment": "<p>It&#39;s name, as a string</p>\n"
	},
	{
		"name": "IFieldDescription.sortByField",
		"comment": "<p>Gets whether the field can be used to sort results</p>\n"
	},
	{
		"name": "IFieldDescription.splitGroupByField",
		"comment": "<p>Gets whether the field is considered splitGroupBy (facet with ; between values)</p>\n"
	},
	{
		"name": "IFieldDescription.type",
		"comment": "<p>It&#39;s type, as a string</p>\n"
	},
	{
		"name": "IGetDocumentOptions",
		"comment": "<p>Available options when calling against the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> to get a document</p>\n"
	},
	{
		"name": "IGroupByRequest",
		"comment": "<p>Describe a group by request to perform against the index.<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Group+By+Parameters\">https://developers.coveo.com/display/SearchREST/Group+By+Parameters</a></p>\n"
	},
	{
		"name": "IGroupByRequest.allowedValues",
		"comment": "<p>This explicitly specifies a list of values for which Group By values should be generated.<br/>\nTrailing wildcards can be used to include ranges of values.<br/>\neg : The array [&quot;foo&quot;, &quot;bar*&quot;] would return Group By values for foo and any value starting with bar.</p>\n"
	},
	{
		"name": "IGroupByRequest.computedFields",
		"comment": "<p>This specifies an array of computed fields that should be computed for each Group By value that is returned.<br/>\nComputed fields are used to perform aggregate operations on other fields for all the matching documents having a specific value in the Group By field in the results</p>\n"
	},
	{
		"name": "IGroupByRequest.constantQueryOverride",
		"comment": "<p>This specifies a constant query expression on which to compute the Group By operation.<br/>\nBy default, the constant part of the query expression being executed is used.<br/>\nThis feature is much like the normal queryOverride except that the index will keep the query expression in cache for faster queries. Do no put dynamic query expression in this parameter, as it will negatively impact the performance.</p>\n"
	},
	{
		"name": "IGroupByRequest.field",
		"comment": "<p>This specifies the field on which the Group By operation is performed. The Group By will return a Group By value for each distinct value of this field within the result set.</p>\n"
	},
	{
		"name": "IGroupByRequest.generateAutomaticRanges",
		"comment": "<p>By setting the parameter generateAutomaticRanges to true, the ranges will be calculated by the Coveo index.</p>\n"
	},
	{
		"name": "IGroupByRequest.injectionDepth",
		"comment": "<p>This specifies how deep the index will scan the results to identify missing Group By values.<br/>\nIf not specified, the default value is 1000.<br/>\nWhen executing a Group By operation, the index uses various heuristics to list all the values that are appearing in the result set. In some corner cases, some values might be omitted (it&#39;s a classical trade-off of precision vs performance). Using injection means that the index will explicitly scan the field values of the top n results of the query, and ensure that the values present in those results are included. Using higher values for this parameter may impact query performance.</p>\n"
	},
	{
		"name": "IGroupByRequest.maximumNumberOfValues",
		"comment": "<p>This specifies the maximum number of values that the Group By operation will return.<br/>\nIf not specified, the default value is 10.</p>\n"
	},
	{
		"name": "IGroupByRequest.queryOverride",
		"comment": "<p>This specifies a different query expression on which to compute the Group By operation.<br/>\nBy default, the query expression being executed is used.<br/>\nThis feature is typically used for performance reasons to retrieve Group By values on separate expressions while executing a normal query in a single operation.</p>\n"
	},
	{
		"name": "IGroupByRequest.rangeValues",
		"comment": "<p>This explicitly specifies a list of range values for which Group By values should be generated.</p>\n"
	},
	{
		"name": "IGroupByRequest.sortCriteria",
		"comment": "<p>This specifies how the Group By values should be sorted by the indexer. If not specified, the default value is Score.<br/>\nPossible values are :<br/>\n-- score : the score is computed from the number of occurrences as well as from the position in the result set where the items having this value are appearing. Using this criterion, an item with 100 occurrences might appear after one with only 10 occurrences if those occurrences tend to appear sooner in the ranked result set.<br/>\n-- occurrences : Sort by number of occurrences, with values having the highest number appearing first. <br/>\n-- alphaascending / alphadescending : Sort alphabetically on the field values. <br/>\n-- computedfieldascending / computedfielddescending : Sort on the values of the first computed field for each Group By value. <br/>\n-- chisquare : Sort based on the relative frequency of values in the result set compared to the frequency in the whole index. This means that a value that doesn&#39;t appear often in the index but does appear often in the result set will tend to appear higher in the list.<br/>\n-- nosort : Do not sort the Group By values. The values will be returned in a random order.</p>\n"
	},
	{
		"name": "IGroupByResult",
		"comment": "<p>A result for a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.</p>\n"
	},
	{
		"name": "IGroupByResult.field",
		"comment": "<p>The field on which the group by was performed.</p>\n"
	},
	{
		"name": "IGroupByResult.globalComputedFieldResults",
		"comment": "<p>Available if there was any computed field request.</p>\n"
	},
	{
		"name": "IGroupByResult.values",
		"comment": "<p>The differents values for this result</p>\n"
	},
	{
		"name": "IGroupByValue",
		"comment": "<p>Describe a single group by value, returned by a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyresult.html\">IGroupByResult</a></p>\n"
	},
	{
		"name": "IGroupByValue.computedFieldResults",
		"comment": "<p>If there was ny computed field request, the results will be available here.</p>\n"
	},
	{
		"name": "IGroupByValue.lookupValue",
		"comment": "<p>The lookup value if it was specified.</p>\n"
	},
	{
		"name": "IGroupByValue.numberOfResults",
		"comment": "<p>The number of results that match this value in the index for this particular group by request</p>\n"
	},
	{
		"name": "IGroupByValue.score",
		"comment": "<p>The relevance score.</p>\n"
	},
	{
		"name": "IGroupByValue.value",
		"comment": "<p>The string value. Think : Facet label.</p>\n"
	},
	{
		"name": "IImageUtilsOptions",
		"comment": "<p>Options for building an <code>&lt;img&gt;</code> tag.</p>\n"
	},
	{
		"name": "IImageUtilsOptions.alt",
		"comment": "<p>The alternative text for the image (<code>alt</code> attribute).</p>\n"
	},
	{
		"name": "IImageUtilsOptions.height",
		"comment": "<p>The height of the image</p>\n"
	},
	{
		"name": "IImageUtilsOptions.width",
		"comment": "<p>The width of the image</p>\n"
	},
	{
		"name": "IIndexFieldValue",
		"comment": "<p>Describe a field value returned by index</p>\n"
	},
	{
		"name": "IIndexFieldValue.computedFieldResults",
		"comment": "<p>The optional computedFieldResults, if requested in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a></p>\n"
	},
	{
		"name": "IIndexFieldValue.lookupValue",
		"comment": "<p>The optional lookupValue, if requested in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a></p>\n"
	},
	{
		"name": "IIndexFieldValue.numberOfResults",
		"comment": "<p>The number of results in the index which have this value</p>\n"
	},
	{
		"name": "IIndexFieldValue.value",
		"comment": "<p>The value</p>\n"
	},
	{
		"name": "IInitializationParameters",
		"comment": "<p>Represent the initialization parameters required to init a new component</p>\n"
	},
	{
		"name": "IListFieldValuesRequest",
		"comment": "<p>Descrobe a request to list the possible values of a field</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.constantQueryOverride",
		"comment": "<p>A query to execute when returning possible field values, put in cache in the index</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.field",
		"comment": "<p>The field for which to list values</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.ignoreAccents",
		"comment": "<p>Whether to ignore accents in the values</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.lookupField",
		"comment": "<p>The lookup field to use</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.maximumNumberOfValues",
		"comment": "<p>Maximum number of field values to return</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.pattern",
		"comment": "<p>A pattern to filter out results</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.patternType",
		"comment": "<p>The type of the pattern (eg: regex)</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.queryOverride",
		"comment": "<p>A query to execute when returning possible field values</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.sortCriteria",
		"comment": "<p>The sort order for the returned field.</p>\n"
	},
	{
		"name": "INewQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#newquery\">QueryEvents.newQuery</a></p>\n"
	},
	{
		"name": "INewQueryEventArgs.cancel",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n"
	},
	{
		"name": "INewQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "INoResultsEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#noresults\">QueryEvents.noResults</a></p>\n"
	},
	{
		"name": "INoResultsEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "INoResultsEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "INoResultsEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "INoResultsEventArgs.retryTheQuery",
		"comment": "<p>If set to true by any handler, the last query will automatically be re-executed again.</p>\n"
	},
	{
		"name": "INoResultsEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IOmniboxDataRow",
		"comment": "<p>The content that external code that wants to populate the omnibox need to populate</p>\n"
	},
	{
		"name": "IOmniboxDataRow.deferred",
		"comment": "<p>This is a Promise object. It is used when you want to make an asynchronous call (most likely an Ajax request) to a service in order to retrieve the data that you will use to build your HTML content.</p>\n"
	},
	{
		"name": "IOmniboxDataRow.element",
		"comment": "<p>This an HTMLElement that you want the Omnibox to render.</p>\n"
	},
	{
		"name": "IOmniboxDataRow.zIndex",
		"comment": "<p>This is an optional property. It is used by each component to influence their rendering order in the Omnibox. It works like a normal CSS zIndex: higher value will render at the top most level. Providing no zIndex will make your item render with a low priority.</p>\n"
	},
	{
		"name": "IPopulateBreadcrumbEventArgs",
		"comment": "<p>Event triggered when populating the breadcrumb</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject",
		"comment": "<p>The IPopulateOmniboxObject is an interface that is used by components to interact with the Omnibox and provides a framework for type-ahead suggestions.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.allQueryExpressions",
		"comment": "<p>An array <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> used to describe each part of the content of the omnibox Component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.completeQueryExpression",
		"comment": "<p>A <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> object used to describe the complete content of the Querybox Component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.currentQueryExpression",
		"comment": "<p>A <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> object used to describe the current active content (the current position of the cursor/caret) of the omnibox Component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.cursorPosition",
		"comment": "<p>The number representing the current position of the cursor/caret inside the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> Component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxQueryExpression",
		"comment": "<p>This object is a simple interface that describes the content of an omnibox query expression</p>\n"
	},
	{
		"name": "IPopulateOmniboxQueryExpression.regex",
		"comment": "<p>This is a regex of the content of the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> with some special character escaped.</p>\n"
	},
	{
		"name": "IPopulateOmniboxQueryExpression.word",
		"comment": "<p>This is a simple string with the plain content of the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>.</p>\n"
	},
	{
		"name": "IPreprocessMoreResultsEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#preprocessmoreresults\">QueryEvents.preprocessMoreResults</a></p>\n"
	},
	{
		"name": "IPreprocessMoreResultsEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#preprocessresults\">QueryEvents.preprocessResults</a></p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IQuery",
		"comment": "<p>Describe a query that can be performed on the Coveo Search API.<br/>\nFor basic usage, see the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#q\">IQuery.q</a> and <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#aq\">IQuery.aq</a> properties.<br/>\nIn a normal scenario, a query is built using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a></p>\n"
	},
	{
		"name": "IQuery.actionsHistory",
		"comment": "<p>The actions history represents the past actions a user made and is used by reveal to suggest recommendations.\nIt is generated by the page view script (<a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>)</p>\n"
	},
	{
		"name": "IQuery.aq",
		"comment": "<p>The advanced query expression.<br/>\nThis is the part of the query expression generated by code based on various rules.<br/>\neg: Selecting a facet value will cause an expression to be added to the advanced query expression.</p>\n"
	},
	{
		"name": "IQuery.childField",
		"comment": "<p>Specifies the childField when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n"
	},
	{
		"name": "IQuery.context",
		"comment": "<p>The context is a map of key_value that can be used in the Query pipeline in the Coveo platform.<br/></p>\n"
	},
	{
		"name": "IQuery.cq",
		"comment": "<p>The constant query expression.<br/>\nThis part of the expression is much alike the advanced query expression, but it is meant to hold expressions that are constant for all users of a search interface/widget.<br/>\nThe results of evaluating those expressions are kept in a special index cache, to avoid re-evaluating them on each query.<br/>\nYou must be careful to not include dynamic parts in this expression, otherwise you risk filling up the cache with useless data and this might have a negative impact on performance.<br/>\nExpressions other than cq also benefit from caching in the index, but using cq allows to explicitly require that a part of the query be included in the cache.</p>\n"
	},
	{
		"name": "IQuery.debug",
		"comment": "<p>Setting this property to true will return more debugging information from both the index and the search API.\nUse this with care as this will negatively impact the performance of the query.</p>\n"
	},
	{
		"name": "IQuery.disableQuerySyntax",
		"comment": "<p>Whether to disable the special query syntax such as field references for the basic query expression (parameter q).\nIt is equivalent to a No syntax block applied to the basic query expression.\nIf not specified, the parameter defaults to false</p>\n"
	},
	{
		"name": "IQuery.dq",
		"comment": "<p>The disjunction query expression.<br/>\nThis is the disjunctive part of the query expression that is merged with the other expression parts using an OR boolean operator.<br/>\nWhen specified, the final expression evaluated by the index ends up being (q aq cq) OR (dq).</p>\n"
	},
	{
		"name": "IQuery.enableCollaborativeRating",
		"comment": "<p>Whether the index should take collaborative rating in account when ranking result. See : <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a></p>\n"
	},
	{
		"name": "IQuery.enableDidYouMean",
		"comment": "<p>This enables the query correction feature of the index.<br/>\nBy activating this, the index returns an array of {link IQueryCorrection} with suggested word corrections.</p>\n"
	},
	{
		"name": "IQuery.excerptLength",
		"comment": "<p>This specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.<br/>\nThe index includes the top most interesting sentences (in the order they appear in the document) that fit in the specified number of characters.<br/>\nWhen not specified, the default value is 200.</p>\n"
	},
	{
		"name": "IQuery.fieldsToExclude",
		"comment": "<p>This specifies an array of fields that should be excluded from the query results.<br/>\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\n"
	},
	{
		"name": "IQuery.fieldsToInclude",
		"comment": "<p>This specifies an array of fields that should be returned for each result.<br/>\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\n"
	},
	{
		"name": "IQuery.filterField",
		"comment": "<p>This specifies a field on which <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> should be performed.<br/>\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.<br/>\nIt&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\n"
	},
	{
		"name": "IQuery.filterFieldRange",
		"comment": "<p>Number of results that should be folded, using the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#filterfield\">IQuery.filterField</a></p>\n"
	},
	{
		"name": "IQuery.firstResult",
		"comment": "<p>This is the 0-based index of the first result to return.<br/>\nIf not specified, this parameter defaults to 0.</p>\n"
	},
	{
		"name": "IQuery.groupBy",
		"comment": "<p>This specifies an array of Group By operations that can be performed on the query results to extract facets</p>\n"
	},
	{
		"name": "IQuery.lowercaseOperators",
		"comment": "<p>Whether to enable the support for operator in lowercase (AND OR -&gt; and or)</p>\n"
	},
	{
		"name": "IQuery.maximumAge",
		"comment": "<p>The maximum age for cached query results, in milliseconds.<br/>\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.<br/>\nOtherwise, the query will be sent to the index.</p>\n"
	},
	{
		"name": "IQuery.numberOfResults",
		"comment": "<p>This is the number of results to return, starting from <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#firstresult\">IQuery.firstResult</a>.<br/>\nIf not specified, this parameter defaults to 10.</p>\n"
	},
	{
		"name": "IQuery.parentField",
		"comment": "<p>Specifies the parentField when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n"
	},
	{
		"name": "IQuery.partialMatch",
		"comment": "<p>Whether to enable partial matching of the basic expression keywords.<br/>\nBy activating this, when the basic expression contains at least <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchkeywords\">IQuery.partialMatchKeywords</a>, documents containing only the number of keywords specified by <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchthreshold\">IQuery.partialMatchThreshold</a> will also match the query.<br/>\nWithout this option, documents are required to contain all the keywords in order to match the query.<br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "IQuery.partialMatchKeywords",
		"comment": "<p>The minimum number of keywords needed to activate partial match.<br/>\nThis specifies the minimum number of keywords needed for the partial match feature to activate.<br/>\nIf the basic expression contains less than this number of keywords, no transformation is applied on the query.<br/>\nIf not specified, this parameter defaults to 5.</p>\n"
	},
	{
		"name": "IQuery.partialMatchThreshold",
		"comment": "<p>The threshold to use for matching documents when partial match is enabled.<br/>\nThis specifies the minimum number of query keywords that a document must contain when partial match is enabled. This value can either be an absolute number or a percentage value based on the total number of keywords.<br/>\nIf not specified, this parameter defaults to 50%.</p>\n"
	},
	{
		"name": "IQuery.pipeline",
		"comment": "<p>Name of the query pipeline to use.<br/>\nThis specifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\n"
	},
	{
		"name": "IQuery.q",
		"comment": "<p>The basic query expression. <br/>\nThis is typically the query expression entered by the user in a query box.<br/>\nSince this part of the query is expected to come from user input, it is processed by the Did You Mean feature.</p>\n"
	},
	{
		"name": "IQuery.queryFunctions",
		"comment": "<p>This specifies an array of Query Function operation that will be executed on the results.</p>\n"
	},
	{
		"name": "IQuery.questionMark",
		"comment": "<p>Whether to enable question marks with wildcards.<br/>\nThis enables using the question mark ? character within wildcard expressions.</p>\n"
	},
	{
		"name": "IQuery.rankingFunctions",
		"comment": "<p>This specifies an array of Ranking Function operations that will be executed on the result</p>\n"
	},
	{
		"name": "IQuery.recommendation",
		"comment": "<p>This is the id of the recommendation interface that generated the query.</p>\n"
	},
	{
		"name": "IQuery.retrieveFirstSentences",
		"comment": "<p>This specifies whether the first sentences of the document should be included in the results.<br/>\nThe retrieveFirstSentences option is typically used instead of excerpts when displaying email items, where the first sentence of the email might be of more interest than a contextually generated excerpt.</p>\n"
	},
	{
		"name": "IQuery.searchHub",
		"comment": "<p>The hub value set from the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component.<br/>\nUsed for analytics reporting in the Coveo platform</p>\n"
	},
	{
		"name": "IQuery.sortCriteria",
		"comment": "<p>This specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to Relevancy.<br/>\nPossible values are : <br/>\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\n-- dateascending / datedescending : Sort using the value of the @date field, which is typically the last modification date of an item in the index.<br/>\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using Relevancy except that automatic weights based on keyword proximity etc, are not computed.<br/>\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\n-- @field ascending / @field descending : Sort using the value of a custom field.</p>\n"
	},
	{
		"name": "IQuery.tab",
		"comment": "<p>The tab value set from the <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component.</p>\n"
	},
	{
		"name": "IQuery.wildcards",
		"comment": "<p>Whether to enable wildcards on the basic expression keywords.<br/>\nThis enables the wildcard features of the index. Coveo Platform will expand keywords containing wildcard characters to the possible matching keywords to broaden the query.<br/>\nSee : <a href=\"https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm\">https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm</a><br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "IQueryBuilderExpression",
		"comment": "<p>Describe the expressions part of a QueryBuilder</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.advanced",
		"comment": "<p>The advanced part of the expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.basic",
		"comment": "<p>The basic part of the expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.constant",
		"comment": "<p>The constant part of the expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.full",
		"comment": "<p>The whole expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.withoutConstant",
		"comment": "<p>The full part, but without the constant</p>\n"
	},
	{
		"name": "IQueryCorrection",
		"comment": "<p>Describe correction for a query</p>\n"
	},
	{
		"name": "IQueryCorrection.correctedQuery",
		"comment": "<p>The query once corrected</p>\n"
	},
	{
		"name": "IQueryCorrection.wordCorrections",
		"comment": "<p>Array of correction for each word in the query</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a></p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.endpoint",
		"comment": "<p>The endpoint on which the error happened.</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.error",
		"comment": "<p>The error info / message itself.</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IQueryException",
		"comment": "<p>Describe an exception that was triggered by the index when performing the query.</p>\n"
	},
	{
		"name": "IQueryException.code",
		"comment": "<p>The exception code</p>\n"
	},
	{
		"name": "IQueryFunction",
		"comment": "<p>Describe a query function that can be executed against the index<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Query+Function\">https://developers.coveo.com/display/SearchREST/Query+Function</a></p>\n"
	},
	{
		"name": "IQueryFunction.fieldName",
		"comment": "<p>The field name on which to store the query function result when the query returns</p>\n"
	},
	{
		"name": "IQueryFunction.function",
		"comment": "<p>Function to execute, as a string</p>\n"
	},
	{
		"name": "IQueryOptions",
		"comment": "<p>Possible options when performing a query with the query controller</p>\n"
	},
	{
		"name": "IQueryOptions.beforeExecuteQuery",
		"comment": "<p>Specify a function that you wish to execute just before the query is executed</p>\n"
	},
	{
		"name": "IQueryOptions.cancel",
		"comment": "<p>Cancel the query</p>\n"
	},
	{
		"name": "IQueryOptions.ignoreWarningSearchEvent",
		"comment": "<p>If the analytics component is enabled in the interface, it will look for any query executed by the query controller for which no analytics event was associated.<br/>\nBy setting this property to true, this will cancel this check when the query is performed</p>\n"
	},
	{
		"name": "IQueryOptions.logInActionsHistory",
		"comment": "<p>Whether or not to log the query in the user actions history when using the page view script: <a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>.\nOnly the &#39;q&#39; part of the query will be logged.\nThis option is useful, because it prevents the query to be logged twice when a <a href=\"https://coveo.github.io/search-ui/classes/recommendation.html\">Recommendation</a> component is present.\nIt also makes sure that only relevant queries are logged. For exemple, the &#39;empty&#39; interface load query isn&#39;t logged.</p>\n"
	},
	{
		"name": "IQueryOptions.origin",
		"comment": "<p>The component from which the query originated. For example the pager will set the property to tweak it&#39;s behaviour</p>\n"
	},
	{
		"name": "IQueryOptions.searchAsYouType",
		"comment": "<p>Specify that the query to execute is a search as you type. This information will be passed down in the query events for component and external code to determine their behavior</p>\n"
	},
	{
		"name": "IQueryResult",
		"comment": "<p>Describe a single result returned by the Coveo Search API.</p>\n"
	},
	{
		"name": "IQueryResult.childResults",
		"comment": "<p>The parent result, if parent child loading was performed using the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.</p>\n"
	},
	{
		"name": "IQueryResult.clickUri",
		"comment": "<p>The clickable uri of the document, which can be set on an href in the interface.</p>\n"
	},
	{
		"name": "IQueryResult.excerpt",
		"comment": "<p>The excerpt for the document. Can be empty for some type of documents.</p>\n"
	},
	{
		"name": "IQueryResult.flags",
		"comment": "<p>List of flags on the document, separated by ;<br/></p>\n"
	},
	{
		"name": "IQueryResult.hasHtmlVersion",
		"comment": "<p>Whether the document has an htmlVersion (quickview)</p>\n"
	},
	{
		"name": "IQueryResult.isRecommendation",
		"comment": "<p>This value specifies whether the result was recommended by Coveo Reveal.</p>\n"
	},
	{
		"name": "IQueryResult.parentResult",
		"comment": "<p>The parent result, if parent child loading was performed using the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.</p>\n"
	},
	{
		"name": "IQueryResult.printableUri",
		"comment": "<p>A printable uri, or path to the document</p>\n"
	},
	{
		"name": "IQueryResult.rankingInfo",
		"comment": "<p>Returned on a document if the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> was set to true</p>\n"
	},
	{
		"name": "IQueryResult.rating",
		"comment": "<p>The rating for the given document. This can be set on a document using the <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a> component, and if the collaborative rating is enabled on the index.</p>\n"
	},
	{
		"name": "IQueryResult.raw",
		"comment": "<p>Contains the raw field values on the document, as key-&gt;value properties</p>\n"
	},
	{
		"name": "IQueryResult.title",
		"comment": "<p>The title of the document</p>\n"
	},
	{
		"name": "IQueryResult.uniqueId",
		"comment": "<p>The document unique id, useful for different call on the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a></p>\n"
	},
	{
		"name": "IQueryResult.uri",
		"comment": "<p>The uri of the document</p>\n"
	},
	{
		"name": "IQueryResults",
		"comment": "<p>Describe a set a results returned by the Search API</p>\n"
	},
	{
		"name": "IQueryResults.advancedExpression",
		"comment": "<p>The advanced expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.apiVersion",
		"comment": "<p>The search api version that was used for this query.</p>\n"
	},
	{
		"name": "IQueryResults.basicExpression",
		"comment": "<p>The basic expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.clientDuration",
		"comment": "<p>The duration of the query for the client.</p>\n"
	},
	{
		"name": "IQueryResults.constantExpression",
		"comment": "<p>The constant expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.duration",
		"comment": "<p>The duration of the query on the Coveo platform.</p>\n"
	},
	{
		"name": "IQueryResults.error",
		"comment": "<p>When an error occurs, and the errorsAsSuccess flag is passed, the error will be returned in the body of the response</p>\n"
	},
	{
		"name": "IQueryResults.exception",
		"comment": "<p>The exception that can be returned by the index if the query triggered an error</p>\n"
	},
	{
		"name": "IQueryResults.executionReport",
		"comment": "<p>A detailed execution report sent by the Search API.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.groupByResults",
		"comment": "<p>The group by results of the query</p>\n"
	},
	{
		"name": "IQueryResults.indexDuration",
		"comment": "<p>The duration of the query on the Coveo Index.</p>\n"
	},
	{
		"name": "IQueryResults.phrasesToHighlight",
		"comment": "<p>Phrases to highlight (with stemming) in the results</p>\n"
	},
	{
		"name": "IQueryResults.pipeline",
		"comment": "<p>The pipeline that was used for this query.</p>\n"
	},
	{
		"name": "IQueryResults.proxyDuration",
		"comment": "<p>The duration of the query on the proxy (not always applicable, can be optional)</p>\n"
	},
	{
		"name": "IQueryResults.queryCorrections",
		"comment": "<p>Possible query corrections (eg : <a href=\"https://coveo.github.io/search-ui/components/didyoumean.html\">DidYouMean</a>)</p>\n"
	},
	{
		"name": "IQueryResults.rankingExpressions",
		"comment": "<p>A list of ranking expression that were used to tweak the relevance.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.results",
		"comment": "<p>The results of the query</p>\n"
	},
	{
		"name": "IQueryResults.searchUid",
		"comment": "<p>A unique identifier for this query, used mainly for the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> service.</p>\n"
	},
	{
		"name": "IQueryResults.splitTestRun",
		"comment": "<p>The split test run that was used for this query. (A/B tests feature of the Coveo Query Pipeline)</p>\n"
	},
	{
		"name": "IQueryResults.termsToHighlight",
		"comment": "<p>Terms to highlight (with stemming) in the results</p>\n"
	},
	{
		"name": "IQueryResults.totalCount",
		"comment": "<p>The total number of results that matched the query in the index.</p>\n"
	},
	{
		"name": "IQueryResults.totalCountFiltered",
		"comment": "<p>The total number of results that matched the query in the index, but with the duplicate filtered.</p>\n"
	},
	{
		"name": "IQueryResults.triggers",
		"comment": "<p>The Coveo Query Pipeline triggers, if any were configured.</p>\n"
	},
	{
		"name": "IQueryResults.userIdentities",
		"comment": "<p>A list of user identities that were used to perform this query.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a></p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IRangeValue",
		"comment": "<p>Describe a single rangle value in a group by</p>\n"
	},
	{
		"name": "IRangeValue.end",
		"comment": "<p>End of the range</p>\n"
	},
	{
		"name": "IRangeValue.endInclusive",
		"comment": "<p>Is the end parameter included or excluded in this range.</p>\n"
	},
	{
		"name": "IRangeValue.label",
		"comment": "<p>Label to generate for this range</p>\n"
	},
	{
		"name": "IRangeValue.start",
		"comment": "<p>Start of the range.</p>\n"
	},
	{
		"name": "IRankingExpression",
		"comment": "<p>Describe a ranking expression performed against the index (qre)</p>\n"
	},
	{
		"name": "IRankingExpression.expression",
		"comment": "<p>The expression that was executed in the ranking expression</p>\n"
	},
	{
		"name": "IRankingExpression.modifier",
		"comment": "<p>The relevance modifier that was applied</p>\n"
	},
	{
		"name": "IRankingFunction",
		"comment": "<p>Describe a ranking function that can be executed against the index.<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Ranking+Function\">https://developers.coveo.com/display/SearchREST/Ranking+Function</a></p>\n"
	},
	{
		"name": "IRankingFunction.expression",
		"comment": "<p>The mathematical expression that calculates the ranking value to add to the result score.</p>\n"
	},
	{
		"name": "IRankingFunction.normalizeWeight",
		"comment": "<p>Whether to normalize the value using the standard index scale or not. If you don&#39;t want to completely override the index ranking and use the qrf as a boost, you should turn this on.</p>\n"
	},
	{
		"name": "IRatingRequest",
		"comment": "<p>Describe a request to rate a document in the index</p>\n"
	},
	{
		"name": "IRatingRequest.rating",
		"comment": "<p>String to describe the rating.<br/>\nCan be &#39;Undefined&#39; | &#39;Lowest&#39; | &#39;Low&#39; | &#39;Average&#39; | &#39;Good&#39; | &#39;Best&#39;</p>\n"
	},
	{
		"name": "IRatingRequest.uniqueId",
		"comment": "<p>The uniqueId of the document to rate</p>\n"
	},
	{
		"name": "IRequestInfo",
		"comment": "<p>Information about a request</p>\n"
	},
	{
		"name": "IRequestInfo.begun",
		"comment": "<p>The timestamp at which the request started</p>\n"
	},
	{
		"name": "IRequestInfo.method",
		"comment": "<p>The method that was used for this request</p>\n"
	},
	{
		"name": "IRequestInfo.queryString",
		"comment": "<p>The query string parameters that were used for this request</p>\n"
	},
	{
		"name": "IRequestInfo.requestData",
		"comment": "<p>The data that was sent for this request</p>\n"
	},
	{
		"name": "IRequestInfo.requestDataType",
		"comment": "<p>The requestDataType that was used for this request</p>\n"
	},
	{
		"name": "IRequestInfo.url",
		"comment": "<p>Url that was requested</p>\n"
	},
	{
		"name": "IResponse",
		"comment": "<p>A generic response</p>\n"
	},
	{
		"name": "IResponse.data",
		"comment": "<p>Data of the response</p>\n"
	},
	{
		"name": "IResultsComponentBindings",
		"comment": "<p>The bindings, or environment in which each component inside the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> exists.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a></p>\n"
	},
	{
		"name": "IResultsComponentBindings.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.root",
		"comment": "<p>The root HTMLElement of the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a> in which the component exists.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/classes/searchinterface.html\">SearchInterface</a></p>\n"
	},
	{
		"name": "IResultsComponentBindings.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion",
		"comment": "<p>Describe a suggestion of completion from reveal</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion.expression",
		"comment": "<p>The expression to complete</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion.highlighted",
		"comment": "<p>The highlighted expression to complete</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion.score",
		"comment": "<p>The degree of confidence from reveal that the suggestion is relevant</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest",
		"comment": "<p>Describe a request to reveal query suggest</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.count",
		"comment": "<p>Number of suggestions that the service should return. Default to 5</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.pipeline",
		"comment": "<p>The pipeline to use for the request.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.q",
		"comment": "<p>Query / word for which to get completions</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.searchHub",
		"comment": "<p>The search hub for which to get suggestions</p>\n"
	},
	{
		"name": "IRevealQuerySuggestResponse",
		"comment": "<p>Describe a response from reveal query suggestions</p>\n"
	},
	{
		"name": "IRevealQuerySuggestResponse.completions",
		"comment": "<p>An array of completions</p>\n"
	},
	{
		"name": "ISearchEndpointOptions",
		"comment": "<p>The possible options when creating a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a></p>\n"
	},
	{
		"name": "ISearchEndpointOptions.accessToken",
		"comment": "<p>This allows using an OAuth2 or a search token to authenticate against the Search API.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.anonymous",
		"comment": "<p>Specifies that the request (and the Coveo Search API) does not need any kind of authentication.<br/>\nThis flag is only needed for specific setups when your requests are being blocked by your browser. If your queries are executing correctly, you do not need to bother.<br/>\nSetting this flag will prevent the withCredentials option to be set on the XMLHttpRequest, allowing performing cross-domain requests on a server that returns * in the Access-Control-Allow-Origin HTTP header.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.password",
		"comment": "<p>This is the password part of the credentials used to authenticate with the REST API.<br/>\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.queryStringArguments",
		"comment": "<p>Query string arguments to add to every request to the search endpoint.<br/>\neg : {&#39;foo&#39;:&#39;bar&#39;, &#39;a&#39;:&#39;b&#39;}</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.renewAccessToken",
		"comment": "<p>Specifies a function that, when called, will arrange for a new search token to be generated.<br/>\nIt is expected to return a Promise that should be resolved with the new token once it&#39;s available.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.restUri",
		"comment": "<p>The uri for the search endpoint. eg: cloudplatform.coveo.com/rest/search</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.searchAlertsUri",
		"comment": "<p>The uri for the Coveo search alerts service. If not specified, will automatically resolve using the restUri otherwise</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.username",
		"comment": "<p>This is the username part of the credentials used to authenticate with the Search API using Basic Authentication.<br/>\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\n"
	},
	{
		"name": "ISubscription",
		"comment": "<p>Describe a subscription to the Coveo Search alerts service</p>\n"
	},
	{
		"name": "ISubscription.frequency",
		"comment": "<p>Frequency of the alerts</p>\n"
	},
	{
		"name": "ISubscription.id",
		"comment": "<p>The id of the subscription</p>\n"
	},
	{
		"name": "ISubscription.type",
		"comment": "<p>Type of subscription.<br/>\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\n"
	},
	{
		"name": "ISubscription.typeConfig",
		"comment": "<p>Config of the subscription</p>\n"
	},
	{
		"name": "ISubscription.user",
		"comment": "<p>The user associated with the subscription</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest",
		"comment": "<p>Describe a subscription to a single item (a result)</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.id",
		"comment": "<p>Unique id of the document</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.modifiedDateField",
		"comment": "<p>Which field on the result represent the modification date for which you wish to receive alerts</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.title",
		"comment": "<p>Title of the document</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.watchedFields",
		"comment": "<p>A list of field to monitor on the given document</p>\n"
	},
	{
		"name": "ISubscriptionQueryRequest",
		"comment": "<p>Describe a subscription to a single query</p>\n"
	},
	{
		"name": "ISubscriptionQueryRequest.modifiedDateField",
		"comment": "<p>Which field on the result set represent the modification date for which you wish to receive alerts</p>\n"
	},
	{
		"name": "ISubscriptionQueryRequest.query",
		"comment": "<p>Query to subscribe to</p>\n"
	},
	{
		"name": "ISubscriptionRequest",
		"comment": "<p>Describe a request to subscribe to the Coveo Search alerts service</p>\n"
	},
	{
		"name": "ISubscriptionRequest.frequency",
		"comment": "<p>Frequency of the alerts</p>\n"
	},
	{
		"name": "ISubscriptionRequest.type",
		"comment": "<p>Type of subscription.<br/>\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\n"
	},
	{
		"name": "ISubscriptionRequest.typeConfig",
		"comment": "<p>Config of the subscription</p>\n"
	},
	{
		"name": "ISubscriptionUser",
		"comment": "<p>Describe a user associated with a subscription to the Coveo Search alerts service</p>\n"
	},
	{
		"name": "ISubscriptionUser.email",
		"comment": "<p>The email of the user</p>\n"
	},
	{
		"name": "ISubscriptionUser.manageToken",
		"comment": "<p>The token used to manage the alerts via email.</p>\n"
	},
	{
		"name": "ISuccessResponse",
		"comment": "<p>A generic success response</p>\n"
	},
	{
		"name": "ISuccessResponse.data",
		"comment": "<p>Data of the response</p>\n"
	},
	{
		"name": "ISuccessResponse.duration",
		"comment": "<p>The time that the successfull response took to complete</p>\n"
	},
	{
		"name": "ITaggingRequest",
		"comment": "<p>Describe a tag request on a document</p>\n"
	},
	{
		"name": "ITaggingRequest.doAdd",
		"comment": "<p>Decide whether to add the tag value, or remove the tag value</p>\n"
	},
	{
		"name": "ITaggingRequest.fieldName",
		"comment": "<p>The field name to tag</p>\n"
	},
	{
		"name": "ITaggingRequest.fieldValue",
		"comment": "<p>The value to tag</p>\n"
	},
	{
		"name": "ITaggingRequest.uniqueId",
		"comment": "<p>The unique id of the document to tag</p>\n"
	},
	{
		"name": "ITemplateHelperFunction",
		"comment": "<p>A function that describe a templates.</p>\n"
	},
	{
		"name": "ITopQueries",
		"comment": "<p>Describe a request to get top queries</p>\n"
	},
	{
		"name": "ITopQueries.pageSize",
		"comment": "<p>Determine how many suggestions to receive</p>\n"
	},
	{
		"name": "ITopQueries.queryText",
		"comment": "<p>The query text for which to receive suggestions</p>\n"
	},
	{
		"name": "ITrigger",
		"comment": "<p>A trigger is an action that the interface will perform (show a message, execute a function, redirect users) depending on the query that was performed.<br/>\nA trigger that can be configured in the Coveo Query Pipeline.</p>\n"
	},
	{
		"name": "ITriggerExecute",
		"comment": "<p>Execute a javascript function present in the page.</p>\n"
	},
	{
		"name": "ITriggerNotify",
		"comment": "<p>Notify (show a message) to a user</p>\n"
	},
	{
		"name": "ITriggerQuery",
		"comment": "<p>Perform a new query with a different query expression</p>\n"
	},
	{
		"name": "ITriggerRedirect",
		"comment": "<p>Redirect the user to another url</p>\n"
	},
	{
		"name": "IUserIdentity",
		"comment": "<p>Describe the identity of a user on the Coveo platform</p>\n"
	},
	{
		"name": "IUserIdentity.name",
		"comment": "<p>The name of the identity</p>\n"
	},
	{
		"name": "IUserIdentity.provider",
		"comment": "<p>The provider of the identity in the Coveo platform</p>\n"
	},
	{
		"name": "IViewAsHtmlOptions",
		"comment": "<p>Available options when calling against the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> to view a document as an HTMLElement (quickview basically...)</p>\n"
	},
	{
		"name": "JQuery",
		"comment": "<p>The jQuery instance members</p>\n"
	},
	{
		"name": "JQuery.context",
		"comment": "<p>The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. (DEPRECATED from v1.10)</p>\n"
	},
	{
		"name": "JQuery.length",
		"comment": "<p>The number of elements in the jQuery object.</p>\n"
	},
	{
		"name": "JQuery.selector",
		"comment": "<p>A selector representing selector passed to jQuery(), if any, when creating the original set.\nversion deprecated: 1.7, removed: 1.9</p>\n"
	},
	{
		"name": "JQueryAjaxSettings",
		"comment": "<p>Interface for the AJAX setting that will configure the AJAX request</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.accepts",
		"comment": "<p>The content type sent in the request header that tells the server what kind of response it will accept in return. If the accepts setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.async",
		"comment": "<p>By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: &quot;jsonp&quot; requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done() or the deprecated jqXHR.success().</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.cache",
		"comment": "<p>If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending &quot;_={timestamp}&quot; to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.contentType",
		"comment": "<p>When sending data to the server, use this content type. Default is &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;, which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.contents",
		"comment": "<p>An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.context",
		"comment": "<p>This object will be made the context of all Ajax-related callbacks. By default, the context is an object that represents the ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax).</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.converters",
		"comment": "<p>An object containing dataType-to-dataType converters. Each converter&#39;s value is a function that returns the transformed value of the response. (version added: 1.5)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.crossDomain",
		"comment": "<p>If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.data",
		"comment": "<p>Data to be sent to the server. It is converted to a query string, if not already a string. It&#39;s appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.dataType",
		"comment": "<p>The type of data that you&#39;re expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string).</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.global",
		"comment": "<p>Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.headers",
		"comment": "<p>An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.ifModified",
		"comment": "<p>Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the &#39;etag&#39; specified by the server to catch unmodified data.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.isLocal",
		"comment": "<p>Allow the current environment to be recognized as &quot;local,&quot; (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.jsonp",
		"comment": "<p>Override the callback function name in a jsonp request. This value will be used instead of &#39;callback&#39; in the &#39;callback=?&#39; part of the query string in the url. So {jsonp:&#39;onJSONPLoad&#39;} would result in &#39;onJSONPLoad=?&#39; passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the &quot;?callback&quot; string to the URL or attempting to use &quot;=?&quot; for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: &quot;callbackName&quot; }</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.jsonpCallback",
		"comment": "<p>Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it&#39;ll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.method",
		"comment": "<p>The HTTP method to use for the request (e.g. &quot;POST&quot;, &quot;GET&quot;, &quot;PUT&quot;). (version added: 1.9.0)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.mimeType",
		"comment": "<p>A mime type to override the XHR mime type. (version added: 1.5.1)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.password",
		"comment": "<p>A password to be used with XMLHttpRequest in response to an HTTP access authentication request.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.processData",
		"comment": "<p>By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type &quot;application/x-www-form-urlencoded&quot;. If you want to send a DOMDocument, or other non-processed data, set this option to false.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.scriptCharset",
		"comment": "<p>Only applies when the &quot;script&quot; transport is used (e.g., cross-domain requests with &quot;jsonp&quot; or &quot;script&quot; dataType and &quot;GET&quot; type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.statusCode",
		"comment": "<p>An object of numeric HTTP codes and functions to be called when the response has the corresponding code. f the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5)</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.timeout",
		"comment": "<p>Set a timeout (in milliseconds) for the request. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.traditional",
		"comment": "<p>Set this to true if you wish to use the traditional style of param serialization.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.type",
		"comment": "<p>The type of request to make (&quot;POST&quot; or &quot;GET&quot;), default is &quot;GET&quot;. Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.url",
		"comment": "<p>A string containing the URL to which the request is sent.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.username",
		"comment": "<p>A username to be used with XMLHttpRequest in response to an HTTP access authentication request.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.xhr",
		"comment": "<p>Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.</p>\n"
	},
	{
		"name": "JQueryAjaxSettings.xhrFields",
		"comment": "<p>An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1)</p>\n"
	},
	{
		"name": "JQueryCallback",
		"comment": "<p>Interface for the JQuery callback</p>\n"
	},
	{
		"name": "JQueryCoordinates",
		"comment": "<p>The interface used to specify coordinates.</p>\n"
	},
	{
		"name": "JQueryDeferred",
		"comment": "<p>Interface for the JQuery deferred, part of callbacks</p>\n"
	},
	{
		"name": "JQueryEventConstructor",
		"comment": "<p>The interface used to construct jQuery events (with $.Event). It is\ndefined separately instead of inline in JQueryStatic to allow\noverriding the construction function with specific strings\nreturning specific event objects.</p>\n"
	},
	{
		"name": "JQueryGenericPromise",
		"comment": "<p>Allows jQuery Promises to interop with non-jQuery promises</p>\n"
	},
	{
		"name": "JQueryPromise",
		"comment": "<p>Interface for the JQuery promise, part of callbacks</p>\n"
	},
	{
		"name": "JQueryPromiseCallback",
		"comment": "<p>Interface for the JQuery promise/deferred callbacks</p>\n"
	},
	{
		"name": "JQuerySerializeArrayElement",
		"comment": "<p>Elements in the array returned by serializeArray()</p>\n"
	},
	{
		"name": "JQueryStatic",
		"comment": "<p>Static members of jQuery (those on $ and jQuery themselves)</p>\n"
	},
	{
		"name": "JQueryStatic.cssHooks",
		"comment": "<p>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</p>\n"
	},
	{
		"name": "JQueryStatic.easing",
		"comment": "<p>Effects</p>\n"
	},
	{
		"name": "JQueryStatic.param",
		"comment": "<p>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request.</p>\n"
	},
	{
		"name": "JQueryXHR",
		"comment": "<p>Interface for the jqXHR object</p>\n"
	},
	{
		"name": "JQueryXHR.responseJSON",
		"comment": "<p>Property containing the parsed response if the response Content-Type is json</p>\n"
	}
]