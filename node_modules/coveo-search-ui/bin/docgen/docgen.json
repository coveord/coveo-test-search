[
	{
		"name": "AdvancedSearch",
		"comment": "<p>The AdvancedSearch component is meant to render a section in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu to allow the user to easily\ncreate complex queries to send to the index.\nYou can create custom code that adds new sections in the <strong>Advanced Search</strong> panel generated by this component by\nattaching a handler to the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a> event.</p>\n"
	},
	{
		"name": "AdvancedSearch.options.includeDate",
		"comment": "<p>Specifies whether to include the built-in <strong>Date</strong> section.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "AdvancedSearch.options.includeDocument",
		"comment": "<p>Specifies whether to include the built-in <strong>Document</strong> section.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "AdvancedSearch.options.includeKeywords",
		"comment": "<p>Specifies whether to include the built-in <strong>Keywords</strong> section.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "AdvancedSearch.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "AdvancedSearch.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "AdvancedSearch.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AdvancedSearch.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "AdvancedSearch.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "AdvancedSearch.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "AdvancedSearch.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AdvancedSearch.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "AdvancedSearch.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "AdvancedSearch.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "AdvancedSearch.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "AdvancedSearch.constructor",
		"comment": "<p>Creates a new AdvancedSearch component.\nTriggers the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a> event.</p>\n"
	},
	{
		"name": "Aggregate",
		"comment": "<p>The Aggregate component allows to display the result on an aggregate operation on the index.\nIt hooks itself to the query to add a new <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>, then displays the result.</p>\n"
	},
	{
		"name": "Aggregate.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Aggregate.options.field",
		"comment": "<p>Specifies the field on which to do the aggregate operation. This parameter is mandatory.</p>\n"
	},
	{
		"name": "Aggregate.options.format",
		"comment": "<p>Specifies how to format the value.\nThe available formats are defined in the Globalize library (see\n<a href=\"https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-\">Globalize</a>.</p>\n<p>The most commonly used formats are:</p>\n<ul>\n<li><code>c0</code> - Formats the value as a currency.</li>\n<li><code>n0</code> - Formats the value as an integer.</li>\n<li><code>n2</code> - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\n<p>Default value is <code>c0</code>.</p>\n"
	},
	{
		"name": "Aggregate.options.operation",
		"comment": "<p>Specifies the aggregate operation to perform.\nThe possible values are:</p>\n<ul>\n<li><code>sum</code> - Computes the sum of the computed field values.</li>\n<li><code>average</code> - Computes the average of the computed field values.</li>\n<li><code>minimum</code> - Finds the minimum value of the computed field values.</li>\n<li><code>maximum</code> - Finds the maximum value of the computed field values.</li>\n</ul>\n<p>Default value is <code>sum</code>.</p>\n"
	},
	{
		"name": "Aggregate.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Aggregate.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Aggregate.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Aggregate.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Aggregate.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Aggregate.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Aggregate.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Aggregate.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Aggregate.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Aggregate.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Aggregate.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Aggregate.constructor",
		"comment": "<p>Creates a new Aggregate component.</p>\n"
	},
	{
		"name": "Analytics",
		"comment": "<p>The Analytics component logs user actions performed in the search interface and sends them to a REST web service\nexposed through the Coveo Cloud Platform.\nYou can use analytics data to evaluate how users are interacting with your search interface, improve relevance and\nproduce analytics dashboards within the Coveo Cloud Platform.</p>\n<p>See <a href=\"https://developers.coveo.com/x/EYskAg\">Step 7 - Usage Analytics</a> of the Getting Started with the JavaScript\nSearch Framework V1 tutorial for an introduction to usage analytics.</p>\n<p>See also <a href=\"https://developers.coveo.com/x/KoGfAQ\">Sending Custom Analytics Events</a> for more advanced use cases.</p>\n"
	},
	{
		"name": "Analytics.options",
		"comment": "<p>Options for the component</p>\n"
	},
	{
		"name": "Analytics.options.anonymous",
		"comment": "<p>Specifies whether to convert search user identities to unique hash when logging analytics data, so that\nanalytics reviewers and managers will not be able to clearly identify which user is performing which query.\nWhen this option is <code>true</code>, the Coveo Usage Analytics Platform can still properly differentiate sessions\nmade by anonymous users from sessions made by users authenticated in some way on the site containing the search\npage.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Analytics.options.endpoint",
		"comment": "<p>Specifies the URL of the usage analytics logger to cover exceptional cases in which this location could differ\nfrom the default Coveo Cloud Usage Analytics endpoint (<a href=\"https://usageanalytics.coveo.com\">https://usageanalytics.coveo.com</a>).\nDefault value is <code>https://usageanalytics.coveo.com</code>.</p>\n"
	},
	{
		"name": "Analytics.options.organization",
		"comment": "<p>Specifies the organization bound to the access token. This is necessary when using an access token, because a\nsingle access token can be associated to more than one organization.\nDefault value is <code>undefined</code>, and the value of this parameter will fallback to the organization used for the\nsearch endpoint.</p>\n"
	},
	{
		"name": "Analytics.options.searchHub",
		"comment": "<p>Sets the Search Hub dimension on the search events.\nThe Search Hub dimension is typically a name that refers to a specific search page. For example, you could use\nthe <code>CommunitySite</code> value to refer to a search page on a company&#39;s public community site.</p>\n<p>Default value is <code>default</code>.</p>\n"
	},
	{
		"name": "Analytics.options.splitTestRunName",
		"comment": "<p>Specifies the name of the split test run that the search page is part of.\nYou can use this dimension to perform A/B testing using different search page layouts and features inside the\nCoveo Query pipeline.</p>\n<p>Default value is <code>undefined</code> and no split test run name is reported to the Coveo Usage Analytics Platform.</p>\n"
	},
	{
		"name": "Analytics.options.splitTestRunVersion",
		"comment": "<p>Specifies the version name for the page when a split test run is active.\nWhen reporting on A/B testing analytics data, this value specifies the test run version name that was\npresented to the user.</p>\n<p>Default value is <code>undefined</code></p>\n"
	},
	{
		"name": "Analytics.options.token",
		"comment": "<p>Specifies the token to use to access the usage analytics endpoint.\nDefault value is <code>undefined</code>, and the component uses the search token.</p>\n"
	},
	{
		"name": "Analytics.options.user",
		"comment": "<p>Specifies the name of the user for the usage analytics logs.\nDefault value is <code>undefined</code></p>\n"
	},
	{
		"name": "Analytics.options.userDisplayName",
		"comment": "<p>Specifies the user display name for the usage analytics logs.\nDefault value is <code>undefined</code></p>\n"
	},
	{
		"name": "Analytics.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Analytics.client",
		"comment": "<p>A reference to the <code>analyticsClient</code>, which performs the heavy duty part of logging the actual events on the\nservice.</p>\n"
	},
	{
		"name": "Analytics.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Analytics.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Analytics.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Analytics.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Analytics.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Analytics.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Analytics.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Analytics.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Analytics.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Analytics.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Analytics.constructor",
		"comment": "<p>Creates a new Analytics component. Creates the <a href=\"https://coveo.github.io/search-ui/interfaces/ianalyticsclient.html\">IAnalyticsClient</a>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions",
		"comment": "<p>The AnalyticsSuggestion component provides query suggestions based on the queries that a Coveo Analytics service most\ncommonly logs.\nThis component orders possible query suggestions by their respective number of successful document views, thus\nprioritizing the most relevant query suggestions. Consequently, when better options are available, this component\ndoes not suggest queries resulting in no clicks from users or requiring refinements.</p>\n<p>The query suggestions appear in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> Component. The AnalyticsSuggestion component strongly\nrelates to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component. While a user is typing in a query box, the AnalyticsSuggestion component\nallows them to see and select the most commonly used and relevant queries.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options.headerTitle",
		"comment": "<p>Specifies the title of the query suggestions group in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component. This option is not available\nwhen using the default Lightning Friendly Theme (see\n<a href=\"https://developers.coveo.com/x/Y4EAAg\">Lightning Friendly Theme</a>).\nDefault value is the localized string for <code>&quot;Suggested Queries&quot;</code>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options.numberOfSuggestions",
		"comment": "<p>Specifies the number of query suggestions to request and display in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.\nDefault value is <code>5</code> and minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.options.omniboxZIndex",
		"comment": "<p>Specifies the z-index position at which the query suggestions render themselves in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>\ncomponent. Higher values are placed first.\nDefault value is <code>52</code> and minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "AnalyticsSuggestions.constructor",
		"comment": "<p>Creates a new AnalyticsSuggestions component.\nAlso binds event handlers so that when a user selects a suggestion, an <code>omniboxFromLink</code> usage analytics event is\nlogged if the suggestion comes from a standalone search box, or an <code>omniboxAnalytics</code> usage analytics\nevent is logged otherwise.</p>\n"
	},
	{
		"name": "AuthenticationProvider",
		"comment": "<p>The AuthenticationProvider component arranges for queries to execute with an identity that the user obtains using an\nAuthentication Provider configured on the Coveo Search API\n(see <a href=\"https://developers.coveo.com/x/hQLL\">On-Premises SharePoint Claims Authentication</a>).\nWhen necessary, this component handles redirecting the browser to the address that starts the authentication process.</p>\n<p>Using the standard <code>data-tab</code> attribute, you can enable the AuthenticationProvider component only for tabs requiring\nauthentication (see <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a>).</p>\n"
	},
	{
		"name": "AuthenticationProvider.options",
		"comment": "<p>The options for the component.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options.caption",
		"comment": "<p>Specifies the friendly name of the authentication provider. This is the name that you want to display in the user\ninterface when a user is logging in.\nDefault value is the value set to <a href=\"https://coveo.github.io/search-ui/components/authenticationprovider.html#options.name\">AuthenticationProvider.options.name</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options.name",
		"comment": "<p>Specifies the name of the authentication provider.\nSee <a href=\"https://developers.coveo.com/x/OQMv\">Windows Service Configuration File</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options.showIFrame",
		"comment": "<p>If the <a href=\"https://coveo.github.io/search-ui/components/authenticationprovider.html#options.useiframe\">AuthenticationProvider.options.useIFrame</a> is set to <code>true</code>, specifies whether to make the\nauthentication <code>&lt;iframe&gt;</code> visible to the user (inside a popup).\nDefault value is <code>true</code>.</p>\n<p>When the underlying authentication provider requires no user interaction (for example, when a user authenticates\nusing Windows Authentication along with SharePoint Claims), setting this option to <code>false</code> reduces the visual\nimpact of the authentication process.</p>\n"
	},
	{
		"name": "AuthenticationProvider.options.useIFrame",
		"comment": "<p>Specifies whether to use an <code>&lt;iframe&gt;</code> to host the chain of redirections that make up the authentication\nprocess.\nDefault value is <code>false</code>.</p>\n<p>Using an <code>&lt;iframe&gt;</code> prevents leaving the search page as part of the authentication process. However, some login\nproviders will refuse to load in an <code>&lt;iframe&gt;</code>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "AuthenticationProvider.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AuthenticationProvider.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "AuthenticationProvider.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "AuthenticationProvider.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "AuthenticationProvider.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "AuthenticationProvider.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "AuthenticationProvider.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "AuthenticationProvider.constructor",
		"comment": "<p>Creates a new AuthenticationProvider component.</p>\n"
	},
	{
		"name": "Backdrop",
		"comment": "<p>The Backdrop component renders an image URL (either passed as a direct URL or contained in a result field) as a\nbackground image. It is useful for displaying information in front of a dynamic background image.\nThe Backdrop component will automatically initialize components embedded within itself:</p>\n<pre><code class=\"lang-html\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoBackdrop\"</span> <span class=\"hljs-attr\">data-image-field</span>=<span class=\"hljs-string\">\"ytthumbnailurl\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"somefield\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "Backdrop.options.imageField",
		"comment": "<p>Specifies the field from which the background image will be pulled.\nIf <a href=\"https://coveo.github.io/search-ui/components/backdrop.html#options.imageurl\">Backdrop.options.imageUrl</a> is specified, it will override this option.</p>\n"
	},
	{
		"name": "Backdrop.options.imageUrl",
		"comment": "<p>Specifies a direct URL from which the background image will be sourced.\nHas priority over <a href=\"https://coveo.github.io/search-ui/components/backdrop.html#options.imagefield\">Backdrop.options.imageField</a>.</p>\n"
	},
	{
		"name": "Backdrop.options.overlayColor",
		"comment": "<p>Specifies the color that will be overlaid on top of the background image.\nThis option needs to be declared as a CSS color. Be sure to use RGBA with an alpha value lower than 1 in order to\nbe able to see the image behind the overlay color.\nExample value : &quot;<code>rgba(101, 123, 76, 0.5)</code>&quot;</p>\n"
	},
	{
		"name": "Backdrop.options.overlayGradient",
		"comment": "<p>Specifies whether the overlay color should be instead be rendered as a top-to-bottom gradient from\n<a href=\"https://coveo.github.io/search-ui/components/backdrop.html#options.overlaycolor\">Backdrop.options.overlayColor</a> to transparent.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Backdrop.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Backdrop.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Backdrop.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Backdrop.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Backdrop.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Backdrop.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Backdrop.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Backdrop.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Backdrop.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Backdrop.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Backdrop.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Backdrop.constructor",
		"comment": "<p>Creates a new Backdrop component.</p>\n"
	},
	{
		"name": "Badge",
		"comment": "<p>The Badge component outputs a field value with customizable colors and an icon preceding it.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>). It\nextends the <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html\">FieldValue</a> component. Therefore all FieldValue options are also available for a Badge component.</p>\n"
	},
	{
		"name": "Badge.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Badge.options.colors",
		"comment": "<p>Specifies the colors for the Badge component.\nYou must specify the colors in a JSON format similar to what follows:</p>\n<pre><code class=\"lang-json\">{\n  <span class=\"hljs-attr\">\"values\"</span>:{\n    <span class=\"hljs-attr\">\"foo\"</span>:{\n      <span class=\"hljs-attr\">\"icon\"</span>:<span class=\"hljs-string\">\"blue\"</span>,\n      <span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"#222\"</span>\n    },\n    <span class=\"hljs-attr\">\"bar\"</span>:{\n      <span class=\"hljs-attr\">\"icon\"</span>:<span class=\"hljs-string\">\"green\"</span>,\n      <span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"lightgreen\"</span>\n    }\n  },\n  <span class=\"hljs-attr\">\"icon\"</span>:<span class=\"hljs-string\">\"red\"</span>,\n  <span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"#9ab52b\"</span>\n}\n</code></pre>\n<p>This format allows you to customize both the icon and text colors for each field value as well as the default\nvalues.</p>\n<p>Colors can be specified in HTML or hexadecimal format.</p>\n"
	},
	{
		"name": "Badge.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Badge.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Badge.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Badge.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Badge.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Badge.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Badge.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Badge.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Badge.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Badge.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Badge.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Badge.constructor",
		"comment": "<p>Creates a new Badge component.</p>\n"
	},
	{
		"name": "Breadcrumb",
		"comment": "<p>The Breadcrumb component displays a summary of the currently active query filters.\nFor example, when the user selects a <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> value, the breadcrumbs display this value.</p>\n<p>The active filters are obtained by the component by firing an event in the Breadcrumb component.</p>\n<p>All other components having an active state can react to this event by providing custom bits of HTML to display\ninside the breadcrumbs.</p>\n<p>Thus, it is possible to easily extend the Breadcrumb component using custom code to display information about custom\nstates and filters.</p>\n<p>See <a href=\"https://coveo.github.io/search-ui/classes/breadcrumbevents.html\">BreadcrumbEvents</a> for the list of events and parameters sent when a Breadcrumb component is populated.</p>\n"
	},
	{
		"name": "Breadcrumb.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Breadcrumb.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Breadcrumb.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Breadcrumb.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Breadcrumb.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Breadcrumb.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Breadcrumb.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Breadcrumb.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Breadcrumb.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Breadcrumb.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Breadcrumb.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Breadcrumb.constructor",
		"comment": "<p>Creates a new Breadcrumb component. Binds event on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#deferredquerysuccess\">QueryEvents.deferredQuerySuccess</a> to draw the\nbreadcrumbs.</p>\n"
	},
	{
		"name": "CardActionBar",
		"comment": "<p>The CardActionBar component displays an action bar at the bottom of a card result (see\n<a href=\"https://developers.coveo.com/x/yQUvAg\">Result Layouts</a>). It is a simple container for buttons or complementary\ninformation.\nYou should place this component at the bottom of a card result (i.e., as the last child of the surrounding\n<code>coveo-result-frame</code>.</p>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"coveo-result-frame\"</span>&gt;</span>\n  [ ... content ... ]\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoCardActionBar\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">some-button</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">some-button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">some-additional-info</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">some-additional-info</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>A CardActionBar component is a two-state widget: it can either be shown or hidden. It is hidden by default.</p>\n"
	},
	{
		"name": "CardActionBar.options.hidden",
		"comment": "<p>Specifies whether to hide the CardActionBar by default, unless the user clicks its parent <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\">IQueryResult</a>.\nDefault value is <code>true</code>. This means that the component is hidden and a visual indicator is appended to its parent\nIQueryResult.</p>\n"
	},
	{
		"name": "CardActionBar.options.openOnMouseOver",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/cardactionbar.html#options.hidden\">CardActionBar.options.hidden</a> is <code>true</code>, specifies whether to open the CardActionBar when the cursor\nhovers over it.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "CardActionBar.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "CardActionBar.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "CardActionBar.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CardActionBar.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "CardActionBar.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "CardActionBar.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "CardActionBar.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CardActionBar.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "CardActionBar.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "CardActionBar.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "CardActionBar.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "CardActionBar.constructor",
		"comment": "<p>Creates a new CardActionBar component.</p>\n"
	},
	{
		"name": "CardOverlay",
		"comment": "<p>The CardOverlay component displays a button that the user can click to toggle the visibility of an overlay on top of\nan <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\">IQueryResult</a>. While this component typically populates a <a href=\"https://coveo.github.io/search-ui/components/cardactionbar.html\">CardActionBar</a> component, it is actually\npossible to place a CardOverlay component anywhere in any result.\nThe primary purpose of the CardOverlay component is to display additional information about a result in a format that\nfits well within a card result layout (see <a href=\"https://developers.coveo.com/x/yQUvAg\">Result Layouts</a>).</p>\n<p>When initialized, this component creates a <code>&lt;div class=&quot;coveo-card-overlay&quot;&gt;</code> element as the last child of its parent\nIQueryResult, and displays a button which toggles the visibility of the overlay.</p>\n"
	},
	{
		"name": "CardOverlay.options.icon",
		"comment": "<p>Specifies the icon to use for the overlay icon and for the button icon.</p>\n"
	},
	{
		"name": "CardOverlay.options.title",
		"comment": "<p>Specifies the string to use for the overlay title and for the button text.\nSetting a value for this option is required for this component to work.</p>\n"
	},
	{
		"name": "CardOverlay.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "CardOverlay.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "CardOverlay.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CardOverlay.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "CardOverlay.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "CardOverlay.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "CardOverlay.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CardOverlay.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "CardOverlay.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "CardOverlay.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "CardOverlay.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "CardOverlay.constructor",
		"comment": "<p>Creates a new CardOverlay component.</p>\n"
	},
	{
		"name": "CurrentTab",
		"comment": "<p>This component is used to display the name of the currently selected tab.\nIf no tabs are selected, this component is hidden.</p>\n"
	},
	{
		"name": "CurrentTab.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "CurrentTab.options.tabSectionToOpen",
		"comment": "<p>Specifies the CSS selector to the section which contains the tab.\nClicking this component will toggle between opening and closing this section.</p>\n"
	},
	{
		"name": "CurrentTab.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "CurrentTab.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "CurrentTab.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CurrentTab.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "CurrentTab.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "CurrentTab.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "CurrentTab.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "CurrentTab.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "CurrentTab.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "CurrentTab.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "CurrentTab.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "CurrentTab.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n"
	},
	{
		"name": "DidYouMean",
		"comment": "<p>The DidYouMean component is responsible for displaying query corrections. If this component is in the page and the\nquery returns no result but finds a possible query correction, the component either suggests the correction or\nautomatically triggers a new query with the suggested term.</p>\n"
	},
	{
		"name": "DidYouMean.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "DidYouMean.options.enableAutoCorrection",
		"comment": "<p>Specifies whether the DidYouMean component automatically triggers a new query when a query returns no result and\na possible correction is available.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "DidYouMean.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "DidYouMean.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "DidYouMean.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "DidYouMean.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "DidYouMean.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "DidYouMean.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "DidYouMean.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "DidYouMean.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "DidYouMean.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "DidYouMean.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "DidYouMean.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "DidYouMean.constructor",
		"comment": "<p>Creates a new DidYouMean component.</p>\n"
	},
	{
		"name": "ErrorReport",
		"comment": "<p>The ErrorReport component takes care of handling fatal error when doing a query on the index / Search API.\nFor example, the ErrorReport component displays a message when the service responds with a 401 or 503 error. This\ncomponent also renders a small text area with the JSON content of the error response, for debugging purposes.</p>\n"
	},
	{
		"name": "ErrorReport.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ErrorReport.options.showDetailedError",
		"comment": "<p>Specifies whether to display a detailed error message as a JSON in a text content area.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "ErrorReport.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ErrorReport.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ErrorReport.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ErrorReport.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ErrorReport.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ErrorReport.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ErrorReport.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ErrorReport.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ErrorReport.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ErrorReport.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ErrorReport.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ErrorReport.constructor",
		"comment": "<p>Creates a new ErrorReport component.</p>\n"
	},
	{
		"name": "Excerpt",
		"comment": "<p>The Excerpt component renders an excerpt of its associated result and highlights the keywords from the query using\nthe appropriate template helpers.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "Excerpt.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Excerpt.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Excerpt.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Excerpt.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Excerpt.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Excerpt.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Excerpt.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Excerpt.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Excerpt.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Excerpt.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Excerpt.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Excerpt.constructor",
		"comment": "<p>Creates a new Excerpt component.</p>\n"
	},
	{
		"name": "ExportToExcel",
		"comment": "<p>The ExportToExcel component renders an item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu to allow the end user to export the current\nsearch results to the Microsoft Excel format (.xlsx).</p>\n"
	},
	{
		"name": "ExportToExcel.options",
		"comment": "<p>The options for the ExportToExcel</p>\n"
	},
	{
		"name": "ExportToExcel.options.numberOfResults",
		"comment": "<p>Specifies the number of results to include in the resulting Excel file.\nGenerating and downloading the Excel file should take a reasonably short amount of time when using the default\nvalue. However, this amount of time will increase exponentially as you set the value higher.</p>\n<p>Consequently, you should avoid setting this value above the default index limit of 1000 search results.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "ExportToExcel.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ExportToExcel.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ExportToExcel.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ExportToExcel.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ExportToExcel.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ExportToExcel.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ExportToExcel.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ExportToExcel.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ExportToExcel.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ExportToExcel.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ExportToExcel.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ExportToExcel.constructor",
		"comment": "<p>Creates a new ExportToExcel component.</p>\n"
	},
	{
		"name": "Facet",
		"comment": "<p>The Facet component displays a <em>facet</em> of the results for the current query. A facet consists of a list of values for\na given field occurring in the results, ordered using a configurable criteria.\nThe list of values is obtained using an <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> operation performed at the same time as the main\nquery.</p>\n<p>The Facet component allows the user to drill down inside results by restricting them to certain field values. It also\nallows filtering out values from the Facet itself, and can provide a search box to look for specific values inside\nlarger sets.</p>\n<p>This is probably the most complex component in the Coveo JavaScript Search Framework and as such, it allows for many\ndifferent configuration options.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/facetrange.html\">FacetRange</a> and <a href=\"https://coveo.github.io/search-ui/components/hierarchicalfacet.html\">HierarchicalFacet</a> (which extend this component), and <a href=\"https://coveo.github.io/search-ui/components/facetslider.html\">FacetSlider</a>\n(which does not properly extend this component, but is very similar).</p>\n"
	},
	{
		"name": "Facet.options",
		"comment": "<p>The possible options for a facet</p>\n"
	},
	{
		"name": "Facet.options.additionalFilter",
		"comment": "<p>Specifies an additional query expression (query override) to add to each <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> that this Facet\nperforms.\nExample: <code>@date&gt;=2014/01/01</code></p>\n"
	},
	{
		"name": "Facet.options.allowedValues",
		"comment": "<p>Specifies an explicit list of <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#allowedvalues\">IGroupByRequest.allowedValues</a> in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.\nThis will whitelist the Facet content to some specific values.</p>\n<p>Example: <code>[&quot;File&quot;, &quot;People&quot;]</code>.</p>\n"
	},
	{
		"name": "Facet.options.availableSorts",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\">Facet.options.enableSettings</a> is <code>true</code>, specifies the sort criteria options to display in the Facet\n<strong>Settings</strong> menu.\nPossible values are:</p>\n<ul>\n<li><code>&quot;occurrences&quot;</code></li>\n<li><code>&quot;score&quot;</code></li>\n<li><code>&quot;alphaAscending&quot;</code></li>\n<li><code>alphaDescending</code></li>\n<li><code>&quot;computedfieldascending&quot;</code></li>\n<li><code>&quot;computedfielddescending&quot;</code></li>\n<li><code>&quot;custom&quot;</code></li>\n</ul>\n<p>Default value is <code>&quot;occurrences,score,alphaAscending,alphaDescending&quot;</code>.</p>\n"
	},
	{
		"name": "Facet.options.computedField",
		"comment": "<p>Specifies the name of a field on which to execute an aggregate operation for all distinct values of the Facet\nfield.\nThe Facet displays the result of the operation along with the number of occurrences for each value.</p>\n<p>You can use this option to compute the sum of a field (like a money amount) for each listed Facet value.</p>\n<p>Works in conjunction with <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldoperation\">Facet.options.computedFieldOperation</a>,\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldformat\">Facet.options.computedFieldFormat</a> and <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldcaption\">Facet.options.computedFieldCaption</a>.</p>\n"
	},
	{
		"name": "Facet.options.computedFieldCaption",
		"comment": "<p>Specifies what the caption of the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfield\">Facet.options.computedField</a> should be in the settings menu for sorting.\nFor example, setting this option to <code>&quot;Money&quot;</code> will display <code>&quot;Money Ascending&quot;</code> for computed field ascending.</p>\n<p>Default value is the localized string for <code>&quot;ComputedField&quot;</code>.</p>\n"
	},
	{
		"name": "Facet.options.computedFieldFormat",
		"comment": "<p>Specifies how to format the values resulting from a <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfieldoperation\">Facet.options.computedFieldOperation</a>.\nThe Globalize library defines all available formats (see\n<a href=\"https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-\">Globalize</a>).</p>\n<p>The most commonly used formats are:</p>\n<ul>\n<li><code>&quot;c0&quot;</code> - Formats the value as a currency.</li>\n<li><code>&quot;n0&quot;</code> - Formats the value as an integer.</li>\n<li><code>&quot;n2&quot;</code> - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\n<p>Default value is <code>&quot;c0&quot;</code>.</p>\n"
	},
	{
		"name": "Facet.options.computedFieldOperation",
		"comment": "<p>Specifies the type of aggregate operation to perform on the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.computedfield\">Facet.options.computedField</a>.\nThe possible values are:</p>\n<ul>\n<li><code>&quot;sum&quot;</code> - Computes the sum of the computed field values.</li>\n<li><code>&quot;average&quot;</code> - Computes the average of the computed field values.</li>\n<li><code>&quot;minimum&quot;</code> - Finds the minimum value of the computed field values.</li>\n<li><code>&quot;maximum&quot;</code> - Finds the maximum value of the computed field values.</li>\n</ul>\n<p>Default value is <code>&quot;sum&quot;</code>.</p>\n"
	},
	{
		"name": "Facet.options.customSort",
		"comment": "<p>Specifies a custom order by which to sort the Facet values.\nFor example, you could use this to specify a logical order for support tickets, such as\n<code>customSort : [&quot;New&quot;,&quot;Opened&quot;,&quot;Feedback&quot;,&quot;Resolved&quot;,&quot;Feedback&quot;]</code></p>\n"
	},
	{
		"name": "Facet.options.dependsOn",
		"comment": "<p>Specifies whether this Facet only appears when a value is selected in its &quot;parent&quot; Facet.\nTo specify the parent Facet, use its <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">id</a>.</p>\n<p>Remember that by default, a Facet id is the same as its <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">field</a>.</p>\n<p><strong>Examples:</strong></p>\n<p>First case: the &quot;parent&quot; Facet has no custom <code>id</code>:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- \"Parent\" Facet: --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myfield'</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">'My Parent Facet'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- The \"dependent\" Facet must refer to the default `id` of its \"parent\" Facet, which is the name of its field. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield'</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">'My Dependent Facet'</span> <span class=\"hljs-attr\">data-depends-on</span>=<span class=\"hljs-string\">'@myfield'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Second case: the &quot;parent&quot; Facet has a custom <code>id</code>:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- \"Parent\" Facet: --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myfield'</span> <span class=\"hljs-attr\">data-title</span>=<span class=\"hljs-string\">'My Parent Facet'</span> <span class=\"hljs-attr\">data-id</span>=<span class=\"hljs-string\">'myParentCustomId'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- The \"dependent\" Facet must refer to the custom `id` of its \"parent\" Facet, which is 'myParentCustomId'. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacet'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@myotherfield data-title='</span><span class=\"hljs-attr\">My</span> <span class=\"hljs-attr\">Dependent</span> <span class=\"hljs-attr\">Facet</span>' <span class=\"hljs-attr\">data-depends-on</span>=<span class=\"hljs-string\">'myParentCustomId'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>undefined</code></p>\n"
	},
	{
		"name": "Facet.options.dropdownHeaderLabel",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enableresponsivemode\">Facet.options.enableResponsiveMode</a> is <code>true</code> for all facets and\n<a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.enableresponsivemode\">FacetSlider.options.enableResponsiveMode</a> is also <code>true</code> for all sliders, specifies the label of the\ndropdown button that allows to display the facets when in responsive mode.\nIf more than one Facet or <a href=\"https://coveo.github.io/search-ui/components/facetslider.html\">FacetSlider</a> in the search interface specifies a value for this option, then the\nframework uses the first occurrence of the option.</p>\n<p>Default value is <code>Filters</code>.</p>\n"
	},
	{
		"name": "Facet.options.enableCollapse",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\">Facet.options.enableSettings</a> is <code>true</code>, specifies whether the <strong>Collapse \\ Expand</strong> menu option is\navailable in the Facet <strong>Settings</strong> menu.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "Facet.options.enableFacetSearch",
		"comment": "<p>Specifies whether to display a search box at the bottom of the Facet for searching among the available values.\nSee also <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.facetsearchdelay\">Facet.options.facetSearchDelay</a>, <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.facetsearchignoreaccents\">Facet.options.facetSearchIgnoreAccents</a>,\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.numberofvaluesinfacetsearch\">Facet.options.numberOfValuesInFacetSearch</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Facet.options.enableMoreLess",
		"comment": "<p>Specifies whether to enable the <strong>More</strong> and <strong>Less</strong> buttons in the Facet.\nSee also <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.pagesize\">Facet.options.pageSize</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Facet.options.enableResponsiveMode",
		"comment": "<p>Specifies whether to enable <em>responsive mode</em> for facets. Setting this options to <code>false</code> on any Facet or\n<a href=\"https://coveo.github.io/search-ui/components/facetslider.html\">FacetSlider</a> in a search interface disables responsive mode for all other facets in the search interface.\nResponsive mode displays all facets under a single dropdown button whenever the width of the HTML element which\nthe search interface is bound to reaches or falls behind a certain threshold (see\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#responsivecomponents\">SearchInterface.responsiveComponents</a>).</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.dropdownheaderlabel\">Facet.options.dropdownHeaderLabel</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Facet.options.enableSettings",
		"comment": "<p>Specifies whether to display the Facet <strong>Settings</strong> menu.\nSee also <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettingsfacetstate\">Facet.options.enableSettingsFacetState</a>, <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.availablesorts\">Facet.options.availableSorts</a> and\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablecollapse\">Facet.options.enableCollapse</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Facet.options.enableSettingsFacetState",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablesettings\">Facet.options.enableSettings</a> is <code>true</code>, specifies whether the <strong>Save state</strong> menu option is available\nin the Facet <strong>Settings</strong> menu.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Facet.options.enableTogglingOperator",
		"comment": "<p>Specifies whether to allow the user to toggle between the <code>OR</code> and <code>AND</code> modes in the Facet.\nSetting this option to <code>true</code> displays an icon in the top right corner of the Facet. The user can click this icon\nto toggle between between the two modes.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Facet.options.facetSearchDelay",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablefacetsearch\">Facet.options.enableFacetSearch</a> is <code>true</code>, specifies the delay (in milliseconds) before sending a\nsearch request to the server when the user starts typing in the Facet search box.\nSpecifying a smaller value means results will arrive faster. However, chances of having to cancel many requests\nsent to the server will increase as the user keeps on typing new characters.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Facet.options.facetSearchIgnoreAccents",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablefacetsearch\">Facet.options.enableFacetSearch</a> is <code>true</code>, specifies whether to ignore accents in the Facet search\nbox.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Facet.options.field",
		"comment": "<p>Specifies the index field whose values the Facet should use.\nThis requires the given field to be configured correctly in the index as a Facet field (see\n<a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=137\">Adding Fields to a Source</a>).</p>\n<p>Specifying a value for this option is required for the Facet component to work.</p>\n"
	},
	{
		"name": "Facet.options.id",
		"comment": "<p>Specifies a unique identifier for the Facet. Among other things, this identifier serves the purpose of saving the\nfacet state in the URL hash.\nIf you have two facets with the same field on the same page, you should specify an id value for at least one of\nthose two facets. This id must be unique in the page.</p>\n<p>Default value is the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a> option value.</p>\n"
	},
	{
		"name": "Facet.options.includeInBreadcrumb",
		"comment": "<p>Specifies whether the Facet should push data to the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> component.\nSee also <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.numberofvaluesinbreadcrumb\">Facet.options.numberOfValuesInBreadcrumb</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Facet.options.injectionDepth",
		"comment": "<p>Specifies the <em>injection depth</em> to use for the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> operation.\nThe injection depth determines how many results to scan in the index to ensure that the facet lists all potential\nfacet values. Increasing this value enhances the accuracy of the listed values at the cost of performance.</p>\n<p>Default value is <code>1000</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Facet.options.isMultiValueField",
		"comment": "<p>Specifies whether the field is configured in the index as a multi-value field (semicolon separated values such as\n<code>abc;def;ghi</code>).\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Facet.options.numberOfValues",
		"comment": "<p>Specifies the maximum number of field values to display by default in the Facet before the user\nclicks <strong>More</strong>.\nDefault value is <code>5</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Facet.options.numberOfValuesInBreadcrumb",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.includeinbreadcrumb\">Facet.options.includeInBreadcrumb</a> is <code>true</code>, specifies the maximum number of values that the Facet\nshould display in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> before outputting a <strong>See more</strong> button.\nDefault value is <code>5</code> on a desktop computer and <code>3</code> on a mobile device. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Facet.options.numberOfValuesInFacetSearch",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablefacetsearch\">Facet.options.enableFacetSearch</a> is <code>true</code>, specifies the number of values to display in the Facet\nsearch results popup.\nDefault value is <code>15</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "Facet.options.paddingContainer",
		"comment": "<p>Specifies the parent container of the facets.\nUsed by the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.preserveposition\">Facet.options.preservePosition</a>.</p>\n<p>Default value is <code>element.parentElement</code>.</p>\n"
	},
	{
		"name": "Facet.options.pageSize",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enablemoreless\">Facet.options.enableMoreLess</a> is <code>true</code>, specifies the number of additional results to fetch when\nclicking on the <strong>More</strong> button in the Facet.\nDefault value is <code>10</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "Facet.options.preservePosition",
		"comment": "<p>Specifies whether the Facet should remain stable in its current position in the viewport while the mouse cursor\nis over it.\nWhenever the value selection changes in a facet, the search interface automatically performs a query. This new\nquery might cause other elements in the page to resize themselves (typically, other facets above or below the\none the user is interacting with).</p>\n<p>This option is responsible for adding the <code>&lt;div class=&#39;coveo-topSpace&#39;&gt;</code> and\n<code>&lt;div class=&#39;coveo-bottomSpace&#39;&gt;</code> around the Facet container. The Facet adjusts the scroll amount of the page to\nensure that it does not move relatively to the mouse when the results are updated.</p>\n<p>In some cases, the Facet also adds margins to the scrollContainer, if scrolling alone is not enough to\npreserve position.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.paddingcontainer\">Facet.options.paddingContainer</a> and <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.scrollcontainer\">Facet.options.scrollContainer</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Facet.options.scrollContainer",
		"comment": "<p>Specifies the HTML element (through a CSS selector) whose scroll amount the Facet should adjust to preserve its\nposition when results are updated.\nUsed by <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.preserveposition\">Facet.options.preservePosition</a>.</p>\n<p>Default value is <code>document.body</code>.</p>\n"
	},
	{
		"name": "Facet.options.sortCriteria",
		"comment": "<p>Specifies the criteria to use to sort the Facet values.\nSee <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> for the list of possible values.</p>\n<p>Default value is the first sort criteria specified in the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.availablesorts\">Facet.options.availableSorts</a> option, or\n<code>&quot;occurrences&quot;</code> if no sort criteria is specified.</p>\n"
	},
	{
		"name": "Facet.options.title",
		"comment": "<p>Specifies the title to display at the top of the Facet.\nDefault value is the localized string for <code>&quot;NoTitle&quot;</code>.</p>\n"
	},
	{
		"name": "Facet.options.useAnd",
		"comment": "<p>Specifies whether to use the <code>AND</code> operator in the resulting filter when multiple values are selected in the\nFacet.\nSetting this option to <code>true</code> means that documents must have all of the selected values to match the resulting\nquery.</p>\n<p>Default value is <code>false</code>, which means that the filter uses the <code>OR</code> operator. Thus, by default, documents must\nhave at least one of the selected values to match the query.</p>\n"
	},
	{
		"name": "Facet.options.valueCaption",
		"comment": "<p>Specifies a JSON object describing a mapping of Facet values to their desired captions.\nYou can only set this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface. You cannot set it directly in the\nmarkup as an HTML attribute.</p>\n<p>Example:</p>\n<pre><code><span class=\"hljs-comment\">// Using a Facet for file types</span>\n<span class=\"hljs-keyword\">var</span> myValueCaption = {  <span class=\"hljs-string\">\"txt\"</span>: <span class=\"hljs-string\">\"Text files\"</span>,<span class=\"hljs-string\">\"html\"</span>: <span class=\"hljs-string\">\"Web page\"</span>, [ etc ... ]};\n\n<span class=\"hljs-comment\">// You can set the option in the 'init' call using 'pure' JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(<span class=\"hljs-string\">'#search'</span>), {\n   Facet : {\n     valueCaption: myValueCaption\n   }\n})\n\n<span class=\"hljs-comment\">// Or  the jQuery extension</span>\n$(<span class=\"hljs-string\">\"#search\"</span>).coveo(<span class=\"hljs-string\">\"init\"</span>, {\n   Facet: {\n     valueCaption: myValueCaption\n   }\n})\n</code></pre>"
	},
	{
		"name": "Facet.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Facet.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Facet.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Facet.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Facet.facetSearch",
		"comment": "<p>Renders and handles the Facet <strong>Search</strong> part of the component.</p>\n"
	},
	{
		"name": "Facet.facetSettings",
		"comment": "<p>Renders and handles the Facet <strong>Settings</strong> part of the component</p>\n"
	},
	{
		"name": "Facet.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Facet.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Facet.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Facet.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Facet.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Facet.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Facet.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Facet.constructor",
		"comment": "<p>Creates a new Facet component. Binds multiple query events as well.</p>\n"
	},
	{
		"name": "FacetRange",
		"comment": "<p>The FacetRange component displays a <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> whose values are expressed as ranges. These ranges are computed\nfrom the results of the current query.\nThis component inherits from the Facet component. Thus, any option available for a Facet component is also available\nfor a FacetRange component. This also implies that you must specify a <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">field</a> value for\nthis component to work.</p>\n"
	},
	{
		"name": "FacetRange.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FacetRange.options.dateField",
		"comment": "<p>Specifies whether the field for which you require ranges is a date field.\nThis allows the component to correctly build the outgoing <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "FacetRange.options.ranges",
		"comment": "<p>Specifies an array of <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html\">IRangeValue</a> to use as Facet values.\nIt is only possible to specify a value for this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface. You\ncannot set it directly as an HTML attribute.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> myRanges = [\n  {\n     <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">0</span>,\n     <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">100</span>,\n     <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">\"0 - 100\"</span>,\n     <span class=\"hljs-attr\">endInclusive</span>: <span class=\"hljs-literal\">false</span>\n   },\n   {\n     <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">100</span>,\n     <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">200</span>,\n     <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">\"100 - 200\"</span>,\n     <span class=\"hljs-attr\">endInclusive</span>: <span class=\"hljs-literal\">false</span>\n   },\n   {\n     <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">200</span>,\n     <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">300</span>,\n     <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">\"200 - 300\"</span>,\n     <span class=\"hljs-attr\">endInclusive</span>: <span class=\"hljs-literal\">false</span>\n   }\n]\n\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">FacetRange</span> : {\n       <span class=\"hljs-attr\">ranges</span> : myRanges\n   }\n})\n</code></pre>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Ranges can overlap.</p>\n</blockquote>\n<p>By default, the index automatically generates the ranges. However, the index cannot automatically generate the\nranges if the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">field</a> you specify for the FacetRange component is generated by a query\nfunction (see <a href=\"https://developers.coveo.com/x/XQCq\">Query Function</a>). When this is the case, you must specify the\nranges at query time.</p>\n"
	},
	{
		"name": "FacetRange.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FacetRange.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "FacetRange.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetRange.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "FacetRange.facetSearch",
		"comment": "<p>Renders and handles the Facet <strong>Search</strong> part of the component.</p>\n"
	},
	{
		"name": "FacetRange.facetSettings",
		"comment": "<p>Renders and handles the Facet <strong>Settings</strong> part of the component</p>\n"
	},
	{
		"name": "FacetRange.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "FacetRange.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FacetRange.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetRange.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "FacetRange.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "FacetRange.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FacetRange.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FacetRange.constructor",
		"comment": "<p>Creates a new FacetRange component.</p>\n"
	},
	{
		"name": "FacetSlider",
		"comment": "<p>The FacetSlider component creates a facet containing a slider widget that allows the end user to filter results based\non a range of numerical values, rather than a &quot;classic&quot; multi-select <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> with a label and a count for each\nvalue.\nNote that this component does not inherit from the Facet component, and thus does not offer the same configuration\noptions. Also, some of the FacetSlider options cannot be set as a HTML attributes on the component and must rather be\nconfigured in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of the search interface.</p>\n<p><strong>Examples:</strong></p>\n<p>Specifying the FacetSlider configuration using a JSON inside the init call. Note that the JSON follows the\nFacetSlider options:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">FacetSlider</span>: {\n     <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">\"@size\"</span>,\n     <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">1000</span>,\n     <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">5000</span>,\n     <span class=\"hljs-attr\">rangeSlider</span>: <span class=\"hljs-literal\">true</span>,\n     <span class=\"hljs-attr\">graph</span>: {\n       <span class=\"hljs-attr\">steps</span>: <span class=\"hljs-number\">10</span>\n     }\n   }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\n$(<span class=\"hljs-string\">'#search'</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n   <span class=\"hljs-attr\">FacetSlider</span>: {\n     <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">\"@size\"</span>,\n     <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">1000</span>,\n     <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">5000</span>,\n     <span class=\"hljs-attr\">rangeSlider</span>: <span class=\"hljs-literal\">true</span>,\n     <span class=\"hljs-attr\">graph</span>: {\n       <span class=\"hljs-attr\">steps</span>: <span class=\"hljs-number\">10</span>\n     }\n   }\n})\n</code></pre>\n<p>Specifying the same FacetSlider configuration by setting the corresponding HTML attributes directly in the markup:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFacetSlider'</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@size'</span> <span class=\"hljs-attr\">data-start</span>=<span class=\"hljs-string\">'1000'</span> <span class=\"hljs-attr\">data-end</span>=<span class=\"hljs-string\">'5000'</span> <span class=\"hljs-attr\">data-range-slider</span>=<span class=\"hljs-string\">'true'</span> <span class=\"hljs-attr\">data-graph-steps</span>=<span class=\"hljs-string\">'10'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "FacetSlider.options",
		"comment": "<p>The component options</p>\n"
	},
	{
		"name": "FacetSlider.options.dateField",
		"comment": "<p>Specifies whether the field for which you are requesting a range is a date field. This allows the FacetSlider to\ncorrectly build the outgoing <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">GroupByRequest</a> and render itself properly.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.dateFormat",
		"comment": "<p>Specifies the format to use to display values if they are dates.\nDefault value is <code>&quot;MMM dd, yyyy&quot;</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.displayAsPercent",
		"comment": "<p>Specifies the percentage caption options to use to display the field values.\nAvailable options are:</p>\n<ul>\n<li>enable (<code>data-display-as-percent-enable</code>): boolean; specifies whether to display the caption as a percentage.\nDefault value is <code>false</code>.\nseparator (<code>data-display-as-percent-separator</code>): string; specifies the character(s) to use as a separator in the\ncaption. Default value is <code>&quot;-&quot;</code>.</li>\n</ul>\n"
	},
	{
		"name": "FacetSlider.options.displayAsValue",
		"comment": "<p>Specifies the caption options to use to display the field values.\nAvailable options are:</p>\n<ul>\n<li>enable (<code>data-display-as-value-enable</code>): boolean; specifies whether to display the caption as a value. Default\nvalue is <code>true</code>.</li>\n<li>unitSign (<code>data-display-as-value-unit-sign</code>): string; specifies the unit sign for this value (e.g., <code>&quot;$&quot;</code>).\nDefault value is <code>undefined</code>.</li>\n<li>separator (<code>data-display-as-value-separator</code>): string; specifies the character(s) to use as a separator in the\ncaption. Default value is <code>&quot;-&quot;</code>.</li>\n</ul>\n"
	},
	{
		"name": "FacetSlider.options.dropdownHeaderLabel",
		"comment": "<p>Specifies the label of the button that allows to show the facets when in responsive mode. If it is specified more than once, the\nfirst occurence of the option will be used.\nThe default value is &quot;Filters&quot;.</p>\n"
	},
	{
		"name": "FacetSlider.options.enableResponsiveMode",
		"comment": "<p>Specifies whether to enable <em>responsive mode</em> for facets. Setting this options to <code>false</code> on any <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> or\n<a href=\"https://coveo.github.io/search-ui/components/facetslider.html\">FacetSlider</a> in a search interface disables responsive mode for all other facets in the search interface.\nResponsive mode displays all facets under a single dropdown button whenever the width of the HTML element which\nthe search interface is bound to reaches or falls behind a certain threshold (see\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#responsivecomponents\">SearchInterface.responsiveComponents</a>).</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.dropdownheaderlabel\">FacetSlider.options.dropdownHeaderLabel</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.end",
		"comment": "<p>Specifies the ending boundary of the slider.\nDate values are rounded to the nearest year when <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.datefield\">FacetSlider.options.dateField</a> is <code>true</code>.</p>\n<p>Default value is the highest available field value in the index.</p>\n"
	},
	{
		"name": "FacetSlider.options.excludeOuterBounds",
		"comment": "<p>Specifies whether to exclude the outer bounds of the slider in the generated query when they are not active.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.field",
		"comment": "<p>Specifies the index field whose values the FacetSlider should use.\nThis requires the given field to be configured correctly in the index as a Facet field (see\n<a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=137\">Adding Fields to a Source</a>).</p>\n<p>Specifying a value for this option is required for the FacetSlider component to work.</p>\n"
	},
	{
		"name": "FacetSlider.options.getSteps",
		"comment": "<p>Specifies a function to generate the steps for the FacetSlider (see <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.steps\">FacetSlider.options.steps</a>. This\nfunction receives the FacetSlider boundaries (see <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.start\">FacetSlider.options.start</a> and\n<a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.end\">FacetSlider.options.end</a>) and must return an array of numbers (the steps).\nYou can only set this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface. You cannot set it directly in the\nmarkup as an HTML attribute.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">FacetSlider</span>: {\n     <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">\"@size\"</span>,\n     <span class=\"hljs-attr\">getSteps</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">start, end</span>) </span>{\n       <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">10</span>];\n     }\n   }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\n$(<span class=\"hljs-string\">'#search'</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n   <span class=\"hljs-attr\">FacetSlider</span>: {\n       <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">\"@size\"</span>,\n       <span class=\"hljs-attr\">getSteps</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">start, end</span>) </span>{\n           <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">10</span>];\n       }\n   }\n})\n</code></pre>\n"
	},
	{
		"name": "FacetSlider.options.graph",
		"comment": "<p>Specifies whether to display a small graph on top of the slider.\nAvailable options are:</p>\n<ul>\n<li>steps (<code>data-graph-steps</code>): number; specifies the number of steps/columns to display in your graph. Default\nvalue is <code>10</code>. Minimum value is <code>2</code>.</li>\n</ul>\n"
	},
	{
		"name": "FacetSlider.options.id",
		"comment": "<p>Specifies a unique identifier for the FacetSlider. Among other things, this identifier serves the purpose of\nsaving the facet state in the URL hash.\nIf you have two facets with the same field on the same page, you should specify a unique id value for at least\none of those two facets. This id must be unique in the page.</p>\n<p>Default value is the <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.field\">FacetSlider.options.field</a> option value.</p>\n"
	},
	{
		"name": "FacetSlider.options.queryOverride",
		"comment": "<p>Specifies the query to filter automatic minimum and maximum range of the slider.\nThis is especially useful for date ranges where the index may contain values which are not set, and thus the\nautomatic range returns values from the year 1400 (earliest date from the boost C++ library).</p>\n<p>This option can be useful to do something like <code>queryOverride : @date&gt;2000/01/01</code> or some arbitrary date which\nwill filter out unwanted values.</p>\n"
	},
	{
		"name": "FacetSlider.options.rangeSlider",
		"comment": "<p>Specifies whether you want a slider with two buttons instead of a slider with a single button.\nBy default, only one button appears in the slider.</p>\n"
	},
	{
		"name": "FacetSlider.options.rounded",
		"comment": "<p>Specifies the number of decimal places to round the displayed numerical values to.\nDefault (and minimum) value is <code>0</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.start",
		"comment": "<p>Specifies the starting boundary of the slider.\nDate values are rounded to the nearest year when <a href=\"https://coveo.github.io/search-ui/components/facetslider.html#options.datefield\">FacetSlider.options.dateField</a> is <code>true</code>.</p>\n<p>Default value is the lowest available field value in the index.</p>\n"
	},
	{
		"name": "FacetSlider.options.steps",
		"comment": "<p>Specifies the number of steps to split the slider into.\nFor example, if your range is [ 0 , 100 ] and you specify 10 steps, then the end user can move the slider only to\nthe values [ 0, 10, 20, 30 ... , 100 ].</p>\n<p>For performance reasons, the maximum value for option is 1</p>\n<p>Default value is <code>undefined</code>, and the slider allows all values. Minimum value is <code>2</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.title",
		"comment": "<p>Specifies the title to display on top of the FacetSlider component.\nDefault value is the localized string for <code>&quot;NoTitle&quot;</code>.</p>\n"
	},
	{
		"name": "FacetSlider.options.valueCaption",
		"comment": "<p>Specifies a function to generate the caption for the FacetSlider. Receives the current slider values\n(number[]) and must return the caption (string).\nYou can only set this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface. You cannot set it directly in the\nmarkup as an HTML attribute.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">FacetSlider</span>: {\n     <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">\"@size\"</span>,\n     <span class=\"hljs-attr\">valueCaption</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">values</span>) </span>{\n       <span class=\"hljs-keyword\">return</span> values[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">\" hello\"</span> + <span class=\"hljs-string\">\", \"</span> + values[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">\" world\"</span>;\n     }\n   }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\n$(<span class=\"hljs-string\">'#search'</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n   <span class=\"hljs-attr\">FacetSlider</span>: {\n     <span class=\"hljs-attr\">field</span>: <span class=\"hljs-string\">\"@size\"</span>,\n     <span class=\"hljs-attr\">valueCaption</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">values</span>) </span>{\n       <span class=\"hljs-keyword\">return</span> values[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">\" hello\"</span> + <span class=\"hljs-string\">\", \"</span> + values[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">\" world\"</span>;\n     }\n   }\n})\n</code></pre>\n"
	},
	{
		"name": "FacetSlider.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FacetSlider.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "FacetSlider.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetSlider.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "FacetSlider.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "FacetSlider.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FacetSlider.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FacetSlider.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "FacetSlider.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "FacetSlider.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FacetSlider.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FacetSlider.constructor",
		"comment": "<p>Creates a new FacetSlider component. Binds multiple query events as well.</p>\n"
	},
	{
		"name": "FieldSuggestions",
		"comment": "<p>The FieldSuggestions component provides query suggestions based on a particular facet field. For example, you could\nuse this component to provide auto-complete suggestions while the end user is typing a document\ntitle.\nThe query suggestions that this component provides appear in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.</p>\n"
	},
	{
		"name": "FieldSuggestions.options.field",
		"comment": "<p>Specifies the field from which to provide suggestions.\nSpecifying a value for this option is required for the FieldSuggestions component to work.</p>\n"
	},
	{
		"name": "FieldSuggestions.options.headerTitle",
		"comment": "<p>Specifies the title of the result suggestions group in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component. This option is not\navailable when using the default Lightning Friendly Theme (see\n<a href=\"https://developers.coveo.com/x/Y4EAAg\">Lightning Friendly Theme</a>).\nDefault value is the localized string for <code>&quot;SuggestedResults&quot;</code>.</p>\n"
	},
	{
		"name": "FieldSuggestions.options.numberOfSuggestions",
		"comment": "<p>Specifies the number of suggestions to render in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>.\nDefault value is <code>5</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "FieldSuggestions.options.omniboxZIndex",
		"comment": "<p>Specifies the z-index position at which the suggestions render themselves in the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>.\nWhen there are multiple suggestion providers (e.g., <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> or <a href=\"https://coveo.github.io/search-ui/components/analyticssuggestions.html\">AnalyticsSuggestions</a>), components\nwith a higher omniboxZIndex values render themselves first.</p>\n<p>Default value is <code>51</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "FieldSuggestions.options.onSelect",
		"comment": "<p>Specifies the event handler function to execute when the end user selects a suggested value un the\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>. By default, the query box text is replaced by what the end user selected and a new query is\nexecuted. You can, however, replace this default behavior by providing a callback function to execute when the\nvalue is selected.\nYou can only set this option in the <code>init</code> call of your search interface. You cannot set it directly in the\nmarkup as an HTML attribute.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">FieldSuggestions</span> : {\n     <span class=\"hljs-attr\">omniboxSuggestionOptions</span> : {\n       <span class=\"hljs-attr\">onSelect</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">valueSelected, populateOmniBoxEventArgs</span>)</span>{\n         <span class=\"hljs-comment\">// Do something special when a value is selected.</span>\n         <span class=\"hljs-comment\">// You receive the selected value as the first argument, and the Omnibox object as the second argument.</span>\n       }\n     }\n   }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\n$(<span class=\"hljs-string\">'#mySearch'</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n   <span class=\"hljs-attr\">FieldSuggestions</span> : {\n     <span class=\"hljs-attr\">omniboxSuggestionOptions</span> : {\n       <span class=\"hljs-attr\">onSelect</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">valueSelected, populateOmniBoxEventArgs</span>)</span>{\n         <span class=\"hljs-comment\">// Do something special when a value is selected.</span>\n         <span class=\"hljs-comment\">// You receive the selected value as the first argument, and the Omnibox object as the second argument.</span>\n       }\n     }\n   }\n})\n</code></pre>\n"
	},
	{
		"name": "FieldSuggestions.options.queryOverride",
		"comment": "<p>Specifies a query override to apply when retrieving suggestions. You can use any valid query expression (see\n<a href=\"http://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nDefault value is <code>&#39;&#39;</code>, which means that the component applies no query override by default.</p>\n"
	},
	{
		"name": "FieldSuggestions.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FieldSuggestions.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "FieldSuggestions.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldSuggestions.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "FieldSuggestions.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "FieldSuggestions.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FieldSuggestions.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldSuggestions.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "FieldSuggestions.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "FieldSuggestions.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FieldSuggestions.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FieldSuggestions.constructor",
		"comment": "<p>Creates a new FieldSuggestions component.</p>\n"
	},
	{
		"name": "FieldTable",
		"comment": "<p>The FieldTable component displays a set of <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html\">FieldValue</a> components in a table that can optionally be\nexpandable and minimizable. This component automatically takes care of not displaying empty field values.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n<p><strong>Example:</strong></p>\n<pre><code><span class=\"hljs-comment\">// This is the FieldTable component itself, which holds a list of table rows.</span>\n<span class=\"hljs-comment\">// Each row is a FieldValue component.</span>\n&lt;table <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>='<span class=\"hljs-title\">CoveoFieldTable</span>'&gt;</span>\n   <span class=\"hljs-comment\">// Items</span>\n   &lt;tr <span class=\"hljs-keyword\">data</span>-field=<span class=\"hljs-string\">'@sysdate'</span> <span class=\"hljs-keyword\">data</span>-caption=<span class=\"hljs-string\">'Date'</span> <span class=\"hljs-keyword\">data</span>-helper=<span class=\"hljs-string\">'dateTime'</span> /&gt;\n   &lt;tr <span class=\"hljs-keyword\">data</span>-field=<span class=\"hljs-string\">'@sysauthor'</span> <span class=\"hljs-keyword\">data</span>-caption=<span class=\"hljs-string\">'Author'</span> /&gt;\n   &lt;tr <span class=\"hljs-keyword\">data</span>-field=<span class=\"hljs-string\">'@clickuri'</span> <span class=\"hljs-keyword\">data</span>-html-value=<span class=\"hljs-string\">'true'</span> <span class=\"hljs-keyword\">data</span>-caption=<span class=\"hljs-string\">'URL'</span> <span class=\"hljs-keyword\">data</span>-helper=<span class=\"hljs-string\">'anchor'</span> <span class=\"hljs-keyword\">data</span>-helper-options=<span class=\"hljs-string\">'{text: \\\"&lt;%= raw.syssource %&gt;\\\" , target:\\\"_blank\\\"}'</span>&gt;\n&lt;/table&gt;\n</code></pre>"
	},
	{
		"name": "FieldTable.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FieldTable.options.allowMinimization",
		"comment": "<p>Specifies whether to allow the minimization (collapsing) of the FieldTable.\nIf you set this option to <code>false</code>, the component will not create the <strong>Minimize</strong> / <strong>Expand</strong> toggle links.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.expandedtitle\">FieldTable.options.expandedTitle</a>, <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.minimizedtitle\">FieldTable.options.minimizedTitle</a> and\n<a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.minimizedbydefault\">FieldTable.options.minimizedByDefault</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "FieldTable.options.expandedTitle",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.allowminimization\">FieldTable.options.allowMinimization</a> is <code>true</code>, specifies the caption to show on the <strong>Minimize</strong> link\n(the link that appears when the FieldTable is expanded).\nDefault value is <code>&quot;Details&quot;</code>.</p>\n"
	},
	{
		"name": "FieldTable.options.minimizedByDefault",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.allowminimization\">FieldTable.options.allowMinimization</a> is <code>true</code>, specifies whether to minimize the table by default.\nDefault value is <code>undefined</code>, and the FieldTable will collapse by default if the result it is associated with has\na non-empty excerpt.</p>\n"
	},
	{
		"name": "FieldTable.options.minimizedTitle",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html#options.allowminimization\">FieldTable.options.allowMinimization</a> is <code>true</code>, specifies the caption to show on the <strong>Expand</strong> link\n(the link that appears when the FieldTable is minimized).\nDefault value is <code>&quot;Details&quot;</code>.</p>\n"
	},
	{
		"name": "FieldTable.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FieldTable.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "FieldTable.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldTable.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "FieldTable.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "FieldTable.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FieldTable.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldTable.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "FieldTable.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "FieldTable.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FieldTable.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FieldTable.constructor",
		"comment": "<p>Creates a new FieldTable.</p>\n"
	},
	{
		"name": "FieldValue",
		"comment": "<p>The FieldValue component displays the value of a field associated to its parent search result. It is normally usable\nwithin a <a href=\"https://coveo.github.io/search-ui/components/fieldtable.html\">FieldTable</a>.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n<p>A common use of this component is to display a specific field value which also happens to be an existing\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>. When the user clicks on the FieldValue component, it activates the corresponding Facet.</p>\n"
	},
	{
		"name": "FieldValue.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FieldValue.options.displaySeparator",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.splitvalues\">FieldValue.options.splitValues</a> is <code>true</code>, specifies the string to use when displaying multi-value\nfields in the UI.\nThe component will insert this string between each value it displays from a multi-value field.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.separator\">FieldValue.options.separator</a>.</p>\n<p>Default value is <code>&quot;, &quot;</code>.</p>\n"
	},
	{
		"name": "FieldValue.options.facet",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component to toggle when the end user clicks the FieldValue.\nDefault value is the value of <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.field\">FieldValue.options.field</a>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If the target <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">Facet.options.id</a> is is not the same as its <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>), you must specify\nthis option manually in order to link to the correct Facet.</p>\n</blockquote>\n"
	},
	{
		"name": "FieldValue.options.field",
		"comment": "<p>Specifies the field that the FieldValue should display.\nSpecifying a value for this parameter is required in order for the FieldValue component to work.</p>\n"
	},
	{
		"name": "FieldValue.options.helper",
		"comment": "<p>Specifies the helper that the FieldValue should use to display its content.\nWhile several helpers exist by default (see <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html\">ICoreHelpers</a>), it is also possible for you to create your own\ncustom helpers (see <a href=\"https://coveo.github.io/search-ui/classes/templatehelpers.html\">TemplateHelpers</a>).</p>\n"
	},
	{
		"name": "FieldValue.options.helperOptions",
		"comment": "<p>Specifies the options to call on the specified helper.</p>\n"
	},
	{
		"name": "FieldValue.options.htmlValue",
		"comment": "<p>Specifies whether the content to display is an HTML element.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "FieldValue.options.separator",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.splitvalues\">FieldValue.options.splitValues</a> is <code>true</code>, specifies the separator string which separates multi-value\nfields in the index.\nSee <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.displayseparator\">FieldValue.options.displaySeparator</a>.</p>\n<p>Default value is <code>&quot;;&quot;</code>.</p>\n"
	},
	{
		"name": "FieldValue.options.splitValues",
		"comment": "<p>Specifies whether to split the FieldValue at each <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.separator\">FieldValue.options.separator</a>.\nThis is useful for splitting groups using a <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.</p>\n<p>When this option is <code>true</code>, the displayed values are split by the <a href=\"https://coveo.github.io/search-ui/components/fieldvalue.html#options.displayseparator\">FieldValue.options.displaySeparator</a>.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "FieldValue.options.textCaption",
		"comment": "<p>Specifies a caption to display before the value.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "FieldValue.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FieldValue.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "FieldValue.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldValue.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "FieldValue.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "FieldValue.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FieldValue.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FieldValue.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "FieldValue.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "FieldValue.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FieldValue.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FieldValue.constructor",
		"comment": "<p>Creates a new FieldValue.</p>\n"
	},
	{
		"name": "Folding",
		"comment": "<p>The Folding component makes it possible to render a hierarchic display of search results sharing a common field.\nThis component has no visual representation of its own. Its simply folds certain search results so that the\n<a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\">ResultFolding</a> and <a href=\"https://coveo.github.io/search-ui/components/resultattachments.html\">ResultAttachments</a> components can nicely display them inside result templates (see\n<a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n<p>A typical use case of the Folding component is to fold email conversations and message board threads to make it\npossible to display them in a convenient format. Messages belonging to a single conversation typically have a unique\nconversation ID. By indexing this ID on a field, you can use it to fold search results.</p>\n"
	},
	{
		"name": "Folding.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Folding.options.childField",
		"comment": "<p>Specifies the field that determines whether a given result is a child of another top result.\nDefault value is <code>@topparentid</code>.</p>\n"
	},
	{
		"name": "Folding.options.enableExpand",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query to load all\nconversations of a given thread.\nConcretely, the <a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\">ResultFolding</a> component uses this for its <strong>Show More</strong> link.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.expandexpression\">Folding.options.expandExpression</a> and <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.maximumexpandedresults\">Folding.options.maximumExpandedResults</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Folding.options.expandExpression",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a> is <code>true</code>, specifies a custom constant expression to send when querying\nthe expanded results.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "Folding.options.field",
		"comment": "<p>Specifies the name of the field on which to do the folding.\nSpecifying a value for this options is required for this component to work.</p>\n"
	},
	{
		"name": "Folding.options.getMoreResults",
		"comment": "<p>Specifies the function that manages the folding of all results.\nDefault value (<code>Coveo.Folding.defaultGetMoreResults</code>) is:</p>\n<pre><code class=\"lang-javascript\">Coveo.Folding.defaultGetMoreResults = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>) </span>{\n   <span class=\"hljs-comment\">// The results are flat, just do the folding.</span>\n   <span class=\"hljs-keyword\">return</span> Coveo.Folding.foldWithParent(results);\n}\n</code></pre>\n"
	},
	{
		"name": "Folding.options.getResult",
		"comment": "<p>Specifies the function that manages the individual folding of each result.\nDefault value (which is implemented in Coveo.Folding.defaultGetResult) is:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> results = result.childResults || [];\n<span class=\"hljs-comment\">// Add the top result at the top of the list.</span>\nresults.unshift(result);\n<span class=\"hljs-comment\">// Empty childResults just to clean it.</span>\nresult.childResults = [];\n<span class=\"hljs-comment\">// Fold those results.</span>\nresults = Coveo.Folding.foldWithParent(results);\n<span class=\"hljs-comment\">// The first result is the top one.</span>\n<span class=\"hljs-keyword\">var</span> topResult = results.shift();\n<span class=\"hljs-comment\">// All other results are childResults.</span>\ntopResult.childResults = results;\n<span class=\"hljs-keyword\">return</span> topResult;\n</code></pre>\n<p>You can pre-process all the result with this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\nCoveo.$(<span class=\"hljs-string\">'#search'</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n});\n</code></pre>\n"
	},
	{
		"name": "Folding.options.maximumExpandedResults",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a> is <code>true</code>, specifies the maximum number of results to load when\nexpanding.\nDefault value is <code>100</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "Folding.options.parentField",
		"comment": "<p>Specifies the field that determines whether a given result is a top result containing other child results.\nDefault value is <code>@containsattachment</code>.</p>\n"
	},
	{
		"name": "Folding.options.range",
		"comment": "<p>Specifies the number of child results to fold.\n<strong>Example:</strong></p>\n<blockquote>\n<p>For an email thread with a total of 20 messages, using the default value of <code>2</code> means that the component loads\nup to a maximum of 2 child messages under the original message, unless the end user expands the entire\nconversation using the <strong>Show More</strong> link (see <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a>).</p>\n</blockquote>\n<p>Default value is <code>2</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Folding.options.rearrange",
		"comment": "<p>Specifies the top result and its related child results, following the sort criteria format (<code>date ascending</code>,\n<code>@somefield ascending</code>, etc.)\n<strong>Example</strong></p>\n<blockquote>\n<p>If you specify <code>date descending</code>, the Folding component re-arranges an email conversation so that the newest\nemail is always the top result. Doing the opposite (<code>date ascending</code>) would always make the original email the\ntop result, since it is also the oldest.</p>\n</blockquote>\n<p>Default value is <code>none</code>, which means that the component displays the results in the order that they were returned\nby the index.</p>\n"
	},
	{
		"name": "Folding.options.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "Folding.options.options.childField",
		"comment": "<p>Specifies the field that determines whether a given result is a child of another top result.\nDefault value is <code>@topparentid</code>.</p>\n"
	},
	{
		"name": "Folding.options.options.enableExpand",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query to load all\nconversations of a given thread.\nConcretely, the <a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\">ResultFolding</a> component uses this for its <strong>Show More</strong> link.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.expandexpression\">Folding.options.expandExpression</a> and <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.maximumexpandedresults\">Folding.options.maximumExpandedResults</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Folding.options.options.expandExpression",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a> is <code>true</code>, specifies a custom constant expression to send when querying\nthe expanded results.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "Folding.options.options.field",
		"comment": "<p>Specifies the name of the field on which to do the folding.\nSpecifying a value for this options is required for this component to work.</p>\n"
	},
	{
		"name": "Folding.options.options.getMoreResults",
		"comment": "<p>Specifies the function that manages the folding of all results.\nDefault value (<code>Coveo.Folding.defaultGetMoreResults</code>) is:</p>\n<pre><code class=\"lang-javascript\">Coveo.Folding.defaultGetMoreResults = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>) </span>{\n   <span class=\"hljs-comment\">// The results are flat, just do the folding.</span>\n   <span class=\"hljs-keyword\">return</span> Coveo.Folding.foldWithParent(results);\n}\n</code></pre>\n"
	},
	{
		"name": "Folding.options.options.getResult",
		"comment": "<p>Specifies the function that manages the individual folding of each result.\nDefault value (which is implemented in Coveo.Folding.defaultGetResult) is:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> results = result.childResults || [];\n<span class=\"hljs-comment\">// Add the top result at the top of the list.</span>\nresults.unshift(result);\n<span class=\"hljs-comment\">// Empty childResults just to clean it.</span>\nresult.childResults = [];\n<span class=\"hljs-comment\">// Fold those results.</span>\nresults = Coveo.Folding.foldWithParent(results);\n<span class=\"hljs-comment\">// The first result is the top one.</span>\n<span class=\"hljs-keyword\">var</span> topResult = results.shift();\n<span class=\"hljs-comment\">// All other results are childResults.</span>\ntopResult.childResults = results;\n<span class=\"hljs-keyword\">return</span> topResult;\n</code></pre>\n<p>You can pre-process all the result with this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\nCoveo.$(<span class=\"hljs-string\">'#search'</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n});\n</code></pre>\n"
	},
	{
		"name": "Folding.options.options.maximumExpandedResults",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a> is <code>true</code>, specifies the maximum number of results to load when\nexpanding.\nDefault value is <code>100</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "Folding.options.options.parentField",
		"comment": "<p>Specifies the field that determines whether a given result is a top result containing other child results.\nDefault value is <code>@containsattachment</code>.</p>\n"
	},
	{
		"name": "Folding.options.options.range",
		"comment": "<p>Specifies the number of child results to fold.\n<strong>Example:</strong></p>\n<blockquote>\n<p>For an email thread with a total of 20 messages, using the default value of <code>2</code> means that the component loads\nup to a maximum of 2 child messages under the original message, unless the end user expands the entire\nconversation using the <strong>Show More</strong> link (see <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a>).</p>\n</blockquote>\n<p>Default value is <code>2</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Folding.options.options.rearrange",
		"comment": "<p>Specifies the top result and its related child results, following the sort criteria format (<code>date ascending</code>,\n<code>@somefield ascending</code>, etc.)\n<strong>Example</strong></p>\n<blockquote>\n<p>If you specify <code>date descending</code>, the Folding component re-arranges an email conversation so that the newest\nemail is always the top result. Doing the opposite (<code>date ascending</code>) would always make the original email the\ntop result, since it is also the oldest.</p>\n</blockquote>\n<p>Default value is <code>none</code>, which means that the component displays the results in the order that they were returned\nby the index.</p>\n"
	},
	{
		"name": "Folding.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Folding.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Folding.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Folding.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Folding.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Folding.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Folding.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Folding.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Folding.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Folding.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Folding.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Folding.constructor",
		"comment": "<p>Creates a new Folding component.</p>\n"
	},
	{
		"name": "FollowItem",
		"comment": "<p>The FollowItem component renders a widget that the end user can click to follow a particular item (document). A user\nfollowing an item receives email notifications when the item changes.\n<strong>Note:</strong></p>\n<blockquote>\n<p>A <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component must be present in the page for this component to work. It is also necessary to\nmeet certain requirements to be able to use this component (see\n<a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=248\">Deploying Search Alerts on a Coveo JS Search Page</a>).</p>\n</blockquote>\n<p>This component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "FollowItem.options",
		"comment": "<p>The options for the follow item component</p>\n"
	},
	{
		"name": "FollowItem.options.modifiedDateField",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html#modifieddatefield\">ISubscriptionItemRequest.modifiedDateField</a> to use when sending the\n<a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html\">ISubscriptionItemRequest</a>.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "FollowItem.options.watchedFields",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html#watchedfields\">ISubscriptionItemRequest.watchedFields</a> to use when sending the\n<a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionitemrequest.html\">ISubscriptionItemRequest</a>.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "FollowItem.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FollowItem.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "FollowItem.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FollowItem.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "FollowItem.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "FollowItem.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FollowItem.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FollowItem.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "FollowItem.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "FollowItem.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FollowItem.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FollowItem.constructor",
		"comment": "<p>Creates a new FollowItem component.</p>\n"
	},
	{
		"name": "HiddenQuery",
		"comment": "<p>The HiddenQuery component handles a &quot;hidden&quot; query parameter (<code>hq</code>) and its description (<code>hd</code>).\nConcretely, this means that if a HiddenQuery component is present in your page and you load your search interface\nwith <code>hq=foo&amp;hd=bar</code> in the URL hash, the component adds <code>foo</code> as an expression to the query (<code>hq</code> is the hidden\nquery) and renders <code>bar</code> in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> (<code>hd</code> is the hidden query description).</p>\n"
	},
	{
		"name": "HiddenQuery.options",
		"comment": "<p>Possible options for the <code>HiddenQuery</code> component</p>\n"
	},
	{
		"name": "HiddenQuery.options.maximumDescriptionLength",
		"comment": "<p>Specifies the maximum number of characters from the hidden query description (<code>hd</code>) to display in the\n<a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>.\nBeyond this length, the HiddenQuery component slices the rest of the description and replaces it by <code>...</code>.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "HiddenQuery.options.title",
		"comment": "<p>Specifies the title that should appear in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a> when the HiddenQuery populates it.\nDefault value is the localized string for <code>&quot;Additional filters:&quot;</code></p>\n"
	},
	{
		"name": "HiddenQuery.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "HiddenQuery.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "HiddenQuery.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HiddenQuery.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "HiddenQuery.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "HiddenQuery.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "HiddenQuery.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HiddenQuery.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "HiddenQuery.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "HiddenQuery.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "HiddenQuery.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "HiddenQuery.constructor",
		"comment": "<p>Creates a new HiddenQuery component, which binds multiple events (<a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#buildingquery\">QueryEvents.buildingQuery</a>,\n<a href=\"https://coveo.github.io/search-ui/classes/breadcrumbevents.html#populatebreadcrumb\">BreadcrumbEvents.populateBreadcrumb</a> and <a href=\"https://coveo.github.io/search-ui/classes/breadcrumbevents.html#clearbreadcrumb\">BreadcrumbEvents.clearBreadcrumb</a>).</p>\n"
	},
	{
		"name": "HierarchicalFacet",
		"comment": "<p>The HierarchicalFacet component inherits all of its options and behavior from the normal <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component, but\nis meant to be used for hierarchical values.\nThe HierarchicalFacet component could be used to display files in a file system, or categories for documents in a\nhierarchy.</p>\n<p>This facet requires a group by field with a special format in order to work correctly.</p>\n<p><strong>Example:</strong></p>\n<p>If you have the following files indexed on a file system:</p>\n<pre><code>c:<span class=\"hljs-string\">\\</span>\n   folder1<span class=\"hljs-string\">\\</span>\n       text1.txt\n   folder2<span class=\"hljs-string\">\\</span>\n     folder3<span class=\"hljs-string\">\\</span>\n       text2.txt\n</code></pre><p>The document <code>text1.txt</code> would need to have a field with the following format:\n<code>@field : c; c|folder1;</code></p>\n<p>The document <code>text2.txt</code> would have a field with the following format:\n<code>@field: c; c|folder2; c|folder2|folder3;</code></p>\n<p>The | character allows the facet to build its hierarchy (<code>folder3</code> inside <code>folder2</code> inside <code>c</code>).</p>\n<p>Since both documents contain the <code>c</code> value, selecting that value in the facet would return both documents.</p>\n<p>Selecting the <code>folder3</code> value in the facet would only return the <code>text2.txt</code> document.</p>\n"
	},
	{
		"name": "HierarchicalFacet.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "HierarchicalFacet.options.delimitingCharacter",
		"comment": "<p>The character that allows to specify the hierarchical dependency.\n<strong>Example:</strong></p>\n<p>If your field has the following values:</p>\n<p><code>@field: c; c&gt;folder2; c&gt;folder2&gt;folder3;</code></p>\n<p>Then your delimiting character is <code>&gt;</code>.</p>\n<p>Default value is <code>|</code>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.options.levelEnd",
		"comment": "<p>Specifies at which level (0-based index) of the hierarchy the HierarchicalFacet should stop displaying its\nvalues.\nDefault value is <code>undefined</code>, which means the HierarchicalFacet component renders all hierarchical levels.\nMinimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.options.levelStart",
		"comment": "<p>Specifies at which level (0-based index) of the hierarchy the HierarchicalFacet should start displaying its\nvalues.\n<strong>Example:</strong></p>\n<p>If you have the following files indexed on a file system:</p>\n<pre><code>c:<span class=\"hljs-string\">\\</span>\n   folder1<span class=\"hljs-string\">\\</span>\n       text1.txt\n   folder2<span class=\"hljs-string\">\\</span>\n     folder3<span class=\"hljs-string\">\\</span>\n       text2.txt\n</code></pre><p>Then, setting levelStart to <code>1</code> displays <code>folder1</code> and <code>folder2</code> in the HierarchicalFacet, but omits <code>c:</code>.</p>\n<p>Default (and minimum) value is <code>0</code>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.options.marginByLevel",
		"comment": "<p>Specifies the margin (in pixels) to display between each hierarchical level when expanding.\nDefault value is <code>10</code>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "HierarchicalFacet.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HierarchicalFacet.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.facetSearch",
		"comment": "<p>Renders and handles the Facet <strong>Search</strong> part of the component.</p>\n"
	},
	{
		"name": "HierarchicalFacet.facetSettings",
		"comment": "<p>Renders and handles the Facet <strong>Settings</strong> part of the component</p>\n"
	},
	{
		"name": "HierarchicalFacet.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "HierarchicalFacet.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "HierarchicalFacet.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "HierarchicalFacet.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "HierarchicalFacet.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "HierarchicalFacet.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "HierarchicalFacet.constructor",
		"comment": "<p>Creates a new HierarchicalFacet.</p>\n"
	},
	{
		"name": "Icon",
		"comment": "<p>The Icon component outputs the corresponding icon for a given file type. The component searches for a suitable icon\nfrom those available in the Coveo JavaScript Search Framework. If the component finds no suitable icon, it instead\noutputs a generic icon.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "Icon.options",
		"comment": "<p>The options for the Icon</p>\n"
	},
	{
		"name": "Icon.options.labelValue",
		"comment": "<p>Specifies what text to display as the icon caption/label.\nDefault value is <code>undefined</code>, which means that the Coveo JavaScript Search Framework determines what text the icon\nneeds to display depending on the result file type.</p>\n"
	},
	{
		"name": "Icon.options.small",
		"comment": "<p>Specifies whether the Icon component should output the smaller version of the icon instead of the regular one.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "Icon.options.value",
		"comment": "<p>Specifies the value that the Icon component should output as its CSS class instead of the auto-selected value.\nDefault value is <code>undefined</code>, which means that the Coveo JavaScript Search Framework outputs a suitable icon\ndepending on the result file type.</p>\n"
	},
	{
		"name": "Icon.options.withLabel",
		"comment": "<p>Specifies whether the Icon component should force the output icon to display its caption/label.\n<strong>Note:</strong></p>\n<blockquote>\n<p>Due to limited screen real estate, setting this option to <code>true</code> has no effect on icons used inside Coveo for\nSalesforce Insight Panels.</p>\n</blockquote>\n<p>Default value is <code>undefined</code>, which means that the Coveo JavaScript Search Framework determines whether the icon\nneeds to display a caption/label depending on the result file type.</p>\n"
	},
	{
		"name": "Icon.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Icon.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Icon.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Icon.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Icon.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Icon.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Icon.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Icon.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Icon.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Icon.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Icon.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Icon.constructor",
		"comment": "<p>Creates a new Icon component.</p>\n"
	},
	{
		"name": "ImageResultList",
		"comment": "<p>The ImageResultList component extends the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component to display image results.\nThis component inherits from the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component. Thus, any option available for a ResultList component\nis also available for an ImageResultList component.</p>\n"
	},
	{
		"name": "ImageResultList.options",
		"comment": "<p>The options for the component\nThis component inherits the options of the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component.</p>\n"
	},
	{
		"name": "ImageResultList.options.columnWidth",
		"comment": "<p>Specifies the width of a column in a column layout.\nDefault value is <code>225</code>. Minimum value is <code>16</code>.</p>\n"
	},
	{
		"name": "ImageResultList.options.heightThreshold",
		"comment": "<p>Specifies the maximum height of a row in a row layout.\nDefault value is <code>250</code>. Minimum value is <code>16</code>.</p>\n"
	},
	{
		"name": "ImageResultList.options.layoutType",
		"comment": "<p>Specifies the type of layout to display image results with.\nAvailable values are:</p>\n<ul>\n<li><code>row</code>: Resizes images to make them fit the width of the container and have the same height for each row.</li>\n<li><code>column</code>: Displays the images in fixed-size columns.\nDefault value is <code>row</code>.</li>\n</ul>\n"
	},
	{
		"name": "ImageResultList.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ImageResultList.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ImageResultList.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ImageResultList.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ImageResultList.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ImageResultList.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ImageResultList.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ImageResultList.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ImageResultList.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ImageResultList.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ImageResultList.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ImageResultList.constructor",
		"comment": "<p>Creates a new ImageResultList component.</p>\n"
	},
	{
		"name": "Logo",
		"comment": "<p>The Logo component adds a clickable Coveo logo in the search interface.</p>\n"
	},
	{
		"name": "Logo.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Logo.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Logo.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Logo.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Logo.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Logo.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Logo.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Logo.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Logo.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Logo.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Logo.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Logo.constructor",
		"comment": "<p>Creates a new Logo component.</p>\n"
	},
	{
		"name": "Matrix",
		"comment": "<p>The Matrix component uses the values of two fields (row and column) to display the results of the specified computed\nfield in a table.\nThe user specifies the values to use for the columns. An <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> operation performed at the same time\nas the main query retrieves the values to use for the rows.</p>\n<p>In a way that is similar to the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component, selecting a Matrix cell allows the end user to drill down\ninside the results by restricting the row field and the column field to match the values of the selected cell.</p>\n"
	},
	{
		"name": "Matrix.options",
		"comment": "<p>The possible options for the component</p>\n"
	},
	{
		"name": "Matrix.options.cellFontSize",
		"comment": "<p>Specifies the font-size to use for displaying text inside the cells.\nThis option is mainly useful to prevent a Matrix containing many columns from cropping some of its values.</p>\n<p>However, instead of using this option to solve this kind of issue, you could also remove some of the less\nimportant columns from your Matrix or modify the CSS of your page to allow the Matrix to occupy a larger space.</p>\n<p>Default value is <code>&#39;&#39;</code>.</p>\n"
	},
	{
		"name": "Matrix.options.columnField",
		"comment": "<p>Specifies the field to use for the columns.\nSpecifying a value for this options is required for this component to work.</p>\n"
	},
	{
		"name": "Matrix.options.columnFieldValues",
		"comment": "<p>Specifies the field values to use for each column.\nSee also <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.columnlabels\">Matrix.options.columnLabels</a>.</p>\n<p>Default valus is <code>[]</code>, which means that the Matrix will not generate any column (except the <strong>Total</strong> column, if\n<a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablerowtotals\">Matrix.options.enableRowTotals</a> is <code>true</code>).</p>\n"
	},
	{
		"name": "Matrix.options.columnHeader",
		"comment": "<p>Specifies the label for the first column on the left as a description of the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.columnfield\">Matrix.options.columnField</a>.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "Matrix.options.columnLabels",
		"comment": "<p>Specifies the label values to use for each column.\nDefault value is <code>[]</code>. The array set for this options should match the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.columnfieldvalues\">Matrix.options.columnFieldValues</a>.</p>\n"
	},
	{
		"name": "Matrix.options.computedField",
		"comment": "<p>Specifies the field whose computed values you want to display in the cells.\nSpecifying a value for this options is required for this component to work.</p>\n"
	},
	{
		"name": "Matrix.options.computedFieldFormat",
		"comment": "<p>Specifies how to format the values resulting from a <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.computedfieldoperation\">Matrix.options.computedFieldOperation</a>.\nThe Globalize library defines all available formats (see\n<a href=\"https://github.com/klaaspieter/jquery-global#globalizeformat-value-format-culture-\">Globalize</a>).</p>\n<p>The most commonly used formats are:</p>\n<ul>\n<li><code>c0</code> - Formats the value as a currency.</li>\n<li><code>n0</code> - Formats the value as an integer.</li>\n<li><code>n2</code> - Formats the value as a floating point with 2 decimal digits.</li>\n</ul>\n<p>Default value is <code>c0</code>.</p>\n"
	},
	{
		"name": "Matrix.options.computedFieldOperation",
		"comment": "<p>Specifies the type of aggregate operation to perform on the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.computedfield\">Matrix.options.computedField</a>.\nThe possible values are:</p>\n<ul>\n<li><code>sum</code> - Computes the sum of the computed field values.</li>\n<li><code>average</code> - Computes the average of the computed field values.</li>\n<li><code>minimum</code> - Finds the minimum value of the computed field values.</li>\n<li><code>maximum</code> - Finds the maximum value of the computed field values.</li>\n</ul>\n<p>Default value is <code>sum</code>.</p>\n"
	},
	{
		"name": "Matrix.options.enableColumnTotals",
		"comment": "<p>Specifies whether to add a <strong>Total</strong> row containing the total of each column.\nDefault value is <code>true</code></p>\n"
	},
	{
		"name": "Matrix.options.enableHoverPreview",
		"comment": "<p>Specifies whether to show a preview popup of cell results when hovering over a cell.\nSee also <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewsortcriteria\">Matrix.options.previewSortCriteria</a>, <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewmaxwidth\">Matrix.options.previewMaxWidth</a>,\n<a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewminwidth\">Matrix.options.previewMinWidth</a>, <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewdelay\">Matrix.options.previewDelay</a> and\n<a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewtemplate\">Matrix.options.previewTemplate</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Matrix.options.enableRowTotals",
		"comment": "<p>Specifies whether to display a <strong>Total</strong> column containing the sum of each row.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "Matrix.options.maximumNumberOfRows",
		"comment": "<p>Specifies the maximum number of rows to display in the Matrix.\nDefault value is <code>10</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Matrix.options.maximumNumberOfValuesInGroupBy",
		"comment": "<p>Specifies the maximum number of results to include in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> for the columns.\nThis value should always be greater than the <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.maximumnumberofrows\">Matrix.options.maximumNumberOfRows</a>. If it is too small, some\nof the results will not be displayed in the Matrix.</p>\n<p>Default value is <code>100</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Matrix.options.previewDelay",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the delay (in milliseconds) before sending the\nquery to get the preview results.\nDefault value is <code>500</code>.</p>\n"
	},
	{
		"name": "Matrix.options.previewMaxWidth",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the maximum width (in pixels) of the preview\npopup.\nDefault value is <code>500px</code>.</p>\n"
	},
	{
		"name": "Matrix.options.previewMinWidth",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the minimum width (in pixels) of the preview\npopup.\nDefault value is <code>0</code>.</p>\n"
	},
	{
		"name": "Matrix.options.previewSortCriteria",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the criteria to use for sorting the results of\nthe hover preview.\nThe available sort criteria values are the same as those of the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a>.</p>\n<p>The possible values are:</p>\n<ul>\n<li><code>relevancy</code>: Uses all configured ranking weights and any specified ranking expressions to sort the results.</li>\n<li><code>dateascending</code> / <code>datedescending</code>: Sorts the results using the <code>@date</code> field value, which is typically the\nlast modification date of an item in the index.</li>\n<li><code>qre</code>: Sorts the results using only the weights applied by ranking expressions. Using <code>qre</code> is much like using\n<code>relevancy</code>, except that <code>qre</code> does not compute automatic weights, such as weights based on keyword proximity.</li>\n<li><code>nosort</code>: Does not sort the results. Using <code>nosort</code> returns the items in an essentially random order.</li>\n<li><code>fieldascending</code> / <code>fielddescending</code>: Sorts the results using the value of a custom field.</li>\n<li><code>fieldascending</code> / <code>fielddescending</code>: Sorts the results using the value of a custom field.</li>\n</ul>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewsortfield\">Matrix.options.previewSortField</a>.</p>\n<p>Default value is <code>FieldDescending</code>.</p>\n"
	},
	{
		"name": "Matrix.options.previewSortField",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.previewsortcriteria\">Matrix.options.previewSortCriteria</a> is <code>fieldascending</code> or <code>fielddescending</code>, specifies the field to\nuse for sorting the results of the hover preview.\nDefault value is the value of <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.computedfield\">Matrix.options.computedField</a>.</p>\n"
	},
	{
		"name": "Matrix.options.previewTemplate",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/matrix.html#options.enablehoverpreview\">Matrix.options.enableHoverPreview</a> is <code>true</code>, specifies the template ID or CSS selector of the template\nto use to render the results of the hover preview.\nYou must use either <code>data-template-id</code> or <code>data-template-selector</code> in the markup to specify a value for this\noption.</p>\n<p><strong>Examples:</strong></p>\n<p>Specifying what template to use by referring to its template ID:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoMatrix'</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">'TemplateId'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Specifying what template to use by referring to its CSS selector:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoMatrix'</span> <span class=\"hljs-attr\">data-template-selector</span>=<span class=\"hljs-string\">'.templateSelector'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "Matrix.options.rowField",
		"comment": "<p>Specifies the field to use for the rows.\nSpecifying a value for this options is required for this component to work.</p>\n"
	},
	{
		"name": "Matrix.options.sortCriteria",
		"comment": "<p>Specifies the criteria to use for sorting the rows.\nSee <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html#sortcriteria\">IGroupByRequest.sortCriteria</a> for the list of possible values.</p>\n<p>Default value is <code>ComputedFieldDescending</code>.</p>\n"
	},
	{
		"name": "Matrix.options.title",
		"comment": "<p>Specifies the text to display at the top of the Matrix.</p>\n"
	},
	{
		"name": "Matrix.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Matrix.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Matrix.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Matrix.data",
		"comment": "<p>Holds the data for the Matrix.</p>\n"
	},
	{
		"name": "Matrix.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Matrix.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Matrix.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Matrix.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Matrix.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Matrix.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Matrix.selectedColumnValue",
		"comment": "<p>The currently selected column value, or <code>undefined</code> if nothing is selected.</p>\n"
	},
	{
		"name": "Matrix.selectedRowValue",
		"comment": "<p>The currently selected row value, or <code>undefined</code> if nothing is selected.</p>\n"
	},
	{
		"name": "Matrix.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Matrix.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Matrix.constructor",
		"comment": "<p>Creates a new Matrix. Also verifies whether options are valid and coherent. Binds query events.</p>\n"
	},
	{
		"name": "Omnibox",
		"comment": "<p>The Omnibox component is very similar to the simpler <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> component. It supports all of the same options\nand behaviors.\nThe Omnibox component takes care of adding type-ahead capability to the search input. Custom components can extend\nand customize the type-ahead and the suggestions it provides.</p>\n<p>The type-ahead is configurable by activating addons, which the Coveo JavaScript Search Framework provides OOTB\n(facets, analytics suggestions, Coveo Machine Learning suggestions and advanced Coveo syntax suggestions).</p>\n<p>It is also possible for external code to provide type-ahead suggestions.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a> component, which can automatically instantiate an Omnibox component along with an\noptional <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a> component.</p>\n"
	},
	{
		"name": "Omnibox.options",
		"comment": "<p>The options for the omnibox</p>\n"
	},
	{
		"name": "Omnibox.options.enableFieldAddon",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\">Querybox.options.enableQuerySyntax</a> is <code>true</code>, specifies whether to enable the <code>field</code> addon.\nThe <code>field</code> addon allows the search box to highlight and complete field syntax.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>Suppose you want to filter on a certain file type. You start typing <code>@sysf</code> in the input. The Omnibox provides\nyou with several matching fields. You select the <code>@sysfiletype</code> suggestion and type <code>=</code>. If this option is set\nto <code>true</code>, then the Omnibox provides you with suggestions for available matching file types.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Omnibox.options.enableQueryExtensionAddon",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\">Querybox.options.enableQuerySyntax</a> is <code>true</code>, specifies whether to enable the <code>query extension</code> addon.\nThe <code>query extension</code> addon allows the Omnibox to complete the syntax for query extensions.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Omnibox.options.enableRevealQuerySuggestAddon",
		"comment": "<p>Specifies whether to enable the Coveo Machine Learning (Coveo ML) query suggestions.\nThis implies that you have a proper Coveo ML integration configured (see\n<a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=177\">Coveo Machine Learning</a>).</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Omnibox.options.enableSearchAsYouType",
		"comment": "<p>Specifies whether to automatically trigger a new query whenever the end user types new text inside the Omnibox.\nSet this option as well a <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.inline\">Omnibox.options.inline</a> and\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablerevealquerysuggestaddon\">Omnibox.options.enableRevealQuerySuggestAddon</a> to <code>true</code> for a cool effect!</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Omnibox.options.inline",
		"comment": "<p>Specifies whether suggestions appearing in the Omnibox should push the result down instead of appearing over the\nresults.\nSet this option as well as <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablesearchasyoutype\">Omnibox.options.enableSearchAsYouType</a> and\n<a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablerevealquerysuggestaddon\">Omnibox.options.enableRevealQuerySuggestAddon</a> to <code>true</code> for a cool effect!</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Omnibox.options.omniboxTimeout",
		"comment": "<p>Specifies a timeout (in milliseconds) before rejecting suggestions in the Omnibox.\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Omnibox.options.placeholder",
		"comment": "<p>Specifies a placeholder for the input.</p>\n"
	},
	{
		"name": "Omnibox.options.searchAsYouTypeDelay",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.enablesearchasyoutype\">Omnibox.options.enableSearchAsYouType</a> is <code>true</code>, specifies the delay (in milliseconds) before\ntriggering a new query when the user types new text inside the Omnibox.\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Omnibox.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Omnibox.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Omnibox.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Omnibox.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Omnibox.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Omnibox.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Omnibox.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Omnibox.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Omnibox.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Omnibox.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Omnibox.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Omnibox.constructor",
		"comment": "<p>Creates a new Omnibox component. Also enables necessary addons and binds events on various query events.</p>\n"
	},
	{
		"name": "OmniboxResultList",
		"comment": "<p>The OmniboxResultList component behaves exactly like the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component (which it extends), except that\nit renders itself inside the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.\nThis component can provide a kind of search-as-you-type functionality, allowing you to easily render complex Result\nTemplates inside the Omnibox component.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoOmniboxResultList\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"result-template\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/x-underscore\"</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "OmniboxResultList.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "OmniboxResultList.options.headerTitle",
		"comment": "<p>Specifies the title to use for this section.\nDefault value is the localized string for <code>Suggested Results</code>.</p>\n"
	},
	{
		"name": "OmniboxResultList.options.omniboxZIndex",
		"comment": "<p>Specifies the z-index at which to render the ResultList inside the Omnibox.\nDefault value is <code>51</code>. Minimum value is <code>16</code> (<a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> components are at <code>50</code> by default)</p>\n"
	},
	{
		"name": "OmniboxResultList.options.onSelect",
		"comment": "<p>Specifies the function to execute when the user selects a result suggestion.\nThe default function opens the corresponding result URI in the browser.</p>\n<p>It is only possible to specify a value for this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface. You\ncannot set it directly as an HTML attribute.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">OmniboxResultList</span> : {\n       <span class=\"hljs-comment\">//Close the omnibox, change the selected HTMLElement background color and alert the result title.</span>\n       onSelect : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, resultElement, omniBoxObject</span>) </span>{\n           omniBoxObject.close();\n           resultElement.css(<span class=\"hljs-string\">'background-color'</span>, <span class=\"hljs-string\">'red'</span>);\n           alert(result.title);\n       }\n    }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\n$(<span class=\"hljs-string\">\"#search\"</span>).coveo(<span class=\"hljs-string\">\"init\"</span>, {\n   <span class=\"hljs-attr\">OmniboxResultList</span> : {\n       <span class=\"hljs-comment\">//Close the Omnibox, change the selected HTMLElement background color and alert the result title.</span>\n       onSelect : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result, resultElement, omniBoxObject</span>) </span>{\n           omniBoxObject.close();\n           resultElement.css(<span class=\"hljs-string\">'background-color'</span>, <span class=\"hljs-string\">'red'</span>);\n           alert(result.title);\n       }\n    }\n})\n</code></pre>\n"
	},
	{
		"name": "OmniboxResultList.options.queryOverride",
		"comment": "<p>Specifies the override to use on the query sent to the OmniboxResultList component.\nDefault value is <code>undefined</code>, which means no default override is specified.</p>\n"
	},
	{
		"name": "OmniboxResultList.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "OmniboxResultList.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "OmniboxResultList.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "OmniboxResultList.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "OmniboxResultList.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "OmniboxResultList.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "OmniboxResultList.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "OmniboxResultList.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "OmniboxResultList.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "OmniboxResultList.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "OmniboxResultList.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "OmniboxResultList.constructor",
		"comment": "<p>Creates a new OmniboxResultList component.</p>\n"
	},
	{
		"name": "Pager",
		"comment": "<p>The Pager component attaches itself to a <code>div</code> element and renders widgets that allow the end user to navigate\nthrough the different result pages.\nThis component takes care of triggering a query with the correct result range whenever the end user selects a page or\nuses the navigation buttons (<strong>Previous</strong> and <strong>Next</strong>).</p>\n"
	},
	{
		"name": "Pager.options",
		"comment": "<p>The options for the Pager</p>\n"
	},
	{
		"name": "Pager.options.enableNavigationButton",
		"comment": "<p>Specifies whether the <strong>Previous</strong> and <strong>Next</strong> buttons should appear at each end of the pager when appropriate.\nThe default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Pager.options.maxNumberOfPages",
		"comment": "<p>Specifies the maximum number of pages to display if enough results are available.\nThis property is typically set when the default number of accessible results from the index has been changed from\nits default value of <code>1000</code> (10 results per page X 100 maxNumberOfPage).</p>\n<p>Default value is <code>100</code>.</p>\n"
	},
	{
		"name": "Pager.options.numberOfPages",
		"comment": "<p>Specifies how many page links to display in the pager.\nDefault value is <code>5</code> on a desktop computers and <code>3</code> on a mobile device. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "Pager.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Pager.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Pager.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Pager.currentPage",
		"comment": "<p>The current page (1-based index).</p>\n"
	},
	{
		"name": "Pager.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Pager.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Pager.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Pager.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Pager.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Pager.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Pager.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Pager.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Pager.constructor",
		"comment": "<p>Creates a new Pager. Binds multiple query events (<a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#newquery\">QueryEvents.newQuery</a>, <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#buildingquery\">QueryEvents.buildingQuery</a>,\n<a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a>, <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a> and <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#noresults\">QueryEvents.noResults</a>. Renders itself\non every query success.</p>\n"
	},
	{
		"name": "PipelineContext",
		"comment": "<p>A PipelineContext is used to add contextual information about the environment inside which the query is executed.\nIt allows to pass arbitrary key values pairs ( think <code>JSON</code> ), which can then be leveraged by the <a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=108\">Query Pipeline</a>,\nor by Reveal.</p>\n<p>This can be any arbitrary information that you can use to contextualize the query and help Coveo improve relevance by returning results tailored to a specific context.</p>\n<p>This component is meant to be configured using a script tag, with a JSON content.</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoPipelineContext'</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/context'</span>&gt;</span><span class=\"actionscript\">\n  {\n     <span class=\"hljs-string\">\"foo\"</span> : <span class=\"hljs-string\">\"bar\"</span>\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>You can also simply use JavaScript code to pass context values, using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html#addcontextvalue\">QueryBuilder.addContextValue</a> method.</p>\n<p>This mean you do not necessarily need to use this component to pass context.</p>\n<pre><code>Coveo.$$(root).on(<span class=\"hljs-string\">'buildingQuery'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">args</span>) </span>{\n    args.queryBuilder.addContextValue(<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'bar'</span>);\n})\n</code></pre><p>Using this component as opposed to JavaScript code means you will be able to leverage the interface editor.</p>\n<p>Regardless of if you use this component or JavaScript to add context, both will add the needed data in the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#context\">Query.Context</a> parameter.</p>\n"
	},
	{
		"name": "PipelineContext.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "PipelineContext.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "PipelineContext.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PipelineContext.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "PipelineContext.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "PipelineContext.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "PipelineContext.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PipelineContext.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "PipelineContext.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "PipelineContext.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "PipelineContext.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "PipelineContext.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n"
	},
	{
		"name": "PreferencesPanel",
		"comment": "<p>The PreferencesPanel component renders a <strong>Preferences</strong> item inside the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> component which the end\nuser can click to access a panel from which it is possible to specify certain customization options for the search\ninterface. These customization options are then saved in the browser local storage.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html\">ResultsFiltersPreferences</a> and <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\">ResultsPreferences</a> components.</p>\n"
	},
	{
		"name": "PreferencesPanel.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "PreferencesPanel.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "PreferencesPanel.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PreferencesPanel.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "PreferencesPanel.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "PreferencesPanel.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "PreferencesPanel.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PreferencesPanel.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "PreferencesPanel.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "PreferencesPanel.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "PreferencesPanel.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "PreferencesPanel.constructor",
		"comment": "<p>Creates a new PreferencesPanel.</p>\n"
	},
	{
		"name": "PrintableUri",
		"comment": "<p>The PrintableUri component displays the URI, or path, to access a result.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "PrintableUri.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "PrintableUri.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "PrintableUri.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PrintableUri.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "PrintableUri.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "PrintableUri.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "PrintableUri.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "PrintableUri.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "PrintableUri.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "PrintableUri.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "PrintableUri.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "PrintableUri.constructor",
		"comment": "<p>Creates a new PrintableUri.</p>\n"
	},
	{
		"name": "QueryDuration",
		"comment": "<p>The QueryDuration component displays the duration of the last query execution.\nWhen a <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> event is triggered, the QueryDuration component becomes visible. It also\ndisplays the global duration, the index duration, the proxy duration, and the client duration in a single tooltip.</p>\n<p>If a <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a> event is triggered, the QueryDuration component becomes hidden.</p>\n"
	},
	{
		"name": "QueryDuration.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "QueryDuration.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "QueryDuration.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QueryDuration.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "QueryDuration.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "QueryDuration.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "QueryDuration.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QueryDuration.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "QueryDuration.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "QueryDuration.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "QueryDuration.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QueryDuration.constructor",
		"comment": "<p>Creates a new QueryDuration component.\nBinds handlers on the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> and <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a> events.</p>\n"
	},
	{
		"name": "QuerySummary",
		"comment": "<p>The QuerySummary component can display information about the currently displayed range of results (e.g., &quot;Results\n1-10 of 123&quot;).\nIf the query matches no document, the QuerySummary component can instead display tips to help the end user formulate\na better query.</p>\n"
	},
	{
		"name": "QuerySummary.options",
		"comment": "<p>Options for the component</p>\n"
	},
	{
		"name": "QuerySummary.options.enableSearchTips",
		"comment": "<p>Specifies whether to display the search tips to the end user when there are no search results.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "QuerySummary.options.onlyDisplaySearchTips",
		"comment": "<p>Specifies whether to hide the information about the currently displayed range of results and only display the\nsearch tips instead.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "QuerySummary.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "QuerySummary.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "QuerySummary.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuerySummary.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "QuerySummary.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "QuerySummary.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "QuerySummary.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuerySummary.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "QuerySummary.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "QuerySummary.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "QuerySummary.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QuerySummary.constructor",
		"comment": "<p>Creates a new QuerySummary component.</p>\n"
	},
	{
		"name": "Querybox",
		"comment": "<p>The Querybox component renders an input that the end user can interact with to enter and submit a query.\nWhen the user submits a query by hitting the <strong>Enter</strong> key, the Querybox component triggers a query and logs the\ncorresponding usage analytics data.</p>\n<p>For technical reasons, it is necessary to instantiate this component on a <code>div</code> element rather than directly on an\n<code>input</code> element (i.e., <code>&lt;div class=&#39;CoveoQuerybox&#39;&gt;&lt;/div&gt;</code> will work, but <code>&lt;input class=&#39;CoveoQuerybox&#39;&gt;&lt;/input&gt;</code>\nwill not).</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a> component, which can automatically instantiate a Querybox component along with an\noptional <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a> component.</p>\n"
	},
	{
		"name": "Querybox.options",
		"comment": "<p>The options for the Querybox.</p>\n"
	},
	{
		"name": "Querybox.options.autoFocus",
		"comment": "<p>Specifies whether the Querybox should get auto focus and selection upon initialization.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "Querybox.options.enableLowercaseOperators",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablequerysyntax\">Querybox.options.enableQuerySyntax</a> is <code>true</code>, specifies whether to treat the <code>AND</code>, <code>NOT</code>, <code>OR</code> and\n<code>NEAR</code> keywords in the Querybox as query operators in the query even when the end user types them in lowercase.\nThis option applies to all query operators (see\n<a href=\"http://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nDefault value is <code>false</code>.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>If this option and the enableQuerySyntax option are both <code>true</code>, then the Coveo Platform interprets the <code>near</code>\nkeyword in a query such as <code>service center near me</code> as a query operator (not as a query term).</p>\n<p>Otherwise, if the enableQuerySyntax option is <code>true</code> and this option is <code>false</code>, the end user has to type the\n<code>NEAR</code> keyword in uppercase in order for the Coveo Platform to interpret it as a query operator.</p>\n</blockquote>\n"
	},
	{
		"name": "Querybox.options.enablePartialMatch",
		"comment": "<p>Specifies whether to automatically convert a basic expression containing at least a certain number of keywords\n(see <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchkeywords\">Querybox.options.partialMatchKeywords</a>) to a partial match expression, so that documents containing\nat least a certain subset of those keywords (see <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold\">Querybox.options.partialMatchThreshold</a>) will match the\nquery.\nDefault value is <code>false</code>.</p>\n<p><strong>Example:</strong></p>\n<p>With the following markup configuration, if a basic expression contains at least 4 keywords, then documents\ncontaining at least 75% of those keywords (round up) will match the query.</p>\n<p>For instance, if the basic expression is <code>Coveo custom component configuration help</code>, then documents containing\nall 5 of those keywords, or 4 of them (75% of 5 rounded up) will match the query.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoQuerybox'</span> <span class=\"hljs-attr\">data-enable-partial-match</span>=<span class=\"hljs-string\">'true'</span> <span class=\"hljs-attr\">data-partial-match-keywords</span>=<span class=\"hljs-string\">'4'</span> <span class=\"hljs-attr\">data-partial-match-threshold</span>=<span class=\"hljs-string\">'75%'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "Querybox.options.enableQuerySyntax",
		"comment": "<p>Specifies whether the Coveo Platform should try to interpret special query syntax such as field references in the\nquery that the user enters in the Querybox (see\n<a href=\"http://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nSetting this option to <code>true</code> also causes the query syntax in the Querybox to highlight.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Querybox.options.enableQuestionMarks",
		"comment": "<p>Specifies whether the Coveo Platform should expand keywords containing question mark characters (<code>?</code>) to the\npossible matching keywords in order to broaden the query (see\n<a href=\"http://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Querybox.options.enableSearchAsYouType",
		"comment": "<p>Specifies whether to enable the search-as-you-type feature.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Querybox.options.enableWildcards",
		"comment": "<p>Specifies whether the Coveo Platform should expand keywords containing wildcard characters (<code>*</code>) to the possible\nmatching keywords in order to broaden the query (see\n<a href=\"http://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Syntax Reference</a>).\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Querybox.options.partialMatchKeywords",
		"comment": "<p>When <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablepartialmatch\">Querybox.options.enablePartialMatch</a> is <code>true</code>, specifies the minimum number of keywords that need to\nbe present in the basic expression to convert this expression to a partial match expression.\nSee also <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchthreshold\">Querybox.options.partialMatchThreshold</a>.</p>\n<p>Default value is <code>5</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Only the basic expression of the query (see <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#q\">q</a>) can be converted to a partial match expression.</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>If the partialMatchKeywords option is <code>7</code>, the basic expression will have to contain at least 7 keywords\nto be converted to a partial match expression.</p>\n</blockquote>\n"
	},
	{
		"name": "Querybox.options.partialMatchThreshold",
		"comment": "<p>When <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablepartialmatch\">Querybox.options.enablePartialMatch</a> is <code>true</code>, specifies an absolute or relative (percentage) value\nindicating the minimum number of partial match expression keywords a document must contain in order to match the\nquery.\nSee also <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.partialmatchkeywords\">Querybox.options.partialMatchKeywords</a>.</p>\n<p>Default value is <code>50%</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>The relative threshold is always rounded up to the nearest integer.</p>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<blockquote>\n<p>If the partialMatchThreshold option is <code>50%</code> and the partial match expression contains exactly 9 keywords, then\ndocuments will have to contain at least 5 of those keywords to match the query (50% of 9, rounded up).</p>\n<p>With the same configuration, if the partial match expression contains exactly 12 keywords, then documents will\nhave to contain at least 6 of those keywords to match the query (50% of 12).</p>\n<p>If the partialMatchThreshold option is <code>2</code>, then documents will always have to contain at least 2 of the\npartial match expression keywords to match the query, no matter how many keywords the partial match expression\nactually contains.</p>\n</blockquote>\n"
	},
	{
		"name": "Querybox.options.searchAsYouTypeDelay",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.enablesearchasyoutype\">Querybox.options.enableSearchAsYouType</a> is <code>true</code>, specifies the delay (in milliseconds) between a\nkey press and a query being triggered.\nDefault value is <code>500</code>. Minimum value is <code>0</code></p>\n"
	},
	{
		"name": "Querybox.options.triggerQueryOnClear",
		"comment": "<p>Specifies whether to trigger a query when the Querybox is cleared.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "Querybox.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Querybox.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Querybox.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Querybox.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Querybox.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Querybox.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Querybox.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Querybox.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Querybox.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Querybox.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Querybox.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Querybox.constructor",
		"comment": "<p>Creates a new Querybox. Creates a new <code>Coveo.Magicbox</code> instance and wraps the Magicbox methods (<code>onblur</code>,\n<code>onsubmit</code> etc.). Binds event on <code>buildingQuery</code> and on redirection (for standalone box).</p>\n"
	},
	{
		"name": "Quickview",
		"comment": "<p>This component is meant to exist within a result template.\nIt allows to create a button/link inside the result list that opens a modal box for a given result.\nMost of the time, this component will reference a <a href=\"https://coveo.github.io/search-ui/components/quickviewdocument.html\">QuickviewDocument</a> in its content template.</p>\n<h2 id=\"choosing-what-to-display-for-the-quickview\">Choosing what to display for the Quickview</h2>\n<p>The Quick View uses any HTML structure you put inside its tag and uses that as the content of the dialog box. This content can thus be any element you decide, using your CSS and your structure.</p>\n<h2 id=\"example\">Example</h2>\n<ul>\n<li><p>You can change the appearance of the Quick View link by adding HTML inside the body of the div.</p>\n</li>\n<li><p>You can change the content of the Quick View link by specifying a template ID.</p>\n</li>\n<li><p>You can use the methods of the <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html\">CoreHelpers</a> in the template.</p>\n</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!-- This would change the appearance of the quickview button itself in the result. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoQuickview\"</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">\"TemplateId\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Click here for Quickview<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- This would modify the content of the quickview when it is opened in the modal box --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'TemplateId'</span> &gt;</span><span class=\"javascript\">\n  &lt;div&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>This is the content that will be displayed when you open the Quick View. You can also include any other Coveo components.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n    &lt;table <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"CoveoFieldTable\"</span>&gt;\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@liboardshorttitle\"</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">\"Board\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@licategoryshorttitle\"</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">\"Category\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">\"@sysauthor\"</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">\"Author\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Note that this is all optional: Just including a &lt;div class='CoveoQuickview'&gt;&lt;/div&gt; will do the job most of the time, and will include a default template and default button appearance --&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "Quickview.options.alwaysShow",
		"comment": "<p>Specifies whether the quickview is always shown, even when the index body for a document is empty.<br/>\nIn such cases, the <a href=\"https://coveo.github.io/search-ui/components/quickview.html#options.contenttemplate\">Quickview.options.contentTemplate</a> specifies what appears in the quickview.<br/>\nIf there is no quickview for the document, you <em>MUST</em> specify a contentTemplate otherwise the component will throw an error when opened.</p>\n"
	},
	{
		"name": "Quickview.options.contentTemplate",
		"comment": "<p>Specifies the template to use to present the Quick View content in the modal window.<br/>\ne.g.: <br/>\n    <div class=\"CoveoQuickview\" data-template-id=\"TemplateId\"></div>\n    <div class=\"CoveoQuickview\" data-template-selector=\".templateSelector\"></div></p>\n"
	},
	{
		"name": "Quickview.options.showDate",
		"comment": "<p>Specifies whether to show the document date in the Quick View modal window header.<br/>\nThe default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Quickview.options.size",
		"comment": "<p>Specifies the Quick View modal window size (width and height) relative to the full window.<br/>\nThe default value is 95% on a desktop and 100% on a mobile device.</p>\n"
	},
	{
		"name": "Quickview.options.title",
		"comment": "<p>Specifies the title of your choice that appears at the top of the Quick View modal window.</p>\n"
	},
	{
		"name": "Quickview.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Quickview.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Quickview.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Quickview.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Quickview.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Quickview.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Quickview.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Quickview.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Quickview.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Quickview.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Quickview.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Quickview.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n"
	},
	{
		"name": "QuickviewDocument",
		"comment": "<p>The QuickviewDocument component is meant to exist within Result Templates, more specifically inside a <a href=\"https://coveo.github.io/search-ui/components/quickview.html\">Quickview</a> component.\nThe sole purpose of this component is to include an iframe which will load the correct HTML version of the current document.\nBy default, this component is included in the default template for a <a href=\"https://coveo.github.io/search-ui/components/quickview.html\">Quickview</a> component.</p>\n"
	},
	{
		"name": "QuickviewDocument.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "QuickviewDocument.options.maximumDocumentSize",
		"comment": "<p>Specifies the maximum document size (the preview) that should be returned by the index.\nBy default its value is 0, and the whole preview is returned.</p>\n"
	},
	{
		"name": "QuickviewDocument.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "QuickviewDocument.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "QuickviewDocument.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuickviewDocument.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "QuickviewDocument.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "QuickviewDocument.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "QuickviewDocument.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "QuickviewDocument.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "QuickviewDocument.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "QuickviewDocument.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "QuickviewDocument.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QuickviewDocument.constructor",
		"comment": "<p>Create a new instance of the component</p>\n"
	},
	{
		"name": "Recommendation",
		"comment": "<p>The Recommendation component is a <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> that displays recommendations typically based on user\nhistory.\nThis component usually listens to the main SearchInterface. When the main SearchInterface generates a query, the\nRecommendation component generates another query to get the recommendations at the same time.</p>\n<p>To get history-based recommendations, you will likely want to include the <code>pageview</code> script in your page (see\n<a href=\"https://github.com/coveo/coveo.analytics.js\">coveo.analytics.js</a>). However, including this script is not mandatory.\nFor instance, you could use the Recommendation component without the Coveo Machine Learning service to create a\nsimple &quot;recommended people&quot; interface.</p>\n<p>It is possible to include this component inside another SearchInterface, but it is also possible to instantiate it as\na &quot;standalone&quot; search interface, without even instantiating a main SearchInterface component. In any case, a\nRecommendation component always acts as a full-fledged search interface. Therefore, you can include any component\ninside the Recommendation component (Searchbox, Facet, Sort, etc.), just as you would inside the main SearchInterface\ncomponent.</p>\n"
	},
	{
		"name": "Recommendation.options",
		"comment": "<p>The options for the recommendation component</p>\n"
	},
	{
		"name": "Recommendation.options.dropdownHeaderLabel",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.enableresponsivemode\">Recommendation.options.enableResponsiveMode</a> is <code>true</code> for all Recommendation components, specifies the\nlabel of the dropdown button that allows to display the Recommendation components when in responsive mode.\nIf more than one Recommendation component in the search interface specifies a value for this option, then the\nframework uses the first occurrence of the option.</p>\n<p>Default value is <code>Recommendations</code>.</p>\n"
	},
	{
		"name": "Recommendation.options.enableResponsiveMode",
		"comment": "<p>Specifies whether to enable <em>responsive mode</em> for Recommendation components. Setting this options to <code>false</code> on\nany Recommendation component in a search interface disables responsive mode for all other Recommendation\ncomponents in the search interface.\nResponsive mode displays all Recommendation components under a single dropdown button whenever the width of the\nHTML element which the search interface is bound to reaches or falls behind a certain threshold (see\n<a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.responsivebreakpoint\">Recommendation.options.responsiveBreakpoint</a>).</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.dropdownheaderlabel\">Recommendation.options.dropdownHeaderLabel</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Recommendation.options.hideIfNoResults",
		"comment": "<p>Specifies whether to hide the Recommendations component if no result or recommendation is available.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "Recommendation.options.id",
		"comment": "<p>Specifies the ID of the interface.\nThe usage analytics use the interface ID to know which recommendation interface was selected.\nDefault value is <code>Recommendation</code> for the first one and <code>Recommendation_{number}</code>, where {number} depends on the\nnumber of Recommendation interfaces with default IDs in the page for the others.</p>\n"
	},
	{
		"name": "Recommendation.options.mainSearchInterface",
		"comment": "<p>Specifies the main <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> to listen to.</p>\n"
	},
	{
		"name": "Recommendation.options.optionsToUse",
		"comment": "<p>Specifies which options from the main <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> to use in the triggered query.\nPossible values are:</p>\n<ul>\n<li><code>expression</code></li>\n<li><code>advancedExpression</code></li>\n<li><code>constantExpression</code></li>\n<li><code>disjunctionExpression</code></li>\n</ul>\n<p><strong>Example:</strong></p>\n<p>Adding the expression (<code>q</code>) and the advanced expression (<code>aq</code>) parts of the main query in the triggered query:</p>\n<p><code>data-options-to-use=&quot;expression,advancedExpression&quot;</code></p>\n<p>Default value is <code>expression</code>.</p>\n"
	},
	{
		"name": "Recommendation.options.responsiveBreakpoint",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/recommendation.html#options.enableresponsivemode\">Recommendation.options.enableResponsiveMode</a> is <code>true</code> for all Recommendation components, specifies the\nwidth threshold (in pixels) of the search interface at which Recommendation components go in responsive mode.\nRecommendation components go in responsive mode when the width of the search interface is equal to or lower than\nthis value.</p>\n<p>The <code>search interface</code> corresponds to the HTML element with the class <code>CoveoSearchInterface</code>.</p>\n<p>If more than one Recommendation component in the search interface specifies a value for this option, then the\nframework uses the last occurrence of the option.</p>\n<p>Default value is <code>1000</code>.</p>\n"
	},
	{
		"name": "Recommendation.options.sendActionsHistory",
		"comment": "<p>Specifies whether to send the actions history along with the triggered query.\nSetting this option to <code>false</code> makes it impossible for this component to get Coveo Machine Learning\nrecommendations.</p>\n<p>However, setting this option to <code>false</code> can be useful to display side results in a search page.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Recommendation.options.userContext",
		"comment": "<p>Specifies the user context to send to Coveo usage analytics.\nThe component sends this information with the query alongside the user history to get the recommendations.</p>\n"
	},
	{
		"name": "Recommendation.getComponents",
		"comment": "<p>Gets all the components of a given type.</p>\n"
	},
	{
		"name": "Recommendation.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Recommendation.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Recommendation.responsiveComponents",
		"comment": "<p>Allows to get and set the different breakpoints for mobile and tablet devices.\nThis is useful, among other things, for <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>, <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> and <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> components.</p>\n"
	},
	{
		"name": "Recommendation.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Recommendation.constructor",
		"comment": "<p>Creates a new Recommendation component.</p>\n"
	},
	{
		"name": "ResultAttachments",
		"comment": "<p>The ResultAttachments component renders attachments in a result set, for example when displaying emails. This\ncomponent is usable inside a result template when there is an active <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component in the page.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "ResultAttachments.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultAttachments.options.maximumAttachmentLevel",
		"comment": "<p>Specifies the maximum nesting depth. Beyond this depth, the component stops rendering sub-attachments.\nDefault value is <code>5</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "ResultAttachments.options.resultTemplate",
		"comment": "<p>Specifies the template to use to render each attachment for a top result.\nYou can specify a previously registered template for this option by referring the HTML <code>id</code> attribute or a CSS\nselector for the template (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>).</p>\n<p><strong>Examples:</strong></p>\n<p>Specifying a previously registered template by referring to its HTML <code>id</code> attribute:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultAttachments\"</span> <span class=\"hljs-attr\">data-result-template-id</span>=<span class=\"hljs-string\">\"Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Specifying a previously registered template by referring to a CSS selector:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultAttachments'</span> <span class=\"hljs-attr\">data-result-template-selector</span>=<span class=\"hljs-string\">\".Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>By default, this option uses the template specified in a child element with a <code>script</code> tag</p>\n"
	},
	{
		"name": "ResultAttachments.options.subResultTemplate",
		"comment": "<p>Specifies the template to use to render sub-attachments, which are attachments within attachments, for example\nwhen multiple files are embedded within a .zip attachment.\nSub-attachments can themselves contain sub-attachments, and so on up to a certain level (see\n<a href=\"https://coveo.github.io/search-ui/components/resultattachments.html#options.maximumattachmentlevel\">ResultAttachments.options.maximumAttachmentLevel</a>).</p>\n<p>You can specify a previously registered template for this option by referring the HTML <code>id</code> attribute or a CSS\nselector for the template (see <a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>).</p>\n<p><strong>Example:</strong></p>\n<p>Specifying a previously registered template by referring to its HTML <code>id</code> attribute:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultAttachments\"</span> <span class=\"hljs-attr\">data-sub-result-template-id</span>=<span class=\"hljs-string\">\"Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Specifying a previously registered template by referring to a CSS selector:</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultAttachments\"</span> <span class=\"hljs-attr\">data-sub-result-template-selector</span>=<span class=\"hljs-string\">\".Foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>By default, this option uses the same value as <a href=\"https://coveo.github.io/search-ui/components/resultattachments.html#options.resulttemplate\">ResultAttachments.options.resultTemplate</a>.</p>\n"
	},
	{
		"name": "ResultAttachments.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultAttachments.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultAttachments.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultAttachments.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultAttachments.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultAttachments.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultAttachments.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultAttachments.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultAttachments.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultAttachments.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultAttachments.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultAttachments.constructor",
		"comment": "<p>Creates a new ResultAttachments component.</p>\n"
	},
	{
		"name": "ResultFolding",
		"comment": "<p>The ResultFolding component renders folded result sets. It is usable inside a result template when there is an active\n<a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component in the page. This component takes care of rendering the parent result and its child results\nin a coherent manner.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "ResultFolding.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultFolding.options.expandedCaption",
		"comment": "<p>Specifies the caption to display at the top of the child results when the folding result set is expanded.\nDefault value is <code>undefined</code>, which displays no caption.</p>\n"
	},
	{
		"name": "ResultFolding.options.lessCaption",
		"comment": "<p>Specifies the caption to display on the link to shrink the loaded folding result set back to only the top result.\nDefault value is the localized string for <code>ShowLess</code>.</p>\n"
	},
	{
		"name": "ResultFolding.options.moreCaption",
		"comment": "<p>Specifies the caption to display on the link to expand / show child results.\nDefault value is the localized string for <code>ShowMore</code>.</p>\n"
	},
	{
		"name": "ResultFolding.options.normalCaption",
		"comment": "<p>Specifies the caption to display at the top of the child results when the folding result set is not expanded.\nDefault value is <code>undefined</code>, which displays no caption.</p>\n"
	},
	{
		"name": "ResultFolding.options.oneResultCaption",
		"comment": "<p>Specifies the caption to display when there is only one result in a folding result set.\nDefault value is the localized string for <code>DisplayingTheOnlyMessage</code></p>\n"
	},
	{
		"name": "ResultFolding.options.resultTemplate",
		"comment": "<p>Specifies the template to use to render each of the child results for a top result.\nBy default, it will use the template specified in a child element with a <code>script</code> tag. This can be specified\ndirectly as an attribute of the element.</p>\n<p><strong>Example:</strong></p>\n<p>With the following markup, the ResultFolding component will use a previously registered template ID (see\n<a href=\"https://coveo.github.io/search-ui/classes/templatecache.html\">TemplateCache</a>):</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultFolding'</span> <span class=\"hljs-attr\">data-result-template-id</span>=<span class=\"hljs-string\">'Foo'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "ResultFolding.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultFolding.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultFolding.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultFolding.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultFolding.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultFolding.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultFolding.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultFolding.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultFolding.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultFolding.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultFolding.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultFolding.constructor",
		"comment": "<p>Creates a new ResultFolding component.</p>\n"
	},
	{
		"name": "ResultLayout",
		"comment": "<p>The ResultLayout component allows the end user to switch between multiple <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> components that have\ndifferent <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.layout\">ResultList.options.layout</a> values.\nThis component automatically populates itself with buttons to switch between the ResultList components that have a\nvalid layout value (see the <a href=\"https://coveo.github.io/search-ui/globals.html#validlayout\">ValidLayout</a> type).</p>\n<p>See also the <a href=\"https://developers.coveo.com/x/yQUvAg\">Result Layouts</a> documentation.</p>\n"
	},
	{
		"name": "ResultLayout.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultLayout.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultLayout.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultLayout.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultLayout.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultLayout.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultLayout.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultLayout.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultLayout.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultLayout.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultLayout.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultLayout.constructor",
		"comment": "<p>Creates a new ResultLayout component.</p>\n"
	},
	{
		"name": "ResultLink",
		"comment": "<p>The ResultLink component automatically transform a search result title into a clickable link pointing to the original\ndocument.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "ResultLink.options",
		"comment": "<p>The options for the ResultLink</p>\n"
	},
	{
		"name": "ResultLink.options.alwaysOpenInNewWindow",
		"comment": "<p>Specifies whether the ResultLink should open in a new window instead of opening in the current context.\nIf this option is <code>true</code>, clicking the ResultLink will call the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlinkinnewwindow\">ResultLink.openLinkInNewWindow</a> method\ninstead of the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlink\">ResultLink.openLink</a> method.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If a search page contains a <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\">ResultsPreferences</a> component whose\n<a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html#options.enableopeninnewwindow\">enableOpenInNewWindow</a> option is <code>true</code>, and the end\nuser checks the <b>Always open results in new window</b> box, then ResultLink components will always open in\na new window when the user clicks them, no matter what the value of their alwaysOpenInNewWindow option is.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "ResultLink.options.field",
		"comment": "<p>Specifies the field which the ResultLink should use to output its <code>href</code> attribute.\nBy default, the component uses the <code>clickUri</code> field available on the document, but you can override this field\nby specifying a value for this option.</p>\n<p><strong>Tip:</strong></p>\n<blockquote>\n<p>When you do not include a <code>field</code> option in your result template, you can include an <code>href</code> attribute on the\nResultLink element. When present, the <code>href</code> attribute value overrides the <code>clickUri</code> field, which is otherwise\nthe default field.</p>\n<p>Specifying an <code>href</code> attribute is useful when you want to build the ResultLink using a custom script or by\nconcatenating the content of two or more variables.</p>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>With the following markup, the ResultLink will output its <code>href</code> attribute using the <code>uri</code> field instead of the\ndefault <code>clickUri</code> field:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">\"@uri\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>In the following result template, the custom <code>getMyKBUri()</code> function will provide the <code>href</code>:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"KnowledgeArticle\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/underscore\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"result-template\"</span>&gt;</span><span class=\"javascript\">\n  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'CoveoIcon&gt;'</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  &lt;a <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> href=<span class=\"hljs-string\">\"&lt;%= getMyKBUri(raw) %&gt;\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n  &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"CoveoExcerpt\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#options.hreftemplate\">hrefTemplate</a>, which can override this option.</p>\n"
	},
	{
		"name": "ResultLink.options.hrefTemplate",
		"comment": "<p>Specifies a template literal from which to generate the ResultLink <code>href</code> attribute (see\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a>).\nThis option overrides the value of the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#options.field\">field</a> option.</p>\n<p>The template literal can reference any number of fields from the parent result. It can also reference global\nscope properties.</p>\n<p>Default value is <code>undefined</code>.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>The following markup generates a ResultLink <code>href</code> such as <code>http://uri.com?id=documentTitle</code>:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span> <span class=\"hljs-attr\">data-href-template</span>=<span class=\"hljs-string\">'${clickUri}?id=${title}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>The following markup generates a ResultLink <code>href</code> such as <code>localhost/fooBar</code>:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span> <span class=\"hljs-attr\">data-href-template</span>=<span class=\"hljs-string\">'${window.location.hostname}/{Foo.Bar}'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "ResultLink.options.onClick",
		"comment": "<p>Specifies an event handler function to execute when the user clicks the ResultLink component.\nThe handler function takes a JavaScript <a href=\"https://developer.mozilla.org/en/docs/Web/API/Event\">Event</a> object and\nan <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryresult.html\">IQueryResult</a> as its parameters.</p>\n<p>Overriding the default behavior of the <code>onClick</code> event can allow you to execute specific code instead.</p>\n<p>You can only set this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface. You cannot set it directly in the\nmarkup as an HTML attribute.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>In the following code excerpt, the ResultLink opens the original document in a custom way instead of using the\nnormal browser behavior:</li>\n</ul>\n<pre><code class=\"lang-javascript\">Coveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n  <span class=\"hljs-attr\">ResultLink</span> : {\n    <span class=\"hljs-attr\">onClick</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, result</span>) </span>{\n      e.preventDefault();\n      <span class=\"hljs-comment\">// Custom code to execute with the URI and title of the document.</span>\n      openUriInASpecialTab(result.clickUri, result.title);\n    }\n  }\n});\n</code></pre>\n<ul>\n<li>You can achieve the same result using the jQuery extension:</li>\n</ul>\n<pre><code class=\"lang-javascript\">$(<span class=\"hljs-string\">\"#search\"</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n  <span class=\"hljs-attr\">ResultLink</span> : {\n    <span class=\"hljs-attr\">onClick</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e, result</span>) </span>{\n      e.preventDefault();\n      <span class=\"hljs-comment\">// Custom code to execute with the URI and title of the document.</span>\n      openUriInASpecialTab(result.clickUri, result.title);\n    }\n  }\n});\n</code></pre>\n"
	},
	{
		"name": "ResultLink.options.openInOutlook",
		"comment": "<p>Specifies whether the ResultLink should try to open in Microsoft Outlook.\nSetting this option to <code>true</code> is normally useful for ResultLink instances which are related to Microsoft Exchange\nemails.</p>\n<p>If this option is <code>true</code>, clicking the ResultLink will call the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlinkinoutlook\">ResultLink.openLinkInOutlook</a> method\ninstead of the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#openlink\">ResultLink.openLink</a> method.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "ResultLink.options.openQuickview",
		"comment": "<p>Specifies whether the ResultLink should open in the <a href=\"https://coveo.github.io/search-ui/components/quickview.html\">Quickview</a> component rather than loading through the\noriginal URL.\nDefault value is <code>false</code>.</p>\n"
	},
	{
		"name": "ResultLink.options.titleTemplate",
		"comment": "<p>Specifies a template literal from which to generate the ResultLink display title (see\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals\">Template literals</a>).\nThis option overrides the default ResultLink display title behavior.</p>\n<p>The template literal can reference any number of fields from the parent result. However, if the template literal\nreferences a key whose value is undefined in the parent result fields, then the ResultLink title displays the\nname of this key instead.</p>\n<p>This option is ignored if the ResultLink innerHTML contains any value.</p>\n<p>Default value is <code>undefined</code>.</p>\n<p><strong>Examples:</strong></p>\n<ul>\n<li>The following markup generates a ResultLink display title such as <code>Case number: 123456</code> if both the\n<code>raw.objecttype</code> and <code>raw.objectnumber</code> keys are defined in the parent result fields:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">data-title-template</span>=<span class=\"hljs-string\">\"${raw.objecttype} number: ${raw.objectnumber}\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>The following markup generates <code>${myField}</code> as a ResultLink display title if the <code>myField</code> key is undefined\nin the parent result fields:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">data-title-template</span>=<span class=\"hljs-string\">\"${myField}\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<ul>\n<li>The following markup generates <code>Foobar</code> as a ResultLink display title, because the ResultLink innterHTML is not\nempty:</li>\n</ul>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultLink\"</span> <span class=\"hljs-attr\">data-title-template</span>=<span class=\"hljs-string\">\"${will} ${be} ${ignored}\"</span>&gt;</span>Foobar<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "ResultLink.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultLink.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultLink.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultLink.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultLink.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultLink.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultLink.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultLink.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultLink.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultLink.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultLink.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultLink.constructor",
		"comment": "<p>Creates a new ResultLink component.</p>\n"
	},
	{
		"name": "ResultList",
		"comment": "<p>The ResultList component is responsible for displaying the results of the current query using one or more result\ntemplates (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).\nThis component supports many additional features, such as infinite scrolling.</p>\n"
	},
	{
		"name": "ResultList.options",
		"comment": "<p>The options for the ResultList</p>\n"
	},
	{
		"name": "ResultList.options.autoSelectFieldsToInclude",
		"comment": "<p>Specifies whether the ResultList should scan its template and discover which fields it needs to render all\nresults.\nSetting this option to <code>true</code> ensures that the Search API does not send fields that are unnecessary for the UI to\nfunction.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.fieldstoinclude\">ResultList.options.fieldsToInclude</a>.</p>\n<p>Default value is <code>false</code>.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>Many interfaces created with the Interface Editor explicitly set this option to <code>true</code>.</p>\n</blockquote>\n"
	},
	{
		"name": "ResultList.options.enableInfiniteScroll",
		"comment": "<p>Specifies whether to automatically retrieve an additional page of results and append it to the\nresults that the ResultList is currently displaying when the user scrolls down to the bottom of the infinite\nscroll container.\nSee also <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollpagesize\">ResultList.options.infiniteScrollPageSize</a>, <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollcontainer\">ResultList.options.infiniteScrollContainer</a>\nand <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescrollwaitinganimation\">ResultList.options.enableInfiniteScrollWaitingAnimation</a>.</p>\n<p>It is important to specify the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollcontainer\">ResultList.options.infiniteScrollContainer</a> manually if you want the scrolling\nelement to be something else than the default <code>window</code> element.\nOtherwise, you might get in a weird state where the framework will rapidly trigger multiple successive query.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "ResultList.options.enableInfiniteScrollWaitingAnimation",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescroll\">ResultList.options.enableInfiniteScroll</a> is <code>true</code>, specifies whether to display the\n<a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.waitanimation\">ResultList.options.waitAnimation</a> while fetching additional results.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "ResultList.options.fieldsToInclude",
		"comment": "<p>Specifies a list of fields to include in the query.\nSpecifying a list of values for this option ensures that the Search API does not send fields that are unnecessary\nfor the UI to function.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.autoselectfieldstoinclude\">ResultList.options.autoSelectFieldsToInclude</a>.</p>\n<p>Default value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "ResultList.options.infiniteScrollContainer",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescroll\">ResultList.options.enableInfiniteScroll</a> is <code>true</code>, specifies the element that triggers the fetching of\nadditional results when the end user scrolls down to its bottom.\nYou can change the container by specifying its selector (e.g.,\n<code>data-infinite-scroll-container-selector=&#39;#someCssSelector&#39;</code>).</p>\n<p>By default, the framework uses the first vertically scrollable parent element it finds, starting from the\nResultList element itself. A vertically scrollable element is an element whose CSS <code>overflow-y</code> attribute is\n<code>scroll</code>.</p>\n<p>This implies that if the framework can find no scrollable parent, it uses the window itself as a scrollable\ncontainer.</p>\n<p>This heuristic is not perfect, for technical reasons. There are always some corner case CSS combination which the framework will\nnot be able to detect correctly as &#39;scrollable&#39;.</p>\n<p>It is highly recommended that you manually set this option if you wish to have something else than <code>window</code> be the scrollable element.</p>\n"
	},
	{
		"name": "ResultList.options.infiniteScrollPageSize",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescroll\">ResultList.options.enableInfiniteScroll</a> is <code>true</code>, specifies the number of additional results to fetch\nwhen the user scrolls down to the bottom of the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.infinitescrollcontainer\">ResultList.options.infiniteScrollContainer</a>.\nDefault value is <code>10</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "ResultList.options.layout",
		"comment": "<p>Specifies the layout to use for displaying the results within this ResultList. Specifying a value for this option\nautomatically populates a <a href=\"https://coveo.github.io/search-ui/components/resultlayout.html\">ResultLayout</a> component with a switcher for the layout.\nFor example, if there are two <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> components in the page, one with its\n<a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.layout\">ResultList.options.layout</a> set to <code>list</code> and the other with the same option set to <code>card</code>, then the\nResultLayout component will render two buttons respectively titled <strong>List</strong> and <strong>Card</strong>.</p>\n<p>See the <a href=\"https://coveo.github.io/search-ui/globals.html#validlayout\">ValidLayout</a> type for the list of possible values.</p>\n<p>Default value is <code>list</code>.</p>\n"
	},
	{
		"name": "ResultList.options.resultContainer",
		"comment": "<p>Specifies the element within which to insert the rendered templates for results.\nPerforming a new query clears the content of this element.</p>\n<p>You can change the container by specifying its selector (e.g.,\n<code>data-result-container-selector=&#39;#someCssSelector&#39;</code>).</p>\n<p>If you specify no value for this option, a <code>div</code> element will be dynamically created and appended to the result\nlist. This element will then be used as a result container.</p>\n"
	},
	{
		"name": "ResultList.options.waitAnimation",
		"comment": "<p>Specifies the type of animation to display while waiting for a query to return.\nThe possible values are:</p>\n<ul>\n<li><code>fade</code>: Fades out the current list of results while the query is executing.</li>\n<li><code>spinner</code>: Shows a spinning animation while the query is executing.</li>\n<li><code>none</code>: Use no animation during queries.</li>\n</ul>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.waitanimationcontainer\">ResultList.options.waitAnimationContainer</a>.</p>\n<p>Default value is <code>none</code>.</p>\n"
	},
	{
		"name": "ResultList.options.waitAnimationContainer",
		"comment": "<p>Specifies the element inside which to display the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.waitanimation\">ResultList.options.waitAnimation</a>.\nYou can change this by specifying a CSS selector (e.g.,\n<code>data-wait-animation-container-selector=&#39;#someCssSelector&#39;</code>).</p>\n<p>Default value is the value of <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.resultcontainer\">ResultList.options.resultContainer</a>.</p>\n"
	},
	{
		"name": "ResultList.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultList.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultList.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultList.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultList.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultList.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultList.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultList.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultList.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultList.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultList.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultList.constructor",
		"comment": "<p>Creates a new ResultList component. Binds various event related to queries (e.g., on querySuccess -&gt;\nrenderResults). Binds scroll event if <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.enableinfinitescroll\">ResultList.options.enableInfiniteScroll</a> is <code>true</code>.</p>\n"
	},
	{
		"name": "ResultRating",
		"comment": "<p>The ResultRating component renders a 5-star rating widget. Interactive rating is possible if\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablecollaborativerating\">SearchInterface.options.enableCollaborativeRating</a> is <code>true</code>.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "ResultRating.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultRating.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultRating.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultRating.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultRating.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultRating.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultRating.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultRating.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultRating.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultRating.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultRating.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultRating.constructor",
		"comment": "<p>Creates a new ResultRating component.</p>\n"
	},
	{
		"name": "ResultTagging",
		"comment": "<p>The ResultTagging component lists the current tag field values of its associated result and renders a control that\nallows the end user to add values to a tag field.\nThis component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "ResultTagging.options.autoCompleteTimer",
		"comment": "<p>Specifies how much time (in milliseconds) it takes for the list of suggested items to disappear when it loses\nfocus.\nDefault value is <code>2000</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "ResultTagging.options.field",
		"comment": "<p>Specifies the tag field that the component will use.\nSpecifying a value for this options is necessary for this component to work.</p>\n"
	},
	{
		"name": "ResultTagging.options.suggestBoxSize",
		"comment": "<p>Specifies the number of items to show in the list of suggested items.\nDefault value is <code>5</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "ResultTagging.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultTagging.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultTagging.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultTagging.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultTagging.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultTagging.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultTagging.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultTagging.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultTagging.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultTagging.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultTagging.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultTagging.constructor",
		"comment": "<p>Creates a new ResultTagging component.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences",
		"comment": "<p>The ResultFiltersPreferences component allows the end user to create custom filters to apply to queries. These\nfilters are saved in the local storage of the end user.\nOnly advanced end users who understand the Coveo query syntax should actually use this feature (see\n<a href=\"http://www.coveo.com/go?dest=adminhelp70&amp;lcid=9&amp;context=10005\">Coveo Query Sytax Reference</a>).</p>\n<p>This component is normally accessible through the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu. Its usual location in the DOM is inside the\n<a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\">PreferencesPanel</a> component.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\">ResultsPreferences</a> component.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options.filters",
		"comment": "<p>Specifies the default filters that all end users can apply.\nEnd users will not be able to modify or delete these filters. They do not count as &quot;user-made&quot; filters, but\nrather as &quot;built-in&quot; filters created by the developer of the search page.</p>\n<p>You can only set this option in the <code>init</code> call of your search interface. You cannot set it directly in the\nmarkup as an HTML attribute.</p>\n<p>Filters should follow this definition:</p>\n<p><code>filters: { [caption: string]: { expression: string; tab?: string[]; } }</code>;</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-javascript\">Coveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n  <span class=\"hljs-attr\">ResultsFiltersPreferences</span> : {\n    <span class=\"hljs-attr\">filters</span> : {\n      <span class=\"hljs-string\">\"Only Google Drive Items\"</span> : {\n        <span class=\"hljs-attr\">expression</span> : <span class=\"hljs-string\">\"@connectortype == 'GoogleDriveCrawler'\"</span>\n        tab: [<span class=\"hljs-string\">'Tab1'</span>, <span class=\"hljs-string\">'Tab2'</span>],\n      },\n      <span class=\"hljs-string\">\"Another Filter\"</span> : {\n        <span class=\"hljs-attr\">expression</span> : [ ... another expression ... ]\n      },\n      [ ... ]\n    }\n  }\n});\n</code></pre>\n<p>Default value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options.includeInBreadcrumb",
		"comment": "<p>Specifies whether to include the active filter(s) in the <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.options.showAdvancedFilters",
		"comment": "<p>Specifies whether to show the <strong>Create</strong> button that allows the end user to create filters.\nIf you set this option to <code>false</code>, only the pre-populated <a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html#options.filters\">ResultsFiltersPreferences.options.filters</a> will\nbe available to the end user.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultsFiltersPreferences.constructor",
		"comment": "<p>Creates a new ResultsFiltersPreferences component.</p>\n"
	},
	{
		"name": "ResultsPerPage",
		"comment": "<p>The ResultsPerPage component attaches itself to a <code>div</code> and allows the end user to choose how many results to\ndisplay per page.\n<strong>Note:</strong> Adding a ResultPerPage component to your page overrides the value of\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.resultsperpage\">SearchInterface.options.resultsPerPage</a>.</p>\n"
	},
	{
		"name": "ResultsPerPage.options",
		"comment": "<p>The options for the ResultsPerPage</p>\n"
	},
	{
		"name": "ResultsPerPage.options.choicesDisplayed",
		"comment": "<p>Specifies the possible values of number of results to display per page that the end user can select from.\nSee also <a href=\"https://coveo.github.io/search-ui/components/resultsperpage.html#options.initialchoice\">ResultsPerPage.options.initialChoice</a>.</p>\n<p>Default value is <code>[10, 25, 50, 100]</code>.</p>\n"
	},
	{
		"name": "ResultsPerPage.options.initialChoice",
		"comment": "<p>Specifies the value to select by default for the number of results to display per page.\nDefault value is the first value of <a href=\"https://coveo.github.io/search-ui/components/resultsperpage.html#options.choicesdisplayed\">ResultsPerPage.options.choicesDisplayed</a>.</p>\n"
	},
	{
		"name": "ResultsPerPage.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultsPerPage.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultsPerPage.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPerPage.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultsPerPage.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultsPerPage.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultsPerPage.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPerPage.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultsPerPage.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultsPerPage.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultsPerPage.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultsPerPage.constructor",
		"comment": "<p>Creates a new ResultsPerPage. The component renders itself on every query success.</p>\n"
	},
	{
		"name": "ResultsPreferences",
		"comment": "<p>The ResultsPreferences component allows the end user to select preferences related to the search results. These\npreferences are then saved in the local storage of the end user.\nThis component is normally accessible through the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu. Its usual location in the DOM is inside the\n<a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\">PreferencesPanel</a> component.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html\">ResultsFiltersPreferences</a> component.</p>\n"
	},
	{
		"name": "ResultsPreferences.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "ResultsPreferences.options.enableOpenInNewWindow",
		"comment": "<p>Specifies whether to make the option to open results in a new window available.\nDefault value is <code>true</code></p>\n"
	},
	{
		"name": "ResultsPreferences.options.enableOpenInOutlook",
		"comment": "<p>Specifies whether to make the option to open results in Microsoft Outlook available.\nDefault value is <code>false</code></p>\n"
	},
	{
		"name": "ResultsPreferences.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ResultsPreferences.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ResultsPreferences.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPreferences.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ResultsPreferences.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ResultsPreferences.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ResultsPreferences.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ResultsPreferences.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ResultsPreferences.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ResultsPreferences.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ResultsPreferences.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ResultsPreferences.constructor",
		"comment": "<p>Creates a new ResultsPreference component.</p>\n"
	},
	{
		"name": "SearchAlerts",
		"comment": "<p>The Search Alerts component renders items in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu that allow the end user to follow queries\nand to manage search alerts. A user following a query receives email notifications when the query results change.\n<strong>Note:</strong></p>\n<blockquote>\n<p>It is necessary to meet certain requirements to be able to use this component (see\n<a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=248\">Deploying Search Alerts on a Coveo JS Search Page</a>).</p>\n</blockquote>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/followitem.html\">FollowItem</a> component.</p>\n"
	},
	{
		"name": "SearchAlerts.options",
		"comment": "<p>The options for the search alerts</p>\n"
	},
	{
		"name": "SearchAlerts.options.enableFollowQuery",
		"comment": "<p>Specifies whether to add the <strong>Follow Query</strong> item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu to allow the end user to follow\nthe last query.\nClicking the <strong>Follow Query</strong> item calls the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#followquery\">SearchAlerts.followQuery</a> method.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "SearchAlerts.options.enableManagePanel",
		"comment": "<p>Specifies whether to add the <strong>Manage Alerts</strong> item in the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> menu to allow the end user to manage\nsearch alerts.\nClicking the <strong>Manage Alerts</strong> item calls the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#openpanel\">SearchAlerts.openPanel</a> method.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "SearchAlerts.options.enableMessage",
		"comment": "<p>Specifies whether to display info and error messages when performing search alerts actions.\nIf this options is <code>true</code>, the SearchAlerts constructor will automatically instantiate a\n<a href=\"https://coveo.github.io/search-ui/components/searchalertsmessage.html\">SearchAlertsMessage</a> component and set it to the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#message\">SearchAlerts.message</a> attribute.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#options.messageclosedelay\">SearchAlerts.options.messageCloseDelay</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "SearchAlerts.options.messageCloseDelay",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#options.enablemessage\">SearchAlerts.options.enableMessage</a> is <code>true</code>, specifies how long to display the search alert messages\n(in milliseconds).\nDefault value is <code>3000</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "SearchAlerts.options.modifiedDateField",
		"comment": "<p>Specifies which field to use to represent the modification date when sending the\n<a href=\"https://coveo.github.io/search-ui/interfaces/isubscriptionqueryrequest.html\">ISubscriptionQueryRequest</a>.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "SearchAlerts.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "SearchAlerts.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "SearchAlerts.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlerts.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "SearchAlerts.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "SearchAlerts.message",
		"comment": "<p>A reference to a <a href=\"https://coveo.github.io/search-ui/components/searchalertsmessage.html\">SearchAlertsMessage</a> component that the SearchAlerts component uses to display messages.</p>\n"
	},
	{
		"name": "SearchAlerts.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "SearchAlerts.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlerts.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "SearchAlerts.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "SearchAlerts.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "SearchAlerts.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchAlerts.constructor",
		"comment": "<p>Creates a new SearchAlerts component.</p>\n"
	},
	{
		"name": "SearchAlertsMessage",
		"comment": "<p>The SearchAlertsMessage component allows the <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component to display messages.\nYou should not include this component in your page. Instead, use a <a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> component, and access the\n<a href=\"https://coveo.github.io/search-ui/components/searchalerts.html#message\">SearchAlerts.message</a> attribute.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.options",
		"comment": "<p>The options for the SearchAlertsMessage component</p>\n"
	},
	{
		"name": "SearchAlertsMessage.options.closeDelay",
		"comment": "<p>Specifies how long to display the search alerts messages (in milliseconds).\nDefault value is <code>3000</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "SearchAlertsMessage.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "SearchAlertsMessage.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchAlertsMessage.constructor",
		"comment": "<p>Creates a new SearchAlertsMessage component</p>\n"
	},
	{
		"name": "SearchButton",
		"comment": "<p>The SearchButton component renders a search icon that the end user can click to trigger a new query.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a> component, which can automatically instantiate a SearchButton component along with a\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> component or an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.</p>\n"
	},
	{
		"name": "SearchButton.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "SearchButton.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "SearchButton.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchButton.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "SearchButton.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "SearchButton.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "SearchButton.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "SearchButton.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "SearchButton.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "SearchButton.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "SearchButton.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchButton.constructor",
		"comment": "<p>Creates a new SearchButton. Binds a <code>click</code> event on the element. Adds a search icon on the element.</p>\n"
	},
	{
		"name": "SearchInterface",
		"comment": "<p>The SearchInterface component is the root and main component of your Coveo search interface. You should place all\nother Coveo components inside the SearchInterface component.\nIt is also on the HTMLElement of the SearchInterface component that you call the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> function.</p>\n<p>It is advisable to specify a unique HTML <code>id</code> attribute for the SearchInterface component in order to be able to\nreference it easily.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\n[ ... ]\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'DOMContentLoaded'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n    [ ... ]\n    <span class=\"hljs-comment\">// The init function is called on the SearchInterface element, in this case, the body of the page.</span>\n    Coveo.init(<span class=\"hljs-built_in\">document</span>.body);\n\n    [ ... ]\n\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n[ ... ]\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Specifying a unique HTML id attribute for the SearchInterface component is good practice. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'search'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchInterface'</span> [ <span class=\"hljs-attr\">...</span> <span class=\"hljs-attr\">other</span> <span class=\"hljs-attr\">options</span> <span class=\"hljs-attr\">...</span> ]&gt;</span>\n\n  [ ... ]\n\n  <span class=\"hljs-comment\">&lt;!-- You should place all other Coveo components here, inside the SearchInterface component. --&gt;</span>\n\n  [ ... ]\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre>\n"
	},
	{
		"name": "SearchInterface.options",
		"comment": "<p>The options for the search interface</p>\n"
	},
	{
		"name": "SearchInterface.options.autoTriggerQuery",
		"comment": "<p>Specifies whether to trigger the first query automatically when the page finishes loading.\n<strong>Note:</strong></p>\n<blockquote>\n<p>If you set this option to <code>false</code> while the\n<a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.hideuntilfirstquery\">hideUntilFirstQuery</a> option is <code>true</code>, the loading\nanimation will still run until the first query successfully returns.</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableAutomaticResponsiveMode",
		"comment": "<p>Specifies whether to enable automatic responsive mode (i.e., automatically placing <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> and <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a>\ncomponents in dropdown menus under the search box when the width of the SearchInterface HTML element reaches or\nfalls behind a certain pixel threshold).\nYou might want to set this option to <code>false</code> if automatic responsive mode does not suit the specific design needs\nof your implementation.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>If this option is <code>true</code>, you can also specify whether to enable responsive mode for Facet components (see\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.enableresponsivemode\">Facet.options.enableResponsiveMode</a>) and for Tab components (see\n<a href=\"https://coveo.github.io/search-ui/components/tab.html#options.enableresponsivemode\">Tab.options.enableResponsiveMode</a>).</p>\n<p>In addition, you can specify the label you wish to display on the dropdown buttons (see\n<a href=\"https://coveo.github.io/search-ui/components/facet.html#options.dropdownheaderlabel\">Facet.options.dropdownHeaderLabel</a> and <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.dropdownheaderlabel\">Tab.options.dropdownHeaderLabel</a>).</p>\n</blockquote>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableCollaborativeRating",
		"comment": "<p>Specifies whether to enable the collaborative rating for the index and to include user ratings on each results\nin addition to the normal index ranking.\nIf you set this option to <code>true</code>, you can leverage it with the <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a> component.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableDebugInfo",
		"comment": "<p>Specifies whether to enable the feature that allows the end user to ALT + double click any result to open a debug\npage with detailed information about all properties and fields for that result.\nEnabling this feature causes no security concern; the entire debug information is always visible to the end user\nthrough the browser developer console or by calling the Coveo API directly.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableDuplicateFiltering",
		"comment": "<p>Specifies whether to filter duplicates in the search results.\nSetting this option to <code>true</code> forces duplicates to not appear in search results. However, <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> counts\nstill include the duplicates, which can be confusing for the end user. This is a limitation of the index.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>The end user narrows a query down to a single document that has a duplicate. If the enableDuplicateFiltering\noption is <code>true</code>, then only one document appears in the search results while the Facet count is still 2.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.enableduplicatefiltering\">Tab.options.enableDuplicateFiltering</a>).</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.enableHistory",
		"comment": "<p>Specifies whether to allow the end user to navigate search history using the <strong>Back</strong> and <strong>Forward</strong> buttons\nof the browser.\nIf this options is <code>true</code>, the SearchInterface component saves the state of the current query in the hash portion\nof the URL when the user submits the query.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>If the <code>enableHistory</code> option is <code>true</code> and the current query is <code>foobar</code>, the SearchInterface component\nsaves <code>q=foobar</code> in the URL hash when the user submits the query.</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.excerptLength",
		"comment": "<p>Specifies the number of characters to get at query time to create an excerpt of the result.\nThis setting is global and cannot be modified on a per-result basis.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/excerpt.html\">Excerpt</a> component.</p>\n<p>Default value is <code>200</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.expression",
		"comment": "<p>Specifies an expression to add to each query.\nYou might want to use this options to add a global filter to your entire search interface that applies for all\ntabs.</p>\n<p>You should not use this option to address security concerns (it is JavaScript, after all).</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.expression\">Tab.options.expression</a>).</p>\n</blockquote>\n<p>Default value is <code>&#39;&#39;</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.filterField",
		"comment": "<p>Specifies the name of a field to use as a custom filter when executing the query (also referred to as\n&quot;folding&quot;).\nSetting a value for this option causes the index to return only one result having any particular value inside the\nfilter field. Any other matching result is &quot;folded&quot; inside the childResults member of each JSON query result.</p>\n<p>This feature is typically useful with threaded conversations to include only one top-level result per\nconversation. Thus, the field you specify for this option will typically be value unique to each thread that is\nshared by all items (e.g., posts, emails, etc) in the thread.</p>\n<p>For more advanced features, see the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.</p>\n<p>Default value is the empty string (<code>&#39;&#39;</code>).</p>\n"
	},
	{
		"name": "SearchInterface.options.firstLoadingAnimation",
		"comment": "<p>Specifies the animation that you wish to display while your interface is loading.\nYou can either specify the CSS selector of an HTML element that matches the default CSS class\n(<code>coveo-first-loading-animation</code>), or add <code>-selector</code> to the markup attribute of this option to specify the CSS\nselector of an HTML element that matches any CSS class.</p>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.hideuntilfirstquery\">hideUntilFirstQuery</a> option.</p>\n<p><strong>Examples:</strong></p>\n<p>In this first case, the SearchInterface uses the HTML element whose <code>id</code> attribute is <code>MyAnimation</code> as the\nloading animation only if the <code>class</code> attribute of this element also matches <code>coveo-first-loading-animation</code>.\nDefault loading animation CSS, which you can customize as you see fit, applies to this HTML element.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchInterface'</span> <span class=\"hljs-attr\">data-first-loading-animation</span>=<span class=\"hljs-string\">'#MyAnimation'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'MyAnimation'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'coveo-first-loading-animation'</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>In this second case, the SearchInterface uses the HTML element whose <code>id</code> attribute is <code>MyAnimation</code> as the\nloading animation no matter what CSS class it matches. However, if the <code>class</code> attribute of the HTML element does\nnot match <code>coveo-first-loading-animation</code>, no default loading animation CSS applies to this HTML element.\nNormally, you should only use <code>data-first-loading-animation-selector</code> if you want to completely override the\ndefault loading animation CSS.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchInterface'</span> <span class=\"hljs-attr\">data-first-loading-animation-selector</span>=<span class=\"hljs-string\">'#MyAnimation'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'MyAnimation'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'my-custom-loading-animation-class'</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>See <a href=\"https://developers.coveo.com/x/EoGfAQ\">Branding Customization</a>.</p>\n<p>By default, the loading animation is a Coveo CSS animation (which you can customize with CSS).</p>\n"
	},
	{
		"name": "SearchInterface.options.hideUntilFirstQuery",
		"comment": "<p>Specifies whether to display a loading animation before the first query successfully returns.\n<strong>Note:</strong></p>\n<blockquote>\n<p>If you do not set this options to <code>false</code>, the loading animation will still run until the first query\nsuccessfully returns even if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.autotriggerquery\">autoTriggerQuery</a> option is\n<code>false</code>.</p>\n</blockquote>\n<p>See also the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.firstloadinganimation\">firstLoadingAnimation</a> option.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.maximumAge",
		"comment": "<p>Specifies the maximum age (in milliseconds) that cached query results can have to still be usable as results\ninstead of performing a new query on the index. The cache is located in the Coveo Search API (which resides\nbetween the index and the search interface).\nIf cached results that are older than the age you specify in this option are available, the framework will not\nuse these results; it will rather perform a new query on the index.</p>\n<p>On high-volume public web sites, specifying a higher value for this option can greatly improve query response\ntime at the cost of result freshness.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.maximumage\">Tab.options.maximumAge</a>).</p>\n</blockquote>\n<p>Default value is <code>undefined</code>, which means that the search interface lets the Coveo Search API determine the\nmaximum cache age. This is typically equivalent to 30 minutes (see\n<a href=\"https://developers.coveo.com/x/iwEv#QueryParameters-maximumAge\">Query Parameters - maximumAge</a>).</p>\n"
	},
	{
		"name": "SearchInterface.options.pipeline",
		"comment": "<p>Specifies the name of the query pipeline to use for the queries.\nYou can specify a value for this option if your index is in a Coveo Cloud organization in which pipelines have\nbeen created (see <a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=128\">Managing Query Pipelines</a>).</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It also is possible to set this option separately for each <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component\n(see <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.pipeline\">Tab.options.pipeline</a>).</p>\n</blockquote>\n<p>Default value is <code>undefined</code>, which means that the search interface uses the default pipeline.</p>\n"
	},
	{
		"name": "SearchInterface.options.resultsPerPage",
		"comment": "<p>Specifies the number of results to display on each page.\nFor more advanced features, see the <a href=\"https://coveo.github.io/search-ui/components/resultsperpage.html\">ResultsPerPage</a> component.</p>\n<p>Default value is <code>10</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "SearchInterface.options.searchPageUri",
		"comment": "<p>Specifies the search page you wish to navigate to when instantiating a standalone search box interface.\nDefault value is <code>undefined</code>, which means that the search interface does not redirect.</p>\n"
	},
	{
		"name": "SearchInterface.options.timezone",
		"comment": "<p>Specifies the timezone in which the search interface is loaded. This allows the index to recognize some special\nquery syntax.\nThis option must have a valid IANA zone info key (AKA the Olson time zone database) as its value.</p>\n<p><strong>Example:</strong> <code>America/New_York</code>.</p>\n<p>By default, the search interface allows a library to try to detect the timezone automatically.</p>\n"
	},
	{
		"name": "SearchInterface.options.useLocalStorageForHistory",
		"comment": "<p>Specifies whether to save the interface state in the local storage of the browser.\nYou might want to set this option to <code>true</code> for reasons specifically important for your implementation.</p>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "SearchInterface.getComponents",
		"comment": "<p>Gets all the components of a given type.</p>\n"
	},
	{
		"name": "SearchInterface.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "SearchInterface.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "SearchInterface.responsiveComponents",
		"comment": "<p>Allows to get and set the different breakpoints for mobile and tablet devices.\nThis is useful, among other things, for <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>, <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> and <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> components.</p>\n"
	},
	{
		"name": "SearchInterface.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "SearchInterface.constructor",
		"comment": "<p>Creates a new SearchInterface. Initialize various singletons for the interface (e.g., usage analytics, query\ncontroller, state model, etc.). Binds events related to the query. Hides and shows the loading animation, if\nactivated (see the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.hideuntilfirstquery\">hideUntilFirstQuery</a> option).</p>\n"
	},
	{
		"name": "Searchbox",
		"comment": "<p>The Searchbox component can conveniently create two components that are frequently used together to allow the end\nuser to input and submit queries.\nThis component attaches itself to a <code>div</code> element and takes care of instantiating either a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> component\nor an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component, depending on its configuration. Optionally, the Searchbox component can also\ninstantiate a <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a> component and append it inside the same <code>div</code>.</p>\n"
	},
	{
		"name": "Searchbox.options",
		"comment": "<p>Possible options for the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a></p>\n"
	},
	{
		"name": "Searchbox.options.addSearchButton",
		"comment": "<p>Specifies whether to instantiate a <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a> component.\nDefault value is <code>true</code>.</p>\n"
	},
	{
		"name": "Searchbox.options.enableOmnibox",
		"comment": "<p>Specifies whether to instantiate an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.\nWhen this option is <code>false</code>, the Searchbox component instantiates a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> component instead of an\nOmnibox component.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>You can use configuration options specific to the component that the Searchbox instantiates.</p>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<p>In this first case, the Searchbox will instantiate a Querybox component. It is therefore possible to configure\nthat Querybox instance using any of the Querybox component options such as\n<a href=\"https://coveo.github.io/search-ui/components/querybox.html#options.triggerqueryonclear\">Querybox.options.triggerQueryOnClear</a>.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchbox'</span> <span class=\"hljs-attr\">data-trigger-query-on-clear</span>=<span class=\"hljs-string\">'true'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>In this second case, the Searchbox will instantiate an Omnibox component. It is therefore possible to configure\nthat Omnibox instance using any of the Omnibox component options such as <a href=\"https://coveo.github.io/search-ui/components/omnibox.html#options.placeholder\">Omnibox.options.placeholder</a>.\nMoreover, since the Omnibox component inherits all of the Querybox component options, the\n<code>data-trigger-query-on-clear</code> option will also work on that Omnibox instance.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoSearchbox'</span> <span class=\"hljs-attr\">data-enableOmnibox</span>=<span class=\"hljs-string\">'true'</span> <span class=\"hljs-attr\">data-place-holder</span>=<span class=\"hljs-string\">'Please enter a query'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Searchbox.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Searchbox.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Searchbox.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Searchbox.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Searchbox.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Searchbox.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Searchbox.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Searchbox.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Searchbox.searchButton",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/components/searchbutton.html\">SearchButton</a> instance.</p>\n"
	},
	{
		"name": "Searchbox.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Searchbox.searchbox",
		"comment": "<p>The instance of the component that allows the end user to input queries.\nCan be either a <a href=\"https://coveo.github.io/search-ui/components/querybox.html\">Querybox</a> component or an <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component, depending on the value of\n<a href=\"https://coveo.github.io/search-ui/components/searchbox.html#options.enableomnibox\">Searchbox.options.enableOmnibox</a>.</p>\n"
	},
	{
		"name": "Searchbox.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Searchbox.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Searchbox.constructor",
		"comment": "<p>Creates a new Searchbox. Creates a new Coveo.Magicbox instance and wraps magic box methods (on blur, on submit\netc.). Binds event on <code>buildingQuery</code> and on redirection (for standalone box).</p>\n"
	},
	{
		"name": "Settings",
		"comment": "<p>The Settings component renders a <strong>Settings</strong> button that the end user can click to access a popup menu from which\nit is possible to perform several contextual actions. The usual location of the <strong>Settings</strong> button in the page is to\nthe right of the <a href=\"https://coveo.github.io/search-ui/components/searchbox.html\">Searchbox</a>.\nThis component can reference several components to populate its popup menu:</p>\n<ul>\n<li><a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/exporttoexcel.html\">ExportToExcel</a></li>\n<li><a href=\"https://coveo.github.io/search-ui/components/preferencespanel.html\">PreferencesPanel</a> (see also <a href=\"https://coveo.github.io/search-ui/components/resultsfilterspreferences.html\">ResultsFiltersPreferences</a> and <a href=\"https://coveo.github.io/search-ui/components/resultspreferences.html\">ResultsPreferences</a>)</li>\n<li><a href=\"https://coveo.github.io/search-ui/components/searchalerts.html\">SearchAlerts</a> (see also <a href=\"https://coveo.github.io/search-ui/components/searchalertsmessage.html\">SearchAlertsMessage</a>)</li>\n<li><a href=\"https://coveo.github.io/search-ui/components/sharequery.html\">ShareQuery</a></li>\n</ul>\n"
	},
	{
		"name": "Settings.options",
		"comment": "<p>The options for Settings</p>\n"
	},
	{
		"name": "Settings.options.menuDelay",
		"comment": "<p>Specifies the delay (in milliseconds) before hiding the popup menu when the cursor is not hovering over it.\nDefault value is <code>300</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "Settings.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Settings.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Settings.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Settings.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Settings.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Settings.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Settings.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Settings.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Settings.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Settings.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Settings.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Settings.constructor",
		"comment": "<p>Creates a new Settings component.</p>\n"
	},
	{
		"name": "ShareQuery",
		"comment": "<p>The ShareQuery component populates the <a href=\"https://coveo.github.io/search-ui/components/settings.html\">Settings</a> popup menu with the <strong>Share Query</strong> menu item. When the end\nuser clicks this item, it displays a panel containing two input boxes: one containing a shareable link and the other\ncontaining the complete current query expression.</p>\n"
	},
	{
		"name": "ShareQuery.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "ShareQuery.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "ShareQuery.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ShareQuery.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "ShareQuery.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "ShareQuery.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "ShareQuery.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "ShareQuery.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "ShareQuery.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "ShareQuery.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "ShareQuery.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "ShareQuery.constructor",
		"comment": "<p>Creates a new ShareQuery component.</p>\n"
	},
	{
		"name": "Sort",
		"comment": "<p>The Sort component renders a widget that the end user can interact with to sort query results according to a single\ncriterion or list of criteria.</p>\n"
	},
	{
		"name": "Sort.options",
		"comment": "<p>Options for the component</p>\n"
	},
	{
		"name": "Sort.options.caption",
		"comment": "<p>Specifies the caption to display on the element.\nIf you do not specify a value for this option, the component uses the tag body of the element.</p>\n"
	},
	{
		"name": "Sort.options.sortCriteria",
		"comment": "<p>Specifies the criterion (or criteria) for sorting.\nThe possible criteria are:</p>\n<ul>\n<li><code>relevancy</code></li>\n<li><code>date</code></li>\n<li><code>qre</code></li>\n<li><code>@fieldname</code> (replace <code>fieldname</code> with an actual field name (e.g., <code>@size</code>)</li>\n</ul>\n<p>You can also specify a direction (<code>ascending</code> or <code>descending</code>), for example <code>date ascending</code>.</p>\n<p>You can pass an array containing multiple criteria to the Sort component.\nIf you specify multiple criteria, all criteria must have the same direction (either <code>ascending</code> or\n<code>descending</code>).\nYou can only use the <code>date</code> and <code>@fieldname</code> criteria when specifying multiple criteria.\nMultiple criteria are evaluated in the order you specify them.</p>\n<p>It is necessary to specify a value for this option in order for this component to work.</p>\n"
	},
	{
		"name": "Sort.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Sort.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Sort.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Sort.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Sort.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Sort.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Sort.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Sort.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Sort.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Sort.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Sort.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Sort.constructor",
		"comment": "<p>Creates a new Sort component.</p>\n"
	},
	{
		"name": "Tab",
		"comment": "<p>The Tab component renders a bar that allows the end user to select a specific search interface.\nThis component attaches itself to a <code>div</code> element. It is in charge of adding an advanced expression to the outgoing\nquery in order to refine the results.</p>\n<p>The Tab component can also hide and show different parts of the UI. For each individual component in the UI, you can\nspecify whether you wish to include or exclude that component when the user selects a certain Tab.</p>\n<p><strong>Including and Excluding Other HTML Components:</strong></p>\n<p>You can hide or show a specific HTML component based on the currently selected Tab by adding one of the following\nattributes to its tag:</p>\n<ul>\n<li><code>&lt;div data-tab=&quot;foobar&quot;&gt;</code>: Only include this element in the Tab with <code>foobar</code> as its <code>data-id</code>.</li>\n<li><code>&lt;div data-tab-not=&quot;foobar&quot;&gt;</code>: Do not include this element in the Tab with <code>foobar</code> as its <code>data-id</code>.</li>\n<li><code>&lt;div data-tab=&quot;foobar,somethingelse&quot;&gt;</code>: Only include this element in the Tab with <code>foobar</code> as its <code>data-id</code> and in\nthe Tab with <code>somethingelse</code> as its <code>data-id</code>.</li>\n</ul>\n<p><strong>Setting a New Endpoint for a Tab:</strong></p>\n<p>A Tab can use a custom endpoint when performing a query. Of course, you need to make sure that the endpoint exists in\nthe array of Coveo.SearchEndpoint.endpoints (see <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html#endpoints\">SearchEndpoint.endpoints</a>).</p>\n<pre><code>Coveo.SearchEndpoint.endpoints[<span class=\"hljs-string\">\"specialEndpoint\"</span>] = <span class=\"hljs-keyword\">new</span> Coveo.SearchEndpoint({\n    <span class=\"hljs-attr\">restUri</span> : <span class=\"hljs-string\">'https://somewhere.com/rest/search'</span>\n})\n\n[ ... ]\n\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'CoveoTab'</span> data-endpoint=<span class=\"hljs-string\">'specialEndpoint'</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre>"
	},
	{
		"name": "Tab.options",
		"comment": "<p>The options for a Tab</p>\n"
	},
	{
		"name": "Tab.options.caption",
		"comment": "<p>Specifies the caption of the Tab.\nSpecifying a value for this option is necessary for this component to work.</p>\n"
	},
	{
		"name": "Tab.options.constant",
		"comment": "<p>Specifies whether to include the <a href=\"https://coveo.github.io/search-ui/components/tab.html#options.expression\">Tab.options.expression</a> in the constant part of the query.\nThe index specially optimizes the constant part of the query to execute faster. However, you must be careful not\nto include dynamic query expressions, otherwise the cache will lose its efficiency.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Tab.options.dropdownHeaderLabel",
		"comment": "<p>Specifies the label of the button that allows to show the hidden tabs when in responsive mode.\nIf more than one Tab in the search interface specifies a value for this option, then the framework uses the first\noccurrence of the option.</p>\n<p>The default value is <code>&quot;More&quot;</code>.</p>\n"
	},
	{
		"name": "Tab.options.enableDuplicateFiltering",
		"comment": "<p>Specifies whether to filter duplicates in the search results when the user selects the Tab.\nSetting this option to <code>true</code> forces duplicates to not appear in the search results. However, <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>\ncounts still include duplicates, which can be confusing for the end user. This is a limitation of the index.</p>\n<p><strong>Example:</strong></p>\n<blockquote>\n<p>The end user narrows a query down to one document that has a duplicate. If this options is <code>true</code> and the user\nselects the Tab, only one document appears in the search results while the Facet count is still 2.</p>\n</blockquote>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It is also possible to enable duplicate filtering for the entire <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> rather than for a\nsingle Tab (see <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enableduplicatefiltering\">SearchInterface.options.enableDuplicateFiltering</a>).</p>\n</blockquote>\n<p>Default value is <code>false</code>.</p>\n"
	},
	{
		"name": "Tab.options.enableResponsiveMode",
		"comment": "<p>Specifies whether to enable responsive mode for tabs. Responsive mode makes overflowing tabs disappear, instead\nmaking them available using a dropdown button. Responsive tabs are enabled either when tabs overflow or when the\nwidth of the search interface becomes too small.\nDisabling responsive mode for one Tab also disables it for all tabs. Therefore, you only need to set this option\nto <code>false</code> on one Tab to disable responsive mode.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "Tab.options.endpoint",
		"comment": "<p>Specifies the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> to point to when performing queries from within the Tab.\nBy default, the Tab uses the &quot;default&quot; endpoint.</p>\n"
	},
	{
		"name": "Tab.options.expression",
		"comment": "<p>Specifies an advanced expression or filter that the Tab should add to any outgoing query.\n<strong>Example:</strong></p>\n<p><code>@objecttype==Message</code></p>\n<p>Default value is <code>undefined</code> and the Tab applies no additional expression or filter to the query.</p>\n"
	},
	{
		"name": "Tab.options.icon",
		"comment": "<p>Specifies an icon to use for the Tab.</p>\n"
	},
	{
		"name": "Tab.options.id",
		"comment": "<p>Specifies a unique ID for the Tab.\nSpecifying a value for this option is necessary for this component to work.</p>\n"
	},
	{
		"name": "Tab.options.layout",
		"comment": "<p>Specifies the default layout to display when the user selects the Tab (see <a href=\"https://coveo.github.io/search-ui/components/resultlist.html#options.layout\">ResultList.options.layout</a> and\n<a href=\"https://coveo.github.io/search-ui/components/resultlayout.html\">ResultLayout</a>).\nSee the <a href=\"https://coveo.github.io/search-ui/globals.html#validlayout\">ValidLayout</a> type for the list of possible values.</p>\n<p>If not specified, it will default to &#39;list&#39;.</p>\n<p>See also <a href=\"https://developers.coveo.com/x/yQUvAg\">Result Layouts</a>.</p>\n<p>Default value is <code>undefined</code> and the component selects the first available layout.</p>\n"
	},
	{
		"name": "Tab.options.maximumAge",
		"comment": "<p>Specifies the maximum age (in milliseconds) that cached query results can have to still be usable as results\ninstead of performing a new query on the index from within the Tab. The cache is located in the Coveo Search API\n(which resides between the index and the search interface).\nIf cached results that are older than the age you specify in this option are available, a new query will be\nperformed on the index anyhow.</p>\n<p>On high-volume public web sites, specifying a higher value for this option can greatly improve query response\ntime at the cost of result freshness.</p>\n<p><strong>Note:</strong></p>\n<blockquote>\n<p>It is also possible to set a maximum cache age for the entire <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> rather than for a single\nTab (see <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.maximumage\">SearchInterface.options.maximumAge</a>).</p>\n</blockquote>\n<p>Default value is <code>undefined</code> and the Coveo Search API determines the maximum cache age. This is typically\nequivalent to 30 minutes (see <a href=\"https://developers.coveo.com/display/SearchREST/Query+Parameters#QueryParameters-maximumAge\">Query Parameters - maximumAge</a>).</p>\n"
	},
	{
		"name": "Tab.options.pipeline",
		"comment": "<p>Specifies the name of the query pipeline to use for the queries when the Tab is selected.\nYou can specify a value for this option if your index is in a Coveo Cloud organization in which pipelines have\nbeen created (see <a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=128\">Managing Query Pipelines</a>).</p>\n<p>Default value is <code>undefined</code>, which means that pipeline selection conditions defined in the Coveo Cloud\norganization apply.</p>\n"
	},
	{
		"name": "Tab.options.sort",
		"comment": "<p>Specifies the default sort criteria to use when selecting the Tab. A <a href=\"https://coveo.github.io/search-ui/components/sort.html\">Sort</a> component with the same\nparameter needs to be present in the search interface in order for this option to function properly.\n<strong>Examples:</strong></p>\n<ul>\n<li><code>data-sort=&#39;relevancy&#39;</code></li>\n<li><code>data-sort=&#39;date descending&#39;</code></li>\n</ul>\n<p>Default value is <code>undefined</code> and the normal <a href=\"https://coveo.github.io/search-ui/components/sort.html\">Sort</a> component behavior applies.</p>\n"
	},
	{
		"name": "Tab.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Tab.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Tab.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Tab.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Tab.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Tab.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Tab.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Tab.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Tab.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Tab.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Tab.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Tab.constructor",
		"comment": "<p>Creates a new Tab. Binds on buildingQuery event as well as an event on click of the element.</p>\n"
	},
	{
		"name": "TemplateLoader",
		"comment": "<p>The TemplateLoader component can load one result template into another. You should normally declare any reusable\nresult template outside of the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> component. Otherwise, the framework will evaluate the\n<code>data-condition</code> of the reusable result template and possibly render it.\n<strong>Example:</strong></p>\n<pre><code class=\"lang-html\">[ ... ]\n\n<span class=\"hljs-comment\">&lt;!-- A reusable result template. Note that it is important to declare it outside of the ResultList component. --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">'ReusableTemplate'</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoFieldTable'</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@source'</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">'Source'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span> <span class=\"hljs-attr\">data-field</span>=<span class=\"hljs-string\">'@percentScore'</span> <span class=\"hljs-attr\">data-caption</span>=<span class=\"hljs-string\">'Score'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n[ ... ]\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"CoveoResultList\"</span> <span class=\"hljs-attr\">data-wait-animation</span>=<span class=\"hljs-string\">\"fade\"</span> <span class=\"hljs-attr\">data-auto-select-fields-to-include</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span>\n\n  <span class=\"hljs-comment\">&lt;!-- A custom result template for Lithium messages. --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">data-condition</span>=<span class=\"hljs-string\">'raw.filetype == \"lithiummessage\"'</span>&gt;</span><span class=\"javascript\">\n    &lt;div&gt;\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoIcon'</span> <span class=\"hljs-attr\">data-small</span>=<span class=\"hljs-string\">'true'</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoTemplateLoader'</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">'ReusableTemplate'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n  <span class=\"hljs-comment\">&lt;!-- A custom result template for images. --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text/underscore'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'result-template'</span> <span class=\"hljs-attr\">data-condition</span>=<span class=\"hljs-string\">'raw.filetype == \"Image\"'</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoIcon'</span> <span class=\"hljs-attr\">data-small</span>=<span class=\"hljs-string\">'true'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">img</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoResultLink'</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoThumbnail'</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'CoveoTemplateLoader'</span> <span class=\"hljs-attr\">data-template-id</span>=<span class=\"hljs-string\">'ReusableTemplate'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  </span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n[ ... ]\n</code></pre>\n<p>See <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>.</p>\n"
	},
	{
		"name": "TemplateLoader.options",
		"comment": "<p>The possible options for a TemplateLoader.</p>\n"
	},
	{
		"name": "TemplateLoader.options.condition",
		"comment": "<p>Specifies the boolean condition that the result must satisfy in order for the template to load.\n<strong>Example:</strong></p>\n<p><code>data-condition=&#39;percentScore &gt; 80&#39;</code></p>\n"
	},
	{
		"name": "TemplateLoader.options.template",
		"comment": "<p>Specifies how to find the template. This can be either a CSS selector or an HTML <code>id</code> attribute.\n<strong>Examples:</strong></p>\n<ul>\n<li>With a CSS selector: <code>data-template-selector=&#39;.MySelector&#39;</code></li>\n<li>With an HTML <code>id</code>: <code>data-template-id=&#39;MyId&#39;</code></li>\n</ul>\n"
	},
	{
		"name": "TemplateLoader.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "TemplateLoader.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "TemplateLoader.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "TemplateLoader.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "TemplateLoader.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "TemplateLoader.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "TemplateLoader.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "TemplateLoader.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "TemplateLoader.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "TemplateLoader.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "TemplateLoader.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "TemplateLoader.constructor",
		"comment": "<p>Creates a new TemplateLoader.</p>\n"
	},
	{
		"name": "Text",
		"comment": "<p>The Text component embeds itself in a result template to output a simple text value.\nThe only purpose of this component is to make it possible to easily add different text values to result templates\nwhen using the Coveo JavaScript Search Interface Editor (see\n<a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=230\">JavaScript Search Interface Editor</a>).</p>\n<p>If you are not designing a search interface using the Coveo JavaScript Search Interface Editor, using this component\nis unnecessary.</p>\n<p>This component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "Text.options.color",
		"comment": "<p>Specifies the color of the text (set as the <code>color</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.marginBottom",
		"comment": "<p>Specifies the bottom margin of the text (set as the <code>margin-bottom</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.marginLeft",
		"comment": "<p>Specifies the left margin of the text (set as the <code>margin-left</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.marginRight",
		"comment": "<p>Specifies the right margin of the text (set as the <code>margin-right</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.marginTop",
		"comment": "<p>Specifies the top margin of the text (set as the <code>margin-top</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.paddingBottom",
		"comment": "<p>Specifies the bottom padding of the text (set as the <code>padding-bottom</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.paddingLeft",
		"comment": "<p>Specifies the left padding of the text (set as the <code>padding-left</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.paddingRight",
		"comment": "<p>Specifies the right padding of the text (set as the <code>padding-right</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.paddingTop",
		"comment": "<p>Specifies the top padding of the text (set as the <code>padding-top</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.size",
		"comment": "<p>Specifies the size of the text (set as the <code>font-size</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.style",
		"comment": "<p>Specifies the style of the text (set as the <code>font-style</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.textAlign",
		"comment": "<p>Specifies the alignment of the text (set as the <code>text-align</code> CSS property).</p>\n"
	},
	{
		"name": "Text.options.value",
		"comment": "<p>Specifies the localized string value that the component should render.</p>\n"
	},
	{
		"name": "Text.options.weight",
		"comment": "<p>Specifies the weight of the text (set as the <code>font-weight</code> CSS property).</p>\n"
	},
	{
		"name": "Text.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Text.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Text.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Text.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Text.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Text.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Text.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Text.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Text.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Text.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Text.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Text.constructor",
		"comment": "<p>Creates a new Text component.</p>\n"
	},
	{
		"name": "Thumbnail",
		"comment": "<p>The Thumbnail component automatically fetches the thumbnail of the result object and outputs an HTML <code>img</code> tag with\nit.</p>\n"
	},
	{
		"name": "Thumbnail.options",
		"comment": "<p>Options for the Thumbnail</p>\n"
	},
	{
		"name": "Thumbnail.options.clickable",
		"comment": "<p>Specifies whether to create a clickable <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> around the Thumbnail.\nDefault value is <code>false</code>.</p>\n<p>If set to true, you can use the options specified on <a href=\"https://coveo.github.io/search-ui/components/resultlink.html#options\">ResultLink.options</a></p>\n"
	},
	{
		"name": "Thumbnail.options.noThumbnailClass",
		"comment": "<p>Specifies the CSS class to use on the <code>img</code> tag that the Thumbnail component outputs when a result has no\nthumbnail in the index.\nDefault value is <code>coveo-no-thumbnail</code>.</p>\n"
	},
	{
		"name": "Thumbnail.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Thumbnail.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Thumbnail.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Thumbnail.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Thumbnail.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Thumbnail.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Thumbnail.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Thumbnail.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Thumbnail.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Thumbnail.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Thumbnail.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Thumbnail.constructor",
		"comment": "<p>Creates a new Thumbnail component.</p>\n"
	},
	{
		"name": "Triggers",
		"comment": "<p>The Triggers component enables the use of triggers (<code>notify</code>, <code>execute</code>, <code>query</code>, <code>redirect</code>) generated by the Coveo\nSearch API (see <a href=\"https://developers.coveo.com/x/lIM9AQ\">Trigger</a>) in the query pipeline (see\n<a href=\"https://developers.coveo.com/x/KYOy\">Managing the Query Pipeline</a>).</p>\n"
	},
	{
		"name": "Triggers.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Triggers.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Triggers.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Triggers.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Triggers.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Triggers.notifications",
		"comment": "<p>The list of notifications returned by the Search API for the current query (via <code>notify</code> triggers).\nThe Triggers component automatically renders this list visually.</p>\n"
	},
	{
		"name": "Triggers.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Triggers.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Triggers.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Triggers.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Triggers.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Triggers.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Triggers.constructor",
		"comment": "<p>Creates a new Triggers component.</p>\n"
	},
	{
		"name": "YouTubeThumbnail",
		"comment": "<p>The YouTubeThumbnail component automatically fetches the thumbnail of a YouTube video.\nThis component differs from the standard <a href=\"https://coveo.github.io/search-ui/components/thumbnail.html\">Thumbnail</a> component because the thumbnail it outputs is always\nclickable.</p>\n<p>Depending on the component configuration, clicking a YouTube thumbnail can either automatically open a modal box\ncontaining the <code>iframe</code> from YouTube, or open the target URL in the current window (see\n<a href=\"https://coveo.github.io/search-ui/components/youtubethumbnail.html#options.embed\">YouTubeThumbnail.options.embed</a>).</p>\n<p>This component is a result template component (see <a href=\"https://developers.coveo.com/x/aIGfAQ\">Result Templates</a>).</p>\n"
	},
	{
		"name": "YouTubeThumbnail.options.embed",
		"comment": "<p>Specifies whether clicking on the YouTube thumbnail loads the video in a modal box.\nSetting this option to <code>false</code> causes the browser to change its current location to that of the target URL when\nthe end user clicks the YouTube thumbnail.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.options.height",
		"comment": "<p>Specifies the height (in pixels) of the YouTube thumbnail.\nDefault value is <code>112px</code>.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.options.width",
		"comment": "<p>Specifies the width (in pixels) of the YouTube thumbnail.\nDefault value is <code>200px</code>.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "YouTubeThumbnail.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "YouTubeThumbnail.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "YouTubeThumbnail.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n"
	},
	{
		"name": "AdvancedSearchEvents",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.</p>\n"
	},
	{
		"name": "AdvancedSearchEvents.buildingAdvancedSearch",
		"comment": "<p>Triggered when the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component is being built.\nAllows external code to add new sections in the <strong>Advanced Search</strong> panel.</p>\n<p>All bound handlers receive <a href=\"https://coveo.github.io/search-ui/interfaces/ibuildingadvancedsearcheventargs.html\">IBuildingAdvancedSearchEventArgs</a> as an argument</p>\n"
	},
	{
		"name": "AnalyticsEvents",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to analytics.</p>\n"
	},
	{
		"name": "AnalyticsEvents.changeAnalyticsCustomData",
		"comment": "<p>Triggered whenever an analytics event is logged. This event allows external code to modify the analytics data.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ichangeanalyticscustomdataeventargs.html\">IChangeAnalyticsCustomDataEventArgs</a> as an argument.</p>\n<p>The string value is <code>changeAnalyticsCustomData</code>.</p>\n"
	},
	{
		"name": "BaseComponent",
		"comment": "<p>Every component in the framework ultimately inherits from this base component class.</p>\n"
	},
	{
		"name": "BaseComponent.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "BaseComponent.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "BaseComponent.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "BreadcrumbEvents",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to <a href=\"https://coveo.github.io/search-ui/components/breadcrumb.html\">Breadcrumb</a>.</p>\n"
	},
	{
		"name": "BreadcrumbEvents.clearBreadcrumb",
		"comment": "<p>Triggered when the user clicks the Clear All button in the breadcrumb. When this event is raised, every filter that is included in the breadcrumb should be removed.\nThis event does not provide custom event data.</p>\n"
	},
	{
		"name": "BreadcrumbEvents.populateBreadcrumb",
		"comment": "<p>Triggered when the breadcrumb needs to update its content. External code can use this event to provide bits of HTML that should be included in the breadcrumb.\nAll handlers bound to this event will receive a <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulatebreadcrumbeventargs.html\">IPopulateBreadcrumbEventArgs</a> as an argument.</p>\n"
	},
	{
		"name": "CardOverlayEvents",
		"comment": "<p>The CardOverlayEvents class contains string definitions for all events related to the <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html\">CardOverlay</a> component.</p>\n"
	},
	{
		"name": "CardOverlayEvents.closeCardOverlay",
		"comment": "<p>Closing a <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html\">CardOverlay</a> component triggers this event (see <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html#closeoverlay\">CardOverlay.closeOverlay</a>).</p>\n"
	},
	{
		"name": "CardOverlayEvents.openCardOverlay",
		"comment": "<p>Opening a <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html\">CardOverlay</a> component triggers this event (see <a href=\"https://coveo.github.io/search-ui/components/cardoverlay.html#openoverlay\">CardOverlay.openOverlay</a>).</p>\n"
	},
	{
		"name": "Cell",
		"comment": "<p>Represent a single cell of data in the <a href=\"https://coveo.github.io/search-ui/components/matrix.html\">Matrix</a> component.</p>\n"
	},
	{
		"name": "Component",
		"comment": "<p>The base class for every component in the framework.</p>\n"
	},
	{
		"name": "Component.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "Component.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "Component.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Component.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Component.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Component.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "Component.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "Component.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "Component.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "Component.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "Component.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Component.constructor",
		"comment": "<p>Create a new Component. Resolve all <a href=\"https://coveo.github.io/search-ui/interfaces/icomponentbindings.html\">IComponentBindings</a> if not provided.<br/>\nCreate a new Logger for this component.\nAttach the component to the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/></p>\n"
	},
	{
		"name": "ComponentEvents",
		"comment": "<p>Used by the various Coveo Component to trigger and bind event.<br/>\nIt adds a small logic to execute handler or triggers only when the component is &quot;enabled&quot;.<br/>\nA component is disabled by calling {Component.disable}<br/>\nTypically, a component is disabled when it is not active in the current {Tab}.<br/>\nIt can also be disabled by external code.<br/>\nThe class serves as a way to not execute handler on component that are invisible and inactive in the query.</p>\n"
	},
	{
		"name": "ComponentEvents.constructor",
		"comment": "<p>Create a new <code>ComponentEvents</code> for the given <a href=\"https://coveo.github.io/search-ui/classes/component.html\">Component</a>.</p>\n"
	},
	{
		"name": "ComponentOptions",
		"comment": "<p>This static class is used to initialize component options.\nTypically, each <a href=\"https://coveo.github.io/search-ui/classes/component.html\">Component</a> that exposes a set of options will contains a static <code>options</code> property,</p>\n<p>This property will &quot;build&quot; the options based on their type.</p>\n"
	},
	{
		"name": "DatePicker",
		"comment": "<p>This class will create a date picker meant to be used inside the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.\nIt can be, more specifically, used for external code using the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n"
	},
	{
		"name": "DatePicker.constructor",
		"comment": "<p>Create a new date picker.</p>\n"
	},
	{
		"name": "Dom",
		"comment": "<p>This is essentially an helper class for dom manipulation.<br/>\nThis is intended to provide some basic functionality normally offered by jQuery.<br/>\nTo minimize the multiple jQuery conflict we have while integrating in various system, we implemented the very small subset that the framework needs.<br/>\nSee <a href=\"https://coveo.github.io/search-ui/globals.html#__\">$$</a>, which is a function that wraps this class constructor, for less verbose code.</p>\n"
	},
	{
		"name": "Dom.constructor",
		"comment": "<p>Create a new Dom object with the given HTMLElement</p>\n"
	},
	{
		"name": "Dropdown",
		"comment": "<p>This class will create a dropdown meant to be used inside the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.\nIt can be, more specifically, used for external code using the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n"
	},
	{
		"name": "Dropdown.constructor",
		"comment": "<p>Create a new dropdown.</p>\n"
	},
	{
		"name": "EndpointCaller",
		"comment": "<p>This class is in charge of calling an endpoint (eg: a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a>).\nThis means it&#39;s only uses to execute an XMLHttpRequest (for example), massage the response and check if there are errors.</p>\n<p>Will execute the call and return a Promise.</p>\n<p>Call using one of those options :</p>\n<ul>\n<li>XMLHttpRequest for recent browser that support CORS, or if the endpoint is on the same origin.</li>\n<li>XDomainRequest for older IE browser that do not support CORS.</li>\n<li>Jsonp if all else fails, or is explicitly enabled.</li>\n</ul>\n"
	},
	{
		"name": "EndpointCaller.useJsonp",
		"comment": "<p>Set this property to true to enable Jsonp call to the endpoint.<br/>\nBe aware that jsonp is &quot;easier&quot; to setup endpoint wise, but has a lot of drawback and limitation for the client code.<br/>\nDefault to false.</p>\n"
	},
	{
		"name": "EndpointCaller.constructor",
		"comment": "<p>Create a new EndpointCaller.</p>\n"
	},
	{
		"name": "ExpressionBuilder",
		"comment": "<p>An <code>ExpressionBuilder</code> that is mostly used by the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a>.<br/>\nIt is used to build a single query expression.<br/>\nIt allows combining multiple expression parts into a single string and provides utilities to generate common expression parts.</p>\n"
	},
	{
		"name": "FacetSearch",
		"comment": "<p>Used by the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component to render and handle the facet search part of each facet.</p>\n"
	},
	{
		"name": "FacetSettings",
		"comment": "<p>Handle the rendering of the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> settings menu (typically the ... in the facet header).</p>\n"
	},
	{
		"name": "FacetValue",
		"comment": "<p>A class which holds information and operation available on a single facet value returned by a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.<br/>\nThis class is used extensibely in the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component.</p>\n"
	},
	{
		"name": "FoldingForThread",
		"comment": "<p>This component inherits from the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.\nFolding conversations and threads requires different processing.\nWhen you need to fold children under a parent item, use this component.<br/>\n<b>This component works well with Chatter and Lithium.</b></p>\n"
	},
	{
		"name": "FoldingForThread.options",
		"comment": "<p>The options for the component</p>\n"
	},
	{
		"name": "FoldingForThread.options.childField",
		"comment": "<p>Specifies the field that determines whether a given result is a child of another top result.\nDefault value is <code>@topparentid</code>.</p>\n"
	},
	{
		"name": "FoldingForThread.options.enableExpand",
		"comment": "<p>Specifies whether to add a callback function on the top result, allowing to make an additional query to load all\nconversations of a given thread.\nConcretely, the <a href=\"https://coveo.github.io/search-ui/components/resultfolding.html\">ResultFolding</a> component uses this for its <strong>Show More</strong> link.</p>\n<p>See also <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.expandexpression\">Folding.options.expandExpression</a> and <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.maximumexpandedresults\">Folding.options.maximumExpandedResults</a>.</p>\n<p>Default value is <code>true</code>.</p>\n"
	},
	{
		"name": "FoldingForThread.options.expandExpression",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a> is <code>true</code>, specifies a custom constant expression to send when querying\nthe expanded results.\nDefault value is <code>undefined</code>.</p>\n"
	},
	{
		"name": "FoldingForThread.options.field",
		"comment": "<p>Specifies the name of the field on which to do the folding.\nSpecifying a value for this options is required for this component to work.</p>\n"
	},
	{
		"name": "FoldingForThread.options.getMoreResults",
		"comment": "<p>Specifies the function that manages the folding of all results.\nDefault value (<code>Coveo.Folding.defaultGetMoreResults</code>) is:</p>\n<pre><code class=\"lang-javascript\">Coveo.Folding.defaultGetMoreResults = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">results</span>) </span>{\n   <span class=\"hljs-comment\">// The results are flat, just do the folding.</span>\n   <span class=\"hljs-keyword\">return</span> Coveo.Folding.foldWithParent(results);\n}\n</code></pre>\n"
	},
	{
		"name": "FoldingForThread.options.getResult",
		"comment": "<p>Specifies the function that manages the individual folding of each result.\nDefault value (which is implemented in Coveo.Folding.defaultGetResult) is:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> results = result.childResults || [];\n<span class=\"hljs-comment\">// Add the top result at the top of the list.</span>\nresults.unshift(result);\n<span class=\"hljs-comment\">// Empty childResults just to clean it.</span>\nresult.childResults = [];\n<span class=\"hljs-comment\">// Fold those results.</span>\nresults = Coveo.Folding.foldWithParent(results);\n<span class=\"hljs-comment\">// The first result is the top one.</span>\n<span class=\"hljs-keyword\">var</span> topResult = results.shift();\n<span class=\"hljs-comment\">// All other results are childResults.</span>\ntopResult.childResults = results;\n<span class=\"hljs-keyword\">return</span> topResult;\n</code></pre>\n<p>You can pre-process all the result with this option in the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> call of your search interface:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// You can call the init script using \"pure\" JavaScript:</span>\nCoveo.init(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#search'</span>), {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n})\n\n<span class=\"hljs-comment\">// Or you can call the init script using the jQuery extension:</span>\nCoveo.$(<span class=\"hljs-string\">'#search'</span>).coveo(<span class=\"hljs-string\">'init'</span>, {\n   <span class=\"hljs-attr\">Folding</span>: {\n     <span class=\"hljs-attr\">getResult</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">result</span>) </span>{\n       result = Coveo.Folding.defaultGetResult(result);\n       <span class=\"hljs-comment\">// Your code here</span>\n     }\n   }\n});\n</code></pre>\n"
	},
	{
		"name": "FoldingForThread.options.maximumExpandedResults",
		"comment": "<p>If <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a> is <code>true</code>, specifies the maximum number of results to load when\nexpanding.\nDefault value is <code>100</code>. Minimum value is <code>1</code>.</p>\n"
	},
	{
		"name": "FoldingForThread.options.parentField",
		"comment": "<p>Specifies the field that determines whether a given result is a top result containing other child results.\nDefault value is <code>@containsattachment</code>.</p>\n"
	},
	{
		"name": "FoldingForThread.options.range",
		"comment": "<p>Specifies the number of child results to fold.\n<strong>Example:</strong></p>\n<blockquote>\n<p>For an email thread with a total of 20 messages, using the default value of <code>2</code> means that the component loads\nup to a maximum of 2 child messages under the original message, unless the end user expands the entire\nconversation using the <strong>Show More</strong> link (see <a href=\"https://coveo.github.io/search-ui/components/folding.html#options.enableexpand\">Folding.options.enableExpand</a>).</p>\n</blockquote>\n<p>Default value is <code>2</code>. Minimum value is <code>0</code>.</p>\n"
	},
	{
		"name": "FoldingForThread.options.rearrange",
		"comment": "<p>Specifies the top result and its related child results, following the sort criteria format (<code>date ascending</code>,\n<code>@somefield ascending</code>, etc.)\n<strong>Example</strong></p>\n<blockquote>\n<p>If you specify <code>date descending</code>, the Folding component re-arranges an email conversation so that the newest\nemail is always the top result. Doing the opposite (<code>date ascending</code>) would always make the original email the\ntop result, since it is also the oldest.</p>\n</blockquote>\n<p>Default value is <code>none</code>, which means that the component displays the results in the order that they were returned\nby the index.</p>\n"
	},
	{
		"name": "FoldingForThread.bind",
		"comment": "<p>Allows the component to bind events and execute them only when it is enabled.</p>\n"
	},
	{
		"name": "FoldingForThread.componentOptionsModel",
		"comment": "<p>Contains the state of options for differents component. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "FoldingForThread.componentStateModel",
		"comment": "<p>Contains the state of different component (enabled vs disabled). Allows to get/set values. Trigger component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FoldingForThread.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "FoldingForThread.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "FoldingForThread.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "FoldingForThread.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Trigger query state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "FoldingForThread.root",
		"comment": "<p>A reference to the root HTMLElement (the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>).</p>\n"
	},
	{
		"name": "FoldingForThread.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "FoldingForThread.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "FoldingForThread.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "FoldingForThread.constructor",
		"comment": "<p>Create a new FoldingForThread component</p>\n"
	},
	{
		"name": "HistoryController",
		"comment": "<p>This component is instantiated automatically by the framework on the root if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.<br/>\nWhen the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> option is set to true, this component is instantiated.<br/>\nIt&#39;s only job is to apply changes in the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> to the hash in the URL, and vice versa.<br/>\nThis component does <em>not</em> hold the state of the interface, it only represent it in the URL.</p>\n"
	},
	{
		"name": "HistoryController.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "HistoryController.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "HistoryController.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "HistoryController.constructor",
		"comment": "<p>Create a new history controller</p>\n"
	},
	{
		"name": "Initialization",
		"comment": "<p>The main purpose of this class is to initialize the framework (a.k.a the code executed when calling <code>Coveo.init</code>).<br/>\nIt&#39;s also in charge or registering the available components, as well as the method that we expost to the global Coveo scope.<br/>\nFor example, the <code>Coveo.executeQuery</code> function will be registed in this class by the <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html\">QueryController</a>.</p>\n"
	},
	{
		"name": "InitializationEvents",
		"comment": "<p>This static class is there to contain the different string definitions for all the events related to initialization.\nNote that these events will only be triggered when the <a href=\"https://coveo.github.io/search-ui/globals.html#init\">init</a> function is called.</p>\n<p>This means these events are normally called only once when the search interface is initialized.</p>\n"
	},
	{
		"name": "InitializationEvents.afterComponentsInitialization",
		"comment": "<p>Triggered after the components are initialized (eg: After the constructor of each component is executed)\nbut before their state is set from the hash portion of the URL (e.g., <a href=\"http://mysearchinterface#q=myQuery\">http://mysearchinterface#q=myQuery</a> ).\nThis is also before the first query is launched (if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.autotriggerquery\">SearchInterface.options.autoTriggerQuery</a> is <code>true</code>).</p>\n<p>The string value is <code>afterComponentsInitialization</code>.</p>\n"
	},
	{
		"name": "InitializationEvents.afterInitialization",
		"comment": "<p>Triggered right after the UI is fully initialized.\nConcretely this means that the constructor of each component has been executed, and that the state coming for the URL (e.g., <a href=\"http://mysearchinterface#q=myquery\">http://mysearchinterface#q=myquery</a>) has been applied.</p>\n<p>It is triggered <em>before</em> the first query is launched, and if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.autotriggerquery\">SearchInterface.options.autoTriggerQuery</a> is <code>true</code>.</p>\n<p>The string value is <code>afterInitialization</code>.</p>\n"
	},
	{
		"name": "InitializationEvents.beforeInitialization",
		"comment": "<p>This event is triggered right before each components inside the search interface get initialized (eg: Before the constructor of each component is executed).\nThe string value is <code>beforeInitialization</code>.</p>\n"
	},
	{
		"name": "InitializationEvents.nuke",
		"comment": "<p>This is triggered when the UI needs to be dynamically removed so that components can unbind any internal handlers they might have set globally on the window or the document.\nAfter this event has been executed, the search interface can be dynamically removed and all handlers can be considered cleanly removed.</p>\n<p>The string value is <code>nuke</code>.</p>\n"
	},
	{
		"name": "InitializationEvents.restoreHistoryState",
		"comment": "<p>Triggered right before the state from the URL (e.g., <a href=\"http://mysearchinterface#q=myQuery\">http://mysearchinterface#q=myQuery</a> ) gets applied in the interface.\nThis will typically only be useful if the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> is set to <code>true</code>.</p>\n<p>The string value is <code>restoreHistoryState</code>.</p>\n"
	},
	{
		"name": "LocalStorageHistoryController",
		"comment": "<p>This component acts like the <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a> excepts that is saves the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> in the local storage.<br/>\nThis will not allow &#39;back&#39; and &#39;forward&#39; navigation in the history, like the standard <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a> allows. Instead, it load the query state only on page load.<br/>\nTo enable this component, you should set the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.uselocalstorageforhistory\">SearchInterface.options.useLocalStorageForHistory</a> as well as the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#options.enablehistory\">SearchInterface.options.enableHistory</a> options to true.</p>\n"
	},
	{
		"name": "LocalStorageHistoryController.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "LocalStorageHistoryController.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "LocalStorageHistoryController.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "LocalStorageHistoryController.constructor",
		"comment": "<p>Create a new LocalStorageHistoryController instance</p>\n"
	},
	{
		"name": "Model",
		"comment": "<p>A <em>model</em> is a key-value store that triggers various JavaScript events when any value associated to one of its key changes.<br/>\nThis class is meant to be extended, one of the most important extension being the <a href=\"https://coveo.github.io/search-ui/classes/querystatemodel.html\">QueryStateModel</a> class.<br/>\nComponents set values in this key-value store and listen to triggered events in order to update themselves accordingly.<br/></p>\n"
	},
	{
		"name": "Model.attributes",
		"comment": "<p>The attributes contained in this model.</br>\nNormally, you should not set attributes directly on this property, as this would prevent required events from being triggered.</p>\n"
	},
	{
		"name": "Model.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "Model.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "Model.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "Model.eventTypes",
		"comment": "<p>The event types that can be triggered:<br/>\n• <code>preprocess</code>: triggered before a value is set on an attribute. This allows the value to be modified before it is set.<br/>\n• <code>changeOne</code>: triggered when a single value changes.</br>\n• <code>change</code>: triggered when one or many values change.</br>\n• <code>reset</code>: triggered when all attributes are reset to their default values. </br>\n• <code>all</code>: triggered after the <code>change</code> event.</br></p>\n"
	},
	{
		"name": "NumericSpinner",
		"comment": "<p>This class will create a numeric spinner meant to be used inside the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.\nIt can be, more specifically, used for external code using the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n"
	},
	{
		"name": "NumericSpinner.constructor",
		"comment": "<p>Create a new numeric spinner.</p>\n"
	},
	{
		"name": "QueryBuilder",
		"comment": "<p>The QueryBuilder is used to build a <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a> that will be able to be executed using the Search API.<br/>\nThe class exposes several members and methods that help components and external code to build up the final query that is sent to the Search API.<br/></p>\n"
	},
	{
		"name": "QueryBuilder.actionsHistory",
		"comment": "<p>The actions history represents the past actions a user made and is used by the Coveo Machine Learning service to suggest recommendations.\nIt is generated by the page view script (<a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>).</p>\n"
	},
	{
		"name": "QueryBuilder.advancedExpression",
		"comment": "<p>Used to build the advanced part of the query expression.<br/>\nThis part is typically formed of filter expressions generated by components such as facets, external code, etc.</p>\n"
	},
	{
		"name": "QueryBuilder.childField",
		"comment": "<p>Specifies the childField when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>).</p>\n"
	},
	{
		"name": "QueryBuilder.constantExpression",
		"comment": "<p>Used to build the advanced part of the query expression.<br/>\nThis part is similar to <code>advancedExpression</code>, but its content is interpreted as a constant expression by the index and it takes advantage of special caching features.</p>\n"
	},
	{
		"name": "QueryBuilder.context",
		"comment": "<p>The context is a map of key_value that can be used in the Query pipeline in the Coveo platform.<br/></p>\n"
	},
	{
		"name": "QueryBuilder.disableQuerySyntax",
		"comment": "<p>Whether to disable the special query syntax such as field references for the basic query expression (parameter q).\nIt is equivalent to a No syntax block applied to the basic query expression.\nIf not specified, the parameter defaults to false.</p>\n"
	},
	{
		"name": "QueryBuilder.disjunctionExpression",
		"comment": "<p>Used to build the disjunctive part of the query expression.<br/>\nWhen present, this part is evaluated separately from the other expressions and the matching results are merged to those matching expressions, <code>advancedExpression</code> and <code>constantExpression</code>.<br/>\nThe final boolean expression for the query is thus (basic advanced constant) OR (disjunction).</p>\n"
	},
	{
		"name": "QueryBuilder.enableCollaborativeRating",
		"comment": "<p>Whether the index should take collaborative rating in account when ranking result (see : <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a>).</p>\n"
	},
	{
		"name": "QueryBuilder.enableDebug",
		"comment": "<p>Whether to enable debug info on the query.<br/>\nThis will return additional information on the resulting JSON response from the Search API.<br/>\nMostly: execution report (a detailed breakdown of the parsed and executed query).</p>\n"
	},
	{
		"name": "QueryBuilder.enableDidYouMean",
		"comment": "<p>Whether to enable query corrections on this query (see <a href=\"https://coveo.github.io/search-ui/components/didyoumean.html\">DidYouMean</a>).</p>\n"
	},
	{
		"name": "QueryBuilder.enableLowercaseOperators",
		"comment": "<p>Whether to enable the support for operator in lowercase (AND OR -&gt; and or).</p>\n"
	},
	{
		"name": "QueryBuilder.enablePartialMatch",
		"comment": "<p>Whether to enable partial matching of the basic expression keywords.<br/>\nBy activating this, when the basic expression contains at least <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchkeywords\">IQuery.partialMatchKeywords</a>, documents containing only the number of keywords specified by <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchthreshold\">IQuery.partialMatchThreshold</a> will also match the query.<br/>\nWithout this option, documents are required to contain all the keywords in order to match the query.<br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "QueryBuilder.enableQuestionMarks",
		"comment": "<p>Whether to enable question marks with wildcards.<br/>\nThis enables using the question mark ? character within wildcard expressions.</p>\n"
	},
	{
		"name": "QueryBuilder.enableWildcards",
		"comment": "<p>Whether to enable wildcards on the basic expression keywords.<br/>\nThis enables the wildcard features of the index. Coveo Platform will expand keywords containing wildcard characters to the possible matching keywords to broaden the query.<br/>\n(see : <a href=\"https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm\">https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm</a>).<br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "QueryBuilder.excerptLength",
		"comment": "<p>This specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.<br/>\nThe index includes the top most interesting sentences (in the order they appear in the document) that fit in the specified number of characters.<br/>\nWhen not specified, the default value is 200.</p>\n"
	},
	{
		"name": "QueryBuilder.expression",
		"comment": "<p>Used to build the basic part of the query expression.<br/>\nThis part typically consists of user-entered content such as query keywords, etc.</p>\n"
	},
	{
		"name": "QueryBuilder.filterField",
		"comment": "<p>This specifies a field on which <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> should be performed.<br/>\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.<br/>\nIt&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\n"
	},
	{
		"name": "QueryBuilder.filterFieldRange",
		"comment": "<p>Number of results that should be folded, using the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#filterfield\">IQuery.filterField</a>.</p>\n"
	},
	{
		"name": "QueryBuilder.firstResult",
		"comment": "<p>This is the 0-based index of the first result to return.<br/>\nIf not specified, this parameter defaults to 0.</p>\n"
	},
	{
		"name": "QueryBuilder.groupByRequests",
		"comment": "<p>This specifies an array of Group By operations that can be performed on the query results to extract facets.</p>\n"
	},
	{
		"name": "QueryBuilder.longQueryExpression",
		"comment": "<p>The contextual text.<br/>\nThis is the contextual text part of the query. It uses the Coveo Machine Learning service to pick key keywords from the text and add them to the basic expression.\nThis field is mainly used to pass context such a case description, long textual query or any other form of text that might help in\nrefining the query.</p>\n"
	},
	{
		"name": "QueryBuilder.maximumAge",
		"comment": "<p>The maximum age for cached query results, in milliseconds.<br/>\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.<br/>\nOtherwise, the query will be sent to the index.</p>\n"
	},
	{
		"name": "QueryBuilder.numberOfResults",
		"comment": "<p>This is the number of results to return, starting from <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#firstresult\">IQuery.firstResult</a>.<br/>\nIf not specified, this parameter defaults to 10.</p>\n"
	},
	{
		"name": "QueryBuilder.parentField",
		"comment": "<p>Specifies the <code>parentField</code> when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>).</p>\n"
	},
	{
		"name": "QueryBuilder.partialMatchKeywords",
		"comment": "<p>The minimum number of keywords needed to activate partial match.<br/>\nThis specifies the minimum number of keywords needed for the partial match feature to activate.<br/>\nIf the basic expression contains less than this number of keywords, no transformation is applied on the query.<br/>\nIf not specified, this parameter defaults to 5.</p>\n"
	},
	{
		"name": "QueryBuilder.partialMatchThreshold",
		"comment": "<p>The threshold to use for matching documents when partial match is enabled.<br/>\nThis specifies the minimum number of query keywords that a document must contain when partial match is enabled. This value can either be an absolute number or a percentage value based on the total number of keywords.<br/>\nIf not specified, this parameter defaults to 50%.</p>\n"
	},
	{
		"name": "QueryBuilder.pipeline",
		"comment": "<p>Name of the query pipeline to use.<br/>\nThis specifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\n"
	},
	{
		"name": "QueryBuilder.queryFunctions",
		"comment": "<p>This specifies an array of Query Function operation that will be executed on the results.</p>\n"
	},
	{
		"name": "QueryBuilder.rankingFunctions",
		"comment": "<p>This specifies an array of Ranking Function operations that will be executed on the results.</p>\n"
	},
	{
		"name": "QueryBuilder.recommendation",
		"comment": "<p>This is the ID of the recommendation interface that generated the query.</p>\n"
	},
	{
		"name": "QueryBuilder.searchHub",
		"comment": "<p>The hub value set from the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component.<br/>\nUsed for analytics reporting in the Coveo platform.</p>\n"
	},
	{
		"name": "QueryBuilder.sortCriteria",
		"comment": "<p>This specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to relevancy.<br/>\nPossible values are : <br/>\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\n-- dateascending / datedescending Sort using the value of the <code>@date</code> field, which is typically the last modification date of an item in the index.<br/>\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using <code>relevancy</code> except that automatic weights based on keyword proximity etc, are not computed.<br/>\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\n-- @field ascending / @field descending Sort using the value of a custom field.</p>\n"
	},
	{
		"name": "QueryBuilder.tab",
		"comment": "<p>The tab value set from the <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component.</p>\n"
	},
	{
		"name": "QueryController",
		"comment": "<p>This class is automatically instantiated and bound to the root of your search interface when you initialize the framework.<br/>\nIt is essentially a singleton that wraps the access to the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> endpoint to execute query, and is in charge of triggering the different query events.<br/>\nThis is what every component of the framework uses internally to execute query or access the endpoint.<br/>\nWhen calling <code>Coveo.executeQuery</code> this class is used.</p>\n"
	},
	{
		"name": "QueryController.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "QueryController.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "QueryController.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QueryController.constructor",
		"comment": "<p>Create a new query controller</p>\n"
	},
	{
		"name": "QueryEvents",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to query.\nNote that these events will only be triggered when the <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html#executequery\">QueryController.executeQuery</a> method is used, either directly or by using <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html#executequery\">executeQuery</a></p>\n"
	},
	{
		"name": "QueryEvents.buildingQuery",
		"comment": "<p>Triggered when the query is being built.\nThis is typically where all components will contribute their part to the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a> using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a>.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ibuildingqueryeventargs.html\">IBuildingQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>buildingQuery</code>.</p>\n"
	},
	{
		"name": "QueryEvents.deferredQuerySuccess",
		"comment": "<p>Triggered after the main query success event has finished executing.\nThis is typically where facets will process the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyresult.html\">IGroupByResult</a> and render themselves.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iquerysuccesseventargs.html\">IQuerySuccessEventArgs</a> as an argument.</p>\n<p>The string value is <code>deferredQuerySuccess</code>.</p>\n"
	},
	{
		"name": "QueryEvents.doneBuildingQuery",
		"comment": "<p>Triggered when the query is done being built.\nThis is typically where the facet will add it&#39;s <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a> to the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html\">IQuery</a>.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/idonebuildingqueryeventargs.html\">IDoneBuildingQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>doneBuildingQuery</code>.</p>\n"
	},
	{
		"name": "QueryEvents.duringFetchMoreQuery",
		"comment": "<p>Triggered when more results are being fetched on the Search API (think : infinite scrolling, or pager).\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iduringqueryeventargs.html\">IDuringQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>duringFetchMoreQuery</code>.</p>\n"
	},
	{
		"name": "QueryEvents.duringQuery",
		"comment": "<p>Triggered when the query is being executed on the Search API.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iduringqueryeventargs.html\">IDuringQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>duringQuery</code>.</p>\n"
	},
	{
		"name": "QueryEvents.fetchMoreSuccess",
		"comment": "<p>Triggered when a more results were successfully returned from the Search API. (think : infinite scrolling, or pager).\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ifetchmoresuccesseventargs.html\">IFetchMoreSuccessEventArgs</a> as an argument.</p>\n<p>The string value is <code>fetchMoreSuccess</code>.</p>\n"
	},
	{
		"name": "QueryEvents.newQuery",
		"comment": "<p>Triggered when a new query is launched.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/inewqueryeventargs.html\">INewQueryEventArgs</a> as an argument.</p>\n<p>The string value is <code>newQuery</code>.</p>\n"
	},
	{
		"name": "QueryEvents.noResults",
		"comment": "<p>Triggered when there is no result for a particular query.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/inoresultseventargs.html\">INoResultsEventArgs</a> as an argument.</p>\n<p>The string value is <code>noResults</code>.</p>\n"
	},
	{
		"name": "QueryEvents.preprocessMoreResults",
		"comment": "<p>Triggered before the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#fetchmoresuccess\">QueryEvents.fetchMoreSuccess</a> event.\nThis allows external code to modify the results before rendering them.</p>\n<p>For example, the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component might use this event to construct a coherent parent child relationship between query results.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ipreprocessresultseventargs.html\">IPreprocessResultsEventArgs</a> as an argument.</p>\n<p>The string value is <code>preprocessMoreResults</code>.</p>\n"
	},
	{
		"name": "QueryEvents.preprocessResults",
		"comment": "<p>Triggered before the <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a> event.\nThis allows external code to modify the results before rendering them.</p>\n<p>For example, the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component might use this event to construct a coherent parent child relationship between query results.</p>\n<p>All bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/ipreprocessresultseventargs.html\">IPreprocessResultsEventArgs</a> as an argument.</p>\n<p>The string value is <code>preprocessResults</code>.</p>\n"
	},
	{
		"name": "QueryEvents.queryError",
		"comment": "<p>Triggered when there was an error executing a query on the Search API.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iqueryerroreventargs.html\">IQueryErrorEventArgs</a> as an argument.</p>\n<p>The string value is <code>queryError</code>.</p>\n"
	},
	{
		"name": "QueryEvents.querySuccess",
		"comment": "<p>Triggered when a query successfully returns from the Search API.\nAll bound handlers will receive <a href=\"https://coveo.github.io/search-ui/interfaces/iquerysuccesseventargs.html\">IQuerySuccessEventArgs</a> as an argument.</p>\n<p>The string value is <code>querySuccess</code>.</p>\n"
	},
	{
		"name": "QueryStateModel",
		"comment": "<p>The QueryStateModel is a key-&gt;value store of the state of every component that can affect a query.<br/>\nComponent set values in this key -&gt; value store, and listen to event triggered to react accordingly.<br/>\nFor example, when a query is launched, the searchbox will set the &#39;q&#39; attribute, the pager will set the &#39;first&#39; attribute, etc.<br/>\nAt the same time, this class will trigger the associated event when a value is modified.<br/>\neg : The user change the content of the searchbox, and submit a query. This will trigger the following events :<br/>\n-- state:change:q (because the value of &#39;q&#39; changed)</br>\n-- state:change (because at least one value changed in the query state)<br/>\nComponent or external code could hook handler on those events : document.addEventListener(&#39;state:change:q&#39;, handler);<br/>\nSee : <a href=\"https://coveo.github.io/search-ui/classes/model.html\">Model</a>, as all the relevant method are exposed in the base class.<br/>\nOptionally, the state can be persisted to the query string to allow browser history management : See <a href=\"https://coveo.github.io/search-ui/classes/historycontroller.html\">HistoryController</a></p>\n"
	},
	{
		"name": "QueryStateModel.attributes",
		"comment": "<p>The attributes contained in this model.</br>\nNormally, you should not set attributes directly on this property, as this would prevent required events from being triggered.</p>\n"
	},
	{
		"name": "QueryStateModel.disabled",
		"comment": "<p>A disabled component will not participate in the query, or listen to <a href=\"https://coveo.github.io/search-ui/classes/componentevents.html\">ComponentEvents</a>.</p>\n"
	},
	{
		"name": "QueryStateModel.logger",
		"comment": "<p>Allows component to log in the dev console.</p>\n"
	},
	{
		"name": "QueryStateModel.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "QueryStateModel.eventTypes",
		"comment": "<p>The event types that can be triggered:<br/>\n• <code>preprocess</code>: triggered before a value is set on an attribute. This allows the value to be modified before it is set.<br/>\n• <code>changeOne</code>: triggered when a single value changes.</br>\n• <code>change</code>: triggered when one or many values change.</br>\n• <code>reset</code>: triggered when all attributes are reset to their default values. </br>\n• <code>all</code>: triggered after the <code>change</code> event.</br></p>\n"
	},
	{
		"name": "QueryStateModel.constructor",
		"comment": "<p>Create a new QueryState</p>\n"
	},
	{
		"name": "QuerySummaryEvents",
		"comment": "<p>This static class is there to contains the different string definition for all the events related to the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.</p>\n"
	},
	{
		"name": "QuerySummaryEvents.cancelLastAction",
		"comment": "<p>Triggered when the last action is being cancelled by the query summary component\nAllows external code to revert their last action.</p>\n"
	},
	{
		"name": "RadioButton",
		"comment": "<p>This class will create a radio button meant to be used inside the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.\nIt can be, more specifically, used for external code using the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n"
	},
	{
		"name": "RadioButton.constructor",
		"comment": "<p>Create a new Radio button.</p>\n"
	},
	{
		"name": "ResponsiveComponents",
		"comment": "<p>This class serves as a way to get and set the different screen size breakpoints for the interface.\nBy settings those, you can impact, amongst other, the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a>, <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> or <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> behaviour.</p>\n<p>For example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> components of your interface will switch to a dropdown menu when the screen size reaches 800px or less.</p>\n<p>You could modify this value using this calls</p>\n<p>Normally, you would interact with this class using the instance bound to <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html#responsivecomponents\">SearchInterface.responsiveComponents</a></p>\n"
	},
	{
		"name": "SearchEndpoint",
		"comment": "<p>A search endpoint allows to execute various actions against the Coveo Search API and index.<br/>\nFor example, you can search, list field values, get the quickview content for a document, etc.<br/>\nAny actions that you execute using this class will not trigger a full query cycle for the Coveo components.<br/>\nThis is because this class will not trigger any query events directly.<br/>\nIf you wish to execute a query that all components will react to (and trigger the corresponding query events), use the <a href=\"https://coveo.github.io/search-ui/classes/querycontroller.html\">QueryController</a></p>\n"
	},
	{
		"name": "SearchEndpoint.endpoints",
		"comment": "<p>A map of all the initialized endpoint.<br/>\neg : Coveo.SearchEndpoint.endpoints[&#39;default&#39;] will return the default endpoint that was created at initialization</p>\n"
	},
	{
		"name": "SearchEndpoint.constructor",
		"comment": "<p>Create a new SearchEndpoint.<br/>\nWill use a set of sane default options, and merge them with the options parameter.<br/>\nWill create an <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a> and use it to communicate with the endpoint internally</p>\n"
	},
	{
		"name": "TemplateCache",
		"comment": "<p>Holds a reference to all template available in the framework</p>\n"
	},
	{
		"name": "TemplateHelpers",
		"comment": "<p>Allow to register and return template helpers (essentially: Utility functions that can be executed in the context of a template to render complex elements).</p>\n"
	},
	{
		"name": "TextInput",
		"comment": "<p>This class will create a text input meant to be used inside the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component.\nIt can be, more specifically, used for external code using the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n"
	},
	{
		"name": "TextInput.constructor",
		"comment": "<p>Create a new text input.</p>\n"
	},
	{
		"name": "IAdvancedSearchSection",
		"comment": "<p>Describe a section in the <a href=\"https://coveo.github.io/search-ui/components/advancedsearch.html\">AdvancedSearch</a> component</p>\n"
	},
	{
		"name": "IAdvancedSearchSection.inputs",
		"comment": "<p>The array of inputs to populate.\nExternal code should only push inputs that match the type <a href=\"https://coveo.github.io/search-ui/globals.html#baseformtypes\">BaseFormTypes</a>.</p>\n"
	},
	{
		"name": "IAdvancedSearchSection.name",
		"comment": "<p>The name of the section.</p>\n"
	},
	{
		"name": "IAnalyticsActionCause",
		"comment": "<p>The IAnalyticsActionCause interface describes the cause of an event for the analytics service.\nSee the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component</p>\n"
	},
	{
		"name": "IAnalyticsActionCause.name",
		"comment": "<p>Specifies the name of the event. While you can actually set this property to any arbitrary string value, its value\nshould uniquely identify the precise action that triggers the event. Thus, each individual event should have its\nown unique <code>name</code> value.\nExample: <code>searchBoxSubmit</code>, <code>resultSort</code>, etc.</p>\n"
	},
	{
		"name": "IAnalyticsActionCause.type",
		"comment": "<p>Specifies the type of the event. While you can actually set this property to any arbitrary string value, it should\ndescribe the general category of the event. Thus, more than one event can have the same <code>type</code> value, which makes\nit possible to group events with identical types when doing reporting.\nExample: All search box related events could have <code>searchbox</code> as their <code>type</code> value.</p>\n"
	},
	{
		"name": "IAnalyticsClient",
		"comment": "<p>The IAnalyticsClient interface describes an analytics client that can log events to, or return information from the\nusage analytics service.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component.</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta",
		"comment": "<p>The IAnalyticsDocumentViewMeta describes the expected metadata when logging a click event / document view.\nSee also the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component, and more specifically the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#logclickevent\">Analytics.logClickEvent</a> method.</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta.author",
		"comment": "<p>The author of the clicked document.</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta.documentTitle",
		"comment": "<p>The title of the clicked document.</p>\n"
	},
	{
		"name": "IAnalyticsDocumentViewMeta.documentURL",
		"comment": "<p>The URL of the clicked document.</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions",
		"comment": "<p>Options for building an <code>&lt;a&gt;</code> tag.</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions.class",
		"comment": "<p>The CSS class(es) of the tag.</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions.target",
		"comment": "<p>The target (<code>href</code> attribute).</p>\n"
	},
	{
		"name": "IAnchorUtilsOptions.text",
		"comment": "<p>The tag&#39;s text content.</p>\n"
	},
	{
		"name": "IBadgeColors",
		"comment": "<p>Badge Colors</p>\n"
	},
	{
		"name": "IBreadcrumbItem",
		"comment": "<p>Represent an item to insert in the breadcrumb</p>\n"
	},
	{
		"name": "IBreadcrumbItem.element",
		"comment": "<p>The HTMLElement to insert in the breadcrumb</p>\n"
	},
	{
		"name": "IBuildingAdvancedSearchEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n"
	},
	{
		"name": "IBuildingAdvancedSearchEventArgs.executeQuery",
		"comment": "<p>An easy way to execute a new query.</p>\n"
	},
	{
		"name": "IBuildingAdvancedSearchEventArgs.sections",
		"comment": "<p>Sections which external code can populate by pushing into this array.</p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#buildingquery\">QueryEvents.buildingQuery</a></p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs.cancel",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs.queryBuilder",
		"comment": "<p>Allow handlers to modify the query by using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a></p>\n"
	},
	{
		"name": "IBuildingQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/analyticsevents.html#changeanalyticscustomdata\">AnalyticsEvents.changeAnalyticsCustomData</a>.\nIt extends the <a href=\"https://coveo.github.io/search-ui/interfaces/ichangeableanalyticsdataobject.html\">IChangeableAnalyticsDataObject</a> interface.</p>\n<p>Take note that only the attributes described by <a href=\"https://coveo.github.io/search-ui/interfaces/ichangeableanalyticsdataobject.html\">IChangeableAnalyticsDataObject</a> can be modified by external code.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.actionCause",
		"comment": "<p>The cause of the event.\nAll analytics events triggered by a different component will use a different action cause.</p>\n<p>For example, triggering a query by using the search box will send a <code>searchBoxSubmit</code> actionCause.</p>\n<p>Triggering a query with a facet selection, on the other hand, will send a <code>facetSelect</code>.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.actionType",
		"comment": "<p>The type of the event.\nThe type is normally a generic string that regroups all events triggered by the same feature or component.</p>\n<p>For example, all analytics events related to the Searchbox will all use the same actionType.</p>\n<p>Analytics events related to Facets, on the other hand, would use a different actionType.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.language",
		"comment": "<p>The language of the search interface.\nBy default, this will be populated by the currently loaded localization and culture file for the search interface.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.metaObject",
		"comment": "<p>The metadata for the current event.\nExternal code can modify an existing value, or add a new key - value pair.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.originLevel1",
		"comment": "<p>The originLevel1 property can be used to describe the high level origin of the event.\nFor example, this can be the location of the search page, or any name that allows you to uniquely identify a search interface.</p>\n<p>If not provided, this value will be <code>default</code>.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.originLevel2",
		"comment": "<p>The originLevel2 property can be used to describe the mid level origin of the event.\nBy default, the framework will populate this with the currently selected tab.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.originLevel3",
		"comment": "<p>The originLevel3 property can be used to describe the low level origin of the event.\nBy default, this property will be left empty.</p>\n"
	},
	{
		"name": "IChangeAnalyticsCustomDataEventArgs.type",
		"comment": "<p>The type of the event that was just triggered.\nThis can help external code to discriminate the event that it wishes to modify.</p>\n"
	},
	{
		"name": "IChangeableAnalyticsDataObject",
		"comment": "<p>The interface that describe part of the analytics event that can be modified.</p>\n"
	},
	{
		"name": "IChangeableAnalyticsDataObject.language",
		"comment": "<p>The language of the search interface.\nBy default, this will be populated by the currently loaded localization and culture file for the search interface.</p>\n"
	},
	{
		"name": "IChangeableAnalyticsDataObject.metaObject",
		"comment": "<p>The metadata for the current event.\nExternal code can modify an existing value, or add a new key - value pair.</p>\n"
	},
	{
		"name": "IChangeableAnalyticsDataObject.originLevel1",
		"comment": "<p>The originLevel1 property can be used to describe the high level origin of the event.\nFor example, this can be the location of the search page, or any name that allows you to uniquely identify a search interface.</p>\n<p>If not provided, this value will be <code>default</code>.</p>\n"
	},
	{
		"name": "IChangeableAnalyticsDataObject.originLevel2",
		"comment": "<p>The originLevel2 property can be used to describe the mid level origin of the event.\nBy default, the framework will populate this with the currently selected tab.</p>\n"
	},
	{
		"name": "IChangeableAnalyticsDataObject.originLevel3",
		"comment": "<p>The originLevel3 property can be used to describe the low level origin of the event.\nBy default, this property will be left empty.</p>\n"
	},
	{
		"name": "IChangeableAnalyticsMetaObject",
		"comment": "<p>The interface that describe the metadata for every analytics event.</p>\n"
	},
	{
		"name": "IComponentBindings",
		"comment": "<p>The bindings, or environment in which each component exists.</p>\n"
	},
	{
		"name": "IComponentBindings.componentOptionsModel",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "IComponentBindings.componentStateModel",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IComponentBindings.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "IComponentBindings.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Triggers state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IComponentBindings.root",
		"comment": "<p>The root HTMLElement of the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> in which the component exists.</p>\n"
	},
	{
		"name": "IComponentBindings.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "IComponentBindings.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "IComponentDefinition",
		"comment": "<p>Definition for a Component.</p>\n"
	},
	{
		"name": "IComponentDefinition.ID",
		"comment": "<p>The static ID that each component need to be identified.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "IComponentDefinition.className",
		"comment": "<p>The generated <code>className</code> for this component.<br/>\nFor example, SearchButton -&gt; static ID : SearchButton -&gt; className : CoveoSearchButton</p>\n"
	},
	{
		"name": "IComponentDefinition.fields",
		"comment": "<p>The optional index fields that the component possess or display.</p>\n"
	},
	{
		"name": "IComponentDefinition.options",
		"comment": "<p>The available options for the component.</p>\n"
	},
	{
		"name": "IComponentDefinition.parent",
		"comment": "<p>The optional parent of the component, which will be a component itself.</p>\n"
	},
	{
		"name": "IComponentDefinition.constructor",
		"comment": "<p>Constructor for each component</p>\n"
	},
	{
		"name": "IComponentOptions",
		"comment": "<p>This represent the possible parameters that can be used to configure an option</p>\n"
	},
	{
		"name": "IComponentOptions.alias",
		"comment": "<p>Allow to specify an alias for an option name.\nThis can be useful to modify the name of an option without introducing a breaking change.</p>\n"
	},
	{
		"name": "IComponentOptions.attrName",
		"comment": "<p>Allow to specify a different markup name for an option than the default value.\nUsing this is extremely rare, and should be used only for legacy reasons.</p>\n"
	},
	{
		"name": "IComponentOptions.defaultFunction",
		"comment": "<p>Specify a function which should return the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptions.defaultValue",
		"comment": "<p>Specify the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptions.depend",
		"comment": "<p>Specify that an option depend on another option being enabled.\nMostly useful for the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptions.deprecated",
		"comment": "<p>Specify that an option is deprecated.\nThis string will be displayed in the console on initialization.</p>\n<p>The message should be as clear as possible as to why this option is deprecated, and how it can be replaced.</p>\n<p>This also mean that the option will not appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptions.postProcessing",
		"comment": "<p>Specify a function which can be used to further modify the value for a given option after all other options have been loaded.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">Facet.options.id</a> will use this to set the default ID with the same value as the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.</p>\n"
	},
	{
		"name": "IComponentOptions.required",
		"comment": "<p>Specify if the option is &quot;required&quot; so that the component can do it&#39;s job properly.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a> is required, as a facet with no field cannot function.</p>\n"
	},
	{
		"name": "IComponentOptions.section",
		"comment": "<p>Specify a section name inside which the option should appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptions.validator",
		"comment": "<p>Specify a function which can be used to verify the validity of the option.\nThe function should return true if the option is valid, false otherwise.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs",
		"comment": "<p>This represent the possible parameters that can be used to configure a field option.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.alias",
		"comment": "<p>Allow to specify an alias for an option name.\nThis can be useful to modify the name of an option without introducing a breaking change.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.attrName",
		"comment": "<p>Allow to specify a different markup name for an option than the default value.\nUsing this is extremely rare, and should be used only for legacy reasons.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.defaultFunction",
		"comment": "<p>Specify a function which should return the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.defaultValue",
		"comment": "<p>Specify the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.depend",
		"comment": "<p>Specify that an option depend on another option being enabled.\nMostly useful for the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.deprecated",
		"comment": "<p>Specify that an option is deprecated.\nThis string will be displayed in the console on initialization.</p>\n<p>The message should be as clear as possible as to why this option is deprecated, and how it can be replaced.</p>\n<p>This also mean that the option will not appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.postProcessing",
		"comment": "<p>Specify a function which can be used to further modify the value for a given option after all other options have been loaded.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">Facet.options.id</a> will use this to set the default ID with the same value as the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.required",
		"comment": "<p>Specify if the option is &quot;required&quot; so that the component can do it&#39;s job properly.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a> is required, as a facet with no field cannot function.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.section",
		"comment": "<p>Specify a section name inside which the option should appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldOptionArgs.validator",
		"comment": "<p>Specify a function which can be used to verify the validity of the option.\nThe function should return true if the option is valid, false otherwise.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs",
		"comment": "<p>This represent the possible parameters that can be used to configure a list of fields option.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.alias",
		"comment": "<p>Allow to specify an alias for an option name.\nThis can be useful to modify the name of an option without introducing a breaking change.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.attrName",
		"comment": "<p>Allow to specify a different markup name for an option than the default value.\nUsing this is extremely rare, and should be used only for legacy reasons.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.defaultFunction",
		"comment": "<p>Specify a function which should return the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.defaultValue",
		"comment": "<p>Specify the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.depend",
		"comment": "<p>Specify that an option depend on another option being enabled.\nMostly useful for the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.deprecated",
		"comment": "<p>Specify that an option is deprecated.\nThis string will be displayed in the console on initialization.</p>\n<p>The message should be as clear as possible as to why this option is deprecated, and how it can be replaced.</p>\n<p>This also mean that the option will not appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.postProcessing",
		"comment": "<p>Specify a function which can be used to further modify the value for a given option after all other options have been loaded.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">Facet.options.id</a> will use this to set the default ID with the same value as the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.required",
		"comment": "<p>Specify if the option is &quot;required&quot; so that the component can do it&#39;s job properly.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a> is required, as a facet with no field cannot function.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.section",
		"comment": "<p>Specify a section name inside which the option should appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsFieldsOptionArgs.validator",
		"comment": "<p>Specify a function which can be used to verify the validity of the option.\nThe function should return true if the option is valid, false otherwise.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs",
		"comment": "<p>The represent the possible parameters that can be used to configure a list option.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.alias",
		"comment": "<p>Allow to specify an alias for an option name.\nThis can be useful to modify the name of an option without introducing a breaking change.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.attrName",
		"comment": "<p>Allow to specify a different markup name for an option than the default value.\nUsing this is extremely rare, and should be used only for legacy reasons.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.defaultFunction",
		"comment": "<p>Specify a function which should return the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.defaultValue",
		"comment": "<p>Specify the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.depend",
		"comment": "<p>Specify that an option depend on another option being enabled.\nMostly useful for the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.deprecated",
		"comment": "<p>Specify that an option is deprecated.\nThis string will be displayed in the console on initialization.</p>\n<p>The message should be as clear as possible as to why this option is deprecated, and how it can be replaced.</p>\n<p>This also mean that the option will not appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.postProcessing",
		"comment": "<p>Specify a function which can be used to further modify the value for a given option after all other options have been loaded.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">Facet.options.id</a> will use this to set the default ID with the same value as the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.required",
		"comment": "<p>Specify if the option is &quot;required&quot; so that the component can do it&#39;s job properly.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a> is required, as a facet with no field cannot function.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.section",
		"comment": "<p>Specify a section name inside which the option should appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.separator",
		"comment": "<p>The separator that should be used for this list. By default, it will be <code>,</code>.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.validator",
		"comment": "<p>Specify a function which can be used to verify the validity of the option.\nThe function should return true if the option is valid, false otherwise.</p>\n"
	},
	{
		"name": "IComponentOptionsListOptionArgs.values",
		"comment": "<p>The possible list of values for this option.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs",
		"comment": "<p>This represent the possible parameters that can be used to configure a number option.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.alias",
		"comment": "<p>Allow to specify an alias for an option name.\nThis can be useful to modify the name of an option without introducing a breaking change.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.attrName",
		"comment": "<p>Allow to specify a different markup name for an option than the default value.\nUsing this is extremely rare, and should be used only for legacy reasons.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.defaultFunction",
		"comment": "<p>Specify a function which should return the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.defaultValue",
		"comment": "<p>Specify the default value that should be given to the option if it is not specified.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.depend",
		"comment": "<p>Specify that an option depend on another option being enabled.\nMostly useful for the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.deprecated",
		"comment": "<p>Specify that an option is deprecated.\nThis string will be displayed in the console on initialization.</p>\n<p>The message should be as clear as possible as to why this option is deprecated, and how it can be replaced.</p>\n<p>This also mean that the option will not appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.float",
		"comment": "<p>Specify if the value is a floating point number.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.max",
		"comment": "<p>The maximum value that can be set for this number.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.min",
		"comment": "<p>The minimum value that can be set for this number.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.postProcessing",
		"comment": "<p>Specify a function which can be used to further modify the value for a given option after all other options have been loaded.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.id\">Facet.options.id</a> will use this to set the default ID with the same value as the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a>.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.required",
		"comment": "<p>Specify if the option is &quot;required&quot; so that the component can do it&#39;s job properly.\nFor example, the <a href=\"https://coveo.github.io/search-ui/components/facet.html#options.field\">Facet.options.field</a> is required, as a facet with no field cannot function.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.section",
		"comment": "<p>Specify a section name inside which the option should appear in the interface editor.</p>\n"
	},
	{
		"name": "IComponentOptionsNumberOptionArgs.validator",
		"comment": "<p>Specify a function which can be used to verify the validity of the option.\nThe function should return true if the option is valid, false otherwise.</p>\n"
	},
	{
		"name": "IComponentOptionsPostProcessing",
		"comment": "<p>Specify a postProcess function that allows an option to further modify itself once all other options have loaded.</p>\n"
	},
	{
		"name": "IComputedFieldRequest",
		"comment": "<p>Describe a computed field request<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Computed+Field+Parameters\">https://developers.coveo.com/display/SearchREST/Computed+Field+Parameters</a></p>\n"
	},
	{
		"name": "IComputedFieldRequest.field",
		"comment": "<p>This specifies the field on which the aggregate operation will be performed. This field is typically a numerical value.</p>\n"
	},
	{
		"name": "IComputedFieldRequest.operation",
		"comment": "<p>This specifies the operation to execute on the field value.<br/>\nPossible operations:\n-- sum: Computes the sum of all values.\n-- average: Computes the average of all values.\n--minimum: Retrieves the smallest of all values.\n--maximum: Retrieves the largest of all values.</p>\n"
	},
	{
		"name": "ICoreHelpers",
		"comment": "<p>The core template helpers provided by default.\nExample usage:</p>\n<h3 id=\"html\">HTML</h3>\n<pre><code>&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"CoveoFieldValue\"</span> data-helper=<span class=\"hljs-string\">\"helperName\"</span> data-helper-options-optionName=<span class=\"hljs-string\">\"option-value\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre><h3 id=\"underscore\">Underscore</h3>\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">%=</span></span></span><span class=\"ruby\"> helperName(argument1, argument2) </span><span class=\"xml\"><span class=\"hljs-tag\">%&gt;</span></span>\n</code></pre>"
	},
	{
		"name": "ICoreHelpers.anchor",
		"comment": "<p>Formats a clickable HTML link (<code>&lt;a&gt;</code>).</p>\n<ul>\n<li><code>href</code>: The link URI</li>\n<li><code>options</code>: The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/ianchorutilsoptions.html\">IAnchorUtilsOptions</a>)</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.currency",
		"comment": "<p>Formats a currency value to a string using the specified options.</p>\n<ul>\n<li><code>value</code>: The number value to format.</li>\n<li><code>options</code>: The options to use (see ICurrencyToStringOptions).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.date",
		"comment": "<p>Formats a date value to a date-only string using the specified options.</p>\n<ul>\n<li><code>value</code>: The Date value to format.</li>\n<li><code>options</code>: The options to use (see IDateToStringOptions).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.dateTime",
		"comment": "<p>Formats a date value to a date and time string using the specified\noptions.</p>\n<ul>\n<li><code>value</code>: The Date value to format.</li>\n<li><code>options</code>: The options to use (see IDateToStringOptions).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.email",
		"comment": "<p>Renders one or several email values in <code>mailto:</code> hyperlinks.</p>\n<ul>\n<li><code>value</code>: The string or array of string that contains a list of semicolon-separated email\nvalues. When multiple values are passed, each value is displayed in a\nseparate hyperlink.</li>\n<li><code>companyDomain</code>: The string that contains your own domain (e.g.:\ncoveo.com). When specified, this parameter allows email addresses\ncoming from your own domain to be displayed in a shortened format\n(e.g.: Full Name), whereas email addresses coming from an external\ndomain will be displayed in an extended format (e.g.: Full Name\n(domain.com)). If this parameter is not specified, then the shortened\nformat will automatically be used.</li>\n<li><code>me</code>: The string that contains the current username. If it is\nspecified, then the email address containing the current username will\nbe replaced by the localized string &#39;Me&#39;.</li>\n<li><code>lengthLimit</code>: The number of email addresses that you want to display\nbefore an ellipse is added (e.g.: &#39;From Joe, John and 5 others&#39;).<br/>\nThe default value is 2.</li>\n<li><code>truncateName</code>: When the username is available from the email address,\nthen you can specify if you want to truncate the full name. (e.g.:\n&#39;John S.&#39; instead of &#39;John Smith&#39;).<br/>\nThe default value is <code>false</code>.</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.emailDateTime",
		"comment": "<p>Formats a date value to a date and time string using options suitable for\nemail dates</p>\n<ul>\n<li><code>value</code>: The Date value to format.</li>\n<li><code>options</code>: The options to use (see IDateToStringOptions).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.encodeCarriageReturn",
		"comment": "<p>Replace all carriage return in a string by a &lt;br /&gt; tag</p>\n"
	},
	{
		"name": "ICoreHelpers.fromFileTypeToIcon",
		"comment": "<p>Generates an icon based on the file type of the current result. The icon\nwill be contained inside a <code>&lt;span&gt;</code> element with the appropriate CSS\nclass.</p>\n<ul>\n<li><code>result</code>: The current result object inside your template. In\nunderscore, it is referenced as <code>obj</code>. <em>Optional</em>, by default the result\nwill be resolved automatically from your current template function (\nMeaning the nearest result in the current call stack execution inside\nyour template)</li>\n<li><code>options</code>: The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/iiconoptions.html\">IIconOptions</a>).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.highlight",
		"comment": "<p>Highlights a string using the provided highlight information.</p>\n<ul>\n<li><code>highlights</code>: The highlight information to use.</li>\n<li><code>cssClass</code>: Optional. The name of the CSS class to use for highlighting.</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.highlightStreamHTML",
		"comment": "<p>This helper operates exactly like the <a href=\"https://coveo.github.io/search-ui/interfaces/icorehelpers.html#highlightstreamtext\">highlightStreamText</a> helper, except\nthat it should be used to highlight HTML content. The helper takes care\nof not highlighting the HTML markup.</p>\n<ul>\n<li><code>content</code>: The string content to highlight</li>\n<li><code>termsToHighlight</code>: Optional. The terms to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightterm.html\">IHighlightTerm</a>)</li>\n<li><code>phraseToHighlight</code>: Optional. The phrases to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightphrase.html\">IHighlightPhrase</a>)</li>\n<li><code>options</code>: Optional. The options defined below as <a href=\"https://coveo.github.io/search-ui/interfaces/istreamhighlightoptions.html\">IStreamHighlightOptions</a></li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.highlightStreamText",
		"comment": "<p>This helper highlights the provided terms in a given string.<br/>\nBy default, the terms to highlight are the current query and the\nassociated stemming words from the index.\nThe only required parameter is the content, which specify the string that needs to be highlighted.\nThe other parameters will normally be automatically resolved for you from the current result object.</p>\n<ul>\n<li><code>content</code>: The string content to highlight</li>\n<li><code>termsToHighlight</code>: Optional. The terms to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightterm.html\">IHighlightTerm</a>)</li>\n<li><code>phraseToHighlight</code>: Optional. The phrases to highlight (see <a href=\"https://coveo.github.io/search-ui/interfaces/ihighlightphrase.html\">IHighlightPhrase</a>)</li>\n<li><code>options</code>: Optional. The options defined below as <a href=\"https://coveo.github.io/search-ui/interfaces/istreamhighlightoptions.html\">IStreamHighlightOptions</a></li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.image",
		"comment": "<p>Formats an HTML image tag (<code>&lt;img&gt;</code>).</p>\n<ul>\n<li><code>src</code>: The image source URI</li>\n<li><code>options</code>: The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/iimageutilsoptions.html\">IImageUtilsOptions</a>)</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.isMobileDevice",
		"comment": "<p>Detect if the results is being rendered in a mobile device.\nIf it&#39;s not a mobile device, the helper return null ;</p>\n<p>If it&#39;s a mobile device, return the type of device (Android, iPhone, iPad) etc.</p>\n"
	},
	{
		"name": "ICoreHelpers.loadTemplate",
		"comment": "<p>Loads a partial template in the current template, by passing the ID of\nthe template to load, the condition for which this template should be\nloaded, and the context object (the object that the loaded template will\nuse as its data). By default, the context object will be the same as the\ntemplate that called this helper function. So, for example, in a\nResultList Component, the contextObject would, by default, be the Query\nResults.</p>\n<ul>\n<li><code>templateId</code>: the ID of the template to load.</li>\n<li><code>condition</code>: The boolean condition to determine if this template should\nload for this result set. Most of the time this would be a condition of\nthe type if raw.somefield == &#39;something&#39;.</li>\n<li><code>contextObject</code>: The object that should be used by the loaded template\nas its contextObject.</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.number",
		"comment": "<p>Formats a numeric value using the format string.</p>\n<ul>\n<li><code>value</code>: The numeric value to format.</li>\n<li><code>format</code>: The format string to use. The options available are defined by\nthe <a href=\"https://github.com/klaaspieter/jquery-global#numbers\">Globalize</a> library.</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.shorten",
		"comment": "<p>Shortens a string so that its length does not exceed a specific number of\ncharacters. An ellipsis is appended to the string if it exceeds the\nmaximum length.</p>\n<ul>\n<li><code>value</code>: The string to shorten.</li>\n<li><code>length</code>: The maximum length of the resulting string.</li>\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted\nusing this highlight information.</li>\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.shortenPath",
		"comment": "<p>Shortens a string using an algorithm suitable for file paths. The helper\nwill insert an ellipsis in the string where text has been removed when\nthe path exceeds the maximum length.</p>\n<ul>\n<li><code>value</code>: The path to shorten.</li>\n<li><code>length</code>: The maximum length of the resulting string.</li>\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted using\nthis highlight information.</li>\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.shortenUri",
		"comment": "<p>Shortens a string using an algorithm suitable for URIs. The helper will\ninsert an ellipsis in the string where text has been removed when the URI\nexceeds the maximum length.</p>\n<ul>\n<li><code>value</code>: The URI to shorten.</li>\n<li><code>length</code>: The maximum length of the resulting string.</li>\n<li><code>highlights</code>: Optional. If provided, the string will be highlighted\nusing this highlight information.</li>\n<li><code>cssClass</code>: Optional. When highlighting, the name of the CSS class to use.</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.size",
		"comment": "<p>Given a number, which represent a file size in bytes, format the value into a logical unit size.\neg:</p>\n<p><code>size(1024) =&gt; 1024 B</code></p>\n<p><code>size(1025) =&gt; 1 KB</code></p>\n<p><code>size(10240) =&gt; 10 KB</code></p>\n"
	},
	{
		"name": "ICoreHelpers.thumbnail",
		"comment": "<p>Formats an HTML image tag (<code>&lt;img&gt;</code>), and automatically uses the result\nobject to query the REST API to get the thumbnail for this result. For\nexample, this can be used to great effect when designing a template\nshowing users or preview of files.</p>\n<ul>\n<li><code>result</code>: The current result object inside your template. In\nunderscore, it is referenced as <code>obj</code>. Optional, by default the result\nwill be resolved automatically from your current template function (\nMeaning the nearest result in the current call stack execution inside\nyour template)</li>\n<li><code>endpoint</code>: Optional. The name of the endpoint to use for your\nthumbnail. Default is default.</li>\n<li><code>options</code>: The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/iimageutilsoptions.html\">IImageUtilsOptions</a>).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.time",
		"comment": "<p>Formats a date value to a time-only string using the sepcified options.</p>\n<ul>\n<li><code>value</code>: The Date value to format.</li>\n<li><code>options</code>: The options to use (see IDateToStringOptions).</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.timeSpan",
		"comment": "<p>Given a number, either in millisecond or second, convert to a HH:MM:SS format.\neg:</p>\n<p><code>timeSpan(1, {isMilliseconds: false}) =&gt; &#39;00:01&#39;</code></p>\n<p><code>timeSpan(1000, {isMilliseconds: true}) =&gt; &#39;00:01&#39;</code></p>\n<ul>\n<li><code>value</code>: The number to convert to a timespan</li>\n<li><code>options</code> : The options to use (see <a href=\"https://coveo.github.io/search-ui/interfaces/itimespanutilsoptions.html\">ITimeSpanUtilsOptions</a>)</li>\n</ul>\n"
	},
	{
		"name": "ICoreHelpers.translatedCaption",
		"comment": "<p>Given a filetype value, try to return a translated and human readable version.\nIf the filetype is known and recognized by the framework, a translated value will be returned.</p>\n<p>eg:</p>\n<p><code>translatedCaption(&#39;doc&#39;) =&gt; Document</code></p>\n<p><code>translatedCaption(&#39;xls&#39;) =&gt; Spreadsheet Document</code></p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#donebuildingquery\">QueryEvents.doneBuildingQuery</a></p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs.cancel",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs.queryBuilder",
		"comment": "<p>Allow handlers to modify the query by using the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a></p>\n"
	},
	{
		"name": "IDoneBuildingQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#duringquery\">QueryEvents.duringQuery</a></p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.promise",
		"comment": "<p>A promises for the results that will be returned by the Search API</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IDuringQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IEndpointCallOptions",
		"comment": "<p>Available options when calling against the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a></p>\n"
	},
	{
		"name": "IEndpointCallParameters",
		"comment": "<p>Parameters that can be used when calling an <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a></p>\n"
	},
	{
		"name": "IEndpointCallParameters.errorsAsSuccess",
		"comment": "<p>Flag to specify if the endpoint should return different type of error as actual 200 success for the browser, but with the error code/message contained in the response.</p>\n"
	},
	{
		"name": "IEndpointCallParameters.method",
		"comment": "<p>Or HTTP verb : GET, POST, PUT, etc.</p>\n"
	},
	{
		"name": "IEndpointCallParameters.queryString",
		"comment": "<p>Array of query string params.<br/>\neg: [&#39;foo=1&#39;,&#39;bar=2&#39;]</p>\n"
	},
	{
		"name": "IEndpointCallParameters.requestData",
		"comment": "<p>Body of the request.<br/>\nkey -&gt; value map (JSON)</p>\n"
	},
	{
		"name": "IEndpointCallParameters.requestDataType",
		"comment": "<p>Request data type.<br/>\neg: &quot;application/json&quot;, &quot;application/x-www-form-urlencoded; charset=\\&quot;UTF-8\\&quot;&quot;</p>\n"
	},
	{
		"name": "IEndpointCallParameters.responseType",
		"comment": "<p>responseType of the request.</br>\neg: &quot;text&quot;, &quot;arraybuffer&quot; etc.</p>\n"
	},
	{
		"name": "IEndpointCallParameters.url",
		"comment": "<p>Url to target</p>\n"
	},
	{
		"name": "IEndpointCallerOptions",
		"comment": "<p>Possible options when creating a <a href=\"https://coveo.github.io/search-ui/classes/endpointcaller.html\">EndpointCaller</a></p>\n"
	},
	{
		"name": "IEndpointCallerOptions.accessToken",
		"comment": "<p>The access token to use for this endpoint.</p>\n"
	},
	{
		"name": "IEndpointCallerOptions.password",
		"comment": "<p>The password to use to log into this endpoint. Used for basic auth.<br/>\nNot used if accessToken is provided.</p>\n"
	},
	{
		"name": "IEndpointCallerOptions.requestModifier",
		"comment": "<p>A function which will allow external code to modify all endpoint call parameters before they are sent by the browser.\nUsed in very specific scenario where the network infrastructure require special request headers to be added or removed, for example.</p>\n"
	},
	{
		"name": "IEndpointCallerOptions.username",
		"comment": "<p>The username to use to log into this endpoint. Used for basic auth.<br/>\nNot used if accessToken is provided.</p>\n"
	},
	{
		"name": "IEndpointCallerOptions.xmlHttpRequest",
		"comment": "<p>The XmlHttpRequest implementation to use instead of the native one.\nIf not specified, the native one is used.</p>\n"
	},
	{
		"name": "IErrorResponse",
		"comment": "<p>An error response</p>\n"
	},
	{
		"name": "IErrorResponse.data",
		"comment": "<p>Data about the error</p>\n"
	},
	{
		"name": "IErrorResponse.statusCode",
		"comment": "<p>Status code for the error</p>\n"
	},
	{
		"name": "IExtension",
		"comment": "<p>Information about a query extension</p>\n"
	},
	{
		"name": "IExtension.argumentNames",
		"comment": "<p>An array of all possible arguments</p>\n"
	},
	{
		"name": "IExtension.name",
		"comment": "<p>The name of the extension</p>\n"
	},
	{
		"name": "IExternalAdvancedSearchSection",
		"comment": "<p>Describe a section populated by external code, using the <a href=\"https://coveo.github.io/search-ui/classes/advancedsearchevents.html#buildingadvancedsearch\">AdvancedSearchEvents.buildingAdvancedSearch</a></p>\n"
	},
	{
		"name": "IExternalAdvancedSearchSection.content",
		"comment": "<p>The content to add to the external section, as an HTMLElement.</p>\n"
	},
	{
		"name": "IExternalAdvancedSearchSection.inputs",
		"comment": "<p>The array of inputs to populate.\nExternal code should only push inputs that match the type <a href=\"https://coveo.github.io/search-ui/globals.html#baseformtypes\">BaseFormTypes</a>.</p>\n"
	},
	{
		"name": "IExternalAdvancedSearchSection.name",
		"comment": "<p>The name of the section.</p>\n"
	},
	{
		"name": "IExternalAdvancedSearchSection.updateQuery",
		"comment": "<p>An handler to execute every time a new query is launched.\nThe handler will receive the inputs used to build the external section, as well as the queryBuilder object to allow to modify the query.</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#fetchmoresuccess\">QueryEvents.fetchMoreSuccess</a></p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IFetchMoreSuccessEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IFieldDescription",
		"comment": "<p>Information about a single field in the index</p>\n"
	},
	{
		"name": "IFieldDescription.defaultValue",
		"comment": "<p>The default value of the field</p>\n"
	},
	{
		"name": "IFieldDescription.description",
		"comment": "<p>A small(ish) description of the field</p>\n"
	},
	{
		"name": "IFieldDescription.fieldSourceType",
		"comment": "<p>It&#39;s fieldSourceType, as a string.</p>\n"
	},
	{
		"name": "IFieldDescription.fieldType",
		"comment": "<p>It&#39;s fieldType, as a string.<br/>\neg: Date, Double, Integer, LargeString, Long, SmallString</p>\n"
	},
	{
		"name": "IFieldDescription.groupByField",
		"comment": "<p>Gets whether the field is considered groupBy (facet)</p>\n"
	},
	{
		"name": "IFieldDescription.includeInQuery",
		"comment": "<p>Gets whether the field can be referenced in a query.</p>\n"
	},
	{
		"name": "IFieldDescription.includeInResults",
		"comment": "<p>Gets whether the field is returned with results.</p>\n"
	},
	{
		"name": "IFieldDescription.name",
		"comment": "<p>It&#39;s name, as a string</p>\n"
	},
	{
		"name": "IFieldDescription.sortByField",
		"comment": "<p>Gets whether the field can be used to sort results</p>\n"
	},
	{
		"name": "IFieldDescription.splitGroupByField",
		"comment": "<p>Gets whether the field is considered splitGroupBy (facet with ; between values)</p>\n"
	},
	{
		"name": "IFieldDescription.type",
		"comment": "<p>It&#39;s type, as a string</p>\n"
	},
	{
		"name": "IFieldOption",
		"comment": "<p>Declare a type for options that should contain a field to be used in a query.\nThe only constraint this type has over a basic string is that it should start with &quot;@&quot;.</p>\n"
	},
	{
		"name": "IFieldOption.String",
		"comment": "<p>Allows manipulation and formatting of text strings and determination and location of substrings within strings.</p>\n"
	},
	{
		"name": "IFieldOption.length",
		"comment": "<p>Returns the length of a String object.</p>\n"
	},
	{
		"name": "IGetDocumentOptions",
		"comment": "<p>Available options when calling against the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> to get a document</p>\n"
	},
	{
		"name": "IGroupByRequest",
		"comment": "<p>Describe a group by request to perform against the index.<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Group+By+Parameters\">https://developers.coveo.com/display/SearchREST/Group+By+Parameters</a></p>\n"
	},
	{
		"name": "IGroupByRequest.allowedValues",
		"comment": "<p>This explicitly specifies a list of values for which Group By values should be generated.<br/>\nTrailing wildcards can be used to include ranges of values.<br/>\neg : The array [&quot;foo&quot;, &quot;bar*&quot;] would return Group By values for foo and any value starting with bar.</p>\n"
	},
	{
		"name": "IGroupByRequest.computedFields",
		"comment": "<p>This specifies an array of computed fields that should be computed for each Group By value that is returned.<br/>\nComputed fields are used to perform aggregate operations on other fields for all the matching documents having a specific value in the Group By field in the results</p>\n"
	},
	{
		"name": "IGroupByRequest.constantQueryOverride",
		"comment": "<p>This specifies a constant query expression on which to compute the Group By operation.<br/>\nBy default, the constant part of the query expression being executed is used.<br/>\nThis feature is much like the normal queryOverride except that the index will keep the query expression in cache for faster queries. Do no put dynamic query expression in this parameter, as it will negatively impact the performance.</p>\n"
	},
	{
		"name": "IGroupByRequest.field",
		"comment": "<p>This specifies the field on which the Group By operation is performed. The Group By will return a Group By value for each distinct value of this field within the result set.</p>\n"
	},
	{
		"name": "IGroupByRequest.generateAutomaticRanges",
		"comment": "<p>By setting the parameter generateAutomaticRanges to true, the ranges will be calculated by the Coveo index.</p>\n"
	},
	{
		"name": "IGroupByRequest.injectionDepth",
		"comment": "<p>This specifies how deep the index will scan the results to identify missing Group By values.<br/>\nIf not specified, the default value is 1000.<br/>\nWhen executing a Group By operation, the index uses various heuristics to list all the values that are appearing in the result set. In some corner cases, some values might be omitted (it&#39;s a classical trade-off of precision vs performance). Using injection means that the index will explicitly scan the field values of the top n results of the query, and ensure that the values present in those results are included. Using higher values for this parameter may impact query performance.</p>\n"
	},
	{
		"name": "IGroupByRequest.maximumNumberOfValues",
		"comment": "<p>This specifies the maximum number of values that the Group By operation will return.<br/>\nIf not specified, the default value is 10.</p>\n"
	},
	{
		"name": "IGroupByRequest.queryOverride",
		"comment": "<p>This specifies a different query expression on which to compute the Group By operation.<br/>\nBy default, the query expression being executed is used.<br/>\nThis feature is typically used for performance reasons to retrieve Group By values on separate expressions while executing a normal query in a single operation.</p>\n"
	},
	{
		"name": "IGroupByRequest.rangeValues",
		"comment": "<p>This explicitly specifies a list of range values for which Group By values should be generated.</p>\n"
	},
	{
		"name": "IGroupByRequest.sortCriteria",
		"comment": "<p>This specifies how the Group By values should be sorted by the indexer. If not specified, the default value is Score.<br/>\nPossible values are :<br/>\n-- score : the score is computed from the number of occurrences as well as from the position in the result set where the items having this value are appearing. Using this criterion, an item with 100 occurrences might appear after one with only 10 occurrences if those occurrences tend to appear sooner in the ranked result set.<br/>\n-- occurrences : Sort by number of occurrences, with values having the highest number appearing first. <br/>\n-- alphaascending / alphadescending : Sort alphabetically on the field values. <br/>\n-- computedfieldascending / computedfielddescending : Sort on the values of the first computed field for each Group By value. <br/>\n-- chisquare : Sort based on the relative frequency of values in the result set compared to the frequency in the whole index. This means that a value that doesn&#39;t appear often in the index but does appear often in the result set will tend to appear higher in the list.<br/>\n-- nosort : Do not sort the Group By values. The values will be returned in a random order.</p>\n"
	},
	{
		"name": "IGroupByResult",
		"comment": "<p>A result for a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a>.\nThis is typically what the <a href=\"https://coveo.github.io/search-ui/components/facet.html\">Facet</a> component will use to render themselves.</p>\n"
	},
	{
		"name": "IGroupByResult.field",
		"comment": "<p>The field on which the group by was performed.</p>\n"
	},
	{
		"name": "IGroupByResult.globalComputedFieldResults",
		"comment": "<p>Available if there was any computed field request.</p>\n"
	},
	{
		"name": "IGroupByResult.values",
		"comment": "<p>The differents values for this result</p>\n"
	},
	{
		"name": "IGroupByValue",
		"comment": "<p>Describe a single group by value, returned by a <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyresult.html\">IGroupByResult</a></p>\n"
	},
	{
		"name": "IGroupByValue.computedFieldResults",
		"comment": "<p>If there was ny computed field request, the results will be available here.</p>\n"
	},
	{
		"name": "IGroupByValue.lookupValue",
		"comment": "<p>The lookup value if it was specified.</p>\n"
	},
	{
		"name": "IGroupByValue.numberOfResults",
		"comment": "<p>The number of results that match this value in the index for this particular group by request</p>\n"
	},
	{
		"name": "IGroupByValue.score",
		"comment": "<p>The relevance score.</p>\n"
	},
	{
		"name": "IGroupByValue.value",
		"comment": "<p>The string value. Think : Facet label.</p>\n"
	},
	{
		"name": "IHighlight",
		"comment": "<p>An highlight structure, as returned by the index.\nThis structure can be used to do the actual highlighting job.</p>\n"
	},
	{
		"name": "IHighlight.dataHighlightGroup",
		"comment": "<p>The group number for the highlight. A single string can have the same term highlighted multiple times.\nThis allows to regroup the different highlights.</p>\n"
	},
	{
		"name": "IHighlight.dataHighlightGroupTerm",
		"comment": "<p>The string that represent the highlight. A single string can have the same term highlighted multiple times.\nThis allows to regroup the different highlights.</p>\n"
	},
	{
		"name": "IHighlight.length",
		"comment": "<p>The length of the offset.</p>\n"
	},
	{
		"name": "IHighlight.offset",
		"comment": "<p>The 0 based offset inside the string where the highlight should start.</p>\n"
	},
	{
		"name": "IHighlightPhrase",
		"comment": "<p>The data about a single phrase to highlight.</p>\n"
	},
	{
		"name": "IHighlightTerm",
		"comment": "<p>The data about a single term to highlight.</p>\n"
	},
	{
		"name": "IIconOptions",
		"comment": "<p>Available options for the <a href=\"https://coveo.github.io/search-ui/components/icon.html\">Icon</a> component.</p>\n"
	},
	{
		"name": "IImageUtilsOptions",
		"comment": "<p>Options for building an <code>&lt;img&gt;</code> tag.</p>\n"
	},
	{
		"name": "IImageUtilsOptions.alt",
		"comment": "<p>The alternative text for the image (<code>alt</code> attribute).</p>\n"
	},
	{
		"name": "IImageUtilsOptions.height",
		"comment": "<p>The height of the image</p>\n"
	},
	{
		"name": "IImageUtilsOptions.width",
		"comment": "<p>The width of the image</p>\n"
	},
	{
		"name": "IIndexFieldValue",
		"comment": "<p>Describe a field value returned by index</p>\n"
	},
	{
		"name": "IIndexFieldValue.computedFieldResults",
		"comment": "<p>The optional computedFieldResults, if requested in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a></p>\n"
	},
	{
		"name": "IIndexFieldValue.lookupValue",
		"comment": "<p>The optional lookupValue, if requested in the <a href=\"https://coveo.github.io/search-ui/interfaces/igroupbyrequest.html\">IGroupByRequest</a></p>\n"
	},
	{
		"name": "IIndexFieldValue.numberOfResults",
		"comment": "<p>The number of results in the index which have this value</p>\n"
	},
	{
		"name": "IIndexFieldValue.value",
		"comment": "<p>The value</p>\n"
	},
	{
		"name": "IInitializationParameters",
		"comment": "<p>Represent the initialization parameters required to init a new component.</p>\n"
	},
	{
		"name": "IListFieldValuesRequest",
		"comment": "<p>Descrobe a request to list the possible values of a field</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.constantQueryOverride",
		"comment": "<p>A query to execute when returning possible field values, put in cache in the index</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.field",
		"comment": "<p>The field for which to list values</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.ignoreAccents",
		"comment": "<p>Whether to ignore accents in the values</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.lookupField",
		"comment": "<p>The lookup field to use</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.maximumNumberOfValues",
		"comment": "<p>Maximum number of field values to return</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.pattern",
		"comment": "<p>A pattern to filter out results</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.patternType",
		"comment": "<p>The type of the pattern (eg: regex)</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.queryOverride",
		"comment": "<p>A query to execute when returning possible field values</p>\n"
	},
	{
		"name": "IListFieldValuesRequest.sortCriteria",
		"comment": "<p>The sort order for the returned field.</p>\n"
	},
	{
		"name": "INewQueryEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#newquery\">QueryEvents.newQuery</a></p>\n"
	},
	{
		"name": "INewQueryEventArgs.cancel",
		"comment": "<p>If this property is set to true by any handlers, the query will not be executed.</p>\n"
	},
	{
		"name": "INewQueryEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "INoResultsEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#noresults\">QueryEvents.noResults</a></p>\n"
	},
	{
		"name": "INoResultsEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "INoResultsEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "INoResultsEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "INoResultsEventArgs.retryTheQuery",
		"comment": "<p>If set to true by any handler, the last query will automatically be re-executed again.</p>\n"
	},
	{
		"name": "INoResultsEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IOmniboxDataRow",
		"comment": "<p>The content that external code that wants to populate the omnibox need to populate.</p>\n"
	},
	{
		"name": "IOmniboxDataRow.deferred",
		"comment": "<p>This is a Promise object. It is used when you want to make an asynchronous call (most likely an Ajax request) to a service in order to retrieve the data that you will use to build your HTML content.</p>\n"
	},
	{
		"name": "IOmniboxDataRow.element",
		"comment": "<p>This an <code>HTMLElement</code> that you want the Omnibox to render.\nIt can be any valid HTML element (div, span, image, table, etc.). You can bind any event you want to this element and also add logic to handle the Omnibox (e.g. should the Omnibox close itself when clicking on your suggestion, should the Omnibox clear itself?).</p>\n<p>This element you provide can be as complex as you want it to be (see Providing Suggestions for the Omnibox).</p>\n"
	},
	{
		"name": "IOmniboxDataRow.zIndex",
		"comment": "<p>This is an optional property. It is used by each component to influence their rendering order in the Omnibox. It works like a normal CSS <code>zIndex</code>: higher value will render at the top most level. Providing no <code>zIndex</code> will make your item render with a low priority.</p>\n"
	},
	{
		"name": "IPopulateBreadcrumbEventArgs",
		"comment": "<p>Event triggered when populating the breadcrumb</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject",
		"comment": "<p>The <code>IPopulateOmniboxObject</code> is an interface that is used by components to interact with the Omnibox and provides a framework for type-ahead suggestions.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.allQueryExpressions",
		"comment": "<p>An array <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> used to describe each part of the content of the Omnibox component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.completeQueryExpression",
		"comment": "<p>A <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> object used to describe the complete content of the Querybox component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.currentQueryExpression",
		"comment": "<p>A <a href=\"https://coveo.github.io/search-ui/interfaces/ipopulateomniboxqueryexpression.html\">IPopulateOmniboxQueryExpression</a> object used to describe the current active content (the current position of the cursor/caret) of the Omnibox component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxObject.cursorPosition",
		"comment": "<p>The number representing the current position of the cursor/caret inside the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> component.</p>\n"
	},
	{
		"name": "IPopulateOmniboxQueryExpression",
		"comment": "<p>This object is a simple interface that describes the content of an omnibox query expression.</p>\n"
	},
	{
		"name": "IPopulateOmniboxQueryExpression.regex",
		"comment": "<p>This is a regex of the content of the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a> with some special character escaped.</p>\n"
	},
	{
		"name": "IPopulateOmniboxQueryExpression.word",
		"comment": "<p>This is a simple string with the plain content of the <a href=\"https://coveo.github.io/search-ui/components/omnibox.html\">Omnibox</a>.</p>\n"
	},
	{
		"name": "IPreprocessMoreResultsEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#preprocessmoreresults\">QueryEvents.preprocessMoreResults</a></p>\n"
	},
	{
		"name": "IPreprocessMoreResultsEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#preprocessresults\">QueryEvents.preprocessResults</a></p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IPreprocessResultsEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IQuery",
		"comment": "<p>The IQuery interface describes a query that can be performed on the Coveo REST Search API.\nFor basic usage, see the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#q\">IQuery.q</a> and <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#aq\">IQuery.aq</a> properties.</p>\n<p>In a normal scenario, a query is built by the <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> class.</p>\n"
	},
	{
		"name": "IQuery.actionsHistory",
		"comment": "<p>The actions history represents the past actions a user made and is used by the Coveo Machine Learning service to\nsuggest recommendations. It is generated by the page view script (<a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>)</p>\n"
	},
	{
		"name": "IQuery.aq",
		"comment": "<p>The advanced query expression.<br/>\nThis is the part of the query expression generated by code based on various rules.<br/>\neg: Selecting a facet value will cause an expression to be added to the advanced query expression.</p>\n"
	},
	{
		"name": "IQuery.childField",
		"comment": "<p>Specifies the childField when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n"
	},
	{
		"name": "IQuery.context",
		"comment": "<p>The context is a map of key_value that can be used in the Query pipeline in the Coveo platform.<br/></p>\n"
	},
	{
		"name": "IQuery.cq",
		"comment": "<p>The constant query expression.<br/>\nThis part of the expression is much alike the advanced query expression, but it is meant to hold expressions that are constant for all users of a search interface/widget.<br/>\nThe results of evaluating those expressions are kept in a special index cache, to avoid re-evaluating them on each query.<br/>\nYou must be careful to not include dynamic parts in this expression, otherwise you risk filling up the cache with useless data and this might have a negative impact on performance.<br/>\nExpressions other than cq also benefit from caching in the index, but using cq allows to explicitly require that a part of the query be included in the cache.</p>\n"
	},
	{
		"name": "IQuery.debug",
		"comment": "<p>Setting this property to true will return more debugging information from both the index and the search API.\nUse this with care as this will negatively impact the performance of the query.\nIt should probably never be set to <code>true</code> in production mode...</p>\n"
	},
	{
		"name": "IQuery.disableQuerySyntax",
		"comment": "<p>Whether to disable the special query syntax such as field references for the basic query expression (parameter q).\nIt is equivalent to a No syntax block applied to the basic query expression.\nIf not specified, the parameter defaults to false</p>\n"
	},
	{
		"name": "IQuery.dq",
		"comment": "<p>The disjunction query expression.<br/>\nThis is the disjunctive part of the query expression that is merged with the other expression parts using an OR boolean operator.<br/>\nWhen specified, the final expression evaluated by the index ends up being (q aq cq) OR (dq).</p>\n"
	},
	{
		"name": "IQuery.enableCollaborativeRating",
		"comment": "<p>Whether the index should take collaborative rating in account when ranking result. See : <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a></p>\n"
	},
	{
		"name": "IQuery.enableDidYouMean",
		"comment": "<p>This enables the query correction feature of the index.<br/>\nBy activating this, the index returns an array of {link IQueryCorrection} with suggested word corrections.</p>\n"
	},
	{
		"name": "IQuery.excerptLength",
		"comment": "<p>This specifies the length (in number of characters) of the excerpts generated by the indexer based on the keywords present in the query.<br/>\nThe index includes the top most interesting sentences (in the order they appear in the document) that fit in the specified number of characters.<br/>\nWhen not specified, the default value is 200.</p>\n"
	},
	{
		"name": "IQuery.fieldsToExclude",
		"comment": "<p>This specifies an array of fields that should be excluded from the query results.<br/>\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\n"
	},
	{
		"name": "IQuery.fieldsToInclude",
		"comment": "<p>This specifies an array of fields that should be returned for each result.<br/>\neg: [&#39;@foo&#39;,&#39;@bar&#39;]</p>\n"
	},
	{
		"name": "IQuery.filterField",
		"comment": "<p>This specifies a field on which <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> should be performed.<br/>\nFolding is a kind of duplicate filtering where only the first result with any given value of the field is included in the result set.<br/>\nIt&#39;s typically used to return only one result in a conversation, for example when forum posts in a thread are indexed as separate items.</p>\n"
	},
	{
		"name": "IQuery.filterFieldRange",
		"comment": "<p>Number of results that should be folded, using the <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#filterfield\">IQuery.filterField</a></p>\n"
	},
	{
		"name": "IQuery.firstResult",
		"comment": "<p>This is the 0-based index of the first result to return.<br/>\nIf not specified, this parameter defaults to 0.</p>\n"
	},
	{
		"name": "IQuery.groupBy",
		"comment": "<p>This specifies an array of Group By operations that can be performed on the query results to extract facets</p>\n"
	},
	{
		"name": "IQuery.lowercaseOperators",
		"comment": "<p>Whether to enable the support for operator in lowercase (AND OR -&gt; and or)</p>\n"
	},
	{
		"name": "IQuery.lq",
		"comment": "<p>The contextual text.<br/>\nThis is the contextual text part of the query. It uses the Coveo Machine Learning service to pick key keywords from\nthe text and add them to the basic expression.\nThis field is mainly used to pass context such a case description, long textual query or any other form of text that might help in\nrefining the query.</p>\n"
	},
	{
		"name": "IQuery.maximumAge",
		"comment": "<p>The maximum age for cached query results, in milliseconds.<br/>\nIf results for the exact same request (including user identities) are available in the in-memory cache, they will be used if they are not older than the specified value.<br/>\nOtherwise, the query will be sent to the index.</p>\n"
	},
	{
		"name": "IQuery.numberOfResults",
		"comment": "<p>This is the number of results to return, starting from <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#firstresult\">IQuery.firstResult</a>.<br/>\nIf not specified, this parameter defaults to 10.</p>\n"
	},
	{
		"name": "IQuery.parentField",
		"comment": "<p>Specifies the parentField when doing parent-child loading (See : <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a>)</p>\n"
	},
	{
		"name": "IQuery.partialMatch",
		"comment": "<p>Whether to enable partial matching of the basic expression keywords.<br/>\nBy activating this, when the basic expression contains at least <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchkeywords\">IQuery.partialMatchKeywords</a>, documents containing only the number of keywords specified by <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#partialmatchthreshold\">IQuery.partialMatchThreshold</a> will also match the query.<br/>\nWithout this option, documents are required to contain all the keywords in order to match the query.<br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "IQuery.partialMatchKeywords",
		"comment": "<p>The minimum number of keywords needed to activate partial match.<br/>\nThis specifies the minimum number of keywords needed for the partial match feature to activate.<br/>\nIf the basic expression contains less than this number of keywords, no transformation is applied on the query.<br/>\nIf not specified, this parameter defaults to 5.</p>\n"
	},
	{
		"name": "IQuery.partialMatchThreshold",
		"comment": "<p>The threshold to use for matching documents when partial match is enabled.<br/>\nThis specifies the minimum number of query keywords that a document must contain when partial match is enabled. This value can either be an absolute number or a percentage value based on the total number of keywords.<br/>\nIf not specified, this parameter defaults to 50%.</p>\n"
	},
	{
		"name": "IQuery.pipeline",
		"comment": "<p>Name of the query pipeline to use.<br/>\nThis specifies the name of the query pipeline to use for the query. If not specified, the default value is default, which means the default query pipeline will be used.</p>\n"
	},
	{
		"name": "IQuery.q",
		"comment": "<p>The basic query expression. <br/>\nThis is typically the query expression entered by the user in a query box.<br/>\nSince this part of the query is expected to come from user input, it is processed by the Did You Mean feature.</p>\n"
	},
	{
		"name": "IQuery.queryFunctions",
		"comment": "<p>This specifies an array of Query Function operation that will be executed on the results.</p>\n"
	},
	{
		"name": "IQuery.questionMark",
		"comment": "<p>Whether to enable question marks with wildcards.<br/>\nThis enables using the question mark ? character within wildcard expressions.</p>\n"
	},
	{
		"name": "IQuery.rankingFunctions",
		"comment": "<p>This specifies an array of Ranking Function operations that will be executed on the result</p>\n"
	},
	{
		"name": "IQuery.recommendation",
		"comment": "<p>This is the id of the recommendation interface that generated the query.</p>\n"
	},
	{
		"name": "IQuery.retrieveFirstSentences",
		"comment": "<p>This specifies whether the first sentences of the document should be included in the results.<br/>\nThe retrieveFirstSentences option is typically used instead of excerpts when displaying email items, where the first sentence of the email might be of more interest than a contextually generated excerpt.</p>\n"
	},
	{
		"name": "IQuery.searchHub",
		"comment": "<p>The hub value set from the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> component.<br/>\nUsed for analytics reporting in the Coveo platform</p>\n"
	},
	{
		"name": "IQuery.sortCriteria",
		"comment": "<p>This specifies the sort criterion(s) to use to sort results. If not specified, this parameter defaults to Relevancy.<br/>\nPossible values are : <br/>\n-- relevancy :  This uses all the configured ranking weights as well as any specified ranking expressions to rank results.<br/>\n-- dateascending / datedescending : Sort using the value of the @date field, which is typically the last modification date of an item in the index.<br/>\n-- qre : Sort using only the weights applied through ranking expressions. This is much like using Relevancy except that automatic weights based on keyword proximity etc, are not computed.<br/>\n-- nosort : Do not sort the results. The order in which items are returned is essentially random.<br/>\n-- @field ascending / @field descending : Sort using the value of a custom field.</p>\n"
	},
	{
		"name": "IQuery.tab",
		"comment": "<p>The tab value set from the <a href=\"https://coveo.github.io/search-ui/components/tab.html\">Tab</a> component.</p>\n"
	},
	{
		"name": "IQuery.wildcards",
		"comment": "<p>Whether to enable wildcards on the basic expression keywords.<br/>\nThis enables the wildcard features of the index. Coveo Platform will expand keywords containing wildcard characters to the possible matching keywords to broaden the query.<br/>\nSee : <a href=\"https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm\">https://onlinehelp.coveo.com/en/ces/7.0/user/using_wildcards_in_queries.htm</a><br/>\nIf not specified, this parameter defaults to false.</p>\n"
	},
	{
		"name": "IQueryBuilderExpression",
		"comment": "<p>Describe the expressions part of a QueryBuilder.</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.advanced",
		"comment": "<p>The advanced part of the expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.basic",
		"comment": "<p>The basic part of the expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.constant",
		"comment": "<p>The constant part of the expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.full",
		"comment": "<p>The whole expression</p>\n"
	},
	{
		"name": "IQueryBuilderExpression.withoutConstant",
		"comment": "<p>The full part, but without the constant.</p>\n"
	},
	{
		"name": "IQueryCorrection",
		"comment": "<p>Describe correction for a query</p>\n"
	},
	{
		"name": "IQueryCorrection.correctedQuery",
		"comment": "<p>The query once corrected</p>\n"
	},
	{
		"name": "IQueryCorrection.wordCorrections",
		"comment": "<p>Array of correction for each word in the query</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#queryerror\">QueryEvents.queryError</a></p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.endpoint",
		"comment": "<p>The endpoint on which the error happened.</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.error",
		"comment": "<p>The error info / message itself.</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IQueryErrorEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IQueryException",
		"comment": "<p>Describe an exception that was triggered by the index when performing the query.</p>\n"
	},
	{
		"name": "IQueryException.code",
		"comment": "<p>The exception code</p>\n"
	},
	{
		"name": "IQueryFunction",
		"comment": "<p>Describe a query function that can be executed against the index<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Query+Function\">https://developers.coveo.com/display/SearchREST/Query+Function</a></p>\n"
	},
	{
		"name": "IQueryFunction.fieldName",
		"comment": "<p>The field name on which to store the query function result when the query returns</p>\n"
	},
	{
		"name": "IQueryFunction.function",
		"comment": "<p>Function to execute, as a string</p>\n"
	},
	{
		"name": "IQueryOptions",
		"comment": "<p>Possible options when performing a query with the query controller</p>\n"
	},
	{
		"name": "IQueryOptions.beforeExecuteQuery",
		"comment": "<p>Specify a function that you wish to execute just before the query is executed</p>\n"
	},
	{
		"name": "IQueryOptions.cancel",
		"comment": "<p>Cancel the query</p>\n"
	},
	{
		"name": "IQueryOptions.ignoreWarningSearchEvent",
		"comment": "<p>If the analytics component is enabled in the interface, it will look for any query executed by the query controller for which no analytics event was associated.<br/>\nBy setting this property to true, this will cancel this check when the query is performed</p>\n"
	},
	{
		"name": "IQueryOptions.logInActionsHistory",
		"comment": "<p>Whether or not to log the query in the user actions history when using the page view script: <a href=\"https://github.com/coveo/coveo.analytics.js\">https://github.com/coveo/coveo.analytics.js</a>.\nOnly the &#39;q&#39; part of the query will be logged.\nThis option is useful, because it prevents the query to be logged twice when a <a href=\"https://coveo.github.io/search-ui/components/recommendation.html\">Recommendation</a> component is present.\nIt also makes sure that only relevant queries are logged. For exemple, the &#39;empty&#39; interface load query isn&#39;t logged.</p>\n"
	},
	{
		"name": "IQueryOptions.origin",
		"comment": "<p>The component from which the query originated. For example the pager will set the property to tweak it&#39;s behaviour</p>\n"
	},
	{
		"name": "IQueryOptions.searchAsYouType",
		"comment": "<p>Specify that the query to execute is a search as you type. This information will be passed down in the query events for component and external code to determine their behavior</p>\n"
	},
	{
		"name": "IQueryResult",
		"comment": "<p>The IQueryResult interface describes a single result returned by the Coveo REST Search API.</p>\n"
	},
	{
		"name": "IQueryResult.childResults",
		"comment": "<p>Contains the child results if parent-child loading was performed.\nSee the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.</p>\n"
	},
	{
		"name": "IQueryResult.clickUri",
		"comment": "<p>Contains the clickable URI of the document, which you can set on an <code>href</code> in your search interface.\nSee the <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a> document.</p>\n"
	},
	{
		"name": "IQueryResult.excerpt",
		"comment": "<p>Contains the excerpt of the document. Can be empty for certain types of documents (e.g., images, videos, etc.).\nSee the <a href=\"https://coveo.github.io/search-ui/components/excerpt.html\">Excerpt</a> component.</p>\n"
	},
	{
		"name": "IQueryResult.flags",
		"comment": "<p>Contains the list of flags that the document has. Each value is separated by a semicolon (<code>;</code>).</p>\n"
	},
	{
		"name": "IQueryResult.hasHtmlVersion",
		"comment": "<p>Contains a value specifying whether the document has an HTML version.\nSee the <a href=\"https://coveo.github.io/search-ui/components/quickview.html\">Quickview</a> component.</p>\n"
	},
	{
		"name": "IQueryResult.index",
		"comment": "<p>Contains the 0-based index value of the result, as returned by the Coveo REST Search API.</p>\n"
	},
	{
		"name": "IQueryResult.isRecommendation",
		"comment": "<p>Contains a value that specifies whether the result was recommended by the Coveo Machine Learning service.\nSee <a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=177\">Coveo Machine Learning</a>.</p>\n"
	},
	{
		"name": "IQueryResult.parentResult",
		"comment": "<p>Contains the parent result if parent-child loading was performed.\nSee the <a href=\"https://coveo.github.io/search-ui/components/folding.html\">Folding</a> component.</p>\n"
	},
	{
		"name": "IQueryResult.printableUri",
		"comment": "<p>Contains a printable URI (or path) to the document.</p>\n"
	},
	{
		"name": "IQueryResult.queryUid",
		"comment": "<p>Contains The query UID, as returned by the Coveo REST Search API.\nThis value is used mainly for usage analytics.</p>\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\n"
	},
	{
		"name": "IQueryResult.rankingInfo",
		"comment": "<p>Contains a ranking information which is returned along the document if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is <code>true</code>.</p>\n"
	},
	{
		"name": "IQueryResult.rating",
		"comment": "<p>Contains the rating of the document.\nSee the <a href=\"https://coveo.github.io/search-ui/components/resultrating.html\">ResultRating</a> component.</p>\n"
	},
	{
		"name": "IQueryResult.raw",
		"comment": "<p>Contains the raw field values of the document, expressed as key-value pairs.</p>\n"
	},
	{
		"name": "IQueryResult.searchInterface",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> inside which this result is rendered.\nThis value is used mainly to allow for conditional rendering of results templates.</p>\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\n"
	},
	{
		"name": "IQueryResult.state",
		"comment": "<p>Contains the query state of the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> inside which this result is rendered.\nThis value is used mainly to allow for conditional rendering of results templates.</p>\n<p>The Coveo JavaScript Search Framework adds this property client-side to each result.</p>\n"
	},
	{
		"name": "IQueryResult.title",
		"comment": "<p>Contains the title of the document</p>\n"
	},
	{
		"name": "IQueryResult.uniqueId",
		"comment": "<p>Contains a unique ID for the document.\nThis parameter is useful when making certain calls to a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a>.</p>\n"
	},
	{
		"name": "IQueryResult.uri",
		"comment": "<p>Contains the URI of the document.</p>\n"
	},
	{
		"name": "IQueryResults",
		"comment": "<p>Describe a set a results returned by the Search API</p>\n"
	},
	{
		"name": "IQueryResults.advancedExpression",
		"comment": "<p>The advanced expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.apiVersion",
		"comment": "<p>The search api version that was used for this query.</p>\n"
	},
	{
		"name": "IQueryResults.basicExpression",
		"comment": "<p>The basic expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.clientDuration",
		"comment": "<p>The duration of the query for the client.</p>\n"
	},
	{
		"name": "IQueryResults.constantExpression",
		"comment": "<p>The constant expression that was executed.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.duration",
		"comment": "<p>The duration of the query on the Coveo platform.</p>\n"
	},
	{
		"name": "IQueryResults.error",
		"comment": "<p>When an error occurs, and the errorsAsSuccess flag is passed, the error will be returned in the body of the response</p>\n"
	},
	{
		"name": "IQueryResults.exception",
		"comment": "<p>The exception that can be returned by the index if the query triggered an error</p>\n"
	},
	{
		"name": "IQueryResults.executionReport",
		"comment": "<p>A detailed execution report sent by the Search API.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.groupByResults",
		"comment": "<p>The group by results of the query</p>\n"
	},
	{
		"name": "IQueryResults.indexDuration",
		"comment": "<p>The duration of the query on the Coveo Index.</p>\n"
	},
	{
		"name": "IQueryResults.phrasesToHighlight",
		"comment": "<p>Phrases to highlight (with stemming) in the results</p>\n"
	},
	{
		"name": "IQueryResults.pipeline",
		"comment": "<p>The pipeline that was used for this query.</p>\n"
	},
	{
		"name": "IQueryResults.proxyDuration",
		"comment": "<p>The duration of the query on the proxy (not always applicable, can be optional)</p>\n"
	},
	{
		"name": "IQueryResults.queryCorrections",
		"comment": "<p>Possible query corrections (eg : <a href=\"https://coveo.github.io/search-ui/components/didyoumean.html\">DidYouMean</a>)</p>\n"
	},
	{
		"name": "IQueryResults.rankingExpressions",
		"comment": "<p>A list of ranking expression that were used to tweak the relevance.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQueryResults.refinedKeywords",
		"comment": "<p>The keywords selected by Reveal&#39;s Refined Query feature</p>\n"
	},
	{
		"name": "IQueryResults.results",
		"comment": "<p>The results of the query</p>\n"
	},
	{
		"name": "IQueryResults.searchUid",
		"comment": "<p>A unique identifier for this query, used mainly for the <a href=\"https://coveo.github.io/search-ui/components/analytics.html\">Analytics</a> service.</p>\n"
	},
	{
		"name": "IQueryResults.splitTestRun",
		"comment": "<p>The split test run that was used for this query. (A/B tests feature of the Coveo Query Pipeline)</p>\n"
	},
	{
		"name": "IQueryResults.termsToHighlight",
		"comment": "<p>Terms to highlight (with stemming) in the results</p>\n"
	},
	{
		"name": "IQueryResults.totalCount",
		"comment": "<p>The total number of results that matched the query in the index.</p>\n"
	},
	{
		"name": "IQueryResults.totalCountFiltered",
		"comment": "<p>The total number of results that matched the query in the index, but with the duplicate filtered.</p>\n"
	},
	{
		"name": "IQueryResults.triggers",
		"comment": "<p>The Coveo Query Pipeline triggers, if any were configured.</p>\n"
	},
	{
		"name": "IQueryResults.userIdentities",
		"comment": "<p>A list of user identities that were used to perform this query.<br/>\nOnly sent if <a href=\"https://coveo.github.io/search-ui/interfaces/iquery.html#debug\">IQuery.debug</a> is true</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/queryevents.html#querysuccess\">QueryEvents.querySuccess</a></p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.query",
		"comment": "<p>The query that was just executed</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.queryBuilder",
		"comment": "<p>The <a href=\"https://coveo.github.io/search-ui/classes/querybuilder.html\">QueryBuilder</a> that was used for the current query</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.results",
		"comment": "<p>The results returned by the query that was executed</p>\n"
	},
	{
		"name": "IQuerySuccessEventArgs.searchAsYouType",
		"comment": "<p>Determine if the query is a &quot;search as you type&quot;</p>\n"
	},
	{
		"name": "IQuerySummaryCancelLastActionArgs",
		"comment": "<p>Argument sent to all handlers bound on <a href=\"https://coveo.github.io/search-ui/classes/querysummaryevents.html#cancellastaction\">QuerySummaryEvents.cancelLastAction</a></p>\n"
	},
	{
		"name": "IRangeValue",
		"comment": "<p>The IRangeValue interface describes a single range of values in a group by clause.</p>\n"
	},
	{
		"name": "IRangeValue.end",
		"comment": "<p>Specifies the end of the range.\nE.g., <code>500</code></p>\n"
	},
	{
		"name": "IRangeValue.endInclusive",
		"comment": "<p>Specifies whether to include the value of the <a href=\"https://coveo.github.io/search-ui/interfaces/irangevalue.html#end\">end</a> property in this range.</p>\n"
	},
	{
		"name": "IRangeValue.label",
		"comment": "<p>Specifies the label to generate for this range.\nE.g., <code>0 - 500</code></p>\n"
	},
	{
		"name": "IRangeValue.start",
		"comment": "<p>Specifies the start of the range.\nE.g., <code>0</code></p>\n"
	},
	{
		"name": "IRankingExpression",
		"comment": "<p>Describe a ranking expression performed against the index (qre)</p>\n"
	},
	{
		"name": "IRankingExpression.expression",
		"comment": "<p>The expression that was executed in the ranking expression</p>\n"
	},
	{
		"name": "IRankingExpression.modifier",
		"comment": "<p>The relevance modifier that was applied</p>\n"
	},
	{
		"name": "IRankingFunction",
		"comment": "<p>Describe a ranking function that can be executed against the index.<br/>\nSee : <a href=\"https://developers.coveo.com/display/SearchREST/Ranking+Function\">https://developers.coveo.com/display/SearchREST/Ranking+Function</a></p>\n"
	},
	{
		"name": "IRankingFunction.expression",
		"comment": "<p>The mathematical expression that calculates the ranking value to add to the result score.</p>\n"
	},
	{
		"name": "IRankingFunction.normalizeWeight",
		"comment": "<p>Whether to normalize the value using the standard index scale or not. If you don&#39;t want to completely override the index ranking and use the qrf as a boost, you should turn this on.</p>\n"
	},
	{
		"name": "IRatingRequest",
		"comment": "<p>Describe a request to rate a document in the index</p>\n"
	},
	{
		"name": "IRatingRequest.rating",
		"comment": "<p>String to describe the rating.<br/>\nCan be &#39;Undefined&#39; | &#39;Lowest&#39; | &#39;Low&#39; | &#39;Average&#39; | &#39;Good&#39; | &#39;Best&#39;</p>\n"
	},
	{
		"name": "IRatingRequest.uniqueId",
		"comment": "<p>The uniqueId of the document to rate</p>\n"
	},
	{
		"name": "IRequestInfo",
		"comment": "<p>Information about a request</p>\n"
	},
	{
		"name": "IRequestInfo.begun",
		"comment": "<p>The timestamp at which the request started</p>\n"
	},
	{
		"name": "IRequestInfo.headers",
		"comment": "<p>The headers for the request.</p>\n"
	},
	{
		"name": "IRequestInfo.method",
		"comment": "<p>The method that was used for this request</p>\n"
	},
	{
		"name": "IRequestInfo.queryString",
		"comment": "<p>The query string parameters that were used for this request</p>\n"
	},
	{
		"name": "IRequestInfo.requestData",
		"comment": "<p>The data that was sent for this request</p>\n"
	},
	{
		"name": "IRequestInfo.requestDataType",
		"comment": "<p>The requestDataType that was used for this request</p>\n"
	},
	{
		"name": "IRequestInfo.url",
		"comment": "<p>Url that was requested</p>\n"
	},
	{
		"name": "IResponse",
		"comment": "<p>A generic response</p>\n"
	},
	{
		"name": "IResponse.data",
		"comment": "<p>Data of the response</p>\n"
	},
	{
		"name": "IResultsComponentBindings",
		"comment": "<p>The bindings, or environment in which each component inside the <a href=\"https://coveo.github.io/search-ui/components/resultlist.html\">ResultList</a> exists.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.componentOptionsModel",
		"comment": "<p>Contains the state of options for different components. Mainly used by <a href=\"https://coveo.github.io/search-ui/components/resultlink.html\">ResultLink</a>.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.componentStateModel",
		"comment": "<p>Contains the state of different components (enabled vs disabled). Allows to get/set values. Triggers component state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.queryController",
		"comment": "<p>Contains the singleton that allows to trigger queries.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.queryStateModel",
		"comment": "<p>Contains the state of the query. Allows to get/set values. Triggers state event when modified. Each component can listen to those events.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.root",
		"comment": "<p>The root HTMLElement of the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a> in which the component exists.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.searchInterface",
		"comment": "<p>A reference to the root of every component, the <a href=\"https://coveo.github.io/search-ui/components/searchinterface.html\">SearchInterface</a>.</p>\n"
	},
	{
		"name": "IResultsComponentBindings.usageAnalytics",
		"comment": "<p>A reference to the <a href=\"https://coveo.github.io/search-ui/components/analytics.html#client\">Analytics.client</a>.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion",
		"comment": "<p>The IRevealQuerySuggestCompletion interface describes a completion suggestion from the Coveo Machine Learning\nservice (see <a href=\"http://www.coveo.com/go?dest=cloudhelp&amp;lcid=9&amp;context=177\">Coveo Machine Learning</a>.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion.executableConfidence",
		"comment": "<p>Contains a value indicating the confidence level that this suggestion should be executed.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion.expression",
		"comment": "<p>Contains the expression to complete.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion.highlighted",
		"comment": "<p>Contains the highlighted expression to complete.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestCompletion.score",
		"comment": "<p>Contains a value indicating how certain the Coveo Machine Learning service is that this suggestion is actually\nrelevant.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest",
		"comment": "<p>The IRevealQuerySuggestRequest interface describes a request to the Coveo Machine Learning service query suggest.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.context",
		"comment": "<p>Specifies the context to use for the request.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.count",
		"comment": "<p>Specifies the number of suggestions that the Coveo Machine Learning service should return.\nDefault value is <code>5</code>.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.pipeline",
		"comment": "<p>Specifies the pipeline to use for the request.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.q",
		"comment": "<p>Specifies the query / word for which to get completion.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestRequest.searchHub",
		"comment": "<p>Specifies the search hub for which to get suggestions.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestResponse",
		"comment": "<p>The IRevealQuerySuggestResponse interface describes a response from the Coveo Machine Learning service query\nsuggestions.</p>\n"
	},
	{
		"name": "IRevealQuerySuggestResponse.completions",
		"comment": "<p>Contains an array of completions.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions",
		"comment": "<p>The possible options when creating a <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a></p>\n"
	},
	{
		"name": "ISearchEndpointOptions.accessToken",
		"comment": "<p>This allows using an OAuth2 or a search token to authenticate against the Search API.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.anonymous",
		"comment": "<p>Specifies that the request (and the Coveo Search API) does not need any kind of authentication.<br/>\nThis flag is only needed for specific setups when your requests are being blocked by your browser. If your queries are executing correctly, you do not need to bother.<br/>\nSetting this flag will prevent the withCredentials option to be set on the XMLHttpRequest, allowing performing cross-domain requests on a server that returns * in the Access-Control-Allow-Origin HTTP header.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.password",
		"comment": "<p>This is the password part of the credentials used to authenticate with the REST API.<br/>\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.queryStringArguments",
		"comment": "<p>Query string arguments to add to every request to the search endpoint.<br/>\neg : {&#39;foo&#39;:&#39;bar&#39;, &#39;a&#39;:&#39;b&#39;}</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.renewAccessToken",
		"comment": "<p>Specifies a function that, when called, will arrange for a new search token to be generated.<br/>\nIt is expected to return a Promise that should be resolved with the new token once it&#39;s available.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.requestModifier",
		"comment": "<p>A function which will allow external code to modify all endpoint call parameters before they are sent by the browser.\nUsed in very specific scenario where the network infrastructure require special request headers to be added or removed, for example.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.restUri",
		"comment": "<p>The uri for the search endpoint. eg: cloudplatform.coveo.com/rest/search</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.searchAlertsUri",
		"comment": "<p>The uri for the Coveo search alerts service. If not specified, will automatically resolve using the restUri otherwise</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.username",
		"comment": "<p>This is the username part of the credentials used to authenticate with the Search API using Basic Authentication.<br/>\nThis option should only be used for development purposes. Including secret credentials in an HTML page that is sent to a client browser is not secure.</p>\n"
	},
	{
		"name": "ISearchEndpointOptions.xmlHttpRequest",
		"comment": "<p>The XmlHttpRequest implementation to use instead of the native one.\nIf not specified, the native one is used.</p>\n"
	},
	{
		"name": "ISizeOptions",
		"comment": "<p>Available options for the size templateHelpers.</p>\n"
	},
	{
		"name": "ISizeOptions.base",
		"comment": "<p>The base into which to format the value.</p>\n"
	},
	{
		"name": "ISizeOptions.precision",
		"comment": "<p>The precision to use to format the size.</p>\n"
	},
	{
		"name": "IStreamHighlightOptions",
		"comment": "<p>The possible options when highlighting a stream.</p>\n"
	},
	{
		"name": "IStreamHighlightOptions.cssClass",
		"comment": "<p>The css class that the highlight will generate.\nDefaults to <code>coveo-highlight</code>.</p>\n"
	},
	{
		"name": "IStreamHighlightOptions.regexFlags",
		"comment": "<p>The regex flags that should be applied to generate the highlighting.\nDefaults to <code>gi</code>.</p>\n"
	},
	{
		"name": "IStringMap",
		"comment": "<p>A JSON which contains type T.\neg :</p>\n<pre><code>IS<span class=\"hljs-function\"><span class=\"hljs-title\">tringMap</span>&lt;<span class=\"hljs-keyword\">boolean</span>&gt; -&gt;</span> {<span class=\"hljs-string\">'foo'</span> : <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'bar'</span> : <span class=\"hljs-literal\">false</span>};\nIS<span class=\"hljs-function\"><span class=\"hljs-title\">tringMap</span>&lt;number&gt; -&gt;</span> {<span class=\"hljs-string\">'foo'</span> : <span class=\"hljs-number\">1</span> , <span class=\"hljs-string\">'bar'</span> : <span class=\"hljs-number\">123</span>}\n</code></pre>"
	},
	{
		"name": "ISubscription",
		"comment": "<p>Describe a subscription to the Coveo Search alerts service</p>\n"
	},
	{
		"name": "ISubscription.frequency",
		"comment": "<p>Frequency of the alerts</p>\n"
	},
	{
		"name": "ISubscription.id",
		"comment": "<p>The id of the subscription</p>\n"
	},
	{
		"name": "ISubscription.name",
		"comment": "<p>The name that should be used by the API to identify this subscription</p>\n"
	},
	{
		"name": "ISubscription.type",
		"comment": "<p>Type of subscription.<br/>\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\n"
	},
	{
		"name": "ISubscription.typeConfig",
		"comment": "<p>Config of the subscription</p>\n"
	},
	{
		"name": "ISubscription.user",
		"comment": "<p>The user associated with the subscription</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest",
		"comment": "<p>Describe a subscription to a single item (a result)</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.id",
		"comment": "<p>Unique id of the document</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.modifiedDateField",
		"comment": "<p>Which field on the result represent the modification date for which you wish to receive alerts</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.title",
		"comment": "<p>Title of the document</p>\n"
	},
	{
		"name": "ISubscriptionItemRequest.watchedFields",
		"comment": "<p>A list of field to monitor on the given document</p>\n"
	},
	{
		"name": "ISubscriptionQueryRequest",
		"comment": "<p>Describe a subscription to a single query</p>\n"
	},
	{
		"name": "ISubscriptionQueryRequest.modifiedDateField",
		"comment": "<p>Which field on the result set represent the modification date for which you wish to receive alerts</p>\n"
	},
	{
		"name": "ISubscriptionQueryRequest.query",
		"comment": "<p>Query to subscribe to</p>\n"
	},
	{
		"name": "ISubscriptionRequest",
		"comment": "<p>Describe a request to subscribe to the Coveo Search alerts service</p>\n"
	},
	{
		"name": "ISubscriptionRequest.frequency",
		"comment": "<p>Frequency of the alerts</p>\n"
	},
	{
		"name": "ISubscriptionRequest.name",
		"comment": "<p>The name that should be used by the API to identify this subscription</p>\n"
	},
	{
		"name": "ISubscriptionRequest.type",
		"comment": "<p>Type of subscription.<br/>\nCan be &#39;followQuery&#39; or &#39;followDocument&#39;</p>\n"
	},
	{
		"name": "ISubscriptionRequest.typeConfig",
		"comment": "<p>Config of the subscription</p>\n"
	},
	{
		"name": "ISubscriptionUser",
		"comment": "<p>Describe a user associated with a subscription to the Coveo Search alerts service</p>\n"
	},
	{
		"name": "ISubscriptionUser.email",
		"comment": "<p>The email of the user</p>\n"
	},
	{
		"name": "ISubscriptionUser.manageToken",
		"comment": "<p>The token used to manage the alerts via email.</p>\n"
	},
	{
		"name": "ISuccessResponse",
		"comment": "<p>A generic success response</p>\n"
	},
	{
		"name": "ISuccessResponse.data",
		"comment": "<p>Data of the response</p>\n"
	},
	{
		"name": "ISuccessResponse.duration",
		"comment": "<p>The time that the successfull response took to complete</p>\n"
	},
	{
		"name": "ITaggingRequest",
		"comment": "<p>Describe a tag request on a document</p>\n"
	},
	{
		"name": "ITaggingRequest.doAdd",
		"comment": "<p>Decide whether to add the tag value, or remove the tag value</p>\n"
	},
	{
		"name": "ITaggingRequest.fieldName",
		"comment": "<p>The field name to tag</p>\n"
	},
	{
		"name": "ITaggingRequest.fieldValue",
		"comment": "<p>The value to tag</p>\n"
	},
	{
		"name": "ITaggingRequest.uniqueId",
		"comment": "<p>The unique id of the document to tag</p>\n"
	},
	{
		"name": "ITemplateHelperFunction",
		"comment": "<p>A function that describe a templates.\nIt can take any number of arguments, but needs to return a simple string.</p>\n"
	},
	{
		"name": "ITimeSpanUtilsOptions",
		"comment": "<p>The possible options to use when calculating a timespan</p>\n"
	},
	{
		"name": "ITimeSpanUtilsOptions.isMilliseconds",
		"comment": "<p>Specify if the given timespan is in seconds or milliseconds</p>\n"
	},
	{
		"name": "ITopQueries",
		"comment": "<p>Describe a request to get top queries</p>\n"
	},
	{
		"name": "ITopQueries.pageSize",
		"comment": "<p>Determine how many suggestions to receive</p>\n"
	},
	{
		"name": "ITopQueries.queryText",
		"comment": "<p>The query text for which to receive suggestions</p>\n"
	},
	{
		"name": "ITrigger",
		"comment": "<p>A trigger is an action that the interface will perform (show a message, execute a function, redirect users) depending on the query that was performed.<br/>\nA trigger that can be configured in the Coveo Query Pipeline.</p>\n"
	},
	{
		"name": "ITriggerExecute",
		"comment": "<p>Execute a javascript function present in the page.</p>\n"
	},
	{
		"name": "ITriggerNotify",
		"comment": "<p>Notify (show a message) to a user</p>\n"
	},
	{
		"name": "ITriggerQuery",
		"comment": "<p>Perform a new query with a different query expression</p>\n"
	},
	{
		"name": "ITriggerRedirect",
		"comment": "<p>Redirect the user to another url</p>\n"
	},
	{
		"name": "IUserIdentity",
		"comment": "<p>Describe the identity of a user on the Coveo platform</p>\n"
	},
	{
		"name": "IUserIdentity.name",
		"comment": "<p>The name of the identity</p>\n"
	},
	{
		"name": "IUserIdentity.provider",
		"comment": "<p>The provider of the identity in the Coveo platform</p>\n"
	},
	{
		"name": "IViewAsHtmlOptions",
		"comment": "<p>Available options when calling against the <a href=\"https://coveo.github.io/search-ui/classes/searchendpoint.html\">SearchEndpoint</a> to view a document as an HTMLElement (quickview basically...)</p>\n"
	},
	{
		"name": "BaseFormTypes",
		"comment": "<p>The basic types of form available to build an advanced search section.</p>\n"
	},
	{
		"name": "ValidLayout",
		"comment": "<p>The possible valid and supported layouts.\nSee the <a href=\"https://developers.coveo.com/x/yQUvAg\">Result Layouts</a> documentation.</p>\n"
	}
]