var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="Test.ts" />
var Coveo;
(function (Coveo) {
    function registerCustomMatcher() {
        var customMatcher = {
            eventHandlerToHaveBeenCalledWith: function (util, customEqualityTesters) {
                return {
                    compare: function (actual, expected) {
                        var args = Array.prototype.slice.call(arguments, 0), expectedArgs = args.slice(1), result = { pass: false, message: '' };
                        if (!actual.calls.any()) {
                            result.message = 'Expected spy ' + actual.and.identity() + ' to be called, but was never called';
                            return result;
                        }
                        var found = _.chain(actual.calls.allArgs())
                            .flatten()
                            .pluck('detail')
                            .findWhere(expected)
                            .value();
                        if (found) {
                            result.pass = true;
                            result.message = 'Expected spy ' + actual.and.identity() + ' to not have been called with ' + JSON.stringify(expected) + ' but it was';
                        }
                        else {
                            result.message = 'Expected spy ' + actual.and.identity() + ' to have been called with ' + JSON.stringify(expected) + ' but it was called with ' + JSON.stringify(actual.calls.allArgs()[0][0].detail);
                        }
                        return result;
                    }
                };
            },
            toHaveBeenCalledTimes: function (util, customEqualityTesters) {
                return {
                    compare: function (actual, expected) {
                        var args = Array.prototype.slice.call(arguments, 0), result = { pass: false, message: undefined };
                        if (!expected) {
                            throw new Error('Expected times failed is required as an argument.');
                        }
                        actual = args[0];
                        var calls = actual.calls.count();
                        var timesMessage = expected === 1 ? 'once' : expected + ' times';
                        result.pass = calls === expected;
                        result.message = result.pass ?
                            'Expected spy ' + actual.and.identity() + ' not to have been called ' + timesMessage + '. It was called ' + calls + ' times.' :
                            'Expected spy ' + actual.and.identity() + ' to have been called ' + timesMessage + '. It was called ' + calls + ' times.';
                        return result;
                    }
                };
            }
        };
        jasmine.addMatchers(customMatcher);
    }
    Coveo.registerCustomMatcher = registerCustomMatcher;
})(Coveo || (Coveo = {}));
/// <reference path="Test.ts" />
var Coveo;
(function (Coveo) {
    var FakeResults = (function () {
        function FakeResults() {
        }
        FakeResults.createFakeResults = function (count, token) {
            if (count === void 0) { count = 10; }
            if (token === void 0) { token = ''; }
            var results = [];
            for (var i = 0; i < count; ++i) {
                results.push(FakeResults.createFakeResult(token + i.toString()));
            }
            return {
                searchUid: Coveo.QueryUtils.createGuid(),
                pipeline: 'pipeline',
                splitTestRun: 'splitTestRunName',
                totalCount: count != 0 ? count + 1 : 0,
                totalCountFiltered: count != 0 ? count + 1 : 0,
                duration: 321,
                indexDuration: 123,
                clientDuration: 456,
                results: results,
                groupByResults: [],
                queryCorrections: [],
                _folded: undefined,
                termsToHighlight: undefined,
                phrasesToHighlight: undefined,
                triggers: []
            };
        };
        FakeResults.createFakeResultsWithChildResults = function (count, numberOfChildResults, totalNumberOfChildResult) {
            if (count === void 0) { count = 10; }
            if (numberOfChildResults === void 0) { numberOfChildResults = 5; }
            if (totalNumberOfChildResult === void 0) { totalNumberOfChildResult = 5; }
            var results = [];
            for (var i = 0; i < count; ++i) {
                results.push(FakeResults.createFakeResultWithChildResult(i.toString(), numberOfChildResults, totalNumberOfChildResult));
            }
            return {
                searchUid: Coveo.QueryUtils.createGuid(),
                totalCount: count != 0 ? count + 1 : 0,
                totalCountFiltered: count != 0 ? count + 1 : 0,
                duration: 321,
                indexDuration: 123,
                clientDuration: 456,
                results: results,
                groupByResults: [],
                queryCorrections: [],
                _folded: undefined,
                termsToHighlight: undefined,
                phrasesToHighlight: undefined,
                triggers: []
            };
        };
        FakeResults.createFakeResult = function (token) {
            if (token === void 0) { token = 'foo'; }
            return {
                title: 'Title' + token,
                titleHighlights: [],
                uri: 'http://uri.' + token + '.com',
                printableUri: 'http://printable.uri.' + token + '.com',
                printableUriHighlights: [],
                clickUri: 'http://click.uri.' + token + '.com',
                uniqueId: 'uniqueId' + token,
                excerpt: 'excerpt' + token,
                excerptHighlights: [],
                firstSentences: 'firstSentences' + token,
                firstSentencesHighlights: [],
                hasHtmlVersion: true,
                hasMobileHtmlVersion: true,
                flags: 'HasThumbnail',
                summary: 'summary' + token,
                summaryHighlights: [],
                rankingInfo: '',
                raw: {
                    'string': 'string value',
                    'date': new Date(1980, 2, 11, 8, 30).valueOf(),
                    'number': 123,
                    'emails': 'mlaporte@coveo.com;dlavoie@coveo.com',
                    'empty': '',
                    'randomNumber': Math.random(),
                    'urihash': Coveo.QueryUtils.createGuid(),
                    'source': 'the source',
                    'collection': 'the collection',
                    'author': 'o.o'
                },
                childResults: [],
                termsToHighlight: {},
                phrasesToHighlight: {},
                index: 0,
                queryUid: 'the uid',
                rating: 3,
                state: {},
                isRecommendation: false
            };
        };
        FakeResults.createFakeResultWithChildResult = function (token, numberOfChildResult, totalNumberOfChildResult) {
            if (totalNumberOfChildResult === void 0) { totalNumberOfChildResult = 5; }
            var childResults = [];
            for (var i = 0; i < numberOfChildResult; i++) {
                childResults.push(FakeResults.createFakeResult(token + '-child' + i));
            }
            var ret = FakeResults.createFakeResult(token);
            ret.totalNumberOfChildResults = totalNumberOfChildResult;
            $.extend(ret, { childResults: childResults });
            return ret;
        };
        FakeResults.createFakeResultWithAttachments = function (token, numberOfAttachments, attachmentType, flags, attachmentsFlags, withSubAttachments) {
            if (token === void 0) { token = 'test'; }
            if (numberOfAttachments === void 0) { numberOfAttachments = 3; }
            if (attachmentType === void 0) { attachmentType = ['xml', 'pdf', 'txt']; }
            if (flags === void 0) { flags = 'HasThumbnail'; }
            if (attachmentsFlags === void 0) { attachmentsFlags = ['IsAttachment', 'IsAttachment', 'IsAttachment']; }
            if (withSubAttachments === void 0) { withSubAttachments = false; }
            var fake = FakeResults.createFakeResult(token);
            fake.flags = flags;
            if (withSubAttachments) {
                var subAttachments = [];
                for (var i = 0; i < numberOfAttachments; i++) {
                    subAttachments.push(FakeResults.createFakeResultWithAttachments('test1', 3, undefined, undefined, undefined, false));
                }
                fake.attachments = subAttachments;
            }
            else {
                fake.attachments = FakeResults.createFakeResults(numberOfAttachments).results;
            }
            _.each(attachmentType, function (type, index, list) {
                if (fake.attachments[index] != undefined) {
                    fake.attachments[index].raw['filetype'] = type;
                }
            });
            _.each(attachmentsFlags, function (flag, index, list) {
                if (fake.attachments[index] != undefined) {
                    fake.attachments[index].flags = flag;
                }
            });
            return fake;
        };
        FakeResults.createFakeGroupByResult = function (field, token, count, includeComputedValues) {
            Coveo.Assert.isNonEmptyString(field);
            Coveo.Assert.isNonEmptyString(token);
            Coveo.Assert.isLargerOrEqualsThan(0, count);
            var groupByValues = [];
            for (var i = 0; i < count; ++i) {
                groupByValues.push(FakeResults.createFakeGroupByValue(token + i.toString(), i + 1, 100 + i, includeComputedValues ? 1000 + i : undefined));
            }
            return {
                field: field,
                values: groupByValues
            };
        };
        FakeResults.createFakeRangeGroupByResult = function (field, start, end, steps) {
            if (start === void 0) { start = 1; }
            if (end === void 0) { end = 100; }
            if (steps === void 0) { steps = 25; }
            var groupByValues = [];
            for (var i = start; i <= end; i += (steps)) {
                groupByValues.push(FakeResults.createFakeGroupByRangeValue(i, i + (steps - 1), 'foobar' + i.toString(), i));
            }
            return {
                field: field,
                values: groupByValues
            };
        };
        FakeResults.createFakeHierarchicalGroupByResult = function (field, token, numberOfLevel, countByLevel, delimitingCharacter, includeComputedValues, weirdCasing) {
            if (numberOfLevel === void 0) { numberOfLevel = 2; }
            if (countByLevel === void 0) { countByLevel = 3; }
            if (delimitingCharacter === void 0) { delimitingCharacter = '|'; }
            if (includeComputedValues === void 0) { includeComputedValues = false; }
            if (weirdCasing === void 0) { weirdCasing = true; }
            var groupByValues = [];
            for (var i = 0; i < 2; ++i) {
                var groupByValueTopLevel = FakeResults.createFakeGroupByValue(token + i.toString(), i + 1, 100 + 1, includeComputedValues ? 1000 + i : undefined);
                groupByValues.push(groupByValueTopLevel);
                for (var j = 0; j < countByLevel; j++) {
                    var groupByValueSubLevel = FakeResults.createFakeGroupByValue(token + i.toString(), i + 1, 100 + 1, includeComputedValues ? 1000 + i : undefined);
                    groupByValueSubLevel.value = groupByValueSubLevel.lookupValue += delimitingCharacter + FakeResults.createFakeGroupByValue(token + i.toString() + '-' + +j.toString(), i + 1, 100 + i, includeComputedValues ? 1000 + i : undefined).value;
                    if (weirdCasing) {
                        groupByValueSubLevel.value = groupByValueSubLevel.lookupValue = _.map(groupByValueSubLevel.lookupValue.split(delimitingCharacter), function (value, k) { return (i + j + k) % 2 == 0 ? value.toLowerCase() : value.toUpperCase(); }).join(delimitingCharacter);
                    }
                    groupByValues.push(groupByValueSubLevel);
                }
            }
            return {
                field: field,
                values: groupByValues
            };
        };
        FakeResults.createFakeGroupByValue = function (token, count, score, computedValue) {
            Coveo.Assert.isNonEmptyString(token);
            return {
                value: token,
                lookupValue: token,
                numberOfResults: count,
                score: score || count * 2,
                computedFieldResults: computedValue ? [computedValue] : undefined
            };
        };
        FakeResults.createFakeGroupByRangeValue = function (from, to, token, count, score, computedValue) {
            return {
                value: from + '..' + to,
                lookupValue: token,
                numberOfResults: count,
                score: score || count * 2,
                computedFieldResults: computedValue ? [computedValue] : undefined
            };
        };
        FakeResults.createFakeFieldValue = function (token, count) {
            Coveo.Assert.isNonEmptyString(token);
            return {
                value: token,
                lookupValue: token,
                numberOfResults: count
            };
        };
        FakeResults.createFakeFieldValues = function (token, count) {
            Coveo.Assert.isNonEmptyString(token);
            Coveo.Assert.isLargerOrEqualsThan(0, count);
            var fieldValues = [];
            for (var i = 0; i < count; ++i) {
                fieldValues.push(FakeResults.createFakeFieldValue(token + i.toString(), i + 1));
            }
            return fieldValues;
        };
        FakeResults.createFakeOmniboxData = function (token, numberOfRows, numberOfSelectablePerRow, zIndex) {
            if (token === void 0) { token = 'test'; }
            if (numberOfRows === void 0) { numberOfRows = 1; }
            if (numberOfSelectablePerRow === void 0) { numberOfSelectablePerRow = 1; }
            if (zIndex === void 0) { zIndex = 1; }
            var rows = [];
            for (var i = 0; i < numberOfRows; i++) {
                var selectables = FakeResults.createFakeOmniboxSelectableData(token + ':' + i, numberOfSelectablePerRow);
                var element = $('<div class="coveo-omnibox-section"></div>');
                _.each(selectables, function (selectable) {
                    element.append(selectable);
                });
                rows.push({ element: element.get(0), zIndex: zIndex + i });
            }
            return rows;
        };
        FakeResults.createFakeDeferredOmniboxData = function (numberOfRows) {
            var rows = [];
            for (var i = 0; i < numberOfRows; i++) {
                rows.push({ deferred: $.Deferred() });
            }
            return rows;
        };
        FakeResults.createFakeOmniboxSelectableData = function (token, numberOfSelectables) {
            var rows = [];
            for (var i = 0; i < numberOfSelectables; i++) {
                rows.push($('<div class="coveo-omnibox-selectable">' + token + ':' + i + '</div>'));
            }
            return rows;
        };
        FakeResults.createFakeFeedItemResult = function (token, nbLikes, nbTopics, hasAttachment) {
            if (nbLikes === void 0) { nbLikes = 0; }
            if (nbTopics === void 0) { nbTopics = 0; }
            if (hasAttachment === void 0) { hasAttachment = false; }
            var result = this.createFakeResult(token);
            result.raw.sfparentid = 'parentid';
            result.raw.sfparentname = 'parentname';
            result.raw.sffeeditemid = token + 'id';
            result.clickUri = 'myURI/' + result.raw.sffeeditemid;
            result.raw.sfcreatedby = 'createdby';
            result.raw.sfcreatedbyid = 'createdbyid';
            result.raw.sfinsertedbyid = 'createdbyid';
            // Generate likes
            if (nbLikes > 0) {
                result.raw.sflikecount = nbLikes;
                result.raw.sflikedby = '';
                result.raw.sflikedbyid = '';
                for (var i = 1; i <= nbLikes; i++) {
                    result.raw.sflikedby += 'LikeName' + i;
                    result.raw.sflikedbyid += 'LikeId' + i;
                    if (i != nbLikes) {
                        result.raw.sflikedby += ';';
                        result.raw.sflikedbyid += ';';
                    }
                }
            }
            // Generate topics
            if (nbTopics > 0) {
                result.raw.coveochatterfeedtopics = '';
                for (var i = 1; i <= nbTopics; i++) {
                    result.raw.coveochatterfeedtopics += 'topic' + i;
                    if (i != nbTopics) {
                        result.raw.coveochatterfeedtopics += ';';
                    }
                }
            }
            // Generate post attachment
            if (hasAttachment) {
                result.raw.coveochatterfeedtopics = 'PostAttachment';
                result.raw.sfcontentfilename = 'fileName';
                result.raw.sfcontentversionid = token;
            }
            return result;
        };
        FakeResults.createFakeSearchEvent = function (token) {
            if (token === void 0) { token = 'foo'; }
            return {
                actionCause: token + 'actionCause',
                actionType: token + 'actionType',
                device: token + 'device',
                mobile: false,
                originLevel1: token + 'originLevel1',
                originLevel2: token + 'originLevel2',
                language: token + 'language',
                responseTime: 0,
                searchQueryUid: token + 'searchQueryUid',
                queryPipeline: token + 'queryPipeline',
                splitTestRunName: token + 'splitTestRunName',
                splitTestRunVersion: token + 'splitTestRunVersion',
                queryText: token + 'queryText',
                numberOfResults: 0,
                resultsPerPage: 0,
                pageNumber: 0,
                advancedQuery: token + 'advancedQuery',
                didYouMean: false,
                contextual: false
            };
        };
        FakeResults.createFakeClickEvent = function (token) {
            if (token === void 0) { token = 'foo'; }
            return {
                actionCause: token + 'actionCause',
                actionType: token + 'actionType',
                device: token + 'device',
                mobile: false,
                originLevel1: token + 'originLevel1',
                originLevel2: token + 'originLevel2',
                language: token + 'language',
                responseTime: 0,
                searchQueryUid: token + 'searchQueryUid',
                queryPipeline: token + 'queryPipeline',
                splitTestRunName: token + 'splitTestRunName',
                splitTestRunVersion: token + 'splitTestRunVersion',
                documentUri: token + 'documentUri',
                documentUriHash: token + 'documentUriHash',
                documentUrl: token + 'documentUrl',
                documentTitle: token + 'documentTitle',
                documentCategory: token + 'documentCategory',
                collectionName: token + 'collectionName',
                sourceName: token + 'sourceName',
                documentPosition: 0,
                viewMethod: token + 'viewMethod',
                rankingModifier: token + 'rankingModifier'
            };
        };
        FakeResults.createPopulateOmniboxEventArgs = function (queryboxContent, cursorPosition, rows) {
            if (rows === void 0) { rows = []; }
            return {
                completeQueryExpression: { word: queryboxContent, regex: new RegExp(queryboxContent, 'gi') },
                allQueryExpressions: undefined,
                currentQueryExpression: { word: queryboxContent, regex: new RegExp(queryboxContent, 'gi') },
                cursorPosition: cursorPosition,
                rows: [],
                clear: function () {
                },
                clearCurrentExpression: function () {
                },
                closeOmnibox: function () {
                },
                insertAt: function () {
                },
                replace: function () {
                },
                replaceCurrentExpression: function () {
                }
            };
        };
        return FakeResults;
    }());
    Coveo.FakeResults = FakeResults;
})(Coveo || (Coveo = {}));
/// <reference path="Test.ts" />
var Coveo;
(function (Coveo) {
    var Components;
    (function (Components) {
        var NoopComponent = (function (_super) {
            __extends(NoopComponent, _super);
            function NoopComponent(element, options, bindings) {
                _super.call(this, element, NoopComponent.ID, bindings);
            }
            NoopComponent.ID = 'NoopComponent';
            return NoopComponent;
        }(Coveo.Component));
        Components.NoopComponent = NoopComponent;
    })(Components = Coveo.Components || (Coveo.Components = {}));
})(Coveo || (Coveo = {}));
/// <reference path="Test.ts" />
var Coveo;
(function (Coveo) {
    var Mock;
    (function (Mock) {
        var MockEnvironmentBuilder = (function () {
            function MockEnvironmentBuilder() {
                this.root = Coveo.$$('div').el;
                this.element = Coveo.$$('div').el;
                this.result = undefined;
                this.searchEndpoint = mockSearchEndpoint();
                this.searchInterface = mockSearchInterface();
                this.queryController = mockQueryController();
                this.queryStateModel = mockComponent(Coveo.QueryStateModel, Coveo.QueryStateModel.ID);
                this.componentStateModel = mockComponent(Coveo.ComponentStateModel, Coveo.ComponentStateModel.ID);
                this.usageAnalytics = mockUsageAnalytics();
                this.componentOptionsModel = mockComponent(Coveo.ComponentOptionsModel, Coveo.ComponentOptionsModel.ID);
                this.built = false;
            }
            MockEnvironmentBuilder.prototype.withRoot = function (root) {
                this.root = root ? root : this.root;
                return this;
            };
            MockEnvironmentBuilder.prototype.withElement = function (element) {
                this.element = element ? element : this.element;
                return this;
            };
            MockEnvironmentBuilder.prototype.withLiveQueryStateModel = function () {
                this.queryStateModel = new Coveo.QueryStateModel(this.root);
                return this;
            };
            MockEnvironmentBuilder.prototype.withQueryStateModel = function (model) {
                this.queryStateModel = model;
                return this;
            };
            MockEnvironmentBuilder.prototype.withOldDesign = function () {
                this.searchInterface.isNewDesign = function () { return false; };
                return this;
            };
            MockEnvironmentBuilder.prototype.withCollaborativeRating = function () {
                this.searchInterface.options.enableCollaborativeRating = true;
                return this;
            };
            MockEnvironmentBuilder.prototype.withOs = function (os) {
                this.os = os;
                return this;
            };
            MockEnvironmentBuilder.prototype.withResult = function (result) {
                if (result === void 0) { result = Coveo.FakeResults.createFakeResult(); }
                this.result = result;
                return this;
            };
            MockEnvironmentBuilder.prototype.withEndpoint = function (endpoint) {
                if (endpoint === void 0) { endpoint = Mock.mockSearchEndpoint(); }
                this.searchEndpoint = endpoint;
                return this;
            };
            MockEnvironmentBuilder.prototype.build = function () {
                var _this = this;
                if (this.built) {
                    return this.getBindings();
                }
                if (this.element.parentNode == undefined) {
                    this.root.appendChild(this.element);
                }
                Coveo.Component.bindComponentToElement(this.root, this.searchInterface);
                Coveo.Component.bindComponentToElement(this.root, this.queryController);
                Coveo.Component.bindComponentToElement(this.root, this.queryStateModel);
                Coveo.Component.bindComponentToElement(this.root, this.componentStateModel);
                Coveo.Component.bindComponentToElement(this.root, this.componentOptionsModel);
                this.searchInterface.queryController = this.queryController;
                this.searchInterface.queryStateModel = this.queryStateModel;
                this.searchInterface.componentStateModel = this.componentStateModel;
                this.searchInterface.componentOptionsModel = this.componentOptionsModel;
                this.queryController.getEndpoint = function () { return _this.searchEndpoint; };
                if (Coveo.Utils.isNullOrUndefined(this.searchInterface.isNewDesign())) {
                    this.searchInterface.isNewDesign = function () { return true; };
                }
                if (this.result) {
                    Coveo.Component.bindResultToElement(this.element, this.result);
                }
                this.built = true;
                return this.getBindings();
            };
            MockEnvironmentBuilder.prototype.getBindings = function () {
                if (!this.built) {
                    return this.build();
                }
                return {
                    root: this.root,
                    element: this.element,
                    result: this.result,
                    searchEndpoint: this.searchEndpoint,
                    searchInterface: this.searchInterface,
                    queryController: this.queryController,
                    queryStateModel: this.queryStateModel,
                    usageAnalytics: this.usageAnalytics,
                    componentStateModel: this.componentStateModel,
                    componentOptionsModel: this.componentOptionsModel
                };
            };
            return MockEnvironmentBuilder;
        }());
        Mock.MockEnvironmentBuilder = MockEnvironmentBuilder;
        var AdvancedComponentSetupOptions = (function () {
            function AdvancedComponentSetupOptions(element, cmpOptions, modifyBuilder) {
                if (element === void 0) { element = Coveo.$$('div').el; }
                if (cmpOptions === void 0) { cmpOptions = {}; }
                if (modifyBuilder === void 0) { modifyBuilder = function (env) {
                    return env;
                }; }
                this.element = element;
                this.cmpOptions = cmpOptions;
                this.modifyBuilder = modifyBuilder;
            }
            AdvancedComponentSetupOptions.prototype.merge = function (toMerge) {
                if (toMerge) {
                    this.element = toMerge.element ? toMerge.element : this.element;
                    this.cmpOptions = toMerge.cmpOptions ? toMerge.cmpOptions : this.cmpOptions;
                    this.modifyBuilder = toMerge.modifyBuilder ? toMerge.modifyBuilder : this.modifyBuilder;
                }
                return this;
            };
            return AdvancedComponentSetupOptions;
        }());
        Mock.AdvancedComponentSetupOptions = AdvancedComponentSetupOptions;
        function mock(contructorFunc, name) {
            if (name === void 0) { name = 'mock'; }
            var keys = [];
            for (var key in contructorFunc.prototype) {
                keys.push(key);
            }
            return keys.length > 0 ? jasmine.createSpyObj(name, keys) : {};
        }
        Mock.mock = mock;
        function mockWindow() {
            var mockWindow = Mock.mock(window);
            mockWindow.location = {
                'href': '',
                'hash': ''
            };
            mockWindow.location.replace = function (newHref) {
                newHref = newHref || '';
                mockWindow.location.href = newHref;
                // 'http://www.coveo.com/#foo' => 'foo'
                // 'http://www.coveo.com/#' => ''
                // 'http://www.coveo.com/' => ''
                mockWindow.location.hash = newHref.substring(newHref.indexOf('#') + 1);
                // 'foo' => '#foo'
                // '' => ''
                if (mockWindow.location.hash != '') {
                    mockWindow.location.hash = '#' + mockWindow.location.hash;
                }
            };
            mockWindow.addEventListener = jasmine.createSpy('addEventListener');
            mockWindow.removeEventListener = jasmine.createSpy('removeEventListener');
            mockWindow.dispatchEvent = jasmine.createSpy('dispatchEvent');
            return mockWindow;
        }
        Mock.mockWindow = mockWindow;
        function mockComponent(constructorFunc, name) {
            if (name === void 0) { name = 'mock'; }
            var m = mock(constructorFunc, name);
            m.type = name;
            return m;
        }
        Mock.mockComponent = mockComponent;
        function mockSearchInterface() {
            var m = mockComponent(Coveo.SearchInterface, Coveo.SearchInterface.ID);
            m.options = {};
            m.options.originalOptionsObject = {};
            return m;
        }
        Mock.mockSearchInterface = mockSearchInterface;
        function mockQueryController() {
            var m = mockComponent(Coveo.QueryController, Coveo.QueryController.ID);
            var spy = m;
            spy.options = {};
            spy.options.resultsPerPage = 10;
            spy.fetchMore.and.returnValue($.Deferred());
            return m;
        }
        Mock.mockQueryController = mockQueryController;
        function mockSearchEndpoint() {
            var m = mock(Coveo.SearchEndpoint, 'SearchEndpoint');
            m.listFields.and.returnValue(new Promise(function (resolve, reject) { }));
            m.listFieldValues.and.returnValue(new Promise(function (resolve, reject) { }));
            m.search.and.returnValue(new Promise(function (resolve, reject) { }));
            m.getRevealQuerySuggest.and.returnValue(new Promise(function (resolve, reject) { }));
            m.extensions.and.returnValue(new Promise(function (resolve, reject) { }));
            m.getViewAsDatastreamUri.and.returnValue('http://datastream.uri');
            return m;
        }
        Mock.mockSearchEndpoint = mockSearchEndpoint;
        function mockUsageAnalytics() {
            var m = mock(Coveo.NoopAnalyticsClient, 'AnalyticsClient');
            m.getTopQueries.and.returnValue(new Promise(function (resolve, reject) { }));
            return m;
        }
        Mock.mockUsageAnalytics = mockUsageAnalytics;
        function basicComponentSetup(klass) {
            var envBuilder = new Mock.MockEnvironmentBuilder();
            return {
                env: envBuilder.build(),
                cmp: new klass(envBuilder.getBindings().element, {}, envBuilder.getBindings())
            };
        }
        Mock.basicComponentSetup = basicComponentSetup;
        function basicResultComponentSetup(klass) {
            var envBuilder = new Mock.MockEnvironmentBuilder().withResult();
            return {
                env: envBuilder.build(),
                cmp: new klass(envBuilder.getBindings().element, {}, envBuilder.getBindings(), envBuilder.result)
            };
        }
        Mock.basicResultComponentSetup = basicResultComponentSetup;
        function basicSearchInterfaceSetup(klass) {
            var div = Coveo.$$('div').el;
            var envBuilder = new Mock.MockEnvironmentBuilder().withRoot(div);
            var component = new klass(div);
            envBuilder.searchInterface = component;
            return {
                env: envBuilder.build(),
                cmp: component
            };
        }
        Mock.basicSearchInterfaceSetup = basicSearchInterfaceSetup;
        function optionsSearchInterfaceSetup(klass, options) {
            var div = Coveo.$$('div').el;
            var envBuilder = new Mock.MockEnvironmentBuilder().withRoot(div);
            var component = new klass(div, options);
            envBuilder.searchInterface = component;
            return {
                env: envBuilder.build(),
                cmp: component
            };
        }
        Mock.optionsSearchInterfaceSetup = optionsSearchInterfaceSetup;
        function optionsResultComponentSetup(klass, options, result) {
            var envBuilder = new Mock.MockEnvironmentBuilder().withResult(result);
            return {
                env: envBuilder.build(),
                cmp: new klass(envBuilder.getBindings().element, options, envBuilder.getBindings(), envBuilder.result)
            };
        }
        Mock.optionsResultComponentSetup = optionsResultComponentSetup;
        function optionsComponentSetup(klass, options) {
            var envBuilder = new Mock.MockEnvironmentBuilder();
            return {
                env: envBuilder.build(),
                cmp: new klass(envBuilder.getBindings().element, options, envBuilder.getBindings())
            };
        }
        Mock.optionsComponentSetup = optionsComponentSetup;
        function advancedComponentSetup(klass, options) {
            var baseOptions = new AdvancedComponentSetupOptions();
            var optsMerged = baseOptions.merge(options);
            var envBuilder = new Mock.MockEnvironmentBuilder().withElement(optsMerged.element);
            envBuilder = optsMerged.modifyBuilder(envBuilder);
            return {
                env: envBuilder.build(),
                cmp: new klass(envBuilder.getBindings().element, optsMerged.cmpOptions, envBuilder.getBindings())
            };
        }
        Mock.advancedComponentSetup = advancedComponentSetup;
        function advancedResultComponentSetup(klass, result, options) {
            var baseOptions = new AdvancedComponentSetupOptions();
            var optsMerged = baseOptions.merge(options);
            var envBuilder = new Mock.MockEnvironmentBuilder().withElement(optsMerged.element).withResult(result);
            envBuilder = optsMerged.modifyBuilder(envBuilder);
            return {
                env: envBuilder.build(),
                cmp: new klass(envBuilder.getBindings().element, optsMerged.cmpOptions, envBuilder.getBindings(), envBuilder.result, envBuilder.os)
            };
        }
        Mock.advancedResultComponentSetup = advancedResultComponentSetup;
        function initPageViewScript(store) {
            var HistoryStoreMock = (function () {
                function HistoryStoreMock() {
                }
                HistoryStoreMock.prototype.addElement = function (query) { store.addElement(query); };
                HistoryStoreMock.prototype.getHistory = function () { return store.getHistory(); };
                HistoryStoreMock.prototype.setHistory = function (history) { store.setHistory(history); };
                HistoryStoreMock.prototype.clear = function () { store.clear(); };
                return HistoryStoreMock;
            }());
            coveoanalytics = {
                history: {
                    HistoryStore: HistoryStoreMock
                }
            };
        }
        Mock.initPageViewScript = initPageViewScript;
    })(Mock = Coveo.Mock || (Coveo.Mock = {}));
})(Coveo || (Coveo = {}));
/// <reference path="Test.ts" />
var Coveo;
(function (Coveo) {
    var Simulate = (function () {
        function Simulate() {
        }
        Simulate.query = function (env, options) {
            options = _.extend({}, {
                query: new Coveo.QueryBuilder().build(),
                queryBuilder: new Coveo.QueryBuilder(),
                searchAsYouType: false,
                promise: new Promise(function () {
                }),
                results: Coveo.FakeResults.createFakeResults(),
                callbackDuringQuery: function () {
                },
                callbackAfterNoResults: function () {
                },
                callbackAfterQuery: function () {
                },
                deferSuccess: false,
                cancel: false
            }, options);
            if (options.queryCorrections) {
                options.results.queryCorrections = options.queryCorrections;
            }
            if (options.groupByResults) {
                options.results.groupByResults = options.groupByResults;
            }
            var newQueryEventArgs = {
                searchAsYouType: options.searchAsYouType,
                cancel: options.cancel
            };
            Coveo.$$(env.root).trigger(Coveo.QueryEvents.newQuery, newQueryEventArgs);
            var buildingQueryEventArgs = {
                queryBuilder: options.queryBuilder,
                searchAsYouType: false,
                cancel: false
            };
            Coveo.$$(env.root).trigger(Coveo.QueryEvents.buildingQuery, buildingQueryEventArgs);
            Coveo.$$(env.root).trigger(Coveo.QueryEvents.doneBuildingQuery, buildingQueryEventArgs);
            var duringQueryEventArgs = {
                query: options.query,
                queryBuilder: options.queryBuilder,
                promise: options.promise,
                searchAsYouType: options.searchAsYouType
            };
            Coveo.$$(env.root).trigger(Coveo.QueryEvents.duringQuery, duringQueryEventArgs);
            options.callbackDuringQuery();
            var success = function () {
                if (Coveo.Utils.exists(options.error)) {
                    var queryErrorEventArgs = {
                        queryBuilder: options.queryBuilder,
                        query: options.query,
                        endpoint: env.searchEndpoint,
                        error: options.error,
                        searchAsYouType: options.searchAsYouType
                    };
                    Promise.reject(options.promise).catch(function (e) { });
                    Coveo.$$(env.root).trigger(Coveo.QueryEvents.queryError, queryErrorEventArgs);
                }
                else {
                    var preprocessResultsEventArgs = {
                        queryBuilder: options.queryBuilder,
                        query: options.query,
                        results: options.results,
                        searchAsYouType: options.searchAsYouType
                    };
                    Coveo.$$(env.root).trigger(Coveo.QueryEvents.preprocessResults, preprocessResultsEventArgs);
                    Promise.resolve(new Promise(function (resolve, reject) {
                        resolve(options.results);
                    }));
                    if (options.results.totalCount == 0) {
                        var noResultsEventArgs = {
                            query: options.query,
                            queryBuilder: options.queryBuilder,
                            results: options.results,
                            searchAsYouType: options.searchAsYouType,
                            retryTheQuery: false
                        };
                        Coveo.$$(env.root).trigger(Coveo.QueryEvents.noResults, noResultsEventArgs);
                        options.callbackAfterNoResults();
                    }
                    var querySuccessEventArgs = {
                        query: options.query,
                        queryBuilder: options.queryBuilder,
                        results: options.results,
                        searchAsYouType: options.searchAsYouType
                    };
                    Coveo.$$(env.root).trigger(Coveo.QueryEvents.querySuccess, querySuccessEventArgs);
                    Coveo.$$(env.root).trigger(Coveo.QueryEvents.deferredQuerySuccess, querySuccessEventArgs);
                }
                if (!options.doNotFlushDefer) {
                    Coveo.Defer.flush();
                }
                options.callbackAfterQuery();
            };
            if (options.deferSuccess) {
                Coveo.Defer.defer(success);
            }
            else {
                success();
            }
            return options;
        };
        Simulate.omnibox = function (env, options) {
            var expression = {
                word: 'foo',
                regex: /foo/
            };
            var fakeOmniboxArgs = _.extend({}, {
                rows: [],
                completeQueryExpression: expression,
                allQueryExpression: expression,
                currentQueryExpression: expression,
                cursorPosition: 3,
                clear: jasmine.createSpy('clear'),
                clearCurrentExpression: jasmine.createSpy('clearCurrent'),
                replace: jasmine.createSpy('replace'),
                replaceCurrentExpression: jasmine.createSpy('replaceCurrentExpression'),
                insertAt: jasmine.createSpy('insertAt'),
                closeOmnibox: jasmine.createSpy('closeOmnibox')
            }, options);
            Coveo.$$(env.root).trigger(Coveo.OmniboxEvents.populateOmnibox, fakeOmniboxArgs);
            return fakeOmniboxArgs;
        };
        Simulate.breadcrumb = function (env, options) {
            var args = { breadcrumbs: [] };
            Coveo.$$(env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, args);
            return args.breadcrumbs;
        };
        Simulate.keyDown = function (element, key, shiftKey) {
            var event = new jQuery.Event('keydown');
            event.which = key;
            event.keyCode = key;
            if (shiftKey) {
                event.shiftKey = true;
            }
            $(element).trigger(event);
            Coveo.Defer.flush();
        };
        Simulate.keyUp = function (element, key, shiftKey) {
            var event = new jQuery.Event('keyup');
            event.which = key;
            event.keyCode = key;
            if (shiftKey) {
                event.shiftKey = true;
            }
            $(element).trigger(event);
            Coveo.Defer.flush();
        };
        Simulate.mouseDown = function (element) {
            var event = new jQuery.Event('mousedown');
            $(element).trigger(event);
        };
        Simulate.mouseUp = function (element) {
            var event = new jQuery.Event('mouseup');
            $(element).trigger(event);
        };
        Simulate.mouseMove = function (element, position) {
            var event = new jQuery.Event('mousemove');
            $(element).trigger(event);
        };
        Simulate.touchStart = function (element, position) {
            var event = eval('jQuery.Event("touchstart")');
            event = Simulate.touchEventWithPosition(event, position);
            $(element).trigger(event);
        };
        Simulate.touchEnd = function (element) {
            var event = eval('jQuery.Event("touchend")');
            $(element).trigger(event);
        };
        Simulate.touchMove = function (element, position) {
            var event = eval('jQuery.Event("touchmove")');
            event = Simulate.touchEventWithPosition(event, position);
            $(element).trigger(event);
        };
        Simulate.touchEventWithPosition = function (event, position) {
            event['originalEvent'] = {};
            event['originalEvent']['touches'] = [];
            event['originalEvent']['touches'][0] = {};
            event['originalEvent']['touches'][0]['clientX'] = position.clientX;
            event['originalEvent']['touches'][0]['clientY'] = position.clientY;
            return event;
        };
        Simulate.enterKey = function (element) {
            Simulate.keyUp(element, 13);
        };
        Simulate.changeInputValue = function (input, value) {
            $(input).val(value);
            $(input).change();
            Coveo.Defer.flush();
        };
        Simulate.changeCheckboxValue = function (checkbox, value) {
            $(checkbox).prop('checked', value);
            $(checkbox).change();
            Coveo.Defer.flush();
        };
        Simulate.setCursorPosition = function (input, position) {
            if (input.setSelectionRange) {
                input.focus();
                input.setSelectionRange(position, position);
            }
            else if (input.createTextRange) {
                var range = input.createTextRange();
                range.collapse(true);
                range.moveEnd('character', position);
                range.moveStart('character', position);
                range.select();
            }
            else if (typeof input.selectionStart != 'undefined') {
                input.selectionStart = position;
                input.selectionEnd = position;
                input.focus();
            }
            Coveo.Defer.flush();
        };
        return Simulate;
    }());
    Coveo.Simulate = Simulate;
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Dom', function () {
        var el;
        beforeEach(function () {
            el = document.createElement('div');
            Coveo.registerCustomMatcher();
        });
        afterEach(function () {
            el = undefined;
        });
        describe('without jquery', function () {
            var jqueryOrig = window['jQuery'];
            beforeEach(function () {
                // we want to test the basic event, not jquery one
                window['Coveo']['$'] = null;
            });
            afterEach(function () {
                window['Coveo']['$'] = jqueryOrig;
            });
            it('insert after should work properly', function () {
                var parent = document.createElement('div');
                var sibling = document.createElement('div');
                parent.appendChild(sibling);
                expect(sibling.nextSibling).toBeNull();
                new Coveo.Dom(el).insertAfter(sibling);
                expect(sibling.nextSibling).toBe(el);
                expect(sibling.previousSibling).toBeNull();
                var anotherSibling = document.createElement('div');
                parent.appendChild(anotherSibling);
                expect(el.nextSibling).toBe(anotherSibling);
                new Coveo.Dom(el).insertAfter(anotherSibling);
                expect(el.nextSibling).toBeNull();
                expect(el.previousSibling).toBe(anotherSibling);
            });
            it('insert before should work properly', function () {
                var parent = document.createElement('div');
                var sibling = document.createElement('div');
                parent.appendChild(sibling);
                expect(sibling.nextSibling).toBeNull();
                new Coveo.Dom(el).insertBefore(sibling);
                expect(sibling.nextSibling).toBeNull();
                expect(sibling.previousSibling).toBe(el);
                var anotherSibling = document.createElement('div');
                parent.appendChild(anotherSibling);
                expect(anotherSibling.nextSibling).toBeNull();
                expect(anotherSibling.previousSibling).toBe(sibling);
                new Coveo.Dom(el).insertBefore(anotherSibling);
                expect(el.nextSibling).toBe(anotherSibling);
                expect(el.previousSibling).toBe(sibling);
            });
            it('replace should work properly', function () {
                var other = document.createElement('div');
                var sibling = document.createElement('div');
                var otherSibling = document.createElement('div');
                var parent = document.createElement('div');
                parent.appendChild(sibling);
                parent.appendChild(el);
                parent.appendChild(otherSibling);
                expect(el.parentNode).toBe(parent);
                expect(other.parentNode).toBeNull();
                expect(el.previousSibling).toBe(sibling);
                expect(el.nextSibling).toBe(otherSibling);
                new Coveo.Dom(el).replaceWith(other);
                expect(el.parentNode).toBeNull();
                expect(other.parentNode).toBe(parent);
                expect(other.previousSibling).toBe(sibling);
                expect(other.nextSibling).toBe(otherSibling);
            });
            describe('prepend', function () {
                it('should work properly', function () {
                    var firstChild = document.createElement('div');
                    el.appendChild(firstChild);
                    expect(el.firstChild).toBe(firstChild);
                    var toPrepend = document.createElement('div');
                    new Coveo.Dom(el).prepend(toPrepend);
                    expect(el.firstChild).toBe(toPrepend);
                    expect(toPrepend.nextSibling).toBe(firstChild);
                });
                it('should work even if there if parent element is empty', function () {
                    var parent = Coveo.$$('div');
                    var toPrepend = Coveo.$$('span', { className: 'foo' }).el;
                    parent.prepend(toPrepend);
                    expect(parent.el.firstChild).toBe(toPrepend);
                });
                it('should work even if parent element contains text', function () {
                    var parent = Coveo.$$('div', {}, 'thisissometext');
                    var toPrepend = Coveo.$$('span', { className: 'foo' }).el;
                    parent.prepend(toPrepend);
                    expect(parent.el.firstChild).toBe(toPrepend);
                });
            });
            it('should give the correct text content', function () {
                el.innerHTML = '<div>this is the content</div>';
                expect(new Coveo.Dom(el).text()).toEqual('this is the content');
                el = document.createElement('div');
                el.innerHTML = '<div>this <span>is</span> the <div><span>content</span></div></div>';
                expect(new Coveo.Dom(el).text()).toEqual('this is the content');
            });
            it('should allow to set the text content', function () {
                var dom = new Coveo.Dom(el).text('this is the content');
                expect(el.innerHTML).toEqual('this is the content');
                /// Setting HTML content as text should still work
                el = document.createElement('div');
                dom = new Coveo.Dom(el).text('<div>this is the content</div>');
                expect(el.childNodes[0].nodeValue).toEqual('<div>this is the content</div>');
            });
            describe('createElement', function () {
                it('should properly create a single HTMLElement', function () {
                    var elem = Coveo.Dom.createElement('div', {
                        id: 'heidi',
                        className: 'kloss',
                        'data-my-attr': 'baz'
                    }, 'foobar2000');
                    expect(elem.tagName).toEqual('DIV');
                    expect(elem.id).toEqual('heidi');
                    expect(elem.className).toEqual('kloss');
                    expect(elem.dataset['myAttr']).toEqual('baz');
                    expect(elem.innerHTML).toEqual('foobar2000');
                });
                it('should properly create nested HTMLElement\'s', function () {
                    var elem = Coveo.Dom.createElement('header', undefined, Coveo.Dom.createElement('div', undefined, Coveo.Dom.createElement('span', undefined, 'foo')));
                    expect(elem.tagName).toEqual('HEADER');
                    expect(elem.firstChild.nodeName).toEqual('DIV');
                    expect(elem.firstChild.firstChild.nodeName).toEqual('SPAN');
                    expect(elem.firstChild.firstChild['innerHTML']).toEqual('foo');
                });
            });
            it('should find a child using a query selector', function () {
                var toFind = document.createElement('div');
                toFind.className = 'qwerty';
                el.appendChild(toFind);
                expect(new Coveo.Dom(el).find('.qwerty')).toBe(toFind);
                el = document.createElement('div');
                toFind = document.createElement('div');
                toFind.className = 'qwerty notqwerty';
                el.appendChild(toFind);
                expect(new Coveo.Dom(el).find('.qwerty')).toBe(toFind);
                el = document.createElement('div');
                toFind = document.createElement('div');
                toFind.id = 'qwerty';
                el.appendChild(toFind);
                expect(new Coveo.Dom(el).find('#qwerty')).toBe(toFind);
                el = document.createElement('div');
                var inner = document.createElement('div');
                toFind = document.createElement('div');
                toFind.id = 'qwerty';
                inner.appendChild(toFind);
                el.appendChild(inner);
                expect(new Coveo.Dom(el).find('#qwerty')).toBe(toFind);
            });
            it('should find all child using a query selector', function () {
                var toFind = document.createElement('div');
                toFind.className = 'qwerty';
                var toFind2 = document.createElement('div');
                toFind2.className = 'qwerty notqwerty';
                el.appendChild(toFind);
                el.appendChild(toFind2);
                expect(new Coveo.Dom(el).findAll('.qwerty')).toContain(toFind);
                expect(new Coveo.Dom(el).findAll('.qwerty')).toContain(toFind2);
            });
            it('using findClass should find the child element', function () {
                var toFind = document.createElement('div');
                toFind.className = 'qwerty';
                var toFind2 = document.createElement('div');
                toFind2.className = 'qwerty notqwerty';
                toFind2.id = 'shouldNotBeFound';
                el.appendChild(toFind);
                el.appendChild(toFind2);
                expect(new Coveo.Dom(el).findClass('qwerty')).toContain(toFind);
                expect(new Coveo.Dom(el).findClass('qwerty')).toContain(toFind2);
                expect(new Coveo.Dom(el).findClass('shouldNotBeFound').length).toBe(0);
            });
            it('using addClass should work properly', function () {
                el.className = 'qwerty';
                new Coveo.Dom(el).addClass('notqwerty');
                expect(el.className).toBe('qwerty notqwerty');
                el = document.createElement('div');
                el.className = 'qwerty';
                new Coveo.Dom(el).addClass('qwerty');
                expect(el.className).toBe('qwerty');
                el = document.createElement('div');
                new Coveo.Dom(el).addClass('qwerty');
                expect(el.className).toBe('qwerty');
                el = document.createElement('div');
                new Coveo.Dom(el).addClass(['a', 'b', 'c']);
                expect(el.className).toBe('a b c');
            });
            it('using removeClass should work properly', function () {
                el.className = 'qwerty';
                new Coveo.Dom(el).removeClass('qwerty');
                expect(el.className).toBe('');
                el = document.createElement('div');
                el.className = 'qwerty notqwerty';
                new Coveo.Dom(el).removeClass('qwerty');
                expect(el.className).toBe('notqwerty');
                el = document.createElement('div');
                new Coveo.Dom(el).removeClass('qwerty');
                expect(el.className).toBe('');
                el = document.createElement('div');
                el.className = 'popoqwerty qwerty notqwerty';
                new Coveo.Dom(el).removeClass('qwerty');
                expect(el.className).toBe('popoqwerty notqwerty');
            });
            it('using getClass should return the correct array with all classes', function () {
                el.className = 'qwerty';
                expect(new Coveo.Dom(el).getClass()).toContain('qwerty');
                el = document.createElement('div');
                el.className = 'qwerty notqwerty';
                expect(new Coveo.Dom(el).getClass()).toContain('qwerty');
                expect(new Coveo.Dom(el).getClass()).toContain('notqwerty');
            });
            it('using hasClass should return properly', function () {
                el.className = 'qwerty';
                expect(new Coveo.Dom(el).hasClass('qwerty')).toBe(true);
                el = document.createElement('div');
                el.className = 'qwerty notqwerty qwerty';
                expect(new Coveo.Dom(el).hasClass('qwerty')).toBe(true);
                el = document.createElement('div');
                el.className = 'qwerty notqwerty qwerty';
                expect(new Coveo.Dom(el).hasClass(' ')).toBe(false);
                el = document.createElement('div');
                el.className = 'qwerty notqwerty qwerty';
                expect(new Coveo.Dom(el).hasClass('')).toBe(false);
                el = document.createElement('div');
                el.className = 'qwerty';
                expect(new Coveo.Dom(el).hasClass('notqwerty')).toBe(false);
                el = document.createElement('div');
                expect(new Coveo.Dom(el).hasClass('')).toBe(false);
                el = document.createElement('div');
                expect(new Coveo.Dom(el).hasClass('qwerty')).toBe(false);
            });
            it('using toggleClass without switch should work properly', function () {
                el.className = 'qwerty';
                var domEl = new Coveo.Dom(el);
                domEl.toggleClass('qwerty');
                expect(domEl.hasClass('qwerty')).toBe(false);
                el = document.createElement('div');
                domEl = new Coveo.Dom(el);
                domEl.toggleClass('foobar2000');
                expect(domEl.hasClass('foobar2000')).toBe(true);
            });
            it('using toggleClass with switch should work properly', function () {
                var domEl = new Coveo.Dom(el);
                domEl.toggleClass('qwerty', false);
                expect(domEl.hasClass('qwerty')).toBe(false);
                domEl = new Coveo.Dom(document.createElement('div'));
                domEl.addClass('foobar2000');
                domEl.toggleClass('foobar2000', true);
                expect(domEl.hasClass('foobar2000')).toBe(true);
            });
            it('using detach should work properly', function () {
                var parent = document.createElement('div');
                parent.appendChild(el);
                expect(parent.children).toContain(el);
                new Coveo.Dom(el).detach();
                expect(parent.children).not.toContain(el);
            });
            it('using on should work properly', function () {
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).on('click', spy);
                el.click();
                expect(spy).toHaveBeenCalled();
                var spy2 = jasmine.createSpy('spy2');
                new Coveo.Dom(el).on('foo', spy2);
                var event = new CustomEvent('foo', {
                    detail: {
                        lorem: 'ipsum'
                    }
                });
                el.dispatchEvent(event);
                expect(spy2).toHaveBeenCalledWith(event, event.detail);
                var spy3 = jasmine.createSpy('spy3');
                new Coveo.Dom(el).on(['1', '2', '3'], spy3);
                var events = ['1', '2', '3'].map(function (evt) {
                    return new CustomEvent(evt);
                });
                events.forEach(function (evt) {
                    el.dispatchEvent(evt);
                });
                expect(spy3).toHaveBeenCalledTimes(3);
            });
            it('using one should work properly', function () {
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).one('click', spy);
                el.click();
                el.click();
                el.click();
                expect(spy).toHaveBeenCalled();
                expect(spy).toHaveBeenCalledTimes(1);
                expect(spy).not.toHaveBeenCalledTimes(3);
            });
            it('using off should work properly', function () {
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).on('click', spy);
                new Coveo.Dom(el).off('click', spy);
                el.click();
                expect(spy).not.toHaveBeenCalled();
                var spy2 = jasmine.createSpy('spy2');
                new Coveo.Dom(el).on(['1', '2', '3'], spy2);
                var events = ['1', '2', '3'].map(function (evt) {
                    return new CustomEvent(evt);
                });
                new Coveo.Dom(el).off(['1', '2', '3'], spy2);
                events.forEach(function (evt) {
                    el.dispatchEvent(evt);
                });
                expect(spy).not.toHaveBeenCalled();
            });
            it('using trigger should work properly', function () {
                Coveo.registerCustomMatcher();
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).on('click', spy);
                new Coveo.Dom(el).trigger('click');
                expect(spy).toHaveBeenCalled();
                var spy2 = jasmine.createSpy('spy2');
                new Coveo.Dom(el).on('foo', spy2);
                new Coveo.Dom(el).trigger('foo', { bar: 'baz' });
                expect(spy2).eventHandlerToHaveBeenCalledWith({ bar: 'baz' });
            });
            it('using isEmpty should work properly', function () {
                expect(new Coveo.Dom(el).isEmpty()).toBe(true);
                el.appendChild(document.createElement('div'));
                expect(new Coveo.Dom(el).isEmpty()).toBe(false);
                el = document.createElement('div');
                el.innerHTML = '        ';
                expect(new Coveo.Dom(el).isEmpty()).toBe(true);
            });
            it('should find ancestor element using closest', function () {
                var root = document.createElement('div');
                root.className = 'findme';
                root.appendChild(el);
                expect(new Coveo.Dom(el).closest('findme')).toBe(root);
            });
            it('should be able to tell if an element matches a selector', function () {
                el = document.createElement('div');
                el.className = 'foo bar foobar';
                el.setAttribute('id', 'batman');
                expect(new Coveo.Dom(el).is('div')).toBe(true);
                expect(new Coveo.Dom(el).is('.foo')).toBe(true);
                expect(new Coveo.Dom(el).is('.foobar')).toBe(true);
                expect(new Coveo.Dom(el).is('#batman')).toBe(true);
                // no leading point for class
                expect(new Coveo.Dom(el).is('foo')).toBe(false);
                // no leading # for id
                expect(new Coveo.Dom(el).is('batman')).toBe(false);
                // class does not exists
                expect(new Coveo.Dom(el).is('nope')).toBe(false);
                // not the correct tag
                expect(new Coveo.Dom(el).is('input')).toBe(false);
            });
            it('should be able to empty an element', function () {
                var append1 = document.createElement('div');
                var append2 = document.createElement('div');
                el.appendChild(append1);
                el.appendChild(append2);
                expect(append1.parentElement).toBe(el);
                expect(append2.parentElement).toBe(el);
                new Coveo.Dom(el).empty();
                expect(append1.parentElement).toBeNull();
                expect(append2.parentElement).toBeNull();
            });
        });
        describe('with jquery', function () {
            it('using on should work properly', function () {
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).on('click', spy);
                el.click();
                expect(spy).toHaveBeenCalled();
                var spy2 = jasmine.createSpy('spy2');
                new Coveo.Dom(el).on('foo', spy2);
                new Coveo.Dom(el).trigger('foo', {
                    detail: {
                        lorem: 'ipsum'
                    }
                });
                expect(spy2).toHaveBeenCalledWith(jasmine.any(jQuery.Event), jasmine.objectContaining({
                    detail: {
                        lorem: 'ipsum'
                    }
                }));
                var spy3 = jasmine.createSpy('spy3');
                new Coveo.Dom(el).on(['1', '2', '3'], spy3);
                var events = ['1', '2', '3'].map(function (evt) {
                    return new CustomEvent(evt);
                });
                events.forEach(function (evt) {
                    el.dispatchEvent(evt);
                });
                expect(spy3).toHaveBeenCalledTimes(3);
            });
            it('using one should work properly', function () {
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).one('click', spy);
                el.click();
                el.click();
                el.click();
                expect(spy).toHaveBeenCalled();
                expect(spy).toHaveBeenCalledTimes(1);
                expect(spy).not.toHaveBeenCalledTimes(3);
            });
            it('using off should work properly', function () {
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).on('click', spy);
                new Coveo.Dom(el).off('click', spy);
                el.click();
                expect(spy).not.toHaveBeenCalled();
                var spy2 = jasmine.createSpy('spy2');
                new Coveo.Dom(el).on(['1', '2', '3'], spy2);
                new Coveo.Dom(el).off(['1', '2', '3'], spy2);
                ['1', '2', '3'].forEach(function (evt) {
                    new Coveo.Dom(el).trigger(evt);
                });
                expect(spy).not.toHaveBeenCalled();
            });
            it('using trigger should work properly', function () {
                var spy = jasmine.createSpy('spy');
                new Coveo.Dom(el).on('click', spy);
                new Coveo.Dom(el).trigger('click');
                expect(spy).toHaveBeenCalled();
                var spy2 = jasmine.createSpy('spy2');
                new Coveo.Dom(el).on('foo', spy2);
                new Coveo.Dom(el).trigger('foo', { bar: 'baz' });
                expect(spy2).toHaveBeenCalledWith(jasmine.any(jQuery.Event), { bar: 'baz' });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('CookieUtils', function () {
        var mockDocument = {
            cookie: ''
        };
        var cookieDesc = Object.getOwnPropertyDescriptor(Document.prototype, 'cookie') ||
            Object.getOwnPropertyDescriptor(HTMLDocument.prototype, 'cookie');
        if (cookieDesc && cookieDesc.configurable) {
            Object.defineProperty(document, 'cookie', {
                get: function () {
                    return mockDocument.cookie;
                },
                set: function (val) {
                    mockDocument.cookie = val;
                }
            });
        }
        afterEach(function () {
            mockDocument.cookie = '';
        });
        it('sets a cookie accordingly', function () {
            Coveo.Cookie.set('foo', 'bar');
            expect(document.cookie.indexOf('foo=bar')).not.toBe(-1);
        });
        it('gets the right cookie when cookie exists', function () {
            Coveo.Cookie.set('dude', 'dudevalue');
            expect(Coveo.Cookie.get('dude')).toBe('dudevalue');
        });
        it('returns null if cookie doesn\'t exist', function () {
            expect(Coveo.Cookie.get('foobar2000')).toBe(null);
        });
        it('erases cookie accordingly', function () {
            // Phantom doesn't handle document.cookie
            if (isPhantomJs()) {
                expect(true).toBe(true);
            }
            else {
                document.cookie = 'coveo_patate=frite';
                Coveo.Cookie.erase('patate');
                expect(document.cookie.replace(' ', '').indexOf('coveo_patate=frite')).toBe(-1);
            }
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('L10N', function () {
        beforeEach(function () {
            String.toLocaleString({
                'en': {
                    'Foo': 'Bar',
                    'TwoNumbers': '{0} and {1}',
                    'baby': '{0} bab<sn>y</sn><pl>ies</pl>'
                },
                'fr': {
                    'Foo': 'Barre',
                    'TwoNumbers': '{0} et {1}',
                    'baby': '{0} bébé<pl>s</pl>'
                }
            });
        });
        it('should work for simple localizations', function () {
            String.locale = 'fr';
            expect(Coveo.L10N.format('Foo')).toBe('Barre');
            String.locale = 'en';
            expect(Coveo.L10N.format('Foo')).toBe('Bar');
        });
        it('should put parameters in the outputted string properly', function () {
            String.locale = 'fr';
            expect(Coveo.L10N.format('TwoNumbers', '37', '42')).toBe('37 et 42');
            String.locale = 'en';
            expect(Coveo.L10N.format('TwoNumbers', '37', '42')).toBe('37 and 42');
        });
        it('should automatically pluralize values higher than one', function () {
            String.locale = 'fr';
            expect(Coveo.L10N.format('baby', 0, 0)).toBe('0 bébé');
            expect(Coveo.L10N.format('baby', 0.42, 0.42)).toBe('0.42 bébé');
            expect(Coveo.L10N.format('baby', 1, 1)).toBe('1 bébé');
            expect(Coveo.L10N.format('baby', 1.37, 1.37)).toBe('1.37 bébés');
            expect(Coveo.L10N.format('baby', 42, 42)).toBe('42 bébés');
            String.locale = 'en';
            expect(Coveo.L10N.format('baby', 0, 0)).toBe('0 baby');
            expect(Coveo.L10N.format('baby', 0.42, 0.42)).toBe('0.42 baby');
            expect(Coveo.L10N.format('baby', 1, 1)).toBe('1 baby');
            expect(Coveo.L10N.format('baby', 1.37, 1.37)).toBe('1.37 babies');
            expect(Coveo.L10N.format('baby', 42, 42)).toBe('42 babies');
        });
        it('should force pluralization or singularization when last argument is boolean', function () {
            String.locale = 'fr';
            expect(Coveo.L10N.format('baby', 1, true)).toBe('1 bébés');
            expect(Coveo.L10N.format('baby', 37, false)).toBe('37 bébé');
            String.locale = 'en';
            expect(Coveo.L10N.format('baby', 1, true)).toBe('1 babies');
            expect(Coveo.L10N.format('baby', 37, false)).toBe('37 baby');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('HighlightUtils', function () {
        var lorem = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut';
        var uri = 'http://onlinehelp.coveo.com/en/CES/7.0/Administrator/Moving_the_Index_to_a_Different_Drive.htm';
        var netPath = '\\\\Programmes\\Ces\\config\\sources\\salesforce';
        var localPath = 'C:\\Programmes\\Ces\\config\\sources\\salesforce';
        describe('highlightString', function () {
            it('should wrap the passed highlights with tags using the specified class name', function () {
                var highlights = [
                    { offset: 3, length: 5 },
                    { offset: 10, length: 4 },
                    { offset: 18, length: 15 },
                    { offset: 45, length: 10 }
                ];
                var expectedHighlight = 'Lor<span class="coveo-highlight">em ip</span>su<span class="coveo-highlight">m do</span>lor <span class="coveo-highlight">sit amet, conse</span>ctetur adipi<span class="coveo-highlight">sicing eli</span>t, sed do eiusmod tempor incididunt ut';
                expect(Coveo.HighlightUtils.highlightString(lorem, highlights, null, 'coveo-highlight')).toBe(expectedHighlight);
            });
            it('should ignore highlights that are out of a shortened string\'s bounds', function () {
                var shortenedString = Coveo.StringAndHoles.shortenString(lorem, 35, '...');
                var highlights = [
                    { offset: 3, length: 5 },
                    { offset: 10, length: 4 },
                    { offset: 18, length: 15 },
                    { offset: 45, length: 10 }
                ];
                var expectedHighlight = 'Lor<span class="coveo-highlight">em ip</span>su<span class="coveo-highlight">m do</span>lor <span class="coveo-highlight">sit amet,</span>...';
                var highlightedString = Coveo.HighlightUtils.highlightString(shortenedString.value, highlights, shortenedString.holes, 'coveo-highlight');
                expect(highlightedString).toBe(expectedHighlight);
            });
            it('should ignore highlights that are out of a shortened local path\'s bounds', function () {
                var shortenedString = Coveo.StringAndHoles.shortenPath(localPath, 15);
                var highlights = [
                    { offset: 3, length: 5 },
                    { offset: 10, length: 4 },
                    { offset: 18, length: 15 },
                    { offset: 45, length: 10 }
                ];
                var expectedHighlight = 'C:\\...<span class="coveo-highlight">ces\\</span>sa...';
                var highlightedString = Coveo.HighlightUtils.highlightString(shortenedString.value, highlights, shortenedString.holes, 'coveo-highlight');
                expect(highlightedString).toBe(expectedHighlight);
                shortenedString = Coveo.StringAndHoles.shortenPath(localPath, 30);
                expectedHighlight = 'C:\\...<span class="coveo-highlight">fig\\sources\\</span>salesforce';
                highlightedString = Coveo.HighlightUtils.highlightString(shortenedString.value, highlights, shortenedString.holes, 'coveo-highlight');
                expect(highlightedString).toBe(expectedHighlight);
            });
            it('should ignore highlights that are out of a shortened network path\'s bounds', function () {
                var shortenedString = Coveo.StringAndHoles.shortenPath(netPath, 30);
                var highlights = [
                    { offset: 3, length: 5 },
                    { offset: 10, length: 4 },
                    { offset: 16, length: 15 },
                    { offset: 45, length: 10 }
                ];
                var expectedHighlight = '\\\\...<span class="coveo-highlight">ig\\sources\\</span>salesforce';
                var highlightedString = Coveo.HighlightUtils.highlightString(shortenedString.value, highlights, shortenedString.holes, 'coveo-highlight');
                expect(highlightedString).toBe(expectedHighlight);
            });
            it('should ignore highlights that are out of a shortened uri\'s bounds', function () {
                var shortenedString = Coveo.StringAndHoles.shortenUri(uri, 60);
                var highlights = [
                    { offset: 12, length: 4 },
                    { offset: 18, length: 15 },
                    { offset: 45, length: 10 }
                ];
                var expectedHighlight = 'http://onlin<span class="coveo-highlight">ehel</span>p.<span class="coveo-highlight">coveo.com/</span>...<span class="coveo-highlight">/Mo</span>ving_the_Index_to_a_Dif...';
                var highlightedString = Coveo.HighlightUtils.highlightString(shortenedString.value, highlights, shortenedString.holes, 'coveo-highlight');
                expect(highlightedString).toBe(expectedHighlight);
            });
        });
        describe('shortenString', function () {
            it('should shorten the string to the specified number of characters and append the specified value', function () {
                var shortenedString = Coveo.StringAndHoles.shortenString(lorem, 60, '...');
                expect(shortenedString).toEqual(jasmine.objectContaining({
                    value: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit,...',
                    holes: [
                        { begin: 57, size: 36, replacementSize: 3 }
                    ]
                }));
            });
            it('should not shorten string that is shorter than the specified value', function () {
                var shortenedString = Coveo.StringAndHoles.shortenString(lorem, 9000, '...');
                expect(shortenedString.value).toBe(lorem);
                expect(shortenedString.holes).toBeUndefined();
            });
        });
        describe('shortenPath', function () {
            it('should shorten local path properly', function () {
                var shortenedPath = Coveo.StringAndHoles.shortenPath(localPath, 30);
                expect(shortenedPath).toEqual(jasmine.objectContaining({
                    value: 'C:\\...fig\\sources\\salesforce',
                    holes: [
                        { begin: 3, size: 18, replacementSize: 3 }
                    ]
                }));
            });
            it('should shorten network path properly', function () {
                var shortenedNetPath = Coveo.StringAndHoles.shortenPath(netPath, 30);
                expect(shortenedNetPath).toEqual(jasmine.objectContaining({
                    value: '\\\\...ig\\sources\\salesforce',
                    holes: [
                        { begin: 2, size: 18, replacementSize: 3 }
                    ]
                }));
            });
            it('should shorten network path to an absurd amount', function () {
                var shortenedNetPath = Coveo.StringAndHoles.shortenPath(netPath, 15);
                expect(shortenedNetPath).toEqual(jasmine.objectContaining({
                    value: '\\\\...es\\sale...',
                    holes: [
                        { begin: 2, size: 26, replacementSize: 3 },
                        { begin: 12, size: 6, replacementSize: 3 }
                    ]
                }));
            });
        });
        describe('shortenUri', function () {
            it('should shorten an uri properly', function () {
                var shortenedUri = Coveo.StringAndHoles.shortenUri(uri, 60);
                expect(shortenedUri).toEqual(jasmine.objectContaining({
                    value: 'http://onlinehelp.coveo.com/.../Moving_the_Index_to_a_Dif...',
                    holes: [
                        { begin: 28, size: 24, replacementSize: 3 },
                        { begin: 57, size: 16, replacementSize: 3 }
                    ]
                }));
            });
            it('should shorten an uri to an absurd amount', function () {
                var shortenedUri = Coveo.StringAndHoles.shortenUri(uri, 15);
                expect(shortenedUri).toEqual(jasmine.objectContaining({
                    value: 'http://onlin...',
                    holes: [
                        { begin: 28, size: 24, replacementSize: 3 },
                        { begin: 12, size: 61, replacementSize: 3 }
                    ]
                }));
            });
            it('should not strip end characters if there is enough room for them', function () {
                var shortenedUri = Coveo.StringAndHoles.shortenUri(uri, 80);
                expect(shortenedUri).toEqual(jasmine.objectContaining({
                    value: 'http://onlinehelp.coveo.com/.../Moving_the_Index_to_a_Different_Drive.htm',
                    holes: [
                        { begin: 28, size: 24, replacementSize: 3 }
                    ]
                }));
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('PromisesShim', function () {
        it('should shim finally', function (done) {
            new Promise(function (resolve, reject) {
                resolve(true);
            }).finally(function () {
                // dummy check, what we really need to see is that done was called
                expect(true).toBe(true);
                done();
            });
        });
        it('should shim done', function (done) {
            // In a normal browser, this would require
            // to import es6-promises.
            // Testing for phantom js is good enough
            if (isPhantomJs()) {
                var p = new Promise(function (resolve, reject) {
                    resolve(true);
                });
                p.done(function (value) {
                    expect(value).toBe(true);
                    done();
                });
            }
            else {
                expect(true).toBe(true);
                done();
            }
        });
        it('should shim fail', function (done) {
            // In a normal browser, this would require
            // to import es6-promises.
            // Testing for phantom js is good enough
            if (isPhantomJs()) {
                var p = new Promise(function (resolve, reject) {
                    reject(false);
                });
                p.fail(function (value) {
                    expect(value).toBe(false);
                    done();
                });
            }
            else {
                expect(true).toBe(true);
                done();
            }
        });
    });
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    describe('Model', function () {
        var model;
        var div;
        var env;
        var bindings;
        beforeEach(function () {
            div = document.createElement('div');
            env = new Coveo.Mock.MockEnvironmentBuilder().withRoot(div).build();
            Coveo.registerCustomMatcher();
        });
        afterEach(function () {
            div = null;
            env = null;
            model = null;
        });
        describe('with basic setup', function () {
            var spy;
            beforeEach(function () {
                model = new Coveo.Model(div, 'test', {
                    foo: 'bar'
                });
                spy = jasmine.createSpy('spy');
            });
            it('can be built with attributes', function () {
                expect(model.attributes).toEqual({
                    foo: 'bar'
                });
            });
            it('will trigger event on changeOne', function () {
                Coveo.$$(div).on('test:change:foo', spy);
                model.set('foo', 'new value');
                model.set('foo', 'new value');
                expect(spy).toHaveBeenCalledTimes(1);
            });
            it('will trigger event on change any', function () {
                Coveo.$$(div).on('test:change', spy);
                model.registerNewAttribute('newAttr', 'something');
                model.set('foo', 'bar2');
                model.set('foo', 'bar3');
                model.set('newAttr', 'something else');
                model.set('newAttr', 'something else');
                expect(spy).toHaveBeenCalledTimes(3);
            });
            it('will trigger event on reset', function () {
                Coveo.$$(div).on('test:reset', spy);
                model.reset();
                expect(spy).toHaveBeenCalledTimes(1);
            });
            it('will trigger event on all', function () {
                Coveo.$$(div).on('test:all', spy);
                model.set('foo', 'bar2');
                model.reset();
                model.registerNewAttribute('newAttr', 'something');
                model.set('newAttr', 'booo');
                model.reset();
                expect(spy).toHaveBeenCalledTimes(4);
            });
            it('will throw on type mismatch', function () {
                expect(function () { return model.set('foo', 1); }).toThrow();
                expect(function () { return model.set('foo', {}); }).toThrow();
                expect(function () { return model.set('foo', true); }).toThrow();
                expect(function () { return model.set('foo', false); }).toThrow();
            });
            it('can setMultiple', function () {
                model.registerNewAttribute('newAttr', 'newValue');
                model.setMultiple({
                    foo: 'new stuff',
                    newAttr: 'new stuff too'
                });
                expect(model.get('foo')).toBe('new stuff');
                expect(model.get('newAttr')).toBe('new stuff too');
            });
            it('can return all attributes that are not at their default state', function () {
                model.registerNewAttribute('newAttr', 'newValue');
                model.set('foo', 'new stuff');
                expect(model.getAttributes()).toEqual({
                    'foo': 'new stuff'
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    describe('QueryStateModel', function () {
        var queryState;
        var div;
        var env;
        beforeEach(function () {
            div = document.createElement('div');
            env = new Coveo.Mock.MockEnvironmentBuilder().withRoot(div).build();
            queryState = new Coveo.QueryStateModel(div, undefined);
        });
        afterEach(function () {
            div = null;
            env = null;
            queryState = null;
        });
        it('can determine if a facet is active if one facet has selected values', function () {
            queryState.registerNewAttribute('f:@foobar', ['foo', 'bar']);
            expect(queryState.atLeastOneFacetIsActive()).toBe(true);
        });
        it('can determine if a facet is active if more than one facet has selected values', function () {
            queryState.registerNewAttribute('f:@foobar', ['foo', 'bar']);
            queryState.registerNewAttribute('f:@foobar2', ['foo2']);
            expect(queryState.atLeastOneFacetIsActive()).toBe(true);
        });
        it('can determine if a facet is active if one facet has excluded values', function () {
            queryState.registerNewAttribute('f:@foobar:not', ['foo', 'bar']);
            expect(queryState.atLeastOneFacetIsActive()).toBe(true);
        });
        it('can determine if no facet is active if nothing is selected', function () {
            queryState.registerNewAttribute('f:@foobar', []);
            expect(queryState.atLeastOneFacetIsActive()).toBe(false);
        });
        it('can validate on the first attribute', function () {
            expect(function () { return queryState.set('first', -1); }).toThrow();
            expect(function () { return queryState.set('first', 'haha'); }).toThrow();
            expect(function () { return queryState.set('first', {}); }).toThrow();
            expect(function () { return queryState.set('first', false); }).toThrow();
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FacetQueryController', function () {
        var mockFacet;
        var facetQueryController;
        beforeEach(function () {
            mockFacet = Coveo.Mock.mock(Coveo.Facet);
            mockFacet.options = {};
            mockFacet.options.field = '@field';
            var values = Coveo.Mock.mock(Coveo.FacetValues);
            mockFacet.values = values;
            mockFacet.values.hasSelectedOrExcludedValues.and.returnValue(true);
            facetQueryController = new Coveo.FacetQueryController(mockFacet);
        });
        afterEach(function () {
            mockFacet = null;
            facetQueryController = null;
        });
        it('should compute a filter expression', function () {
            mockFacet.values.getSelected.and.returnValue([Coveo.FacetValue.create('foo'), Coveo.FacetValue.create('bar')]);
            mockFacet.values.getExcluded.and.returnValue([]);
            var expectedBuilder = new Coveo.ExpressionBuilder();
            expectedBuilder.addFieldExpression('@field', '==', ['foo', 'bar']);
            expect(facetQueryController.computeOurFilterExpression()).toBe(expectedBuilder.build());
            mockFacet.values.getExcluded.and.returnValue([Coveo.FacetValue.create('exclude1'), Coveo.FacetValue.create('exclude2')]);
            expectedBuilder.addFieldNotEqualExpression('@field', ['exclude1', 'exclude2']);
            expect(facetQueryController.computeOurFilterExpression()).toBe(expectedBuilder.build());
        });
        describe('should push a group by into a query builder', function () {
            beforeEach(function () {
                mockFacet.values.getSelected.and.returnValue([Coveo.FacetValue.create('foo'), Coveo.FacetValue.create('bar')]);
                mockFacet.values.getExcluded.and.returnValue([]);
                mockFacet.numberOfValues = 5;
            });
            it('should put a group by into a query builder', function () {
                mockFacet.numberOfValues = 23;
                var queryBuilder = new Coveo.QueryBuilder();
                facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
                var groupByRequest = queryBuilder.build().groupBy[0];
                expect(groupByRequest.allowedValues).toEqual(jasmine.arrayContaining(['foo', 'bar']));
                expect(groupByRequest.field).toBe('@field');
                expect(groupByRequest.maximumNumberOfValues).toBe(23);
            });
            it('should request 1 more value if more / less is enabled', function () {
                mockFacet.options.enableMoreLess = true;
                var queryBuilder = new Coveo.QueryBuilder();
                facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
                var groupByRequest = queryBuilder.build().groupBy[0];
                expect(groupByRequest.maximumNumberOfValues).toBe(6);
            });
            it('should request only allowed values if set on the facet', function () {
                mockFacet.options.allowedValues = ['a', 'b', 'c'];
                var queryBuilder = new Coveo.QueryBuilder();
                facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
                var groupByRequest = queryBuilder.build().groupBy[0];
                expect(groupByRequest.allowedValues).toEqual(jasmine.arrayContaining(['a', 'b', 'c']));
                expect(groupByRequest.allowedValues).not.toEqual(jasmine.arrayContaining(['foo', 'bar']));
            });
            it('should use lookupfield if set on facet', function () {
                mockFacet.options.lookupField = '@lookupfield';
                var queryBuilder = new Coveo.QueryBuilder();
                facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
                var groupByRequest = queryBuilder.build().groupBy[0];
                expect(groupByRequest.lookupField).toBe('@lookupfield');
            });
            it('should use computed field if set on facet', function () {
                mockFacet.options.computedField = '@computedfield';
                mockFacet.options.computedFieldOperation = 'sum';
                var queryBuilder = new Coveo.QueryBuilder();
                facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
                var groupByRequest = queryBuilder.build().groupBy[0];
                expect(groupByRequest.computedFields[0]).toEqual(jasmine.objectContaining({
                    field: '@computedfield',
                    operation: 'sum'
                }));
            });
            it('should use the additional filter if set on facet', function () {
                mockFacet.options.additionalFilter = '@additionalfilter';
                var queryBuilder = new Coveo.QueryBuilder();
                facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
                var groupByRequest = queryBuilder.build().groupBy[0];
                expect(groupByRequest.constantQueryOverride).toBe('@additionalfilter');
            });
            it('should keep the expression to use for facet search after building a group by', function () {
                var builder = new Coveo.QueryBuilder();
                builder.expression.add('something');
                builder.constantExpression.add('something constant');
                facetQueryController.putGroupByIntoQueryBuilder(builder);
                expect(facetQueryController.expressionToUseForFacetSearch).toBe('something');
                expect(facetQueryController.constantExpressionToUseForFacetSearch).toBe('something constant');
                facetQueryController.prepareForNewQuery();
                expect(facetQueryController.expressionToUseForFacetSearch).toBeUndefined();
                expect(facetQueryController.constantExpressionToUseForFacetSearch).toBeUndefined();
            });
        });
        describe('should perform search', function () {
            var mockEndpoint;
            var mockQueryController;
            beforeEach(function () {
                mockEndpoint = Coveo.Mock.mockSearchEndpoint();
                mockQueryController = Coveo.Mock.mockQueryController();
                mockFacet.searchInterface = {};
                mockFacet.searchInterface.isNewDesign = function () {
                    return true;
                };
                mockFacet.queryController = mockQueryController;
                mockFacet.facetQueryController = facetQueryController;
                mockFacet.getEndpoint = jasmine.createSpy('endpoint');
                mockFacet.getEndpoint.and.returnValue(mockEndpoint);
                mockFacet.queryController.getLastQuery.and.returnValue(new Coveo.QueryBuilder().build());
            });
            afterEach(function () {
                mockEndpoint = null;
                mockQueryController = null;
            });
            it('with params', function () {
                var params = new Coveo.FacetSearchParameters(mockFacet);
                facetQueryController.search(params);
                expect(facetQueryController.facet.getEndpoint().search).toHaveBeenCalled();
                params.alwaysInclude = ['foo', 'bar'];
                facetQueryController.search(params);
                expect(facetQueryController.facet.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    groupBy: jasmine.arrayContaining([jasmine.objectContaining({
                            allowedValues: jasmine.arrayContaining(['foo', 'bar'])
                        })])
                }));
                params.setValueToSearch('test');
                facetQueryController.search(params);
                expect(facetQueryController.facet.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    groupBy: jasmine.arrayContaining([jasmine.objectContaining({
                            allowedValues: jasmine.arrayContaining(['*test*'])
                        })])
                }));
            });
            it('by copying last query', function () {
                var lastQueryBuilder = new Coveo.QueryBuilder();
                lastQueryBuilder.pipeline = 'pipeline';
                lastQueryBuilder.enableWildcards = true;
                mockFacet.queryController.getLastQuery.and.returnValue(lastQueryBuilder.build());
                facetQueryController.search(new Coveo.FacetSearchParameters(mockFacet));
                expect(facetQueryController.facet.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    wildcards: true,
                    pipeline: 'pipeline'
                }));
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('HistoryController', function () {
        var historyController;
        var env;
        beforeEach(function () {
            env = new Coveo.Mock.MockEnvironmentBuilder().withLiveQueryStateModel().build();
            historyController = new Coveo.HistoryController(env.root, Coveo.Mock.mockWindow(), env.queryStateModel, env.queryController);
        });
        afterEach(function () {
            historyController = null;
            env = null;
        });
        it('should listen to hashchange event', function () {
            expect(historyController.windoh.addEventListener).toHaveBeenCalledWith('hashchange', jasmine.any(Function));
        });
        it('should set the query state model representation on all event in the hash', function () {
            env.queryStateModel.attributes = {
                'a': 'a',
                'b': 'b',
                'c': 'notDefault',
                'd': [1, 2, 3]
            };
            env.queryStateModel.defaultAttributes = {
                'a': 'a',
                'b': 'b',
                'c': 'c',
                'd': [2, 3, 4]
            };
            Coveo.$$(historyController.element).trigger('state:all');
            Coveo.Defer.flush();
            expect(historyController.windoh.location.hash).toBe('#c=notDefault&d=[1,2,3]');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('QueryController', function () {
        var test;
        beforeEach(function () {
            test = {};
            test.env = new Coveo.Mock.MockEnvironmentBuilder().build();
            test.cmp = new Coveo.QueryController(test.env.root, {}, test.env.usageAnalytics, test.env.searchInterface);
            test.cmp.setEndpoint(test.env.searchEndpoint);
            test.cmp.element = test.env.root;
        });
        afterEach(function () {
            test = null;
        });
        it('should correctly raise errors from the endpoint', function (done) {
            var spy = test.env.searchEndpoint.search;
            var error = {
                statusCode: 401,
                data: {
                    message: 'the message',
                    type: 'the type',
                    queryExecutionReport: {}
                }
            };
            spy.and.returnValue(new Promise(function (resolve, reject) {
                reject(error);
            }));
            test.env.searchEndpoint.search = spy;
            expect(test.cmp.executeQuery().catch(function (data) {
                expect(data).toEqual(error);
                done();
            }));
        });
        it('should allow to fetchMore', function () {
            test.cmp.fetchMore(50);
            expect(test.env.searchEndpoint.search).toHaveBeenCalledWith(jasmine.objectContaining({
                firstResult: 10,
                numberOfResults: 50
            }), jasmine.any(Object));
        });
        describe('trigger query events', function () {
            it('should trigger newQuery', function (done) {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(test.env.root).on('newQuery', spy);
                var search = test.env.searchEndpoint.search;
                search.and.returnValue(new Promise(function (resolve, reject) {
                    resolve(Coveo.FakeResults.createFakeResults());
                }));
                test.cmp.executeQuery();
                setTimeout(function () {
                    expect(spy).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({
                        searchAsYouType: false,
                        cancel: false,
                        origin: undefined
                    }));
                    done();
                }, 10);
            });
            it('should trigger buildingQuery', function (done) {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(test.env.root).on('buildingQuery', spy);
                var search = test.env.searchEndpoint.search;
                search.and.returnValue(new Promise(function (resolve, reject) {
                    resolve(Coveo.FakeResults.createFakeResults());
                }));
                test.cmp.executeQuery();
                setTimeout(function () {
                    expect(spy).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({
                        queryBuilder: jasmine.any(Coveo.QueryBuilder),
                        searchAsYouType: false,
                        cancel: false
                    }));
                    done();
                }, 10);
            });
            it('should trigger doneBuildingQuery', function (done) {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(test.env.root).on('doneBuildingQuery', spy);
                var search = test.env.searchEndpoint.search;
                search.and.returnValue(new Promise(function (resolve, reject) {
                    resolve(Coveo.FakeResults.createFakeResults());
                }));
                test.cmp.executeQuery();
                setTimeout(function () {
                    expect(spy).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({
                        queryBuilder: jasmine.any(Coveo.QueryBuilder),
                        searchAsYouType: false,
                        cancel: false
                    }));
                    done();
                }, 10);
            });
            it('should trigger querySuccess', function (done) {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(test.env.root).on('querySuccess', spy);
                var search = test.env.searchEndpoint.search;
                search.and.returnValue(new Promise(function (resolve, reject) {
                    resolve(Coveo.FakeResults.createFakeResults());
                }));
                test.cmp.executeQuery();
                setTimeout(function () {
                    expect(spy).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({
                        queryBuilder: jasmine.any(Coveo.QueryBuilder),
                        query: jasmine.any(Object),
                        results: jasmine.any(Object),
                        searchAsYouType: false
                    }));
                    done();
                }, 10);
            });
            it('should trigger preprocessResults', function (done) {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(test.env.root).on('preprocessResults', spy);
                var search = test.env.searchEndpoint.search;
                var results = Coveo.FakeResults.createFakeResults();
                search.and.returnValue(new Promise(function (resolve, reject) {
                    resolve(results);
                }));
                test.cmp.executeQuery();
                setTimeout(function () {
                    expect(spy).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({
                        queryBuilder: jasmine.any(Coveo.QueryBuilder),
                        query: jasmine.any(Object),
                        results: results,
                        searchAsYouType: false
                    }));
                    done();
                }, 10);
            });
            it('should trigger noResults', function (done) {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(test.env.root).on('noResults', spy);
                var search = test.env.searchEndpoint.search;
                var results = Coveo.FakeResults.createFakeResults(0);
                search.and.returnValue(new Promise(function (resolve, reject) {
                    resolve(results);
                }));
                test.cmp.executeQuery();
                setTimeout(function () {
                    expect(spy).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({
                        queryBuilder: jasmine.any(Coveo.QueryBuilder),
                        query: jasmine.any(Object),
                        results: results,
                        searchAsYouType: false,
                        retryTheQuery: false
                    }));
                    done();
                }, 10);
            });
            it('should cancel the query if set during an event', function () {
                Coveo.$$(test.env.root).on('newQuery', function (e, args) {
                    args.cancel = true;
                });
                test.cmp.executeQuery();
                expect(test.env.searchEndpoint.search).not.toHaveBeenCalled();
            });
        });
        describe('coveoanalytics', function () {
            var store;
            beforeEach(function () {
                store = {
                    addElement: function (query) {
                    },
                    getHistory: function () {
                        return [];
                    },
                    setHistory: function (history) {
                    },
                    clear: function () {
                    }
                };
                Coveo.Mock.initPageViewScript(store);
                spyOn(store, 'addElement');
            });
            afterEach(function () {
                store = undefined;
                coveoanalytics = undefined;
            });
            it('should not log the query in the user history if not specified', function () {
                test.cmp.executeQuery({ logInActionsHistory: false });
                expect(store.addElement).not.toHaveBeenCalled();
            });
            it('should log the query in the user history if specified', function () {
                test.cmp.executeQuery({ logInActionsHistory: true });
                expect(store.addElement).toHaveBeenCalled();
            });
            it('should work if coveoanalytics is not defined', function () {
                coveoanalytics = undefined;
                test.cmp.executeQuery({ logInActionsHistory: true });
                expect(store.addElement).not.toHaveBeenCalled();
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('EndpointCaller', function () {
        describe('using generic call', function () {
            beforeEach(function () {
                jasmine.Ajax.install();
            });
            afterEach(function () {
                jasmine.Ajax.uninstall();
            });
            it('should use XMLHTTPRequest by default', function () {
                var endpointCaller = new Coveo.EndpointCaller();
                endpointCaller.call({
                    method: 'POST',
                    requestData: {},
                    url: 'this is an XMLHTTPRequest',
                    queryString: [],
                    responseType: 'text',
                    errorsAsSuccess: false
                });
                expect(jasmine.Ajax.requests.mostRecent().url).toBe('this is an XMLHTTPRequest');
            });
            it('should set the auth if provided', function () {
                var endpointCaller = new Coveo.EndpointCaller({
                    accessToken: 'myToken'
                });
                endpointCaller.call({
                    method: 'POST',
                    requestData: {},
                    url: 'this is an XMLHTTPRequest',
                    queryString: [],
                    responseType: 'text',
                    errorsAsSuccess: false
                });
                expect(jasmine.Ajax.requests.mostRecent().requestHeaders['Authorization']).toBe('Bearer myToken');
                endpointCaller = new Coveo.EndpointCaller({
                    username: 'john@doe.com',
                    password: 'hunter123'
                });
                endpointCaller.call({
                    method: 'POST',
                    requestData: {},
                    url: 'this is an XMLHTTPRequest',
                    queryString: [],
                    responseType: 'text',
                    errorsAsSuccess: false
                });
                expect(jasmine.Ajax.requests.mostRecent().requestHeaders['Authorization']).toBe('Basic ' + btoa('john@doe.com:hunter123'));
            });
        });
        describe('using XMLHTTPRequest', function () {
            beforeEach(function () {
                jasmine.Ajax.install();
            });
            afterEach(function () {
                jasmine.Ajax.uninstall();
            });
            it('should set the correct requested params on the XMLHTTPRequest', function () {
                var endpointCaller = new Coveo.EndpointCaller();
                endpointCaller.call({
                    method: 'POST',
                    requestData: {
                        'foo': 'bar',
                        'bar': 'foo',
                        'bahh': 'bohh'
                    },
                    url: 'foo.bar.com',
                    queryString: [],
                    responseType: 'text',
                    errorsAsSuccess: false
                });
                var fakeRequest = jasmine.Ajax.requests.mostRecent();
                expect(fakeRequest.method).toBe('POST');
                expect(fakeRequest.params).toBe('foo=bar&bar=foo&bahh=bohh');
                expect(fakeRequest.url).toBe('foo.bar.com');
                expect(fakeRequest.requestHeaders['Content-Type']).toBe('application/x-www-form-urlencoded; charset="UTF-8"');
                endpointCaller.call({
                    method: 'GET',
                    requestData: {},
                    url: 'foo.bar.com',
                    queryString: ['a=b', 'c=d'],
                    responseType: 'arraybuffer',
                    errorsAsSuccess: false
                });
                fakeRequest = jasmine.Ajax.requests.mostRecent();
                expect(fakeRequest.method).toBe('GET');
                expect(fakeRequest.params).toBeUndefined();
                expect(fakeRequest.url).toBe('foo.bar.com?a=b&c=d');
                expect(Object.keys(fakeRequest.requestHeaders).length).toBe(0);
                endpointCaller.call({
                    method: 'GET',
                    requestData: {
                        'e': 'f',
                        'g': 'h'
                    },
                    url: 'foo.bar.com',
                    queryString: ['a=b', 'c=d'],
                    responseType: 'json',
                    errorsAsSuccess: false
                });
                fakeRequest = jasmine.Ajax.requests.mostRecent();
                expect(fakeRequest.method).toBe('GET');
                expect(fakeRequest.params).toBeUndefined();
                expect(fakeRequest.url).toBe('foo.bar.com?a=b&c=d&e=f&g=h');
                expect(Object.keys(fakeRequest.requestHeaders).length).toBe(0);
            });
            describe('using response type text', function () {
                beforeEach(function () {
                    this.endpointCaller = new Coveo.EndpointCaller();
                    this.promise = this.endpointCaller.call({
                        method: 'POST',
                        requestData: {
                            'foo': 'bar',
                            'bar': 'foo',
                            'bahh': 'bohh'
                        },
                        url: 'foo.bar.com',
                        queryString: [],
                        responseType: 'text',
                        errorsAsSuccess: false
                    });
                });
                afterEach(function () {
                    this.endpointCaller = undefined;
                    this.promise = undefined;
                });
                it('should work if responseContentType is text', function (done) {
                    this.promise.then(function (response) {
                        expect(response.data.results.length).toBe(10);
                        expect(response.duration).toBeDefined();
                    }).finally(function () {
                        done();
                    });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        contentType: 'text',
                        responseText: Coveo.FakeResults.createFakeResults()
                    });
                });
                it('should work if responseContentType is application/json', function (done) {
                    this.promise.then(function (response) {
                        expect(response.data.results.length).toBe(10);
                        expect(response.duration).toBeDefined();
                    }).finally(function () {
                        done();
                    });
                    var fakeRequest = jasmine.Ajax.requests.mostRecent();
                    fakeRequest.respondWith({
                        status: 200,
                        contentType: 'application/json',
                        responseText: JSON.stringify(Coveo.FakeResults.createFakeResults())
                    });
                });
                it('should behave properly if there is an error', function (done) {
                    this.promise
                        .then(function (response) {
                        // This should never execute, and always go to the catch statement
                        expect(false).toBe(true);
                    })
                        .catch(function (error) {
                        expect(error.statusCode).toBe(500);
                    })
                        .finally(function () {
                        done();
                    });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 500
                    });
                });
                it('should behave properly if there is an error in the body', function (done) {
                    this.promise
                        .then(function (response) {
                        // This should never execute, and always go to the catch statement
                        expect(false).toBe(true);
                    })
                        .catch(function (error) {
                        expect(error.statusCode).toBe(404);
                    })
                        .finally(function () {
                        done();
                    });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: {
                            statusCode: 404
                        },
                        contentType: 'text'
                    });
                });
            });
            describe('using response type json', function () {
                beforeEach(function () {
                    this.endpointCaller = new Coveo.EndpointCaller();
                    this.promise = this.endpointCaller.call({
                        method: 'POST',
                        requestData: {
                            'foo': 'bar',
                            'bar': 'foo',
                            'bahh': 'bohh'
                        },
                        url: 'foo.bar.com',
                        queryString: [],
                        responseType: 'json',
                        errorsAsSuccess: false
                    });
                });
                afterEach(function () {
                    this.endpointCaller = undefined;
                    this.promise = undefined;
                });
                it('should work if responseContentType is text', function (done) {
                    this.promise.then(function (response) {
                        expect(response.data.results.length).toBe(10);
                        expect(response.duration).toBeDefined();
                    }).finally(function () {
                        done();
                    });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        contentType: 'text',
                        response: Coveo.FakeResults.createFakeResults()
                    });
                });
                it('should work if responseContentType is application/json', function (done) {
                    this.promise.then(function (response) {
                        expect(response.data.results.length).toBe(10);
                        expect(response.duration).toBeDefined();
                    }).finally(function () {
                        done();
                    });
                    var fakeRequest = jasmine.Ajax.requests.mostRecent();
                    fakeRequest.respondWith({
                        status: 200,
                        contentType: 'application/json',
                        response: Coveo.FakeResults.createFakeResults()
                    });
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    var SearchEndpoint = Coveo.SearchEndpoint;
    describe('SearchEndpoint', function () {
        beforeEach(function () {
            Coveo.SearchEndpoint.endpoints = {};
        });
        afterEach(function () {
            Coveo.SearchEndpoint.endpoints = {};
        });
        it('allow to setup easily a search endpoint to point to a sample endpoint', function () {
            SearchEndpoint.configureSampleEndpoint();
            var ep = Coveo.SearchEndpoint.endpoints['default'];
            expect(ep).toBeDefined();
            expect(ep.options.accessToken).toBeDefined();
            expect(ep.options.restUri).toBeDefined();
        });
        it('allow to setup easily a cloud endpoint', function () {
            SearchEndpoint.configureCloudEndpoint('foo', 'bar');
            var ep = Coveo.SearchEndpoint.endpoints['default'];
            expect(ep).toBeDefined();
            expect(ep.options.accessToken).toBe('bar');
            expect(ep.options.queryStringArguments['organizationId']).toBe('foo');
        });
        it('allow to setup easily a on prem endpoint', function () {
            SearchEndpoint.configureOnPremiseEndpoint('foo.com');
            var ep = Coveo.SearchEndpoint.endpoints['default'];
            expect(ep).toBeDefined();
            expect(ep.options.restUri).toBe('foo.com');
        });
        describe('with a workgroup argument', function () {
            var ep;
            beforeEach(function () {
                ep = new SearchEndpoint({
                    restUri: 'foo/rest/search',
                    queryStringArguments: {
                        workgroup: 'myOrgId'
                    }
                });
            });
            afterEach(function () {
                ep = null;
            });
            it('map it to organizationId', function () {
                var fakeResult = Coveo.FakeResults.createFakeResult();
                expect(ep.getViewAsHtmlUri(fakeResult.uniqueId)).toBe(ep.getBaseUri() + '/html?organizationId=myOrgId&uniqueId=' + fakeResult.uniqueId);
            });
        });
        describe('with a search token argument', function () {
            var ep;
            beforeEach(function () {
                ep = new SearchEndpoint({
                    restUri: 'foo/rest/search',
                    accessToken: 'token'
                });
            });
            afterEach(function () {
                ep = null;
            });
            it('will add it in the query string', function () {
                var fakeResult = Coveo.FakeResults.createFakeResult();
                expect(ep.getViewAsHtmlUri(fakeResult.uniqueId)).toBe(ep.getBaseUri() + '/html?access_token=token&uniqueId=' + fakeResult.uniqueId);
            });
        });
        describe('with a basic setup', function () {
            var ep;
            beforeEach(function () {
                ep = new SearchEndpoint({
                    restUri: 'foo/rest/search',
                    accessToken: 'token',
                    queryStringArguments: {
                        organizationId: 'myOrgId',
                        potatoe: 'mashed'
                    }
                });
            });
            afterEach(function () {
                ep = null;
            });
            it('allow to get the base uri', function () {
                expect(ep.getBaseUri()).toBe('foo/rest/search/v2');
            });
            it('allow to get the auth provider uri', function () {
                expect(ep.getAuthenticationProviderUri('ad')).toContain(ep.getBaseUri() + '/login/ad?');
                expect(ep.getAuthenticationProviderUri('ad')).toContain('organizationId=myOrgId');
                expect(ep.getAuthenticationProviderUri('ad')).toContain('potatoe=mashed');
                expect(ep.getAuthenticationProviderUri('email', 'myreturnurl')).toContain(ep.getBaseUri() + '/login/email?');
                expect(ep.getAuthenticationProviderUri('email', 'myreturnurl')).toContain('organizationId=myOrgId');
                expect(ep.getAuthenticationProviderUri('email', 'myreturnurl')).toContain('potatoe=mashed');
                expect(ep.getAuthenticationProviderUri('email', 'myreturnurl')).toContain('redirectUri=myreturnurl');
                expect(ep.getAuthenticationProviderUri('troll', undefined, 'msg')).toContain(ep.getBaseUri() + '/login/troll?');
                expect(ep.getAuthenticationProviderUri('troll', undefined, 'msg')).toContain('organizationId=myOrgId');
                expect(ep.getAuthenticationProviderUri('troll', undefined, 'msg')).toContain('potatoe=mashed');
                expect(ep.getAuthenticationProviderUri('troll', undefined, 'msg')).toContain('message=msg');
            });
            it('allow to check if endpoint is jsonp', function () {
                expect(ep.isJsonp()).toBe(false);
            });
            it('allow to get an export to excel link', function () {
                var qbuilder = new Coveo.QueryBuilder();
                qbuilder.expression.add('batman');
                expect(ep.getExportToExcelLink(qbuilder.build(), 56)).toContain(ep.getBaseUri() + '/?');
                expect(ep.getExportToExcelLink(qbuilder.build(), 56)).toContain('organizationId=myOrgId');
                expect(ep.getExportToExcelLink(qbuilder.build(), 56)).toContain('potatoe=mashed');
                expect(ep.getExportToExcelLink(qbuilder.build(), 56)).toContain('q=batman');
                expect(ep.getExportToExcelLink(qbuilder.build(), 56)).toContain('numberOfResults=56');
                expect(ep.getExportToExcelLink(qbuilder.build(), 56)).toContain('format=xlsx');
            });
            it('allow to get an uri to view as datastream', function () {
                var fakeResult = Coveo.FakeResults.createFakeResult();
                expect(ep.getViewAsDatastreamUri(fakeResult.uniqueId, '$Thumbnail')).toContain(ep.getBaseUri() + '/datastream?');
                expect(ep.getViewAsDatastreamUri(fakeResult.uniqueId, '$Thumbnail')).toContain('organizationId=myOrgId');
                expect(ep.getViewAsDatastreamUri(fakeResult.uniqueId, '$Thumbnail')).toContain('potatoe=mashed');
                expect(ep.getViewAsDatastreamUri(fakeResult.uniqueId, '$Thumbnail')).toContain('uniqueId=' + fakeResult.uniqueId);
                expect(ep.getViewAsDatastreamUri(fakeResult.uniqueId, '$Thumbnail')).toContain('dataStream=' + encodeURIComponent('$Thumbnail'));
            });
            it('allow to get an uri to view as html', function () {
                var fakeResult = Coveo.FakeResults.createFakeResult();
                expect(ep.getViewAsHtmlUri(fakeResult.uniqueId)).toContain(ep.getBaseUri() + '/html?');
                expect(ep.getViewAsHtmlUri(fakeResult.uniqueId)).toContain('organizationId=myOrgId');
                expect(ep.getViewAsHtmlUri(fakeResult.uniqueId)).toContain('potatoe=mashed');
                expect(ep.getViewAsHtmlUri(fakeResult.uniqueId)).toContain('uniqueId=' + fakeResult.uniqueId);
            });
            describe('will execute requests on the search api', function () {
                beforeEach(function () {
                    jasmine.Ajax.install();
                });
                afterEach(function () {
                    jasmine.Ajax.uninstall();
                });
                it('for search', function (done) {
                    var qbuilder = new Coveo.QueryBuilder();
                    qbuilder.expression.add('batman');
                    qbuilder.numberOfResults = 153;
                    qbuilder.enableCollaborativeRating = true;
                    var promiseSuccess = ep.search(qbuilder.build());
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('q=batman');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('numberOfResults=153');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('enableCollaborativeRating=true');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
                    promiseSuccess
                        .then(function (data) {
                        expect(data.results.length).toBe(10);
                    });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify(Coveo.FakeResults.createFakeResults())
                    });
                    var promiseFail = ep.search(qbuilder.build());
                    promiseFail
                        .catch(function (e) {
                        expect(e).toBeDefined();
                        expect(e.status).toBe(500);
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 500
                    });
                });
                it('for getRawDataStream', function (done) {
                    var fakeResult = Coveo.FakeResults.createFakeResult();
                    var promiseSuccess = ep.getRawDataStream(fakeResult.uniqueId, '$Thumbnail');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/datastream?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('uniqueId=' + fakeResult.uniqueId);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('dataStream=$Thumbnail');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                    promiseSuccess
                        .then(function (data) {
                        expect(data).toBeDefined();
                        expect(data.byteLength).toBe(123);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('arraybuffer');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        response: new ArrayBuffer(123),
                        responseType: 'arraybuffer'
                    });
                });
                it('for getDocument', function (done) {
                    var fakeResult = Coveo.FakeResults.createFakeResult();
                    var promiseSuccess = ep.getDocument(fakeResult.uniqueId);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/document?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('uniqueId=' + fakeResult.uniqueId);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                    promiseSuccess
                        .then(function (data) {
                        expect(data.uniqueId).toBe(fakeResult.uniqueId);
                        expect(data.title).toBe(fakeResult.title);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('text');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify(fakeResult),
                        responseType: 'text'
                    });
                });
                it('for getDocumentText', function (done) {
                    var fakeResult = Coveo.FakeResults.createFakeResult();
                    var promiseSuccess = ep.getDocumentText(fakeResult.uniqueId);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/text?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('uniqueId=' + fakeResult.uniqueId);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                    promiseSuccess
                        .then(function (data) {
                        expect(data).toBe(fakeResult.excerpt);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('text');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify({ content: fakeResult.excerpt }),
                        responseType: 'text'
                    });
                });
                it('for getDocumentHtml', function (done) {
                    var fakeResult = Coveo.FakeResults.createFakeResult();
                    var fakeDocument = document.implementation.createHTMLDocument(fakeResult.title);
                    var promiseSuccess = ep.getDocumentHtml(fakeResult.uniqueId);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/html?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('uniqueId=' + fakeResult.uniqueId);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
                    promiseSuccess
                        .then(function (data) {
                        expect(data.title).toBe(fakeResult.title);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('document');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        response: fakeDocument,
                        responseType: 'document'
                    });
                });
                it('for listFieldValues', function (done) {
                    var request = {
                        field: '@field',
                        maximumNumberOfValues: 153,
                        pattern: '.*$',
                        patternType: 'regex'
                    };
                    var promisesSuccess = ep.listFieldValues(request);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/values?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('field=' + encodeURIComponent('@field'));
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('maximumNumberOfValues=153');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('pattern=' + encodeURIComponent('.*$'));
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('patternType=regex');
                    promisesSuccess
                        .then(function (values) {
                        expect(values.length).toBe(10);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('text');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify({ values: Coveo.FakeResults.createFakeFieldValues('foo', 10) }),
                        responseType: 'text'
                    });
                });
                it('for listFields', function (done) {
                    var promiseSuccess = ep.listFields();
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/fields?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                    promiseSuccess
                        .then(function (fields) {
                        expect(fields.length).toBe(10);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('text');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    // Not real field description, but will suffice for test purpose
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify({ fields: _.range(10) }),
                        responseType: 'text'
                    });
                });
                it('for extensions', function (done) {
                    var promiseSuccess = ep.extensions();
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/extensions?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                    promiseSuccess
                        .then(function (extensions) {
                        expect(extensions.length).toBe(10);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('text');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    // Not real extensions, but will suffice for test purpose
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify(_.range(10)),
                        responseType: 'text'
                    });
                });
                it('for rateDocument', function (done) {
                    var fakeResult = Coveo.FakeResults.createFakeResult();
                    var promiseSuccess = ep.rateDocument({
                        rating: 'Best',
                        uniqueId: fakeResult.uniqueId
                    });
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/rating?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
                    promiseSuccess
                        .then(function (response) {
                        expect(response).toBe(true);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('text');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseType: 'text'
                    });
                });
                it('for tagDocument', function (done) {
                    var fakeResult = Coveo.FakeResults.createFakeResult();
                    var promiseSuccess = ep.tagDocument({
                        uniqueId: fakeResult.uniqueId,
                        doAdd: true,
                        fieldName: '@field',
                        fieldValue: 'foobar',
                    });
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/tag?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('fieldName=' + encodeURIComponent('@field'));
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('fieldValue=foobar');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('doAdd=true');
                    expect(jasmine.Ajax.requests.mostRecent().params).toContain('uniqueId=' + encodeURIComponent(fakeResult.uniqueId));
                    promiseSuccess
                        .then(function (response) {
                        expect(response).toBe(true);
                        expect(jasmine.Ajax.requests.mostRecent().responseType).toBe('text');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseType: 'text'
                    });
                });
                it('for getRevealQuerySuggest', function (done) {
                    var promiseSuccess = ep.getRevealQuerySuggest({
                        q: 'foobar',
                        count: 10
                    });
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseUri() + '/querySuggest?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('q=foobar');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('count=10');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                    // Not real extensions, but will suffice for test purpose
                    promiseSuccess
                        .then(function (response) {
                        expect(response.completions.length).toBe(10);
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    // Not real completions, but will suffice for test purpose
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify({ completions: _.range(10) })
                    });
                });
                it('for follow', function (done) {
                    var qbuilder = new Coveo.QueryBuilder();
                    qbuilder.expression.add('batman');
                    var promiseSuccess = ep.follow({
                        frequency: 'weekly',
                        type: 'query',
                        typeConfig: {
                            query: qbuilder.build()
                        }
                    });
                    promiseSuccess
                        .then(function (sub) {
                        expect(sub.id).toBeDefined();
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseAlertsUri() + '/subscriptions?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('accessToken=token');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
                    expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).frequency).toBe('weekly');
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify({
                            id: 'foobar',
                            type: 'query',
                            typeConfig: {
                                query: qbuilder.build()
                            }
                        })
                    });
                });
                it('for listSubscriptions', function (done) {
                    var promiseSuccess = ep.listSubscriptions(15);
                    promiseSuccess
                        .then(function (subs) {
                        expect(subs.length).toBe(44);
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    // Should return the same promise, since it's not resolved yet
                    var promiseSuccess2 = ep.listSubscriptions(15);
                    expect(promiseSuccess).toBe(promiseSuccess2);
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseAlertsUri() + '/subscriptions?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('page=15');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('accessToken=token');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify(_.range(44))
                    });
                });
                it('for updateSubscription', function (done) {
                    var promiseSuccess = ep.updateSubscription(getSubscriptionPromiseSuccess());
                    promiseSuccess
                        .then(function (sub) {
                        expect(sub.id).toBe('foobar');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseAlertsUri() + '/subscriptions/foobar?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('accessToken=token');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('PUT');
                    expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params).type).toBe('query');
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify({ id: 'foobar' })
                    });
                });
                it('for deleteSubscription', function (done) {
                    var promiseSuccess = ep.deleteSubscription(getSubscriptionPromiseSuccess());
                    promiseSuccess
                        .then(function (sub) {
                        expect(sub.id).toBe('foobar');
                    })
                        .catch(function (e) {
                        fail(e);
                    })
                        .finally(function () { return done(); });
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain(ep.getBaseAlertsUri() + '/subscriptions/foobar?');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('organizationId=myOrgId');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('potatoe=mashed');
                    expect(jasmine.Ajax.requests.mostRecent().url).toContain('accessToken=token');
                    expect(jasmine.Ajax.requests.mostRecent().method).toBe('DELETE');
                    expect(jasmine.Ajax.requests.mostRecent().params).toBe('{}');
                    jasmine.Ajax.requests.mostRecent().respondWith({
                        status: 200,
                        responseText: JSON.stringify({ id: 'foobar' })
                    });
                });
            });
        });
    });
    function getSubscriptionPromiseSuccess() {
        var qbuilder = new Coveo.QueryBuilder();
        qbuilder.expression.add('batman');
        return {
            id: 'foobar',
            type: 'query',
            typeConfig: {
                query: qbuilder.build()
            },
            user: {
                manageToken: '1',
                email: '42@coveo.com'
            }
        };
    }
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Aggregate', function () {
        var test;
        afterEach(function () {
            test = null;
        });
        describe('exposes options', function () {
            it('field allows to set a field in the group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Aggregate, {
                    field: '@foobar'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        field: '@foobar'
                    })]));
            });
            it('operation allows to set an operation in the group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Aggregate, {
                    field: '@foobar',
                    operation: 'something'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        computedFields: jasmine.arrayContaining([
                            jasmine.objectContaining({
                                operation: 'something',
                                field: '@foobar'
                            })
                        ])
                    })]));
            });
            it('format should allow to render the result using the provided format', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Aggregate, {
                    field: '@foobar',
                    format: 'n0'
                });
                var results = Coveo.FakeResults.createFakeResults(0);
                results.groupByResults = [Coveo.FakeResults.createFakeGroupByResult('@foobar', 'foo', 10)];
                results.groupByResults[0].globalComputedFieldResults = [12345];
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(Coveo.$$(test.cmp.element).text()).toEqual(Globalize.format(12345, 'n0'));
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    function buildUrl(endpoint, path) {
        return endpoint.options.serviceUrl + '/rest/' + Coveo.AnalyticsEndpoint.DEFAULT_ANALYTICS_VERSION + path;
    }
    describe('AnalyticsEndpoint', function () {
        var endpoint;
        beforeEach(function () {
            endpoint = new Coveo.AnalyticsEndpoint({
                serviceUrl: 'foo.com',
                token: 'token',
                organization: 'organization'
            });
            jasmine.Ajax.install();
        });
        afterEach(function () {
            endpoint = null;
            Coveo.AnalyticsEndpoint.pendingRequest = null;
            jasmine.Ajax.uninstall();
        });
        it('allow to get the current visit id', function (done) {
            endpoint.getCurrentVisitIdPromise()
                .then(function (res) {
                expect(res).toBe('visitid');
                // Here, the current visit id is already set, so it should return immediately.
                expect(endpoint.getCurrentVisitId()).toBe('visitid');
            })
                .catch(function (e) {
                fail(e);
            })
                .finally(function () { return done(); });
            expect(jasmine.Ajax.requests.mostRecent().url).toBe(buildUrl(endpoint, '/analytics/visit?org=organization&access_token=token'));
            expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: '200',
                response: { id: 'visitid' }
            });
        });
        it('allow to sendSearchEvents', function (done) {
            var fakeSearchEvent = Coveo.FakeResults.createFakeSearchEvent();
            endpoint.sendSearchEvents([fakeSearchEvent])
                .then(function (res) {
                expect(res.searchEventResponses[0].visitId).toBe('visitid');
                // Here, the current visit id is already set, so it should return immediately.
                expect(endpoint.getCurrentVisitId()).toBe('visitid');
            })
                .catch(function (e) {
                fail(e);
            })
                .finally(function () { return done(); });
            // Here, the current visit id should be undefined
            expect(endpoint.getCurrentVisitId()).toBeUndefined();
            expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
            expect(jasmine.Ajax.requests.mostRecent().requestHeaders['Authorization']).toBe('Bearer token');
            expect(jasmine.Ajax.requests.mostRecent().requestHeaders['Content-Type']).toBe('application/json; charset="UTF-8"');
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params)[0]['actionCause']).toBe(fakeSearchEvent.actionCause);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params)[0]['queryPipeline']).toBe(fakeSearchEvent.queryPipeline);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                responseText: JSON.stringify({ searchEventResponses: [{ visitId: 'visitid' }] })
            });
        });
        it('allow to sendDocumentViewEvent', function (done) {
            var fakeClickEvent = Coveo.FakeResults.createFakeClickEvent();
            endpoint.sendDocumentViewEvent(fakeClickEvent)
                .then(function (res) {
                expect(res.visitId).toBe('visitid');
                // Here, the current visit id is already set, so it should return immediately.
                expect(endpoint.getCurrentVisitId()).toBe('visitid');
            })
                .catch(function (e) {
                fail(e);
            })
                .finally(function () { return done(); });
            // Here, the current visit id should be undefined
            expect(endpoint.getCurrentVisitId()).toBeUndefined();
            expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');
            expect(jasmine.Ajax.requests.mostRecent().requestHeaders['Authorization']).toBe('Bearer token');
            expect(jasmine.Ajax.requests.mostRecent().requestHeaders['Content-Type']).toBe('application/json; charset="UTF-8"');
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params)['viewMethod']).toBe(fakeClickEvent.viewMethod);
            expect(JSON.parse(jasmine.Ajax.requests.mostRecent().params)['documentUrl']).toBe(fakeClickEvent.documentUrl);
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                responseText: JSON.stringify({ visitId: 'visitid' })
            });
        });
        it('sends organization as parameter when sending a document view event', function () {
            var fakeClickEvent = Coveo.FakeResults.createFakeClickEvent();
            endpoint.sendDocumentViewEvent(fakeClickEvent);
            expect(jasmine.Ajax.requests.mostRecent().url.indexOf('org=organization') != -1).toBe(true);
        });
        it('sends organization as parameter when sending a search event', function () {
            var fakeSearchEvent = Coveo.FakeResults.createFakeSearchEvent();
            endpoint.sendSearchEvents([fakeSearchEvent]);
            expect(jasmine.Ajax.requests.mostRecent().url.indexOf('org=organization') != -1).toBe(true);
        });
        it('allow to getTopQueries', function (done) {
            endpoint.getTopQueries({ pageSize: 10, queryText: 'foobar' })
                .then(function (res) {
                expect(res.length).toBe(3);
                expect(res[0]).toBe('foo');
            })
                .catch(function (e) {
                fail(e);
            })
                .finally(function () { return done(); });
            expect(jasmine.Ajax.requests.mostRecent().url).toBe(buildUrl(endpoint, '/stats/topQueries?org=organization&access_token=token&pageSize=10&queryText=foobar'));
            expect(jasmine.Ajax.requests.mostRecent().method).toBe('GET');
            jasmine.Ajax.requests.mostRecent().respondWith({
                status: 200,
                response: ['foo', 'bar', 'foobar']
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Analytics', function () {
        describe('with default setup', function () {
            var test;
            beforeEach(function () {
                Coveo.SearchEndpoint.endpoints['default'] = new Coveo.SearchEndpoint({
                    accessToken: 'some token',
                    queryStringArguments: { workgroup: 'organization' },
                    restUri: 'some/uri'
                });
                test = Coveo.Mock.basicComponentSetup(Coveo.Analytics);
            });
            afterEach(function () {
                Coveo.SearchEndpoint.endpoints['default'] = null;
                test = null;
            });
            it('use access token from default endpoint if not specified', function () {
                expect(test.cmp.options.token).toBe('some token');
            });
            it('uses organization from the search endpoint if not specified', function () {
                expect(test.cmp.options.organization).toBe('organization');
            });
            it('uses organization from options when specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    organization: 'orgFromOptions'
                });
                expect(test.cmp.options.organization).toBe('orgFromOptions');
            });
            it('log an event on query error', function () {
                spyOn(test.cmp.client, 'logCustomEvent');
                Coveo.Simulate.query(test.env, {
                    error: {
                        message: 'oops',
                        type: 'pretty bad',
                        name: 'oops pretty bad'
                    }
                });
                expect(test.cmp.client.logCustomEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.queryError, jasmine.any(Object), jasmine.any(HTMLElement));
            });
        });
        describe('using the static create call', function () {
            var env;
            var analytics;
            beforeEach(function () {
                env = new Coveo.Mock.MockEnvironmentBuilder().build();
                env.usageAnalytics = null;
                analytics = document.createElement('div');
                analytics.className = 'CoveoAnalytics';
            });
            afterEach(function () {
                env = null;
                analytics = null;
            });
            it('should be Noop if not present in the interface', function () {
                expect(Coveo.Analytics.create(env.root, undefined, env) instanceof Coveo.NoopAnalyticsClient).toBe(true);
            });
            it('should be a LiveAnalyticsClient if present inside the interface', function () {
                env.root.appendChild(analytics);
                expect(Coveo.Analytics.create(env.root, undefined, env) instanceof Coveo.LiveAnalyticsClient).toBe(true);
            });
            it('should be a LiveAnalyticsClient if present outside the interface', function () {
                analytics.appendChild(env.root);
                expect(Coveo.Analytics.create(env.root, undefined, env) instanceof Coveo.LiveAnalyticsClient).toBe(true);
            });
            it('should be a MultiAnalyticsClient if present inside the interface multiple time', function () {
                var analytics2 = document.createElement('div');
                analytics2.className = 'CoveoAnalytics';
                env.root.appendChild(analytics);
                env.root.appendChild(analytics2);
                expect(Coveo.Analytics.create(env.root, undefined, env) instanceof Coveo.MultiAnalyticsClient).toBe(true);
            });
            it('should be a MultiAnalyticsClient if present both inside and outside', function () {
                var analytics2 = document.createElement('div');
                analytics2.className = 'CoveoAnalytics';
                env.root.appendChild(analytics2);
                analytics.appendChild(env.root);
                expect(Coveo.Analytics.create(env.root, undefined, env) instanceof Coveo.MultiAnalyticsClient).toBe(true);
            });
            it('should be a LiveAnalyticsClient if present outside the interface, shared between multiple interface', function () {
                var env2 = new Coveo.Mock.MockEnvironmentBuilder().build();
                analytics.appendChild(env.root);
                analytics.appendChild(env2.root);
                var client = Coveo.Analytics.create(env.root, undefined, env);
                var client2 = Coveo.Analytics.create(env2.root, undefined, env);
                expect(client instanceof Coveo.LiveAnalyticsClient).toBe(true);
                expect(client2 instanceof Coveo.LiveAnalyticsClient).toBe(true);
                expect(client).toBe(client2);
            });
            it('should be LiveAnalyticsClient if present inside the interface, and NoopAnalyticsClient for another interface with no analytics', function () {
                var env2 = new Coveo.Mock.MockEnvironmentBuilder().build();
                env.root.appendChild(analytics);
                expect(Coveo.Analytics.create(env.root, undefined, env) instanceof Coveo.LiveAnalyticsClient).toBe(true);
                expect(Coveo.Analytics.create(env2.root, undefined, env2) instanceof Coveo.NoopAnalyticsClient).toBe(true);
            });
        });
        describe('exposes options', function () {
            var test;
            afterEach(function () {
                test = null;
            });
            it('user can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    user: 'foobar'
                });
                var client = test.cmp.client;
                expect(client.userId).toBe('foobar');
            });
            it('userdisplayname can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    userDisplayName: 'foobar'
                });
                var client = test.cmp.client;
                expect(client.userDisplayName).toBe('foobar');
            });
            it('token can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    token: 'qwerty123'
                });
                var client = test.cmp.client;
                expect(client.endpoint.endpointCaller.options.accessToken).toBe('qwerty123');
            });
            it('endpoint can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    endpoint: 'somewhere.com'
                });
                var client = test.cmp.client;
                expect(client.endpoint.options.serviceUrl).toBe('somewhere.com');
            });
            it('anonymous can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    anonymous: true
                });
                var client = test.cmp.client;
                expect(client.anonymous).toBe(true);
            });
            it('searchHub can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    searchHub: 'foobar'
                });
                var client = test.cmp.client;
                expect(client.originLevel1).toBe('foobar');
            });
            it('searchhub will be put in the query params', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    searchHub: 'yoo'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().searchHub).toBe('yoo');
            });
            it('searchhub should be put in the component options model for other component to see it\'s value', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    searchHub: 'mama mia'
                });
                expect(test.env.componentOptionsModel.set).toHaveBeenCalledWith('searchHub', 'mama mia');
            });
            it('splitTestRunName can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    splitTestRunName: 'foobar'
                });
                var client = test.cmp.client;
                expect(client.splitTestRunName).toBe('foobar');
            });
            it('splitTestRunVersion can be specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Analytics, {
                    splitTestRunVersion: 'foobar'
                });
                var client = test.cmp.client;
                expect(client.splitTestRunVersion).toBe('foobar');
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Breadcrumb', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.Breadcrumb);
        });
        afterEach(function () {
            test = null;
        });
        it('is hidden by default', function () {
            expect(test.cmp.element.style.display).toBe('none');
        });
        it('is hidden if there is no breadcrumb items', function () {
            test.cmp.drawBreadcrumb([]);
            expect(test.cmp.element.style.display).toBe('none');
        });
        it('is displayed if there is at least one breadcrumb item', function () {
            test.cmp.drawBreadcrumb([{ element: document.createElement('div') }]);
            expect(test.cmp.element.style.display).not.toBe('none');
            expect(Coveo.$$(test.cmp.element).findAll('.coveo-breadcrumb-item').length).toBe(1);
        });
        it('should trigger clear all event', function () {
            var onClear = jasmine.createSpy('onPopulate');
            Coveo.$$(test.env.root).on(Coveo.BreadcrumbEvents.clearBreadcrumb, onClear);
            test.cmp.clearBreadcrumbs();
            expect(onClear).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({}));
        });
        it('should trigger populate breadcrumb when getting breadcrumb', function () {
            var onPopulate = jasmine.createSpy('onPopulate');
            Coveo.$$(test.env.root).on(Coveo.BreadcrumbEvents.populateBreadcrumb, onPopulate);
            test.cmp.getBreadcrumbs();
            expect(onPopulate).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({ 'breadcrumbs': [] }));
        });
        it('should execute a query after clear', function () {
            test.cmp.clearBreadcrumbs();
            expect(test.env.queryController.executeQuery).toHaveBeenCalled();
        });
        it('should log analytics event after clear', function () {
            test.cmp.clearBreadcrumbs();
            expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.breadcrumbResetAll, {});
        });
        describe('when there is a query', function () {
            beforeEach(function () {
                // breadcrumb component is bound after init so as to pass after all other component
                Coveo.$$(test.env.root).trigger(Coveo.InitializationEvents.afterInitialization);
            });
            it('should trigger populate breadcrumb', function () {
                var onPopulate = jasmine.createSpy('onPopulate');
                Coveo.$$(test.env.root).on(Coveo.BreadcrumbEvents.populateBreadcrumb, onPopulate);
                Coveo.Simulate.query(test.env);
                expect(onPopulate).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({ 'breadcrumbs': [] }));
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ComponentEvent', function () {
        var test;
        var spy;
        beforeEach(function () {
            Coveo.registerCustomMatcher();
            test = Coveo.Mock.basicComponentSetup(Coveo.Components.NoopComponent);
            spy = jasmine.createSpy('spy');
        });
        afterEach(function () {
            test = null;
            spy = null;
        });
        it('should execute handler if the component is enabled', function () {
            test.cmp.enable();
            test.cmp.bind.onRootElement('foo', spy);
            test.cmp.bind.onRootElement('foo', function () {
                console.log(arguments);
            });
            Coveo.$$(test.env.root).trigger('foo');
            expect(spy).toHaveBeenCalled();
            Coveo.$$(test.env.root).trigger('foo', { bar: 'baz' });
            expect(spy).toHaveBeenCalledWith({ bar: 'baz' });
        });
        it('should execute handler only once if the component is enabled', function () {
            test.cmp.enable();
            var spyOnce = jasmine.createSpy('spyOnce');
            test.cmp.bind.onRootElement('foo', spy);
            test.cmp.bind.oneRootElement('foo', spyOnce);
            Coveo.$$(test.env.root).trigger('foo');
            Coveo.$$(test.env.root).trigger('foo');
            Coveo.$$(test.env.root).trigger('foo');
            expect(spy).toHaveBeenCalledTimes(3);
            expect(spyOnce).toHaveBeenCalledTimes(1);
        });
        it('should not execute handler if the component is disabled', function () {
            test.cmp.disable();
            test.cmp.bind.onRootElement('foo', spy);
            Coveo.$$(test.env.root).trigger('foo');
            expect(spy).not.toHaveBeenCalled();
            Coveo.$$(test.env.root).trigger('foo', { bar: 'baz' });
            expect(spy).not.toHaveBeenCalledWith({ bar: 'baz' });
        });
        it('should not execute handler only once if the component is disabled', function () {
            test.cmp.disable();
            test.cmp.bind.oneRootElement('foo', spy);
            Coveo.$$(test.env.root).trigger('foo');
            Coveo.$$(test.env.root).trigger('foo');
            Coveo.$$(test.env.root).trigger('foo');
            expect(spy).not.toHaveBeenCalled();
        });
        it('should trigger if the component is enabled', function () {
            test.cmp.enable();
            test.cmp.bind.onRootElement('foo', spy);
            test.cmp.bind.trigger(test.env.root, 'foo');
            expect(spy).toHaveBeenCalled();
            test.cmp.bind.trigger(test.env.root, 'foo', { bar: 'baz' });
            expect(spy).toHaveBeenCalledWith({ bar: 'baz' });
        });
        it('should not trigger if the component is disabled', function () {
            test.cmp.disable();
            Coveo.$$(test.env.root).on('foo', spy);
            test.cmp.bind.trigger(test.env.root, 'foo');
            expect(spy).not.toHaveBeenCalled();
            test.cmp.bind.trigger(test.env.root, 'foo', { bar: 'baz' });
            expect(spy).not.eventHandlerToHaveBeenCalledWith({ bar: 'baz' });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Component', function () {
        var env;
        var cmp;
        beforeEach(function () {
            env = new Coveo.Mock.MockEnvironmentBuilder().build();
            var el = document.createElement('div');
            env.root.appendChild(el);
            cmp = new Coveo.Component(el, 'Test');
        });
        afterEach(function () {
            env = null;
            cmp = null;
        });
        it('will resolve all environment variables if not provided', function () {
            expect(cmp.queryController).toBe(env.queryController);
            expect(cmp.componentOptionsModel).toBe(env.componentOptionsModel);
            expect(cmp.usageAnalytics).toBeDefined();
            expect(cmp.componentStateModel).toBe(env.componentStateModel);
            expect(cmp.queryStateModel).toBe(env.queryStateModel);
        });
        it('should return a binding object', function () {
            expect(cmp.getBindings()).toBeDefined();
        });
        it('should return a debug info object', function () {
            expect(cmp.debugInfo()).toBeDefined();
        });
        it('should be possible to disable', function () {
            cmp.disable();
            expect(cmp.disabled).toBe(true);
        });
        it('should be possible to enable', function () {
            cmp.enable();
            expect(cmp.disabled).toBe(false);
        });
        it('should be enabled by default', function () {
            expect(cmp.disabled).toBe(false);
        });
        it('should add the correct class on the component', function () {
            expect(Coveo.$$(cmp.element).hasClass('CoveoTest')).toBe(true);
        });
        it('should bind the component to the element', function () {
            expect(cmp.element['CoveoTest']).toBe(cmp);
        });
        it('should be able to resolve if the element is directly on the root of the interface', function () {
            var resolveDirectly = new Coveo.Component(env.root, 'test');
            expect(resolveDirectly.queryController).toBe(env.queryController);
            expect(resolveDirectly.searchInterface).toBe(env.searchInterface);
        });
        describe('should allow to point form element to a dummy form', function () {
            var elementToDummyOut;
            var elementThatShouldNotBeDummiedOut;
            beforeEach(function () {
                elementToDummyOut = document.createElement('input');
                elementToDummyOut.setAttribute('type', 'text');
                elementThatShouldNotBeDummiedOut = document.createElement('div');
                elementThatShouldNotBeDummiedOut.appendChild(elementToDummyOut);
            });
            afterEach(function () {
                elementToDummyOut = null;
                elementThatShouldNotBeDummiedOut = null;
            });
            it('directly on an input', function () {
                Coveo.Component.pointElementsToDummyForm(elementToDummyOut);
                expect(elementToDummyOut.getAttribute('form')).toBe('coveo-dummy-form');
            });
            it('but not on non-input tag', function () {
                var elementThatShouldNotBeDummiedOut = document.createElement('div');
                Coveo.Component.pointElementsToDummyForm(elementThatShouldNotBeDummiedOut);
                expect(elementThatShouldNotBeDummiedOut.getAttribute('form')).toBe(null);
            });
            it('on child input', function () {
                Coveo.Component.pointElementsToDummyForm(elementThatShouldNotBeDummiedOut);
                expect(elementToDummyOut.getAttribute('form')).toBe('coveo-dummy-form');
            });
            it('on multiple child input', function () {
                var elementToDummyOut2 = document.createElement('input');
                elementToDummyOut2.setAttribute('type', 'text');
                elementThatShouldNotBeDummiedOut.appendChild(elementToDummyOut2);
                Coveo.Component.pointElementsToDummyForm(elementThatShouldNotBeDummiedOut);
                expect(elementToDummyOut.getAttribute('form')).toBe('coveo-dummy-form');
                expect(elementToDummyOut2.getAttribute('form')).toBe('coveo-dummy-form');
            });
        });
        describe('resolving results', function () {
            var result;
            beforeEach(function () {
                result = Coveo.FakeResults.createFakeResult();
            });
            afterEach(function () {
                result = null;
            });
            it('should allow to bind a result to an element', function () {
                Coveo.Component.bindResultToElement(cmp.element, result);
                expect(Coveo.Component.getResult(cmp.element)).toBe(result);
            });
            it('should allow to retrive a result from a child element', function () {
                Coveo.Component.bindResultToElement(env.root, result);
                expect(Coveo.Component.getResult(cmp.element)).toBe(result);
            });
        });
        describe('the static get method', function () {
            it('should return the component', function () {
                expect(Coveo.Component.get(cmp.element)).toBe(cmp);
                expect(Coveo.Component.get(cmp.element, { ID: 'Test' })).toBe(cmp);
                expect(Coveo.Component.get(cmp.element, 'Test')).toBe(cmp);
            });
            it('should return the component if there is more than one component bound', function () {
                var cmp2 = new Coveo.Component(cmp.element, 'Test2');
                expect(function () { return Coveo.Component.get(cmp.element); }).toThrow();
                expect(function () { return Coveo.Component.get(cmp.element, undefined, true); }).not.toThrow();
                expect(Coveo.Component.get(cmp.element, { ID: 'Test' })).toBe(cmp);
                expect(Coveo.Component.get(cmp.element, 'Test')).toBe(cmp);
                expect(Coveo.Component.get(cmp.element, { ID: 'Test2' })).toBe(cmp2);
                expect(Coveo.Component.get(cmp.element, 'Test2')).toBe(cmp2);
            });
            it('should return undefined and not throw if no component is bound', function () {
                var notAComponentElement = document.createElement('div');
                expect(function () { return Coveo.Component.get(notAComponentElement); }).not.toThrow();
                expect(Coveo.Component.get(notAComponentElement)).toBeUndefined();
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('DidYouMean', function () {
        var test;
        var fakeQueryCorrection;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.DidYouMean);
            fakeQueryCorrection = {
                correctedQuery: 'this is the corrected query',
                wordCorrections: [
                    {
                        offset: 12,
                        length: 9,
                        originalWord: 'corected',
                        correctedWord: 'corrected'
                    }
                ]
            };
            test.env.queryStateModel.get = function () { return 'originalquery'; };
        });
        it('should be hidden before making a query', function () {
            expect(test.cmp.element.style.display).toBe('none');
        });
        it('should be shown when there are both query corrections and results', function () {
            Coveo.Simulate.query(test.env, {
                results: Coveo.FakeResults.createFakeResults(2),
                queryCorrections: [fakeQueryCorrection]
            });
            expect(test.cmp.element.style.display).not.toBe('none');
        });
        it('should be hidden when there are no query corrections', function () {
            Coveo.Simulate.query(test.env, {
                results: Coveo.FakeResults.createFakeResults(0),
                queryCorrections: []
            });
            expect(test.cmp.element.style.display).toBe('none');
        });
        it('should send an analytics event when doQueryWithCorrectedTerm is called', function () {
            var analyticsSpy = jasmine.createSpy('analyticsSpy');
            test.env.usageAnalytics.logSearchEvent = analyticsSpy;
            Coveo.Simulate.query(test.env, {
                queryCorrections: [fakeQueryCorrection]
            });
            test.env.queryController.deferExecuteQuery = function (arg) {
                arg.beforeExecuteQuery();
            };
            test.cmp.doQueryWithCorrectedTerm();
            expect(analyticsSpy).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.didyoumeanClick, {});
        });
        describe('exposes options', function () {
            describe('enableAutoCorrection', function () {
                it('set to true should autocorrect the query when no results are found', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.DidYouMean, {
                        enableAutoCorrection: true
                    });
                    test.env.queryStateModel.get = function () { return 'foobar'; };
                    var qsmSpy = jasmine.createSpy('queryStateModelSpy');
                    test.env.queryStateModel.set = qsmSpy;
                    Coveo.Simulate.query(test.env, {
                        results: Coveo.FakeResults.createFakeResults(0),
                        queryCorrections: [fakeQueryCorrection]
                    });
                    expect(qsmSpy).toHaveBeenCalledWith(Coveo.QueryStateModel.attributesEnum.q, 'this is the corrected query');
                });
                it('set to true should send an analytics event when query is autocorrected', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.DidYouMean, {
                        enableAutoCorrection: true
                    });
                    test.env.queryStateModel.get = function () { return 'foobar'; };
                    var analyticsSpy = jasmine.createSpy('analyticsSpy');
                    test.cmp.usageAnalytics.logSearchEvent = analyticsSpy;
                    Coveo.Simulate.query(test.env, {
                        results: Coveo.FakeResults.createFakeResults(0),
                        queryCorrections: [fakeQueryCorrection]
                    });
                    expect(analyticsSpy).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.didyoumeanAutomatic, {});
                    expect(analyticsSpy.calls.count()).toBe(1);
                });
                it('set to false should not autocorrect the query when no results are found', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.DidYouMean, {
                        enableAutoCorrection: false
                    });
                    test.env.queryStateModel.get = function () { return 'foobar'; };
                    var qsmSpy = jasmine.createSpy('queryStateModelSpy');
                    test.env.queryStateModel.set = qsmSpy;
                    Coveo.Simulate.query(test.env, {
                        results: Coveo.FakeResults.createFakeResults(0),
                        queryCorrections: [fakeQueryCorrection]
                    });
                    expect(qsmSpy).not.toHaveBeenCalled();
                });
            });
        });
        it('should not autocorrect search-as-you-type queries', function () {
            var qsmSpy = jasmine.createSpy('queryStateModelSpy');
            test.env.queryStateModel.set = qsmSpy;
            Coveo.Simulate.query(test.env, {
                results: Coveo.FakeResults.createFakeResults(0),
                searchAsYouType: true,
                queryCorrections: [fakeQueryCorrection]
            });
            expect(qsmSpy).not.toHaveBeenCalled();
        });
        it('correctedTerm should be null before a query', function () {
            expect(test.cmp.correctedTerm).toBeNull();
        });
        it('correctedTerm should be initialized properly from the queryCorrections', function () {
            Coveo.Simulate.query(test.env, {
                queryCorrections: [fakeQueryCorrection]
            });
            expect(test.cmp.correctedTerm).toBe(fakeQueryCorrection.correctedQuery);
        });
        describe('doQueryWithCorrectedTerm', function () {
            it('should throw an exception if no query was made', function () {
                expect(function () { return test.cmp.doQueryWithCorrectedTerm(); }).toThrow();
            });
            it('should throw an exception if no corrections were available', function () {
                Coveo.Simulate.query(test.env, {
                    queryCorrections: []
                });
                expect(function () { return test.cmp.doQueryWithCorrectedTerm(); }).toThrow();
            });
            it('should execute a query when corrections were available', function () {
                Coveo.Simulate.query(test.env, {
                    queryCorrections: [fakeQueryCorrection]
                });
                var qsmSpy = jasmine.createSpy('queryStateModelSpy');
                test.env.queryStateModel.set = qsmSpy;
                test.cmp.doQueryWithCorrectedTerm();
                expect(qsmSpy).toHaveBeenCalledWith(Coveo.QueryStateModel.attributesEnum.q, fakeQueryCorrection.correctedQuery);
                expect(qsmSpy.calls.count()).toBe(1);
            });
        });
        describe('escape the HTML against XSS', function () {
            beforeEach(function () {
            });
            it('when there are results', function () {
                Coveo.Simulate.query(test.env, {
                    queryCorrections: [{
                            correctedQuery: '<script>alert("hack the internet")</script>'
                        }]
                });
                expect(Coveo.$$(test.cmp.element).find('.coveo-did-you-mean-suggestion a').innerHTML)
                    .toBe('&lt;script&gt;alert("hack the internet")&lt;/script&gt;');
            });
            it('when query is autocorrected', function () {
                Coveo.Simulate.query(test.env, {
                    results: Coveo.FakeResults.createFakeResults(0),
                    queryCorrections: [{
                            correctedQuery: '<script>alert("thou shalt surely die")</script>'
                        }]
                });
                expect(Coveo.$$(test.cmp.element).find('.coveo-did-you-mean-suggestion a').innerHTML)
                    .toBe('&lt;script&gt;alert("thou shalt surely die")&lt;/script&gt;');
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ErrorReport', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.ErrorReport);
        });
        afterEach(function () {
            test = null;
        });
        describe('exposes options', function () {
            it('showDetailedError allow to show the json of the error', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.ErrorReport, {
                    showDetailedError: false
                });
                Coveo.Simulate.query(test.env, {
                    error: new Coveo.QueryError({
                        statusCode: 401,
                        data: {
                            message: 'the message',
                            type: 'the type'
                        }
                    })
                });
                expect(Coveo.$$(test.cmp.element).text()).not.toEqual(jasmine.stringMatching('More Information'));
                test = Coveo.Mock.optionsComponentSetup(Coveo.ErrorReport, {
                    showDetailedError: true
                });
                Coveo.Simulate.query(test.env, {
                    error: new Coveo.QueryError({
                        statusCode: 401,
                        data: {
                            message: 'the message',
                            type: 'the type'
                        }
                    })
                });
                expect(Coveo.$$(test.cmp.element).text()).toEqual(jasmine.stringMatching('More Information'));
            });
        });
        it('should hide by default', function () {
            expect(test.cmp.element.style.display).toBe('none');
        });
        it('should show on query error', function () {
            Coveo.Simulate.query(test.env, {
                error: new Coveo.QueryError({
                    statusCode: 401,
                    data: {
                        message: 'the message',
                        type: 'the type'
                    }
                })
            });
            expect(Coveo.$$(test.cmp.element).text()).toEqual(jasmine.stringMatching('Something went wrong.'));
        });
        it('should send analytics event on retry', function () {
            Coveo.Simulate.query(test.env, {
                error: new Coveo.QueryError({
                    statusCode: 401,
                    data: {
                        message: 'the message',
                        type: 'the type'
                    }
                })
            });
            test.cmp.retry();
            expect(test.cmp.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.errorRetry, {});
        });
        it('should send analytics event on reset', function () {
            Coveo.Simulate.query(test.env, {
                error: new Coveo.QueryError({
                    statusCode: 401,
                    data: {
                        message: 'the message',
                        type: 'the type'
                    }
                })
            });
            test.cmp.reset();
            expect(test.cmp.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.errorClearQuery, {});
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ExportToExcel', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.ExportToExcel);
            test.cmp._window = Coveo.Mock.mockWindow();
        });
        describe('exposes options', function () {
            it('numberOfResults calls search endpoint with appropriate number of results', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.ExportToExcel, {
                    numberOfResults: 200
                });
                test.cmp._window = Coveo.Mock.mockWindow();
                var searchEndpointSpy = jasmine.createSpy('searchEndpoint');
                test.env.searchEndpoint.getExportToExcelLink = searchEndpointSpy;
                var fakeQuery = new Coveo.QueryBuilder().build();
                test.env.queryController.getLastQuery = function () { return fakeQuery; };
                test.cmp.download();
                expect(searchEndpointSpy).toHaveBeenCalledWith(_.omit(fakeQuery, 'numberOfResults'), 200);
            });
        });
        it('download should do nothing if no query was made', function () {
            var exportToExcelEventSpy = jasmine.createSpy('exportToExcelEventSpy');
            var windowLocationReplaceSpy = jasmine.createSpy('windowLocationReplaceSpy');
            test.env.usageAnalytics.logCustomEvent = exportToExcelEventSpy;
            test.cmp._window.location.replace = windowLocationReplaceSpy;
            test.cmp.download();
            expect(exportToExcelEventSpy).not.toHaveBeenCalled();
            expect(windowLocationReplaceSpy).not.toHaveBeenCalled();
        });
        describe('when query was made', function () {
            beforeEach(function () {
                test.env.queryController.getLastQuery = function () { return new Coveo.QueryBuilder().build(); };
                test.env.searchEndpoint.getExportToExcelLink = function () { return 'http://www.excellink.com'; };
            });
            it('download should call exportToExcel event if query was made', function () {
                var excelSpy = jasmine.createSpy('excelSpy');
                test.env.usageAnalytics.logCustomEvent = excelSpy;
                test.cmp.download();
                expect(excelSpy).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.exportToExcel, {}, test.env.element);
            });
            it('download should redirect to the link provided by the search endpoint', function () {
                var windowLocationReplaceSpy = jasmine.createSpy('windowLocationReplaceSpy');
                test.cmp._window.location.replace = windowLocationReplaceSpy;
                test.cmp.download();
                expect(test.cmp._window.location.replace).toHaveBeenCalledWith('http://www.excellink.com');
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ExpressionBuilder', function () {
        var expressionBuilder;
        beforeEach(function () {
            expressionBuilder = new Coveo.ExpressionBuilder();
        });
        afterEach(function () {
            expressionBuilder = null;
        });
        it('can add an expression', function () {
            expressionBuilder.add('foo');
            expressionBuilder.add('bar');
            expect(expressionBuilder.build()).toBe('(foo) (bar)');
        });
        it('can add a fieldExpression', function () {
            expressionBuilder.addFieldExpression('@foo', '==', ['bar1', 'bar2', 'bar3']);
            expect(expressionBuilder.build()).toBe('@foo==(bar1,bar2,bar3)');
            expressionBuilder.addFieldExpression('@foo2', '<>', ['bar 1', 'bar 2', 'bar 3']);
            expect(expressionBuilder.build()).toBe('(@foo==(bar1,bar2,bar3)) (@foo2<>("bar 1","bar 2","bar 3"))');
        });
        it('can add a field not equal expression', function () {
            expressionBuilder.addFieldNotEqualExpression('@foo', ['bar 1', 'bar2', 'bar3']);
            expect(expressionBuilder.build()).toBe('(NOT @foo==("bar 1",bar2,bar3))');
        });
        it('can be built while empty, and return undefined', function () {
            expect(expressionBuilder.build()).toBeUndefined();
        });
        it('can be merged with another expression builder', function () {
            var expressionBuilder2 = new Coveo.ExpressionBuilder();
            expressionBuilder.add('1');
            expressionBuilder2.add('2');
            expect(Coveo.ExpressionBuilder.merge(expressionBuilder, expressionBuilder2).build()).toBe('(1) (2)');
        });
        it('can merge using OR', function () {
            var builder1 = new Coveo.ExpressionBuilder();
            var builder2 = new Coveo.ExpressionBuilder();
            var builder3 = new Coveo.ExpressionBuilder();
            builder1.add('foo');
            builder1.add('bar');
            builder2.add('spam');
            var merged = Coveo.ExpressionBuilder.mergeUsingOr(builder1, builder2, builder3);
            expect(merged.build()).toBe('((foo) (bar)) OR (spam)');
            merged = Coveo.ExpressionBuilder.mergeUsingOr(builder1);
            expect(merged.build()).toBe('(foo) (bar)');
            merged = Coveo.ExpressionBuilder.mergeUsingOr(builder1, builder3);
            expect(merged.build()).toBe('(foo) (bar)');
            merged = Coveo.ExpressionBuilder.mergeUsingOr(builder3);
            expect(merged.build()).toBeUndefined();
        });
        it('can tell if it\'s empty', function () {
            expect(expressionBuilder.isEmpty()).toBe(true);
            expressionBuilder.add('foo');
            expect(expressionBuilder.isEmpty()).toBe(false);
        });
        it('can remove an expression', function () {
            expressionBuilder.add('foo');
            expressionBuilder.add('bar');
            expressionBuilder.addFieldNotEqualExpression('@field', ['a', 'b', 'c']);
            expressionBuilder.remove('bar');
            expect(expressionBuilder.build()).toBe('(foo) ((NOT @field==(a,b,c)))');
            expressionBuilder.remove('(NOT @field==(a,b,c))');
            expect(expressionBuilder.build()).toBe('foo');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts"" />
var Coveo;
(function (Coveo) {
    describe('FacetHeader', function () {
        var facetHeader;
        var baseOptions;
        beforeEach(function () {
            baseOptions = {
                facetElement: document.createElement('div'),
                title: 'foo',
                field: '@field',
                enableClearElement: true,
                enableCollapseElement: true,
                isNewDesign: true
            };
        });
        afterEach(function () {
            baseOptions = null;
            facetHeader = null;
        });
        it('should build a title', function () {
            facetHeader = new Coveo.FacetHeader(_.extend(baseOptions, {
                title: 'this is a title'
            }));
            var title = Coveo.$$(facetHeader.build()).find('.coveo-facet-header-title');
            expect(Coveo.$$(title).text()).toBe('this is a title');
        });
        it('should build an icon if specified', function () {
            facetHeader = new Coveo.FacetHeader(_.extend(baseOptions, {
                icon: 'this-is-an-icon'
            }));
            var icon = Coveo.$$(facetHeader.build()).find('.coveo-icon-custom.this-is-an-icon');
            expect(icon).not.toBeNull();
        });
        describe('with a facet', function () {
            var facet;
            beforeEach(function () {
                facet = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field'
                }).cmp;
                Coveo.registerCustomMatcher();
            });
            it('toggle operator should be available if the facet has the option', function () {
                facet.options.enableTogglingOperator = true;
                facetHeader = new Coveo.FacetHeader(_.extend(baseOptions, {
                    facet: facet
                }));
                facetHeader.build();
                expect(facetHeader.operatorElement.style.display).toEqual('block');
                facet.options.enableTogglingOperator = false;
                facetHeader = new Coveo.FacetHeader(_.extend(baseOptions, {
                    facet: facet
                }));
                facetHeader.build();
                expect(facetHeader.operatorElement.style.display).toEqual('none');
            });
            it('allow to collapse and expand a facet', function () {
                facetHeader = new Coveo.FacetHeader(_.extend(baseOptions, {
                    facet: facet,
                    settingsKlass: Coveo.FacetSettings
                }));
                facetHeader.build();
                facetHeader.collapseFacet();
                expect(Coveo.$$(facetHeader.options.facetElement).hasClass('coveo-facet-collapsed')).toBe(true);
                facetHeader.expandFacet();
                expect(Coveo.$$(facetHeader.options.facetElement).hasClass('coveo-facet-collapsed')).not.toBe(true);
            });
            it('allow to switch or and and', function () {
                facet.options.enableTogglingOperator = true;
                facet.getSelectedValues = jasmine.createSpy('spy');
                facet.getSelectedValues.and.returnValue(['a', 'b']);
                facetHeader = new Coveo.FacetHeader(_.extend(baseOptions, {
                    facet: facet,
                    settingsKlass: Coveo.FacetSettings
                }));
                facetHeader.build();
                facetHeader.switchToOr();
                expect(facet.queryStateModel.set).toHaveBeenCalledWith(facet.operatorAttributeId, 'or');
                facetHeader.switchToAnd();
                expect(facet.queryStateModel.set).toHaveBeenCalledWith(facet.operatorAttributeId, 'and');
                facetHeader.operatorElement.click();
                facetHeader.operatorElement.click();
                expect(facet.queryController.executeQuery).toHaveBeenCalledTimes(2);
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FacetSearchParameters', function () {
        var mockFacet;
        beforeEach(function () {
            mockFacet = Coveo.Mock.mock(Coveo.Facet);
            mockFacet.options = {};
            mockFacet.options.numberOfValuesInFacetSearch = 10;
            mockFacet.options.facetSearchIgnoreAccents = false;
            mockFacet.searchInterface = {};
            mockFacet.searchInterface.isNewDesign = function () {
                return true;
            };
        });
        afterEach(function () {
            mockFacet = null;
        });
        it('should allow to set value to search and expand it with different captions', function () {
            var params = new Coveo.FacetSearchParameters(mockFacet);
            params.setValueToSearch('test');
            expect(params.alwaysInclude).toContain('test');
            mockFacet.options.valueCaption = {
                'foo': 'test',
                'bar': 'testing'
            };
            params = new Coveo.FacetSearchParameters(mockFacet);
            params.setValueToSearch('test');
            expect(params.alwaysInclude).toContain('test');
            expect(params.alwaysInclude).toContain('foo');
            expect(params.alwaysInclude).toContain('bar');
        });
        it('should allow to build a group by request', function () {
            var params = new Coveo.FacetSearchParameters(mockFacet);
            params.setValueToSearch('testing');
            var req = params.getGroupByRequest();
            expect(req.allowedValues).toContain('*testing*');
            expect(req.maximumNumberOfValues).toBe(mockFacet.options.numberOfValuesInFacetSearch);
            expect(req.field).toBe(mockFacet.options.field);
            expect(req.sortCriteria).toBe(params.sortCriteria);
            mockFacet.options.computedField = '@computefield';
            mockFacet.options.computedFieldOperation = 'sum';
            req = params.getGroupByRequest();
            expect(req.computedFields[0].field).toBe('@computefield');
            expect(req.computedFields[0].operation).toBe('sum');
        });
        describe('with facet having displayed values', function () {
            var elem;
            beforeEach(function () {
                mockFacet.options.valueCaption = {
                    'foo': 'test',
                    'bar': 'testing'
                };
                var spy = mockFacet.getDisplayedFacetValues;
                spy.and.returnValue([Coveo.FacetValue.createFromValue('a'), Coveo.FacetValue.createFromValue('b'), Coveo.FacetValue.createFromValue('c')]);
                elem = document.createElement('div');
                var oneValue = document.createElement('div');
                var twoValue = document.createElement('div');
                Coveo.$$(oneValue).text('test');
                Coveo.$$(twoValue).text('qwerty');
                oneValue.className = 'coveo-facet-value-caption';
                twoValue.className = 'coveo-facet-value-caption';
                elem.appendChild(oneValue);
                elem.appendChild(twoValue);
            });
            afterEach(function () {
                elem = null;
            });
            it('allows to exclude currently displayed values in search', function () {
                var params = new Coveo.FacetSearchParameters(mockFacet);
                params.excludeCurrentlyDisplayedValuesInSearch(elem);
                expect(params.alwaysExclude.length).toBe(7);
                expect(params.alwaysExclude).toContain('test');
                expect(params.alwaysExclude).toContain('foo');
                expect(params.alwaysExclude).toContain('bar');
                expect(params.alwaysExclude).toContain('qwerty');
                expect(params.alwaysExclude).toContain('a');
                expect(params.alwaysExclude).toContain('b');
                expect(params.alwaysExclude).toContain('c');
            });
            it('allows to create a group by', function () {
                var params = new Coveo.FacetSearchParameters(mockFacet);
                params.setValueToSearch('qwerty');
                var groupBy = params.getGroupByRequest();
                expect(groupBy.allowedValues).toContain('*qwerty*');
                expect(groupBy.allowedValues).not.toContain('test');
                expect(groupBy.allowedValues).not.toContain('c');
                params.excludeCurrentlyDisplayedValuesInSearch(elem);
                groupBy = params.getGroupByRequest();
                expect(groupBy.allowedValues).toContain('*qwerty*');
                expect(groupBy.allowedValues).toContain('test');
                expect(groupBy.allowedValues).toContain('c');
            });
            it('allow to create a query duplicated from the last one', function () {
                var spy = jasmine.createSpy('spy');
                var builder = new Coveo.QueryBuilder();
                builder.enablePartialMatch = true;
                mockFacet.queryController = {};
                mockFacet.queryController.getLastQuery = spy;
                spy.and.returnValue(builder.build());
                mockFacet.facetQueryController = {};
                mockFacet.facetQueryController.expressionToUseForFacetSearch = '@asdf';
                mockFacet.facetQueryController.constantExpressionToUseForFacetSearch = '@qwerty';
                var params = new Coveo.FacetSearchParameters(mockFacet);
                expect(params.getQuery().partialMatch).toBe(true);
                expect(params.getQuery().q).toBe('@asdf');
                expect(params.getQuery().cq).toBe('@qwerty');
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FacetSearch', function () {
        var mockFacet;
        var facetSearch;
        beforeEach(function () {
            mockFacet = Coveo.Mock.basicComponentSetup(Coveo.Facet).cmp;
            mockFacet.options = {
                field: '@field'
            };
            mockFacet.searchInterface = {};
            mockFacet.searchInterface.isNewDesign = function () {
                return true;
            };
            facetSearch = new Coveo.FacetSearch(mockFacet, Coveo.FacetSearchValuesList, mockFacet.root);
        });
        afterEach(function () {
            mockFacet = null;
            facetSearch = null;
        });
        it('input should have correct attributes', function () {
            var built = facetSearch.build();
            expect(Coveo.$$(built).find('input').getAttribute('autocapitalize')).toBe('off');
            expect(Coveo.$$(built).find('input').getAttribute('autocorrect')).toBe('off');
            expect(Coveo.$$(built).find('input').getAttribute('form')).toBe('coveo-dummy-form');
        });
        describe('perform search on the index', function () {
            beforeEach(function () {
                mockFacet.facetQueryController = Coveo.Mock.mock(Coveo.FacetQueryController);
                facetSearch.build();
            });
            afterEach(function () {
                mockFacet = null;
                facetSearch = null;
            });
            it('should display facet search results', function (done) {
                var pr = new Promise(function (resolve, reject) {
                    var results = Coveo.FakeResults.createFakeFieldValues('foo', 10);
                    resolve(results);
                });
                mockFacet.facetQueryController.search
                    .and
                    .returnValue(pr);
                var params = new Coveo.FacetSearchParameters(mockFacet);
                expect(Coveo.$$(facetSearch.searchResults).findAll('li').length).toBe(0);
                expect(facetSearch.currentlyDisplayedResults).toBeUndefined();
                facetSearch.triggerNewFacetSearch(params);
                pr.then(function () {
                    expect(Coveo.$$(facetSearch.searchResults).findAll('li').length).toBe(10);
                    expect(facetSearch.currentlyDisplayedResults.length).toBe(10);
                    done();
                });
            });
            it('should hide facet search results', function (done) {
                var pr = new Promise(function (resolve, reject) {
                    var results = Coveo.FakeResults.createFakeFieldValues('foo', 10);
                    resolve(results);
                });
                mockFacet.facetQueryController.search
                    .and
                    .returnValue(pr);
                var params = new Coveo.FacetSearchParameters(mockFacet);
                expect(Coveo.$$(facetSearch.searchResults).findAll('li').length).toBe(0);
                expect(facetSearch.currentlyDisplayedResults).toBeUndefined();
                facetSearch.triggerNewFacetSearch(params);
                pr.then(function () {
                    expect(Coveo.$$(facetSearch.searchResults).findAll('li').length).toBe(10);
                    expect(facetSearch.currentlyDisplayedResults.length).toBe(10);
                    facetSearch.completelyDismissSearch();
                    expect(Coveo.$$(facetSearch.searchResults).findAll('li').length).toBe(0);
                    expect(facetSearch.currentlyDisplayedResults).toBeUndefined();
                    done();
                });
            });
            it('should handle error', function (done) {
                var pr = new Promise(function (resolve, reject) {
                    reject(new Error('woops !'));
                });
                mockFacet.facetQueryController.search
                    .and
                    .returnValue(pr);
                var params = new Coveo.FacetSearchParameters(mockFacet);
                facetSearch.triggerNewFacetSearch(params);
                expect(facetSearch.currentlyDisplayedResults).toBeUndefined();
                pr.catch(function () {
                    expect(facetSearch.currentlyDisplayedResults).toBeUndefined();
                    done();
                });
            });
            describe('hook user events', function () {
                var searchPromise;
                var built;
                beforeEach(function () {
                    mockFacet.options.facetSearchDelay = 50;
                    searchPromise = new Promise(function (resolve, reject) {
                        var results = Coveo.FakeResults.createFakeFieldValues('foo', 10);
                        resolve(results);
                    });
                    mockFacet.facetQueryController.search
                        .and
                        .returnValue(searchPromise);
                    built = facetSearch.build();
                    var params = new Coveo.FacetSearchParameters(mockFacet);
                    facetSearch.triggerNewFacetSearch(params);
                });
                afterEach(function () {
                    searchPromise = null;
                });
                it('arrow navigation', function (done) {
                    searchPromise.then(function () {
                        expect(Coveo.$$(Coveo.$$(facetSearch.searchResults).findAll('li')[0]).hasClass('coveo-current')).toBe(true);
                        Coveo.Simulate.keyUp(Coveo.$$(built).find('input'), Coveo.KEYBOARD.DOWN_ARROW);
                        expect(Coveo.$$(Coveo.$$(facetSearch.searchResults).findAll('li')[1]).hasClass('coveo-current')).toBe(true);
                        Coveo.Simulate.keyUp(Coveo.$$(built).find('input'), Coveo.KEYBOARD.DOWN_ARROW);
                        expect(Coveo.$$(Coveo.$$(facetSearch.searchResults).findAll('li')[2]).hasClass('coveo-current')).toBe(true);
                        Coveo.Simulate.keyUp(Coveo.$$(built).find('input'), Coveo.KEYBOARD.UP_ARROW);
                        expect(Coveo.$$(Coveo.$$(facetSearch.searchResults).findAll('li')[1]).hasClass('coveo-current')).toBe(true);
                        Coveo.Simulate.keyUp(Coveo.$$(built).find('input'), Coveo.KEYBOARD.UP_ARROW);
                        expect(Coveo.$$(Coveo.$$(facetSearch.searchResults).findAll('li')[0]).hasClass('coveo-current')).toBe(true);
                        // loop around !
                        Coveo.Simulate.keyUp(Coveo.$$(built).find('input'), Coveo.KEYBOARD.UP_ARROW);
                        expect(Coveo.$$(Coveo.$$(facetSearch.searchResults).findAll('li')[9]).hasClass('coveo-current')).toBe(true);
                        done();
                    });
                });
                it('escape close results', function (done) {
                    searchPromise.then(function () {
                        expect(facetSearch.currentlyDisplayedResults.length).toBe(10);
                        Coveo.Simulate.keyUp(Coveo.$$(built).find('input'), Coveo.KEYBOARD.ESCAPE);
                        expect(facetSearch.currentlyDisplayedResults).toBeUndefined();
                        done();
                    });
                });
                it('other key should start a search', function (done) {
                    Coveo.Simulate.keyUp(Coveo.$$(built).find('input'), Coveo.KEYBOARD.CTRL);
                    setTimeout(function () {
                        expect(facetSearch.facet.facetQueryController.search).toHaveBeenCalled();
                        done();
                    }, 55);
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    describe('FacetSettings', function () {
        var facet;
        var facetSettings;
        beforeEach(function () {
            facet = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                field: '@field'
            }).cmp;
            Coveo.registerCustomMatcher();
        });
        afterEach(function () {
            facet = null;
            facetSettings = null;
        });
        it('allows to save state', function () {
            // settings not enabled : no call to query state
            facetSettings = new Coveo.FacetSettings(['foo', 'bar'], facet);
            facetSettings.build();
            facetSettings.saveState();
            expect(facet.queryStateModel.get).not.toHaveBeenCalled();
            // settings enabled : 3 calls to query state
            facet.options.enableSettingsFacetState = true;
            facetSettings = new Coveo.FacetSettings(['foo', 'bar'], facet);
            facetSettings.build();
            facetSettings.saveState();
            expect(facet.queryStateModel.get).toHaveBeenCalledTimes(3);
        });
        it('allows to load state', function () {
            // settings not enabled : no call to query state
            facetSettings = new Coveo.FacetSettings(['foo', 'bar'], facet);
            facetSettings.build();
            facetSettings.loadSavedState();
            expect(facet.queryStateModel.setMultiple).not.toHaveBeenCalled();
            // settings enabled : 1 call to set multiple
            facet.options.enableSettingsFacetState = true;
            facetSettings = new Coveo.FacetSettings(['foo', 'bar'], facet);
            facetSettings.build();
            facetSettings.loadSavedState();
            expect(facet.queryStateModel.setMultiple).toHaveBeenCalled();
        });
        it('allow to open and close the popup', function () {
            facetSettings = new Coveo.FacetSettings(['foo', 'bar'], facet);
            var built = facetSettings.build();
            facet.root.appendChild(built);
            expect(Coveo.$$(facetSettings.facet.root).find('.coveo-facet-settings-popup')).toBeNull();
            facetSettings.open();
            expect(Coveo.$$(facetSettings.facet.root).find('.coveo-facet-settings-popup')).not.toBeNull();
            facetSettings.close();
            expect(Coveo.$$(facetSettings.facet.root).find('.coveo-facet-settings-popup')).toBeNull();
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FacetSlider', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.FacetSlider, {
                start: 0,
                end: 100,
                field: '@foo'
            });
            test.env.queryStateModel.get.and.returnValue([0, 100]);
            test.env.queryStateModel.getDefault.and.returnValue([0, 100]);
        });
        afterEach(function () {
            test = null;
        });
        it('should not add a query expression if the slider is in it\'s default state', function () {
            test.cmp.setSelectedValues([0, 100]);
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.build().aq).toBeUndefined();
        });
        it('should add a query expression if the slider is not in it\'s default state', function () {
            test.cmp.setSelectedValues([5, 25]);
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.build().aq).toBe('@foo==5..25');
        });
        it('should request a group by', function () {
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([
                jasmine.objectContaining({
                    field: '@foo',
                    generateAutomaticRanges: true
                })
            ]));
        });
        it('should return the correct selected values after a query, which is it\'s options', function () {
            Coveo.Simulate.query(test.env);
            expect(test.cmp.getSelectedValues()).toEqual(jasmine.arrayContaining([0, 100]));
        });
        it('should return undefined values if there has not been a query yet', function () {
            expect(test.cmp.getSelectedValues()).toEqual(jasmine.arrayContaining([undefined, undefined]));
        });
        it('should return selected values from the query state if available', function () {
            var spy = jasmine.createSpy('rangeState');
            spy.and.returnValue([60, 75]);
            test.env.queryStateModel.get = spy;
            Coveo.Simulate.query(test.env);
            expect(test.cmp.getSelectedValues()).toEqual(jasmine.arrayContaining([60, 75]));
        });
        it('should populate breadcrumb only if not in default state', function () {
            var breadcrumbs = [];
            Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: breadcrumbs });
            expect(breadcrumbs.length).toBe(0);
            breadcrumbs = [];
            test.cmp.setSelectedValues([50, 60]);
            Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: breadcrumbs });
            expect(breadcrumbs.length).toBe(1);
        });
        describe('exposes options', function () {
            it('dateField should change the query expression to a correct date expression', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.FacetSlider, {
                    start: '2000/01/01',
                    end: '3000/01/01',
                    field: '@foo',
                    dateField: true
                });
                var startSelected = new Date(Date.UTC(2100, 0, 1));
                var endSelected = new Date(Date.UTC(2200, 0, 1));
                test.cmp.setSelectedValues([startSelected.getTime(), endSelected.getTime()]);
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().aq).toBe('@foo==2100/01/01@00:00:00..2200/01/01@00:00:00');
            });
            it('queryOverride should output a query override in the group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.FacetSlider, {
                    start: 0,
                    end: 100,
                    field: '@foo',
                    queryOverride: '@foo>50'
                });
                test.env.queryStateModel.get.and.returnValue([0, 100]);
                test.env.queryStateModel.getDefault.and.returnValue([0, 100]);
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([
                    jasmine.objectContaining({
                        queryOverride: '@foo>50',
                        field: '@foo'
                    })
                ]));
            });
            it('title should modify the header', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.FacetSlider, {
                    start: 0,
                    end: 100,
                    field: '@foo',
                    title: 'nice title'
                });
                test.cmp.ensureDom();
                expect(Coveo.$$(Coveo.$$(test.cmp.facetHeader.build()).find('.coveo-facet-header-title')).text()).toBe('nice title');
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Facet', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                field: '@field'
            });
            test.cmp.searchInterface.isNewDesign = function () {
                return true;
            };
        });
        afterEach(function () {
            test = null;
        });
        it('allows to select a value', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            test.cmp.selectValue('foobar');
            expect(test.cmp.getDisplayedValues()).toContain('foobar');
            expect(test.cmp.values.get('foobar').selected).toBe(true);
        });
        it('allows to select multiple value', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            test.cmp.selectMultipleValues(['foo', 'bar', 'baz']);
            expect(test.cmp.getDisplayedValues()).toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            expect(test.cmp.values.get('foo').selected).toBe(true);
        });
        it('allows to deselect a value', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            test.cmp.selectValue('foobar');
            expect(test.cmp.getDisplayedValues()).toContain('foobar');
            expect(test.cmp.values.get('foobar').selected).toBe(true);
            test.cmp.deselectValue('foobar');
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            expect(test.cmp.values.get('foobar').selected).not.toBe(true);
        });
        it('allows to deselect multiple values', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            test.cmp.selectMultipleValues(['foo', 'bar', 'baz']);
            expect(test.cmp.getDisplayedValues()).toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            expect(test.cmp.values.get('foo').selected).toBe(true);
            test.cmp.deselectMultipleValues(['foo', 'bar', 'baz']);
            expect(test.cmp.getDisplayedFacetValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            expect(test.cmp.values.get('foo').selected).not.toBe(true);
        });
        it('allows to exclude a value', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            test.cmp.excludeValue('foobar');
            expect(test.cmp.getDisplayedValues()).toContain('foobar');
            expect(test.cmp.values.get('foobar').excluded).toBe(true);
        });
        it('allows to exclude multiple value', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            test.cmp.excludeMultipleValues(['foo', 'bar', 'baz']);
            expect(test.cmp.getDisplayedValues()).toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            expect(test.cmp.values.get('foo').excluded).toBe(true);
        });
        it('allows to unexclude a value', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            test.cmp.excludeValue('foobar');
            expect(test.cmp.getDisplayedValues()).toContain('foobar');
            expect(test.cmp.values.get('foobar').excluded).toBe(true);
            test.cmp.unexcludeValue('foobar');
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            expect(test.cmp.values.get('foobar').excluded).not.toBe(true);
        });
        it('allows to unexclude multiple values', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            test.cmp.excludeMultipleValues(['foo', 'bar', 'baz']);
            expect(test.cmp.getDisplayedValues()).toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            expect(test.cmp.values.get('foo').excluded).toBe(true);
            test.cmp.unexcludeMultipleValues(['foo', 'bar', 'baz']);
            expect(test.cmp.getDisplayedFacetValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar', 'baz']));
            expect(test.cmp.values.get('foo').excluded).not.toBe(true);
        });
        it('allows to toggleSelectValue', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            test.cmp.toggleSelectValue('foobar');
            expect(test.cmp.getDisplayedValues()).toContain('foobar');
            expect(test.cmp.values.get('foobar').selected).toBe(true);
            test.cmp.toggleSelectValue('foobar');
            expect(test.cmp.values.get('foobar').selected).toBe(false);
        });
        it('allows to toggleExcludeValue', function () {
            expect(test.cmp.getDisplayedFacetValues()).not.toContain('foobar');
            test.cmp.toggleExcludeValue('foobar');
            expect(test.cmp.getDisplayedValues()).toContain('foobar');
            expect(test.cmp.values.get('foobar').excluded).toBe(true);
            test.cmp.toggleExcludeValue('foobar');
            expect(test.cmp.values.get('foobar').excluded).toBe(false);
        });
        it('allows to getSelectedValues', function () {
            expect(test.cmp.getSelectedValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar']));
            test.cmp.selectMultipleValues(['foo', 'bar']);
            expect(test.cmp.getSelectedValues()).toEqual(jasmine.arrayContaining(['foo', 'bar']));
        });
        it('allows to getExcludedValues', function () {
            expect(test.cmp.getExcludedValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar']));
            test.cmp.excludeMultipleValues(['foo', 'bar']);
            expect(test.cmp.getExcludedValues()).toEqual(jasmine.arrayContaining(['foo', 'bar']));
        });
        it('allows to reset', function () {
            test.cmp.selectMultipleValues(['foo', 'bar']);
            test.cmp.excludeMultipleValues(['a', 'b']);
            expect(test.cmp.getSelectedValues()).toEqual(jasmine.arrayContaining(['foo', 'bar']));
            expect(test.cmp.getExcludedValues()).toEqual(jasmine.arrayContaining(['a', 'b']));
            test.cmp.reset();
            expect(test.cmp.getSelectedValues()).not.toEqual(jasmine.arrayContaining(['foo', 'bar']));
            expect(test.cmp.getExcludedValues()).not.toEqual(jasmine.arrayContaining(['a', 'b']));
        });
        it('allows to update sort', function () {
            expect(test.cmp.options.sortCriteria).not.toBe('score');
            test.cmp.updateSort('score');
            expect(test.cmp.options.sortCriteria).toBe('score');
            expect(test.env.queryController.executeQuery).toHaveBeenCalled();
        });
        it('allows to showWaitingAnimation and hideWaitingAnimation', function () {
            test.cmp.showWaitingAnimation();
            expect(Coveo.$$(test.cmp.element).find('.coveo-facet-header-wait-animation').style.display).not.toBe('none');
            test.cmp.hideWaitingAnimation();
            expect(Coveo.$$(test.cmp.element).find('.coveo-facet-header-wait-animation').style.display).toBe('none');
        });
        it('allows to getValueCaption', function () {
            test.cmp.options.field = '@filetype';
            expect(test.cmp.getValueCaption(Coveo.FacetValue.createFromValue('foo'))).toBe('foo');
            expect(test.cmp.getValueCaption(Coveo.FacetValue.createFromValue('txt'))).toBe('Text');
        });
        describe('exposes options', function () {
            it('title should set the title', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    title: 'My cool facet'
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetHeader.options.title).toBe('My cool facet');
            });
            it('field should set the field in the query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@myfield'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.groupByRequests).toEqual(jasmine.arrayContaining([
                    jasmine.objectContaining({
                        field: '@myfield'
                    })
                ]));
            });
            it('headerIcon should allow to set an icon in the header', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    headerIcon: 'my cool icon'
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetHeader.options.icon).toBe('my cool icon');
            });
            it('id should be the field by default, or specified manually', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@mycoolfield'
                });
                expect(test.cmp.options.id).toBe('@mycoolfield');
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@mycoolfield2',
                    id: 'something else'
                });
                expect(test.cmp.options.id).toBe('something else');
            });
            it('isMultiValueField should trigger another query to update delta', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    isMultiValueField: false
                });
                test.cmp.selectValue('foo1');
                var results = Coveo.FakeResults.createFakeResults();
                results.groupByResults = [Coveo.FakeResults.createFakeGroupByResult('@field', 'foo', 10)];
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(test.cmp.getEndpoint().search).not.toHaveBeenCalled();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    isMultiValueField: true
                });
                test.cmp.selectValue('foo1');
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(test.cmp.getEndpoint().search).toHaveBeenCalled();
            });
            it('numberOfValues should specify the number of value requested in the query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    numberOfValues: 13
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        maximumNumberOfValues: 13 + 1 // one more for the more less function
                    })]));
            });
            it('pageSize should specify the number of values for the more option', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    pageSize: 13
                });
                test.cmp.showMore();
                expect(test.cmp.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    groupBy: jasmine.arrayContaining([jasmine.objectContaining({
                            maximumNumberOfValues: 13 + test.cmp.options.numberOfValues + 1 // 13 + already displayed at start + 1 more for next more
                        })])
                }));
            });
            it('lookupField should specify the lookupfield to use in the query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    lookupField: '@lookupfield'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        lookupField: '@lookupfield'
                    })]));
            });
            it('enableSettings should specify if the setting component is initialized', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableSettings: false
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetSettings).toBeUndefined();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableSettings: true
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetSettings).toBeDefined();
            });
            it('enableSettingsFacetState should specify if the option is passed to the setting component', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableSettingsFacetState: false
                });
                test.cmp.ensureDom();
                expect(Coveo.$$(test.cmp.facetSettings.build()).find('.coveo-facet-settings-section-save-state')).toBeNull();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableSettingsFacetState: true
                });
                test.cmp.ensureDom();
                expect(Coveo.$$(test.cmp.facetSettings.build()).find('.coveo-facet-settings-section-save-state')).toBeDefined();
            });
            it('availableSorts should specify the available criteria in the setting component', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    availableSorts: ['ChiSquare', 'NoSort']
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetSettings.sorts).toEqual(jasmine.arrayContaining(['ChiSquare', 'NoSort']));
            });
            it('sortCriteria should specify the first available sort if not specified', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    availableSorts: ['ChiSquare', 'NoSort']
                });
                expect(test.cmp.options.sortCriteria).toBe('ChiSquare');
            });
            it('sortCriteria should specify the sort group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    sortCriteria: 'score'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        sortCriteria: 'score'
                    })]));
            });
            it('customSort should specify the sort of values when rendered', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    customSort: ['foo3', 'foo1']
                });
                var results = Coveo.FakeResults.createFakeResults();
                results.groupByResults = [Coveo.FakeResults.createFakeGroupByResult('@field', 'foo', 10)];
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(test.cmp.getDisplayedFacetValues()[0].value).toBe('foo3');
                expect(test.cmp.getDisplayedFacetValues()[1].value).toBe('foo1');
                expect(test.cmp.getDisplayedFacetValues()[2].value).toBe('foo0');
            });
            it('injectionDepth should specify the injection depth in a group by', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    injectionDepth: 9999
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        injectionDepth: 9999
                    })]));
            });
            it('showIcon should specify if the icon is displayed near each values', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    showIcon: true
                });
                test.env.searchInterface.isNewDesign = function () { return false; }; // necessary since showIcon is a legacy option
                test.cmp.ensureDom();
                expect(test.cmp.facetValuesList.get('foo').renderer.icon).toBeDefined();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    showIcon: false
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetValuesList.get('foo').renderer.icon).toBeUndefined();
            });
            it('useAnd should specify the filter generated by a facet', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    useAnd: true
                });
                test.cmp.selectMultipleValues(['foo', 'bar']);
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().aq).toBe('(@field==foo) (@field==bar)');
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    useAnd: false
                });
                test.cmp.selectMultipleValues(['foo', 'bar']);
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().aq).toBe('@field==(foo,bar)');
            });
            it('allowTogglingOperator should specify if the toggle is rendered in header ', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableTogglingOperator: true
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetHeader.operatorElement.style.display).not.toBe('none');
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableTogglingOperator: false
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetHeader.operatorElement.style.display).toBe('none');
            });
            it('enableFacetSearch should specify if the facet search is rendered', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableFacetSearch: true
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetSearch).toBeDefined();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableFacetSearch: false
                });
                test.cmp.ensureDom();
                expect(test.cmp.facetSearch).toBeUndefined();
            });
            it('facetSearchDelay should be passed to the facet search component', function (done) {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    facetSearchDelay: 5
                });
                test.cmp.searchInterface.isNewDesign = function () { return true; };
                test.cmp.ensureDom();
                test.cmp.facetSearch.focus();
                setTimeout(function () {
                    expect(test.cmp.getEndpoint().search).toHaveBeenCalled();
                    done();
                }, 6); // one more ms then facetSearchDelay
            });
            it('numberOfValuesInFacetSearch should be passed to the facet search component', function (done) {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    numberOfValuesInFacetSearch: 13
                });
                test.cmp.searchInterface.isNewDesign = function () { return true; };
                test.cmp.ensureDom();
                test.cmp.facetSearch.focus();
                setTimeout(function () {
                    expect(test.cmp.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                        groupBy: jasmine.arrayContaining([jasmine.objectContaining({
                                maximumNumberOfValues: 13
                            })])
                    }));
                    done();
                }, test.cmp.options.facetSearchDelay + 10);
            });
            it('includeInBreadcrumb should specify if the facet listen to breadcrumb events', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    includeInBreadcrumb: true
                });
                test.cmp.selectValue('foo');
                var args = {
                    breadcrumbs: []
                };
                Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, args);
                expect(args.breadcrumbs.length).toBe(1);
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    includeInBreadcrumb: false
                });
                test.cmp.selectValue('foo');
                args = {
                    breadcrumbs: []
                };
                Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, args);
                expect(args.breadcrumbs.length).toBe(0);
            });
            it('includeInOmnibox should specify if the facet listen to omnibox events', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    includeInOmnibox: false
                });
                Coveo.Simulate.query(test.env);
                var args = Coveo.FakeResults.createPopulateOmniboxEventArgs('foo', 1);
                Coveo.$$(test.env.root).trigger(Coveo.OmniboxEvents.populateOmnibox, args);
                expect(args.rows.length).toBe(0);
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    includeInOmnibox: true
                });
                Coveo.Simulate.query(test.env);
                args = Coveo.FakeResults.createPopulateOmniboxEventArgs('foo', 1);
                Coveo.$$(test.env.root).trigger(Coveo.OmniboxEvents.populateOmnibox, args);
                expect(args.rows.length).toBe(1);
            });
            it('computedField should specify the computed field to use in the query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    computedField: '@computedField'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        computedFields: jasmine.arrayContaining([jasmine.objectContaining({
                                field: '@computedField'
                            })])
                    })]));
            });
            it('computedFieldOperation should specify the computed field to use in the query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    computedField: '@computedField',
                    computedFieldOperation: 'qwerty'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        computedFields: jasmine.arrayContaining([jasmine.objectContaining({
                                operation: 'qwerty'
                            })])
                    })]));
            });
            it('enableMoreLess should specify that the moreLess element should be rendered', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableMoreLess: true
                });
                var results = Coveo.FakeResults.createFakeResults();
                results.groupByResults = [Coveo.FakeResults.createFakeGroupByResult('@field', 'foo', 15)];
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                var more = Coveo.$$(test.cmp.element).find('.coveo-facet-more');
                var less = Coveo.$$(test.cmp.element).find('.coveo-facet-less');
                expect(more).toBeDefined();
                expect(less).toBeDefined();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    enableMoreLess: false
                });
                more = Coveo.$$(test.cmp.element).find('.coveo-facet-more');
                less = Coveo.$$(test.cmp.element).find('.coveo-facet-less');
                expect(more).toBeNull();
                expect(less).toBeNull();
            });
            it('allowedValues should specify the value in the group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    allowedValues: ['a', 'b', 'c']
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        allowedValues: jasmine.arrayContaining(['a', 'b', 'c'])
                    })]));
            });
            it('additionalFilter should specify a query override in the group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    additionalFilter: '@qwerty==foobar'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        constantQueryOverride: '@qwerty==foobar'
                    })]));
            });
            it('dependsOn should specify a facet to depend on another one', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                    field: '@field',
                    dependsOn: '@masterFacet'
                });
                var masterFacet = Coveo.Mock.advancedComponentSetup(Coveo.Facet, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    field: '@masterFacet'
                }, function (builder) {
                    return builder.withRoot(test.env.root);
                }));
                var results = Coveo.FakeResults.createFakeResults();
                results.groupByResults = [Coveo.FakeResults.createFakeGroupByResult('@field', 'foo', 15), Coveo.FakeResults.createFakeGroupByResult('@masterFacet', 'foo', 15)];
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(Coveo.$$(test.cmp.element).hasClass('coveo-facet-dependent')).toBe(true);
                expect(Coveo.$$(masterFacet.cmp.element).hasClass('coveo-facet-dependent')).toBe(false);
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FieldSuggestions', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.FieldSuggestions, {
                field: '@foobar'
            });
        });
        afterEach(function () {
            test = null;
            it('should do a request on the endpoint', function () {
                Coveo.Simulate.omnibox(test.env);
                expect(test.env.searchEndpoint.listFieldValues).toHaveBeenCalledWith(jasmine.objectContaining({
                    field: '@foobar'
                }));
            });
            it('should throw when there is no field', function () {
                expect(function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.FieldSuggestions, {
                        field: undefined
                    });
                }).toThrow();
            });
            it('should trigger an analytics event on suggestion', function (done) {
                test.env.searchEndpoint.listFieldValues = jasmine.createSpy('search');
                test.env.searchEndpoint.listFieldValues.and.returnValue(new Promise(function (resolve) {
                    resolve([{ value: 'foo' }, { value: 'bar' }, { value: 'baz' }]);
                }));
                var simulation = Coveo.Simulate.omnibox(test.env);
                test.cmp.selectSuggestion(0);
                simulation.rows[0].deferred.then(function (elementResolved) {
                    test.cmp.selectSuggestion(0);
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxField, {});
                    done();
                });
            });
            describe('exposes options', function () {
                it('queryOverride should be passed in the list field value', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.FieldSuggestions, {
                        field: '@foobar',
                        queryOverride: 'some override'
                    });
                    Coveo.Simulate.omnibox(test.env);
                    expect(test.env.searchEndpoint.listFieldValues).toHaveBeenCalledWith(jasmine.objectContaining({
                        field: '@foobar',
                        queryOverride: 'some override'
                    }));
                });
                it('omniboxZIndex should be taken into account', function (done) {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.FieldSuggestions, {
                        field: '@foobar',
                        omniboxZIndex: 333
                    });
                    test.env.searchEndpoint.listFieldValues = jasmine.createSpy('search');
                    test.env.searchEndpoint.listFieldValues.and.returnValue(new Promise(function (resolve) {
                        resolve([{ value: 'foo' }, { value: 'bar' }, { value: 'baz' }]);
                    }));
                    var simulation = Coveo.Simulate.omnibox(test.env);
                    test.cmp.selectSuggestion(0);
                    simulation.rows[0].deferred.then(function (elementResolved) {
                        expect(elementResolved.zIndex).toBe(333);
                        done();
                    });
                });
                it('numberOfSuggestions should be passed in the list field value', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.FieldSuggestions, {
                        field: '@foobar',
                        numberOfSuggestions: 333
                    });
                    Coveo.Simulate.omnibox(test.env);
                    expect(test.env.searchEndpoint.listFieldValues).toHaveBeenCalledWith(jasmine.objectContaining({
                        field: '@foobar',
                        maximumNumberOfValues: 333
                    }));
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FieldTable', function () {
        var test;
        var element;
        beforeEach(function () {
            element = Coveo.$$('table', { className: 'CoveoFieldTable' }).el;
            element.appendChild(Coveo.$$('tr', { 'data-field': '@author', 'data-caption': 'Author' }).el);
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldTable, Coveo.FakeResults.createFakeResult(), {
                element: element
            });
        });
        afterEach(function () {
            test = null;
            element = null;
        });
        describe('exposes options', function () {
            describe('allowMinimization set to false', function () {
                beforeEach(function () {
                    test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldTable, {
                        allowMinimization: false
                    }, Coveo.FakeResults.createFakeResult());
                });
                it('should not show a toggle link', function () {
                    expect(Coveo.$$(test.env.element).find('.coveo-field-table-toggle')).toBeNull();
                });
                it('should not wrap table in a toggle container', function () {
                    expect(Coveo.$$(test.env.element).find('.coveo-field-table-toggle-container')).toBeNull();
                });
                it('should be expanded', function () {
                    expect(test.cmp.isExpanded).toBe(true);
                });
                it('should disable toggling, expanding and minimizing', function () {
                    test.cmp.toggle();
                    expect(test.cmp.isExpanded).toBe(true);
                    test.cmp.minimize();
                    expect(test.cmp.isExpanded).toBe(true);
                    test.cmp.expand();
                    expect(test.cmp.isExpanded).toBe(true);
                });
            });
            describe('allowMinimization set to true', function () {
                beforeEach(function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldTable, Coveo.FakeResults.createFakeResult(), {
                        element: element,
                        cmpOptions: {
                            allowMinimization: true
                        }
                    });
                });
                it('should show a toggle link', function () {
                    expect(Coveo.$$(test.env.element.parentElement).find('.coveo-field-table-toggle')).not.toBeNull();
                });
                it('should wrap the table in a toggle container', function () {
                    expect(Coveo.$$(test.env.element.parentElement).hasClass('coveo-field-table-toggle-container')).toBe(true);
                });
                it('expandedTitle should be the text of the toggle link only when table is expanded', function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldTable, Coveo.FakeResults.createFakeResult(), {
                        element: element,
                        cmpOptions: {
                            expandedTitle: 'foobar2000'
                        }
                    });
                    var toggle = Coveo.$$(test.cmp.element.parentElement.parentElement).find('.coveo-field-table-toggle-caption');
                    test.cmp.expand();
                    expect(toggle.textContent).toBe('foobar2000');
                    test.cmp.minimize();
                    expect(toggle.textContent).not.toBe('foobar2000');
                });
                it('expandedTitle should be the localized version of "Details" by default', function () {
                    test.cmp.expand();
                    var toggle = Coveo.$$(test.cmp.element.parentElement.parentElement).find('.coveo-field-table-toggle-caption');
                    expect(toggle.textContent).toBe('Details'.toLocaleString());
                });
                it('minimizedTitle should be the text of the toggle link only when table is minimized', function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldTable, Coveo.FakeResults.createFakeResult(), {
                        element: element,
                        cmpOptions: {
                            minimizedTitle: 'foobar2000'
                        }
                    });
                    var toggle = Coveo.$$(test.cmp.element.parentElement.parentElement).find('.coveo-field-table-toggle-caption');
                    test.cmp.minimize();
                    expect(toggle.textContent).toBe('foobar2000');
                    test.cmp.expand();
                    expect(toggle.textContent).not.toBe('foobar2000');
                });
                it('minimizedTitle should be the localized version of "Details" by default', function () {
                    test.cmp.minimize();
                    var toggle = Coveo.$$(test.cmp.element.parentElement.parentElement).find('.coveo-field-table-toggle-caption');
                    expect(toggle.textContent).toBe('Details'.toLocaleString());
                });
                it('minimizedByDefault set to true should initialize the table in a minimized state', function () {
                    test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldTable, {
                        minimizedByDefault: true
                    }, Coveo.FakeResults.createFakeResult());
                    expect(test.cmp.isExpanded).toBe(false);
                });
                it('minimizedByDefault set to false should initialize the table in an expanded state', function () {
                    test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldTable, {
                        minimizedByDefault: false
                    }, Coveo.FakeResults.createFakeResult());
                    expect(test.cmp.isExpanded).toBe(true);
                });
            });
        });
        it('toggle should toggle between expanded and minimized states', function () {
            test.cmp.minimize();
            test.cmp.toggle();
            expect(test.cmp.isExpanded).toBe(true);
            test.cmp.toggle();
            expect(test.cmp.isExpanded).toBe(false);
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FieldValue', function () {
        var test;
        var element;
        beforeEach(function () {
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, Coveo.FakeResults.createFakeResult(), {
                element: Coveo.$$('span').el,
                cmpOptions: {
                    field: '@string'
                }
            });
            element = Coveo.$$('span').el;
        });
        afterEach(function () {
            test = null;
            element = null;
        });
        describe('exposes options', function () {
            it('field not specified should default to @field', function () {
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldValue, {
                    field: undefined
                }, Coveo.FakeResults.createFakeResult());
                expect(test.cmp.options.field).toBe('@field');
            });
            it('facet should use the field value by default', function () {
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldValue, {
                    field: '@foobarde'
                }, Coveo.FakeResults.createFakeResult());
                expect(test.cmp.options.facet).toBe('@foobarde');
            });
            it('htmlValue set to true should set the element\'s innerHTML value properly', function () {
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, Coveo.FakeResults.createFakeResult(), {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        htmlValue: true
                    }
                });
                expect(test.cmp.renderOneValue('<em>patatefrietz</em>').innerHTML).toBe('<em>patatefrietz</em>');
            });
            it('htmlValue set to false should set the value in text node', function () {
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, Coveo.FakeResults.createFakeResult(), {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        htmlValue: false
                    }
                });
                expect(test.cmp.renderOneValue('<em>patatefrietz</em>').textContent).toBe('<em>patatefrietz</em>');
            });
            it('splitValues should display the array of values separated by commas when the input values are semi-colon separated', function () {
                var result = Coveo.FakeResults.createFakeResult();
                result.raw.foobarde = 'this;is;sparta';
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, result, {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        splitValues: true,
                        separator: ';'
                    }
                });
                expect(test.cmp.element.textContent).toBe('this, is, sparta');
            });
            it('displaySeparator should modify the string displayed between values of a multi-value field', function () {
                var result = Coveo.FakeResults.createFakeResult();
                result.raw.foobarde = 'this;is;sparta';
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, result, {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        splitValues: true,
                        separator: ';',
                        displaySeparator: '<->'
                    }
                });
                expect(test.cmp.element.textContent).toBe('this<->is<->sparta');
            });
            it('separator should specify the string used to split a multi-value field from the index', function () {
                var result = Coveo.FakeResults.createFakeResult();
                result.raw.foobarde = 'this,is,sparta';
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, result, {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        splitValues: true,
                        separator: ','
                    }
                });
                expect(test.cmp.element.textContent).toBe('this, is, sparta');
            });
            it('separator default value must be ;', function () {
                var result = Coveo.FakeResults.createFakeResult();
                result.raw.foobarde = 'this;is;sparta';
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, result, {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        splitValues: true
                    }
                });
                expect(test.cmp.element.textContent).toBe('this, is, sparta');
            });
            it('splitValues should display the array of values separated by commas when the input values are in an array', function () {
                var result = Coveo.FakeResults.createFakeResult();
                result.raw.foobarde = ['this', 'is', 'sparta'];
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, result, {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        splitValues: true
                    }
                });
                expect(test.cmp.element.textContent).toBe('this, is, sparta');
            });
            it('helper should render using the specified helper', function () {
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, Coveo.FakeResults.createFakeResult(), {
                    element: element,
                    cmpOptions: {
                        field: '@foobarde',
                        helper: 'hamburgerHelper'
                    }
                });
                Coveo.TemplateHelpers.registerFieldHelper('hamburgerHelper', function (value) { return 'ham' + value + 'burger'; });
                expect(test.cmp.renderOneValue('1337').textContent).toEqual('ham1337burger');
            });
            describe('helperOptions', function () {
                it('should call helper with appropriate options', function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, Coveo.FakeResults.createFakeResult(), {
                        element: element,
                        cmpOptions: {
                            field: '@foobarde',
                            helper: 'myHelper',
                            helperOptions: {
                                myOption: '0002raboof'
                            }
                        }
                    });
                    Coveo.TemplateHelpers.registerFieldHelper('myHelper', function (_, options) {
                        expect(options).toEqual(jasmine.objectContaining({
                            myOption: '0002raboof'
                        }));
                        return '';
                    });
                    test.cmp.renderOneValue('someValue');
                });
            });
        });
        it('should display the proper field value', function () {
            expect(Coveo.$$(test.cmp.element).find('span').textContent).toBe('string value');
        });
        describe('with a related facet', function () {
            var facet;
            beforeEach(function () {
                facet = Coveo.Mock.mock(Coveo.Facet);
                facet.values = Coveo.Mock.mock(Coveo.FacetValues);
                facet.values.get = function () {
                    var value = Coveo.Mock.mock(Coveo.FacetValue);
                    value.selected = true;
                    return value;
                };
            });
            afterEach(function () {
                facet = null;
            });
            it('should display the field value as clickable when its facet is enabled', function () {
                facet.disabled = false;
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, Coveo.FakeResults.createFakeResult(), {
                    element: element,
                    modifyBuilder: function (builder) {
                        builder.componentStateModel.get = function () { return [facet]; };
                        builder.queryStateModel.get = function () { return []; };
                        return builder;
                    },
                    cmpOptions: {
                        field: '@string'
                    }
                });
                expect(Coveo.$$(Coveo.$$(test.cmp.element).find('span')).hasClass('coveo-clickable')).toBe(true);
            });
            it('should not display the field value as clickable when its facet is disabled', function () {
                facet.disabled = true;
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FieldValue, Coveo.FakeResults.createFakeResult(), {
                    element: element,
                    modifyBuilder: function (builder) {
                        builder.componentStateModel.get = function () { return [facet]; };
                        builder.queryStateModel.get = function () { return []; };
                        return builder;
                    },
                    cmpOptions: {
                        field: '@string'
                    }
                });
                expect(Coveo.$$(Coveo.$$(test.cmp.element).find('span')).hasClass('coveo-clickable')).toBe(false);
            });
        });
        it('should show a full date tooltip when it has a date, dateTime or emailDateTime helper', function () {
            var fakeResult = Coveo.FakeResults.createFakeResult();
            var options = {
                field: '@date',
                helper: 'date'
            };
            var fullDateOptions = {
                useLongDateFormat: true,
                useTodayYesterdayAndTomorrow: false,
                useWeekdayIfThisWeek: false,
                omitYearIfCurrentOne: false
            };
            var dateString = Coveo.DateUtils.dateToString(new Date(parseInt(fakeResult.raw.date)), fullDateOptions);
            var dateTimeString = Coveo.DateUtils.dateTimeToString(new Date(parseInt(fakeResult.raw.date)), fullDateOptions);
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldValue, options, fakeResult);
            expect(Coveo.$$(test.cmp.element).find('span').getAttribute('title')).toEqual(dateString);
            options.helper = 'dateTime';
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldValue, options, fakeResult);
            expect(Coveo.$$(test.cmp.element).find('span').getAttribute('title')).toEqual(dateTimeString);
            options.helper = 'emailDateTime';
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldValue, options, fakeResult);
            expect(Coveo.$$(test.cmp.element).find('span').getAttribute('title')).toEqual(dateTimeString);
        });
        it('should not show a full date tooltip if it doesn\'t have the helper is not a date', function () {
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.FieldValue, {
                field: '@string'
            }, Coveo.FakeResults.createFakeResult());
            expect(Coveo.$$(test.cmp.element).find('span').hasAttribute('title')).toBe(false);
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Folding', function () {
        var test;
        var fakeResults;
        beforeEach(function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                field: '@fieldname',
                enableExpand: true,
                expandExpression: 'expandExpr',
                range: 2
            });
            fakeResults = Coveo.FakeResults.createFakeResults(1);
            fakeResults.results[0].totalNumberOfChildResults = 3;
            fakeResults.results[0].childResults = [];
            fakeResults.results[0].raw.fieldname = 'fieldvalue';
        });
        afterEach(function () {
            test = null;
            fakeResults = null;
        });
        describe('exposes options', function () {
            describe('field', function () {
                it('should send the correct field to the outgoing query', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                        field: '@myfield'
                    });
                    var data = Coveo.Simulate.query(test.env);
                    expect(data.queryBuilder.filterField).toBe('@myfield');
                });
                it('should throw an error when not specified', function () {
                    expect(function () { return Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                        field: null
                    }); }).toThrow();
                });
            });
            it('range should set the proper range to the outgoing query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                    field: '@fieldname',
                    range: 42
                });
                var data = Coveo.Simulate.query(test.env);
                expect(data.queryBuilder.filterFieldRange).toBe(42);
            });
            it('expandExpression should include the custom expand expression to the expand query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                    field: '@fieldname',
                    expandExpression: 'myExpandExpression'
                });
                var data = Coveo.Simulate.query(test.env, { results: fakeResults });
                data.results.results[0].moreResults();
                expect(test.env.queryController.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    cq: 'myExpandExpression'
                }));
            });
            it('maximumExpandedResults should set the number of results properly to the expand query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                    field: '@fieldname',
                    maximumExpandedResults: 42
                });
                var data = Coveo.Simulate.query(test.env, { results: fakeResults });
                test.env.queryController.getEndpoint().search = function (query) {
                    expect(query.numberOfResults).toBe(42);
                    return new Promise(function (resolve, reject) { return null; });
                };
                data.results.results[0].moreResults();
            });
            it('enableExpand set to true should provide an expand function', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                    field: '@fieldname',
                    enableExpand: true
                });
                var data = Coveo.Simulate.query(test.env, { results: fakeResults });
                expect(data.results.results[0].moreResults).toEqual(jasmine.any(Function));
            });
            it('enableExpand set to false should not provide an expand function', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                    field: '@fieldname',
                    enableExpand: false
                });
                var data = Coveo.Simulate.query(test.env, { results: fakeResults });
                expect(data.results.results[0].moreResults).toBeUndefined();
            });
        });
        describe('expand', function () {
            var queryData;
            beforeEach(function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                    field: '@fieldname',
                    maximumExpandedResults: 7
                });
                queryData = Coveo.Simulate.query(test.env, { query: { q: 'foo bar' }, results: fakeResults });
            });
            afterEach(function () {
                test = null;
                queryData = null;
            });
            it('should perform query with expected expression when moreResults is called', function () {
                queryData.results.results[0].moreResults();
                expect(test.env.queryController.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    aq: '@fieldname=fieldvalue'
                }));
            });
            it('should include query keywords for highlighting', function () {
                queryData.results.results[0].moreResults();
                expect(test.env.queryController.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    q: '(foo bar) OR @uri'
                }));
            });
            it('should use the specified maximum number of results', function () {
                queryData.results.results[0].moreResults();
                expect(test.env.queryController.getEndpoint().search).toHaveBeenCalledWith(jasmine.objectContaining({
                    numberOfResults: 7
                }));
            });
        });
        it('should rearrange a result that is an attachment if it has a parentResult', function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.Folding, {
                field: '@fieldname',
                childField: '@childfield',
                parentField: '@parentfield'
            });
            var parent = Coveo.FakeResults.createFakeResult('ParentResult');
            parent.flags = 'ContainsAttachment';
            parent.raw.parentfield = 'abc';
            fakeResults.results[0].flags = 'IsAttachment';
            fakeResults.results[0].parentResult = parent;
            fakeResults.results[0].raw.childfield = 'abc';
            var data = Coveo.Simulate.query(test.env, { results: fakeResults });
            expect(data.results.results[0].title).toBe('TitleParentResult');
        });
        it('should set the proper childResults and attachments in multiple folded results', function () {
            var results = [];
            _.times(7, function (n) { return results.push(Coveo.FakeResults.createFakeResult(n.toString())); });
            // 0 - 1
            //   - 2 - 3
            // 4 - 5
            // 6
            results[1].parentResult = results[0];
            results[2].parentResult = results[0];
            results[3].parentResult = results[2];
            results[5].parentResult = results[4];
            var topResult = results.shift();
            topResult.childResults = results;
            topResult = Coveo.Folding.defaultGetResult(topResult);
            expect(topResult).toEqual(jasmine.objectContaining({
                uniqueId: 'uniqueId0',
                attachments: [
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId1',
                        attachments: []
                    }),
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId2',
                        attachments: [
                            jasmine.objectContaining({
                                uniqueId: 'uniqueId3',
                                attachments: []
                            })
                        ]
                    })
                ],
                childResults: [
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId4',
                        attachments: [
                            jasmine.objectContaining({
                                uniqueId: 'uniqueId5'
                            })
                        ]
                    }),
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId6',
                        attachments: []
                    })
                ]
            }));
        });
        it('should sort by the original position', function () {
            var results = [];
            _.times(7, function (n) { return results.push(Coveo.FakeResults.createFakeResult(n.toString())); });
            // Priority is : 6, 3, 5, 4, 1, 2, 0
            // Give :
            // 6
            // 0 - 2 - 3
            //   - 1
            // 4 - 5
            results[1].parentResult = results[0];
            results[2].parentResult = results[0];
            results[3].parentResult = results[2];
            results[5].parentResult = results[4];
            var topResult = results[6];
            topResult.childResults = [
                results[3],
                results[5],
                results[4],
                results[1],
                results[2],
                results[0],
            ];
            topResult = Coveo.Folding.defaultGetResult(topResult);
            expect(topResult).toEqual(jasmine.objectContaining({
                uniqueId: 'uniqueId6',
                attachments: [],
                childResults: [
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId0',
                        attachments: [
                            jasmine.objectContaining({
                                uniqueId: 'uniqueId2',
                                attachments: [
                                    jasmine.objectContaining({
                                        uniqueId: 'uniqueId3'
                                    })
                                ]
                            }),
                            jasmine.objectContaining({
                                uniqueId: 'uniqueId1',
                                attachments: []
                            })
                        ]
                    }),
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId4',
                        attachments: [
                            jasmine.objectContaining({
                                uniqueId: 'uniqueId5',
                                attachments: []
                            })
                        ]
                    })
                ]
            }));
        });
        it('should remove duplicate from the result set if one is loaded through the parentResult field', function () {
            var results = [];
            _.times(7, function (n) { return results.push(Coveo.FakeResults.createFakeResult(n.toString())); });
            // 0 - 1
            //   - 2 - 3
            // 4 - 5
            // 6
            results[1].parentResult = results[0];
            results[2].parentResult = results[0];
            results[3].parentResult = results[2];
            results[5].parentResult = results[4];
            results.push(results[0], results[2], results[3], results[5], results[6]);
            var topResult = results.shift();
            topResult.childResults = results;
            topResult = Coveo.Folding.defaultGetResult(topResult);
            expect(topResult).toEqual(jasmine.objectContaining({
                uniqueId: 'uniqueId0',
                attachments: [
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId1',
                        attachments: []
                    }),
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId2',
                        attachments: [
                            jasmine.objectContaining({
                                uniqueId: 'uniqueId3'
                            })
                        ]
                    })
                ],
                childResults: [
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId4',
                        attachments: [
                            jasmine.objectContaining({
                                uniqueId: 'uniqueId5'
                            })
                        ]
                    }),
                    jasmine.objectContaining({
                        uniqueId: 'uniqueId6',
                        attachments: []
                    })
                ]
            }));
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('HiddenQuery', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.advancedComponentSetup(Coveo.HiddenQuery, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, undefined, function (env) {
                return env.withLiveQueryStateModel();
            }));
        });
        afterEach(function () {
            test = null;
        });
        it('should populate breadcrumb if hd and hq is set', function () {
            var breadcrumbMatcher = jasmine.arrayContaining([jasmine.objectContaining({ element: jasmine.any(HTMLElement) })]);
            var matcher = jasmine.objectContaining({ breadcrumbs: breadcrumbMatcher });
            var spy = jasmine.createSpy('onPopulate');
            Coveo.$$(test.env.root).on(Coveo.BreadcrumbEvents.populateBreadcrumb, spy);
            // hd hq not set : no breadcrumbs
            Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: [] });
            expect(spy).not.toHaveBeenCalledWith(jasmine.anything(), matcher);
            // only hd set : no breadcrumbs
            test.env.queryStateModel.set('hd', 'test');
            test.env.queryStateModel.set('hq', '');
            Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: [] });
            expect(spy).not.toHaveBeenCalledWith(jasmine.anything(), matcher);
            // only hq set : breadcrumbs populated
            test.env.queryStateModel.set('hd', '');
            test.env.queryStateModel.set('hq', 'test');
            Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: [] });
            expect(spy).toHaveBeenCalledWith(jasmine.anything(), matcher);
            // hq and hd are set : breadcrumb populated
            test.env.queryStateModel.set('hd', 'test');
            test.env.queryStateModel.set('hq', 'test');
            Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: [] });
            expect(spy).toHaveBeenCalledWith(jasmine.anything(), matcher);
        });
        it('should push hq in the query if it is set', function () {
            test.env.queryStateModel.set('hq', 'test');
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.build().aq).toBe('test');
        });
        it('should not push hq in the query if not set', function () {
            test.env.queryStateModel.set('hq', '');
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.build().aq).toBe(undefined);
        });
        it('clear should clear the query state', function () {
            test.env.queryStateModel.set('hq', 'test');
            test.env.queryStateModel.set('hd', 'test');
            test.cmp.clear();
            expect(test.env.queryStateModel.get('hq')).toBe('');
            expect(test.env.queryStateModel.get('hd')).toBe('');
        });
        describe('exposes options', function () {
            it('maximumDescriptionLength should splice the description in the breadcrumb', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.HiddenQuery, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    maximumDescriptionLength: 56
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                test.env.queryStateModel.set('hq', 'test');
                test.env.queryStateModel.set('hd', _.range(200).toString());
                Coveo.$$(test.env.root).on(Coveo.BreadcrumbEvents.populateBreadcrumb, function (e, args) {
                    // Not an exact comparison, because there's comma, and (...) at the end.
                    // We don't need exact number, just that it's way less than 200 that was generated
                    expect(Coveo.$$(args.breadcrumbs[0].element).text().length).toBeLessThan(100);
                });
                Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: [] });
            });
            it('title allows to specify a breadcrumb title', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.HiddenQuery, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    title: 'foobar'
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                test.env.queryStateModel.set('hq', 'test');
                test.env.queryStateModel.set('hd', 'test');
                Coveo.$$(test.env.root).on(Coveo.BreadcrumbEvents.populateBreadcrumb, function (e, args) {
                    expect(Coveo.$$(args.breadcrumbs[0].element.firstChild).text()).toBe('foobar');
                });
                Coveo.$$(test.env.root).trigger(Coveo.BreadcrumbEvents.populateBreadcrumb, { breadcrumbs: [] });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('HierarchicalFacet', function () {
        var test;
        var results;
        beforeEach(function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.HierarchicalFacet, {
                field: '@foobar'
            });
            results = Coveo.FakeResults.createFakeHierarchicalGroupByResult('@foobar', 'foo', 2, 3, '|', false, true);
        });
        afterEach(function () {
            test = null;
            results = null;
        });
        function getFacetValue(parentNumber, childNumber, token, delimitingCharacter) {
            if (token === void 0) { token = 'foo'; }
            if (delimitingCharacter === void 0) { delimitingCharacter = '|'; }
            if (childNumber == undefined) {
                return test.cmp.values.get(token + parentNumber);
            }
            else {
                return test.cmp.values.get(token + parentNumber + delimitingCharacter + token + parentNumber + '-' + childNumber);
            }
        }
        function getFacetValueElement(facetValue) {
            return Coveo.$$(_.find(Coveo.$$(test.cmp.element).findAll('.coveo-facet-value'), function (value) {
                return Coveo.$$(Coveo.$$(value).find('.coveo-facet-value-caption')).text().toLowerCase() == facetValue.toLowerCase();
            })).el;
        }
        function doQuery() {
            Coveo.Simulate.query(test.env, {
                groupByResults: [results]
            });
        }
        it('should flag the parent value when a child value is selected or deselected', function () {
            doQuery();
            expect(getFacetValue(0).selected).toBe(false);
            expect(getFacetValue(0, 0).selected).toBe(false);
            test.cmp.selectValue('foo0|foo0-0');
            doQuery();
            expect(getFacetValue(0, 0).selected).toBe(true);
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs-selected')).toBe(true);
            test.cmp.deselectValue('foo0|foo0-0');
            doQuery();
            expect(getFacetValue(0, 0).selected).toBe(false);
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs-selected')).toBe(false);
        });
        it('should hide child value by default', function () {
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-inactive')).toBe(true);
        });
        it('should show and hide the children if you open/close the parent', function () {
            doQuery();
            test.cmp.open('foo0');
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-inactive')).toBe(false);
            test.cmp.close('foo0');
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-inactive')).toBe(true);
        });
        it('should keep a value opened after a query', function () {
            doQuery();
            test.cmp.open('foo0');
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-inactive')).toBe(false);
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-inactive')).toBe(false);
        });
        it('should reset correctly (selection)', function () {
            doQuery();
            test.cmp.selectValue('foo0');
            var simulation = Coveo.Simulate.query(test.env, {
                groupByResults: [results]
            });
            expect(simulation.queryBuilder.build().aq).toEqual(jasmine.stringMatching('@foobar'));
            test.cmp.reset();
            simulation = Coveo.Simulate.query(test.env, {
                groupByResults: [results]
            });
            expect(simulation.queryBuilder.build().aq).not.toEqual(jasmine.stringMatching('@foobar'));
        });
        it('should set the correct css class for a value with childs', function () {
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs')).toBe(true);
        });
        it('should set the correct css class for a value with childs selected', function () {
            doQuery();
            test.cmp.selectValue('foo0|foo0-0');
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs-selected')).toBe(true);
            test.cmp.deselectValue('foo0|foo0-0');
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs-selected')).toBe(false);
        });
        it('should set the correct css class for a value with multiple child selected', function () {
            doQuery();
            test.cmp.selectValue('foo0|foo0-0');
            test.cmp.selectValue('foo0|foo0-1');
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs-selected')).toBe(true);
            test.cmp.deselectValue('foo0|foo0-0');
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs-selected')).toBe(true);
            test.cmp.deselectValue('foo0|foo0-1');
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0')).hasClass('coveo-has-childs-selected')).toBe(false);
        });
        it('should set the correct css class for a value with no child', function () {
            doQuery();
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-no-childs')).toBe(true);
        });
        it('should request 10000 values but displays only as much as requested', function () {
            expect(test.cmp.numberOfValues).toBe(10000);
            expect(test.cmp.numberOfValuesToShow).toBe(5);
            Coveo.FakeResults.createFakeHierarchicalGroupByResult('@foo', 'foo', 50);
            var simulation = Coveo.Simulate.query(test.env, {
                groupByResults: [results]
            });
            expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                    maximumNumberOfValues: 10000 + 1 // +1 for more functionnality
                })]));
        });
        it('should treat orphan values accordingly', function () {
            doQuery();
            // open the paren, the child should not be inactive
            test.cmp.open('foo0');
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-inactive')).toBe(false);
            results = Coveo.FakeResults.createFakeHierarchicalGroupByResult('@foobar', 'foo', 2, 3, '|', false, true);
            // values[0] is foo0 : a parent
            results.values[0] = undefined;
            results.values = _.compact(results.values);
            doQuery();
            // foo0-0 is a child of the value we just deleted
            // it should be hidden
            test.cmp.open('foo0');
            expect(Coveo.$$(getFacetValueElement('foo0-0')).hasClass('coveo-inactive')).toBe(true);
        });
        it('should populate breadcrumb', function () {
            doQuery();
            test.cmp.selectValue('foo0|foo0-0');
            var breadcrumb = Coveo.Simulate.breadcrumb(test.env);
            expect(breadcrumb[0].element.innerText).toContain('foo0');
        });
        it('should not exec script in breadcrumb', function () {
            doQuery();
            test.cmp.selectValue('<script>alert(\'foo\')</script>');
            var breadcrumb = Coveo.Simulate.breadcrumb(test.env);
            expect(breadcrumb[0].element.innerHTML).toContain('&lt;script&gt;');
        });
        it('should be able to collapse', function () {
            doQuery();
            var facetValues = Coveo.$$(test.cmp.element).findAll('.coveo-facet-value');
            expect(facetValues[0].style.display).toEqual('');
            expect(Coveo.$$(facetValues[0]).hasClass('coveo-inactive')).toBe(false);
            expect(facetValues[1].style.display).toEqual('');
            expect(Coveo.$$(facetValues[1]).hasClass('coveo-inactive')).toBe(true);
        });
        it('should show the correct number of results', function () {
            test.cmp.numberOfValuesToShow = 1;
            doQuery();
            var facetValues = Coveo.$$(test.cmp.element).findAll('.coveo-facet-value');
            expect(Coveo.$$(facetValues[0]).hasClass('coveo-inactive')).toBe(false);
            expect(Coveo.$$(facetValues[1]).hasClass('coveo-inactive')).toBe(true);
            expect(Coveo.$$(facetValues[4]).hasClass('coveo-has-childs')).toBe(true);
            expect(Coveo.$$(facetValues[4]).hasClass('coveo-inactive')).toBe(true);
            expect(Coveo.$$(facetValues[5]).hasClass('coveo-inactive')).toBe(true);
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Initialization', function () {
        var root;
        var endpoint;
        var searchInterfaceOptions;
        var queryBox;
        beforeEach(function () {
            root = document.createElement('div');
            Coveo.$$(root).addClass('CoveoSearchInterface');
            endpoint = Coveo.Mock.mockSearchEndpoint();
            endpoint.options = {};
            searchInterfaceOptions = { SearchInterface: { endpoint: endpoint } };
            queryBox = document.createElement('div');
            Coveo.$$(queryBox).addClass('CoveoQuerybox');
            root.appendChild(queryBox);
        });
        afterEach(function () {
            root = null;
            endpoint = null;
            searchInterfaceOptions = null;
            queryBox = null;
        });
        it('can initialize search interface and component', function () {
            expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(false);
            Coveo.Initialization.initializeFramework(root, searchInterfaceOptions, function () {
                Coveo.Initialization.initSearchInterface(root, searchInterfaceOptions);
            });
            expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(true);
        });
        it('allows to register default options ahead of init call, and merge them', function () {
            Coveo.Initialization.registerDefaultOptions(root, {
                Querybox: {
                    enableSearchAsYouType: true
                }
            });
            Coveo.Initialization.registerDefaultOptions(root, {
                Querybox: {
                    enablePartialMatch: true
                }
            });
            expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(false);
            Coveo.Initialization.initializeFramework(root, searchInterfaceOptions, function () {
                Coveo.Initialization.initSearchInterface(root, searchInterfaceOptions);
            });
            expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(true);
            var sBox = Coveo.Component.get(queryBox);
            expect(sBox.options.enableSearchAsYouType).toBe(true);
            expect(sBox.options.enablePartialMatch).toBe(true);
        });
        it('allows to registerAutoCreateComponent', function () {
            var dummyCmp = jasmine.createSpy('foobar');
            dummyCmp.ID = 'FooBar';
            var dummyElem = document.createElement('div');
            Coveo.$$(dummyElem).addClass('CoveoFooBar');
            root.appendChild(dummyElem);
            Coveo.Initialization.initializeFramework(root, searchInterfaceOptions, function () {
                Coveo.Initialization.initSearchInterface(root, searchInterfaceOptions);
            });
            expect(dummyCmp).not.toHaveBeenCalled();
            Coveo.Initialization.registerAutoCreateComponent(dummyCmp);
            Coveo.Initialization.initializeFramework(root, searchInterfaceOptions, function () {
                Coveo.Initialization.initSearchInterface(root, searchInterfaceOptions);
            });
            expect(dummyCmp).toHaveBeenCalled();
        });
        it('allows to check if isComponentClassIdRegistered', function () {
            var dummyCmp = function () {
            };
            dummyCmp.ID = 'CheckRegistration';
            Coveo.Initialization.registerAutoCreateComponent(dummyCmp);
            expect(Coveo.Initialization.isComponentClassIdRegistered('CheckRegistration')).toBe(true);
        });
        it('allow to getListOfRegisteredComponents', function () {
            expect(Coveo.Initialization.getListOfRegisteredComponents()).toEqual(jasmine.arrayContaining(['Facet', 'Pager']));
        });
        it('allow to getRegisteredComponent', function () {
            expect(Coveo.Initialization.getRegisteredComponent('Facet')).toBe(Coveo.Facet);
        });
        it('allow to automaticallyCreateComponentsInside', function () {
            var env = new Coveo.Mock.MockEnvironmentBuilder().build();
            expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(false);
            Coveo.Initialization.automaticallyCreateComponentsInside(root, {
                options: {},
                bindings: env
            });
            expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(true);
        });
        it('allow to monkeyPatchComponentMethod', function () {
            Coveo.Initialization.initializeFramework(root, searchInterfaceOptions, function () {
                Coveo.Initialization.initSearchInterface(root, searchInterfaceOptions);
            });
            var patch = jasmine.createSpy('patch');
            Coveo.Initialization.monkeyPatchComponentMethod('submit', queryBox, patch);
            Coveo.Component.get(queryBox).submit();
            expect(patch).toHaveBeenCalled();
        });
        it('can initialize external components', function () {
            var external = Coveo.$$('div', {
                className: 'CoveoPager'
            }).el;
            searchInterfaceOptions['externalComponents'] = [external];
            Coveo.Initialization.initializeFramework(root, searchInterfaceOptions, function () {
                Coveo.Initialization.initSearchInterface(root, searchInterfaceOptions);
            });
            expect(Coveo.Component.get(external) instanceof Coveo.Pager).toBe(true);
        });
        describe('when initializing recommendation interface', function () {
            var options;
            beforeEach(function () {
                options = {
                    Recommendation: {
                        endpoint: endpoint,
                        mainSearchInterface: root,
                        userContext: {}
                    },
                    SearchInterface: {}
                };
                Coveo.Mock.initPageViewScript(null);
            });
            afterEach(function () {
                options = null;
                coveoanalytics = undefined;
            });
            it('should be able to generate to components', function () {
                expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(false);
                Coveo.Initialization.initRecommendationInterface(root, options);
                expect(Coveo.Component.get(queryBox) instanceof Coveo.Querybox).toBe(true);
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('LiveAnalyticsClient', function () {
        var endpoint;
        var env;
        var client;
        var promise;
        beforeEach(function () {
            env = new Coveo.Mock.MockEnvironmentBuilder().build();
            endpoint = Coveo.Mock.mock(Coveo.AnalyticsEndpoint);
            client = new Coveo.LiveAnalyticsClient(endpoint, env.root, 'foo', 'foo display', false, 'foo run name', 'foo run version', 'default', true);
            promise = new Promise(function (resolve, reject) {
                resolve(Coveo.FakeResults.createFakeResults(3));
            });
        });
        afterEach(function () {
            env = null;
            endpoint = null;
            client = null;
            promise = null;
            it('should return pending event', function () {
                client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                expect(client.getPendingSearchEvent() instanceof Coveo.PendingSearchEvent).toBe(true);
                client.cancelAllPendingEvents();
                client.logSearchAsYouType(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                expect(client.getPendingSearchEvent() instanceof Coveo.PendingSearchAsYouTypeSearchEvent).toBe(true);
            });
            it('should send proper information on logSearchEvent', function (done) {
                client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                var query = {
                    q: 'the query',
                    aq: 'the advanced query',
                    firstResult: 20,
                    numberOfResults: 10,
                    enableDidYouMean: true
                };
                Coveo.Simulate.query(env, {
                    query: query,
                    promise: promise
                });
                _.defer(function () {
                    var jasmineMatcher = jasmine.arrayContaining([jasmine.objectContaining({
                            queryText: 'the query',
                            advancedQuery: 'the advanced query',
                            didYouMean: true,
                            numberOfResults: 4,
                            resultsPerPage: 10,
                            pageNumber: 2,
                            username: 'foo',
                            userDisplayName: 'foo display',
                            splitTestRunName: 'foo run name',
                            splitTestRunVersion: 'foo run version'
                        })]);
                    expect(endpoint.sendSearchEvents).toHaveBeenCalledWith(jasmineMatcher);
                    done();
                });
            });
            it('should give precedence to query from the query state model instead of the one sent to the search api', function (done) {
                client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                var query = {
                    q: 'the query',
                    aq: 'the advanced query',
                    firstResult: 20,
                    numberOfResults: 10,
                    enableDidYouMean: true
                };
                env.queryStateModel.get = function () {
                    return 'another query';
                };
                Coveo.Simulate.query(env, {
                    query: query,
                    promise: promise
                });
                _.defer(function () {
                    var jasmineMatcher = jasmine.arrayContaining([jasmine.objectContaining({
                            queryText: 'another query',
                            advancedQuery: 'the advanced query',
                            didYouMean: true,
                            numberOfResults: 4,
                            resultsPerPage: 10,
                            pageNumber: 2,
                            username: 'foo',
                            userDisplayName: 'foo display',
                            splitTestRunName: 'foo run name',
                            splitTestRunVersion: 'foo run version'
                        })]);
                    expect(endpoint.sendSearchEvents).toHaveBeenCalledWith(jasmineMatcher);
                    done();
                });
            });
            describe('with multiple (3) search events', function () {
                var root;
                var env2;
                var env3;
                beforeEach(function () {
                    root = document.createElement('div');
                    env2 = new Coveo.Mock.MockEnvironmentBuilder().build();
                    env3 = new Coveo.Mock.MockEnvironmentBuilder().build();
                    root.appendChild(env.root);
                    root.appendChild(env2.root);
                    root.appendChild(env3.root);
                    client = new Coveo.LiveAnalyticsClient(endpoint, root, 'foo', 'foo display', false, 'foo run name', 'foo run version', 'default', true);
                });
                afterEach(function () {
                    env = null;
                    env2 = null;
                    env3 = null;
                    client = null;
                    root = null;
                });
                it('should support when 3 analytics search events are triggered together, 3 events are pushed to the endpoint at the same time', function (done) {
                    client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Simulate.query(env, {
                        promise: promise,
                        query: {
                            q: 'the query 1'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env2, {
                        promise: promise,
                        query: {
                            q: 'the query 2'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env3, {
                        promise: promise,
                        query: {
                            q: 'the query 3'
                        },
                        deferSuccess: true
                    });
                    _.defer(function () {
                        var jasmineMatcher = jasmine.arrayContaining([
                            jasmine.objectContaining({
                                queryText: 'the query 1'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 2'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 3'
                            })]);
                        expect(endpoint.sendSearchEvents).toHaveBeenCalledWith(jasmineMatcher);
                        done();
                    });
                });
                it('should send only the new batch when search events are triggered together multiple times', function (done) {
                    client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Simulate.query(env, {
                        promise: promise,
                        query: {
                            q: 'the query 1'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env2, {
                        promise: promise,
                        query: {
                            q: 'the query 2'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env3, {
                        promise: promise,
                        query: {
                            q: 'the query 3'
                        },
                        deferSuccess: true
                    });
                    _.defer(function () {
                        var jasmineMatcher = jasmine.arrayContaining([
                            jasmine.objectContaining({
                                queryText: 'the query 1'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 2'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 3'
                            })]);
                        expect(endpoint.sendSearchEvents).toHaveBeenCalledWith(jasmineMatcher);
                    });
                    Coveo.Simulate.query(env, {
                        promise: promise,
                        query: {
                            q: 'the query 3'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env2, {
                        promise: promise,
                        query: {
                            q: 'the query 4'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env3, {
                        promise: promise,
                        query: {
                            q: 'the query 5'
                        },
                        deferSuccess: true
                    });
                    _.defer(function () {
                        var jasmineMatcher = jasmine.arrayContaining([
                            jasmine.objectContaining({
                                queryText: 'the query 3'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 4'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 5'
                            })]);
                        expect(endpoint.sendSearchEvents).toHaveBeenCalledWith(jasmineMatcher);
                        done();
                    });
                });
                it('should not break if a search event is followed by 0 during query', function (done) {
                    client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Defer.flush();
                    client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Simulate.query(env, {
                        promise: promise,
                        query: {
                            q: 'the query 1'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env2, {
                        promise: promise,
                        query: {
                            q: 'the query 2'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env3, {
                        promise: promise,
                        query: {
                            q: 'the query 3'
                        },
                        deferSuccess: true
                    });
                    _.defer(function () {
                        var jasmineMatcher = jasmine.arrayContaining([
                            jasmine.objectContaining({
                                queryText: 'the query 1'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 2'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 3'
                            })]);
                        expect(endpoint.sendSearchEvents).toHaveBeenCalledWith(jasmineMatcher);
                        done();
                    });
                });
                it('should only send success events to the endpoint', function (done) {
                    client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    var promise2 = new Promise(function (resolve, reject) {
                        reject();
                    });
                    promise2.catch(function () {
                    });
                    Coveo.Simulate.query(env, {
                        promise: promise,
                        query: {
                            q: 'the query 1'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env2, {
                        promise: promise2,
                        query: {
                            q: 'the query 2'
                        },
                        deferSuccess: true
                    });
                    Coveo.Simulate.query(env3, {
                        promise: promise,
                        query: {
                            q: 'the query 3'
                        },
                        deferSuccess: true
                    });
                    _.defer(function () {
                        var jasmineMatcher = jasmine.arrayContaining([
                            jasmine.objectContaining({
                                queryText: 'the query 1'
                            }),
                            jasmine.objectContaining({
                                queryText: 'the query 3'
                            })]);
                        var jasmineMatcherNot = jasmine.arrayContaining([
                            jasmine.objectContaining({
                                queryText: 'the query 2'
                            })]);
                        expect(endpoint.sendSearchEvents).toHaveBeenCalledWith(jasmineMatcher);
                        expect(endpoint.sendSearchEvents).not.toHaveBeenCalledWith(jasmineMatcherNot);
                        done();
                    });
                });
            });
            it('should trigger an analytics event on document view', function () {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(env.root).on(Coveo.AnalyticsEvents.documentViewEvent, spy);
                client.logClickEvent(Coveo.analyticsActionCauseList.documentOpen, {}, Coveo.FakeResults.createFakeResult('foo'), document.createElement('div'));
                Coveo.Defer.flush();
                expect(spy).toHaveBeenCalled();
            });
            it('should trigger an analytics event on search event', function (done) {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(env.root).on(Coveo.AnalyticsEvents.searchEvent, spy);
                client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                Coveo.Simulate.query(env, {
                    query: {
                        q: 'the query 1'
                    },
                    promise: new Promise(function (resolve, reject) {
                        resolve(Coveo.FakeResults.createFakeResults(3));
                    })
                });
                _.defer(function () {
                    expect(spy).toHaveBeenCalled();
                    done();
                });
            });
            it('should trigger an analytics event on custom event', function () {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(env.root).on(Coveo.AnalyticsEvents.customEvent, spy);
                client.logCustomEvent(Coveo.analyticsActionCauseList.documentOpen, {}, document.createElement('div'));
                Coveo.Defer.flush();
                expect(spy).toHaveBeenCalled();
            });
            it('should trigger change analytics metadata event', function () {
                var spy = jasmine.createSpy('spy');
                Coveo.$$(env.root).on(Coveo.AnalyticsEvents.changeAnalyticsCustomData, spy);
                client.logCustomEvent(Coveo.analyticsActionCauseList.documentOpen, {}, document.createElement('div'));
                Coveo.Defer.flush();
                expect(spy).toHaveBeenCalledWith(jasmine.any(Object), jasmine.objectContaining({
                    originLevel1: 'default',
                    originLevel2: 'default',
                    originLevel3: jasmine.any(String),
                    language: String['locale'],
                    type: 'CustomEvent',
                    metaObject: jasmine.any(Object)
                }));
            });
            describe('search as you type', function () {
                beforeEach(function () {
                    jasmine.clock().install();
                });
                afterEach(function () {
                    jasmine.clock().uninstall();
                });
                it('should log after 5 seconds have passed since the last duringQueryEvent', function () {
                    client.logSearchAsYouType(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Simulate.query(env, {
                        query: {
                            q: 'the query 1'
                        },
                        promise: promise
                    });
                    jasmine.clock().tick(5);
                    expect(client['pendingSearchAsYouTypeSearchEvent']['searchPromises'].length).toBe(0);
                    jasmine.clock().tick(5000);
                    expect(client['pendingSearchAsYouTypeSearchEvent']['searchPromises'].length).toBe(1);
                });
                it('should not log after 5 seconds have passed since the last duringQueryEvent if another event is pushed and it\'s a search box', function () {
                    client.logSearchAsYouType(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Simulate.query(env, {
                        query: {
                            q: 'the query 1'
                        },
                        promise: promise
                    });
                    jasmine.clock().tick(5);
                    expect(client['pendingSearchAsYouTypeSearchEvent']).toBeDefined();
                    client.logSearchEvent(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Simulate.query(env, {
                        query: {
                            q: 'the query 1'
                        },
                        promise: promise
                    });
                    expect(client['pendingSearchAsYouTypeSearchEvent']).toBeUndefined();
                });
                it('should log after 5 seconds have passed since the last duringQueryEvent if another event is pushed and it\'s not a search box', function () {
                    client.logSearchAsYouType(Coveo.analyticsActionCauseList.searchboxSubmit, {});
                    Coveo.Simulate.query(env, {
                        query: {
                            q: 'the query 1'
                        },
                        promise: promise
                    });
                    jasmine.clock().tick(5);
                    expect(client['pendingSearchAsYouTypeSearchEvent']).toBeDefined();
                    client.logSearchEvent(Coveo.analyticsActionCauseList.facetClearAll, {});
                    Coveo.Simulate.query(env, {
                        query: {
                            q: 'the query 1'
                        },
                        promise: promise
                    });
                    expect(client['pendingSearchAsYouTypeSearchEvent']).toBeDefined();
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Matrix', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                rowField: '@foo',
                columnField: '@bar',
                computedField: '@compute',
                columnFieldValues: _.map(_.range(9), function (n) {
                    return n.toString();
                }),
                maximumNumberOfRows: 10
            });
        });
        afterEach(function () {
            test = null;
        });
        describe('when fully rendered', function () {
            var fakeResults;
            beforeEach(function () {
                fakeResults = Coveo.FakeResults.createFakeResults(1);
                fakeResults.groupByResults = _.map(_.range(10), function (n) {
                    return Coveo.FakeResults.createFakeGroupByResult('@foo', 'row', 10, true);
                });
                Coveo.Simulate.query(test.env, {
                    results: fakeResults
                });
                test.env.queryStateModel.attributes = {
                    'f:@bar': []
                };
            });
            afterEach(function () {
                fakeResults = null;
            });
            it('should trigger the correct query on cell selection', function () {
                test.cmp.selectCell(5, 5);
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().aq).toEqual(jasmine.stringMatching('@foo=row5'));
                expect(simulation.queryBuilder.build().aq).toEqual(jasmine.stringMatching('@bar=4'));
            });
            it('should allow to get the cell html element', function () {
                var elem = test.cmp.getCellElement(5, 5);
                expect(Coveo.$$(elem).text()).toBe(Globalize.format(fakeResults.groupByResults[0].values[5].computedFieldResults[0], 'c0'));
            });
            it('should allow to get the cell value', function () {
                var value = test.cmp.getCellValue(5, 5);
                expect(value).toBe(Globalize.format(fakeResults.groupByResults[0].values[5].computedFieldResults[0], 'c0'));
            });
        });
        describe('exposes options', function () {
            it('title will display a title on top of matrix', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    title: 'nice title',
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute'
                });
                var title = Coveo.$$(test.cmp.element).find('.coveo-matrix-title');
                expect(Coveo.$$(title).text()).toBe('nice title');
            });
            it('rowField should output a group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([
                    jasmine.objectContaining({
                        field: '@foo'
                    })
                ]));
            });
            it('columnField and columnFieldValues operate together to output a group by request', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    columnFieldValues: ['a', 'b', 'c'],
                    computedField: '@compute'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([
                    jasmine.objectContaining({
                        field: '@foo',
                        queryOverride: jasmine.stringMatching('@bar=\'a\'')
                    }),
                    jasmine.objectContaining({
                        field: '@foo',
                        queryOverride: jasmine.stringMatching('@bar=\'b\'')
                    }),
                    jasmine.objectContaining({
                        field: '@foo',
                        queryOverride: jasmine.stringMatching('@bar=\'c\'')
                    })
                ]));
            });
            it('columnLabels should allow to set the column titles', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute',
                    columnLabels: ['qwerty', 'asdfg', 'zxcvb'],
                    columnFieldValues: ['a', 'b', 'c']
                });
                Coveo.Simulate.query(test.env);
                var cellsValue = _.map(test.cmp.data[0], function (c) {
                    return c.getValue();
                });
                expect(cellsValue).toEqual(jasmine.arrayContaining(['qwerty', 'asdfg', 'zxcvb']));
            });
            it('columnLabels will fallback on columnFieldValues if there is inconsistency (not same length for example)', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute',
                    columnLabels: ['qwerty'],
                    columnFieldValues: ['a', 'b', 'c']
                });
                Coveo.Simulate.query(test.env);
                var cellsValues = _.map(test.cmp.data[0], function (c) {
                    return c.getValue();
                });
                expect(cellsValues).toEqual(jasmine.arrayContaining(['a', 'b', 'c']));
            });
            it('columnHeader allow to specify the first column header', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute',
                    columnHeader: 'this is a nice header'
                });
                Coveo.Simulate.query(test.env);
                expect(test.cmp.getCellValue(0, 0)).toBe('this is a nice header');
            });
            it('maximumNumberOfValuesInGroupBy should allow to specify the number of value in the group by', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute',
                    columnFieldValues: ['a', 'b', 'c'],
                    maximumNumberOfValuesInGroupBy: 123
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        maximumNumberOfValues: 123
                    })]));
            });
            it('enableColumnTotals should allow to specify if a column should contal the total', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute',
                    enableColumnTotals: false
                });
                Coveo.Simulate.query(test.env);
                expect(test.cmp.getCellValue(test.cmp.data.length - 1, 0)).not.toBe('Total');
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute',
                    enableColumnTotals: true
                });
                Coveo.Simulate.query(test.env);
                expect(test.cmp.getCellValue(test.cmp.data.length - 1, 0)).toBe('Total');
            });
            it('computedField should allow to specify the computed field in the group by', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        computedFields: jasmine.arrayContaining([jasmine.objectContaining({
                                field: '@compute'
                            })])
                    })]));
            });
            it('computedFieldOperation should allow to specify the computed field operation', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Matrix, {
                    rowField: '@foo',
                    columnField: '@bar',
                    computedField: '@compute',
                    computedFieldOperation: 'qwerty'
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().groupBy).toEqual(jasmine.arrayContaining([jasmine.objectContaining({
                        computedFields: jasmine.arrayContaining([jasmine.objectContaining({
                                operation: 'qwerty'
                            })])
                    })]));
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Omnibox', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.Omnibox);
        });
        afterEach(function () {
            test = null;
            it('should trigger a query on submit', function () {
                test.cmp.submit();
                expect(test.env.queryController.executeQuery).toHaveBeenCalled();
            });
            it('should log analytics event on submit', function () {
                test.cmp.submit();
                expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.searchboxSubmit, {});
            });
            describe('exposes options', function () {
                it('inline should be passed down to magic box', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        inline: true
                    });
                    expect(test.cmp.magicBox.options.inline).toBe(true);
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        inline: false
                    });
                    expect(test.cmp.magicBox.options.inline).toBe(false);
                });
                it('enableSearchAsYouType should allow to to trigger a query after a delay', function (done) {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableSearchAsYouType: true
                    });
                    expect(test.cmp.magicBox.onchange).toBeDefined();
                    test.cmp.setText('foobar');
                    test.cmp.magicBox.onchange();
                    setTimeout(function () {
                        expect(test.env.queryController.executeQuery).toHaveBeenCalled();
                        done();
                    }, test.cmp.options.searchAsYouTypeDelay);
                });
                it('enableSearchAsYouType should not trigger a query after a delay if there is no text', function (done) {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableSearchAsYouType: true
                    });
                    expect(test.cmp.magicBox.onchange).toBeDefined();
                    test.cmp.setText('');
                    test.cmp.magicBox.onchange();
                    setTimeout(function () {
                        expect(test.env.queryController.executeQuery).not.toHaveBeenCalled();
                        done();
                    }, test.cmp.options.searchAsYouTypeDelay);
                });
                it('enableQuerySyntax should modify the disableQuerySyntax parameter', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableQuerySyntax: false
                    });
                    test.cmp.setText('@field==Batman');
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.disableQuerySyntax).toBe(true);
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableQuerySyntax: true
                    });
                    test.cmp.setText('@field==Batman');
                    simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.disableQuerySyntax).toBe(false);
                });
                it('enablePartialMatch should modify the enablePartialMatch parameters', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enablePartialMatch: false
                    });
                    test.cmp.setText('@field==Batman');
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.enablePartialMatch).toBeFalsy();
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enablePartialMatch: true
                    });
                    test.cmp.setText('@field==Batman');
                    simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.enablePartialMatch).toBe(true);
                });
                it('partialMatchKeywords should modify the query builder', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        partialMatchKeywords: 123,
                        enablePartialMatch: true
                    });
                    test.cmp.setText('@field==Batman');
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.partialMatchKeywords).toBe(123);
                });
                it('partialMatchThreshold should modify the query builder', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        partialMatchThreshold: '14%',
                        enablePartialMatch: true
                    });
                    test.cmp.setText('@field==Batman');
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.partialMatchThreshold).toBe('14%');
                });
                it('enableWildcards should modify the query builder', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableWildcards: true
                    });
                    test.cmp.setText('@field==Batman');
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.enableWildcards).toBe(true);
                });
                it('enableQuestionMarks should modify the query builder', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableQuestionMarks: true
                    });
                    test.cmp.setText('@field==Batman');
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.enableQuestionMarks).toBe(true);
                });
                it('enableQuestionMarks should modify the query builder', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableLowercaseOperators: true
                    });
                    test.cmp.setText('@field==Batman');
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.enableLowercaseOperators).toBe(true);
                });
                it('enableFieldAddon should create an addon component', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableFieldAddon: true
                    });
                    test.cmp.setText('this is not a field');
                    test.cmp.magicBox.getSuggestions();
                    expect(test.env.searchEndpoint.listFields).not.toHaveBeenCalled();
                    test.cmp.setText('@thisisafield');
                    test.cmp.magicBox.getSuggestions();
                    expect(test.env.searchEndpoint.listFields).toHaveBeenCalled();
                    test.cmp.setText('@thisisafield=');
                    test.cmp.magicBox.getSuggestions();
                    expect(test.env.searchEndpoint.listFieldValues).toHaveBeenCalled();
                });
                it('enableTopQueryAddon should get suggestion from reveal', function () {
                    var element = Coveo.$$('div');
                    element.addClass('CoveoOmnibox');
                    element.setAttribute('data-enable-top-query-addon', 'true');
                    test = Coveo.Mock.advancedComponentSetup(Coveo.Omnibox, new Coveo.Mock.AdvancedComponentSetupOptions(element.el));
                    test.cmp.setText('foobar');
                    test.cmp.magicBox.getSuggestions();
                    expect(test.env.searchEndpoint.getRevealQuerySuggest).toHaveBeenCalled();
                });
                it('enableRevealQuerySuggestAddon should create an addon component', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableRevealQuerySuggestAddon: true
                    });
                    test.cmp.setText('foobar');
                    test.cmp.magicBox.getSuggestions();
                    expect(test.env.searchEndpoint.getRevealQuerySuggest).toHaveBeenCalled();
                });
                it('enableQueryExtensionAddon should create an addon component', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableQueryExtensionAddon: true
                    });
                    test.cmp.setText('$');
                    test.cmp.magicBox.getSuggestions();
                    expect(test.env.searchEndpoint.extensions).toHaveBeenCalled();
                });
                it('placeholder allow to set a placeholder in the input', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        placeholder: 'trololo'
                    });
                    expect(test.cmp.getInput().placeholder).toBe('trololo');
                });
                it('enableSearchAsYouType + enableRevealQuerySuggestAddon should send correct analytics events', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Omnibox, {
                        enableRevealQuerySuggestAddon: true,
                        enableSearchAsYouType: true
                    });
                    var spy = jasmine.createSpy('spy');
                    test.env.searchEndpoint.getRevealQuerySuggest = spy;
                    spy.and.returnValue({
                        completions: [
                            {
                                expression: 'a'
                            },
                            {
                                expression: 'b'
                            },
                            {
                                expression: 'c'
                            },
                            {
                                expression: 'd'
                            },
                            {
                                expression: 'e'
                            }
                        ]
                    });
                    test.cmp.setText('foobar');
                    expect(test.cmp.magicBox.onchange).toBeDefined();
                    test.cmp.magicBox.onchange();
                    test.cmp.magicBox.onselect(['a']);
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxAnalytics, jasmine.objectContaining({
                        partialQuery: undefined,
                        suggestionRanking: jasmine.any(Number),
                        partialQueries: ''
                    }));
                });
            });
            describe('with live query state model', function () {
                beforeEach(function () {
                    test = Coveo.Mock.advancedComponentSetup(Coveo.Omnibox, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, undefined, function (builder) {
                        return builder.withLiveQueryStateModel();
                    }));
                });
                afterEach(function () {
                    test = null;
                });
                it('should update the state on building query', function () {
                    test.cmp.setText('foobar');
                    Coveo.Simulate.query(test.env);
                    expect(test.env.queryStateModel.get('q')).toBe('foobar');
                });
                it('should update the content on state change', function () {
                    test.env.queryStateModel.set('q', 'trololo');
                    expect(test.cmp.getText()).toEqual('trololo');
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Pager', function () {
        var test;
        beforeEach(function () {
            Coveo.registerCustomMatcher();
            test = Coveo.Mock.basicComponentSetup(Coveo.Pager);
            test.env.queryController.options = {};
            test.env.queryController.options.resultsPerPage = 10;
        });
        afterEach(function () {
            test = null;
        });
        it('should set the correct result number when changing page', function () {
            var currentPage = 1;
            Coveo.$$(test.env.root).on('buildingQuery', function (e, args) {
                expect(args.queryBuilder.build().firstResult).toBe(currentPage * 10);
            });
            test.cmp.setPage(++currentPage);
            test.cmp.setPage(++currentPage);
            currentPage--;
            test.cmp.previousPage();
            currentPage++;
            test.cmp.nextPage();
            expect(test.env.queryController.executeQuery).toHaveBeenCalledTimes(4);
        });
        it('should update the state when changing page', function () {
            var currentPage = 1;
            test.cmp.setPage(++currentPage);
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('first', (currentPage - 1) * 10);
            test.cmp.setPage(++currentPage);
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('first', (currentPage - 1) * 10);
            currentPage--;
            test.cmp.previousPage();
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('first', (currentPage - 1) * 10);
            currentPage++;
            test.cmp.nextPage();
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('first', (currentPage - 1) * 10);
        });
        it('should update page when state is changed', function () {
            test = Coveo.Mock.advancedComponentSetup(Coveo.Pager, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, undefined, function (env) {
                return env.withLiveQueryStateModel();
            }));
            test.cmp.setPage(7);
            expect(test.cmp.currentPage).toBe(7);
            test.env.queryStateModel.set('first', 30);
            expect(test.cmp.currentPage).toBe(4);
        });
        it('should not render anything if only one page of result is returned', function () {
            Coveo.Simulate.query(test.env, { results: Coveo.FakeResults.createFakeResults(5) });
            expect(test.cmp.element.querySelectorAll('li').length).toBe(0);
        });
        it('should render the pager boundary correctly', function () {
            // First results start at 70.
            // Pager displays 10 pages by default, and 10 results per page.
            // So the total range should be from results 20 to results 110 (page #3 to page #12)
            var builder = new Coveo.QueryBuilder();
            builder.firstResult = 70;
            Coveo.Simulate.query(test.env, {
                query: builder.build(),
                results: Coveo.FakeResults.createFakeResults(1000)
            });
            var anchors = Coveo.$$(test.cmp.element).findAll('a.coveo-pager-anchor');
            expect(Coveo.$$(anchors[0]).text()).toBe('3');
            expect(Coveo.$$(anchors[anchors.length - 1]).text()).toBe('12');
        });
        it('should reset page number on a new query if the origin is not a pager', function () {
            // origin not available -> reset
            test.cmp.setPage(5);
            expect(test.cmp.currentPage).toBe(5);
            Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.newQuery, {});
            expect(test.cmp.currentPage).toBe(1);
            // origin not the pager -> reset
            test.cmp.setPage(10);
            expect(test.cmp.currentPage).toBe(10);
            Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.newQuery, {
                origin: 'nope not the pager'
            });
            expect(test.cmp.currentPage).toBe(1);
            // origin is pager -> no reset
            test.cmp.setPage(6);
            expect(test.cmp.currentPage).toBe(6);
            Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.newQuery, {
                origin: test.cmp
            });
            expect(test.cmp.currentPage).toBe(6);
        });
        describe('analytics', function () {
            it('should log the proper event when selecting a page directly', function () {
                test.cmp.setPage(15);
                expect(test.env.usageAnalytics.logCustomEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.pagerNumber, { pagerNumber: 15 }, test.cmp.element);
            });
            it('should log the proper event when hitting next page', function () {
                test.cmp.nextPage();
                expect(test.env.usageAnalytics.logCustomEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.pagerNext, { pagerNumber: 2 }, test.cmp.element);
            });
            it('should log the proper event when hitting previous page', function () {
                test.cmp.setPage(3);
                test.cmp.previousPage();
                expect(test.env.usageAnalytics.logCustomEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.pagerPrevious, { pagerNumber: 2 }, test.cmp.element);
            });
        });
        describe('exposes options', function () {
            it('numberOfPages allow to specify the number of pages to render', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Pager, {
                    numberOfPages: 22
                });
                Coveo.Simulate.query(test.env, {
                    results: Coveo.FakeResults.createFakeResults(1000)
                });
                expect(Coveo.$$(test.cmp.element).findAll('a.coveo-pager-anchor').length).toBe(22);
            });
            it('enableNavigationButton can enable or disable nav buttons', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Pager, {
                    enableNavigationButton: true
                });
                var builder = new Coveo.QueryBuilder();
                builder.firstResult = 70;
                Coveo.Simulate.query(test.env, {
                    query: builder.build(),
                    results: Coveo.FakeResults.createFakeResults(1000)
                });
                expect(Coveo.$$(test.cmp.element).findAll('.coveo-pager-previous').length).toBe(1);
                expect(Coveo.$$(test.cmp.element).findAll('.coveo-pager-next').length).toBe(1);
                test = Coveo.Mock.optionsComponentSetup(Coveo.Pager, {
                    enableNavigationButton: false
                });
                Coveo.Simulate.query(test.env, {
                    query: builder.build(),
                    results: Coveo.FakeResults.createFakeResults(1000)
                });
                expect(Coveo.$$(test.cmp.element).findAll('.coveo-pager-previous').length).toBe(0);
                expect(Coveo.$$(test.cmp.element).findAll('.coveo-pager-next').length).toBe(0);
            });
            it('maxNumberOfPages allow to specify the max page to render', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Pager, {
                    maxNumberOfPages: 5
                });
                var builder = new Coveo.QueryBuilder();
                builder.firstResult = 70;
                Coveo.Simulate.query(test.env, {
                    query: builder.build(),
                    results: Coveo.FakeResults.createFakeResults(1000)
                });
                var anchors = Coveo.$$(test.cmp.element).findAll('a.coveo-pager-anchor');
                expect(Coveo.$$(anchors[anchors.length - 1]).text()).toBe('5');
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('PreferencesPanel', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.PreferencesPanel);
        });
        it('shouldn\'t be active by default', function () {
            expect(Coveo.$$(test.env.element).hasClass('coveo-active')).toBe(false);
        });
        it('should activate when \'open\' is called', function () {
            test.cmp.open();
            expect(Coveo.$$(test.env.element).hasClass('coveo-active')).toBe(true);
        });
        it('should deactivate when \'close\' is called', function () {
            test.cmp.open();
            test.cmp.close();
            expect(Coveo.$$(test.env.element).hasClass('coveo-active')).toBe(false);
        });
        it('should trigger a savePreferences event when \'save\' is called', function () {
            var saveSpy = jasmine.createSpy('saveSpy');
            Coveo.$$(test.env.element).on(Coveo.PreferencesPanelEvents.savePreferences, saveSpy);
            test.cmp.save();
            expect(saveSpy).toHaveBeenCalled();
        });
        it('should trigger a query when \'save\' is called', function () {
            var querySpy = jasmine.createSpy('querySpy');
            test.env.queryController.executeQuery = querySpy;
            test.cmp.save();
            expect(querySpy).toHaveBeenCalled();
        });
        it('should trigger exitPreferencesWithoutSave when \'close\' is called', function () {
            var closeSpy = jasmine.createSpy('closeSpy');
            Coveo.$$(test.cmp.element).on(Coveo.PreferencesPanelEvents.exitPreferencesWithoutSave, closeSpy);
            test.cmp.close();
            expect(closeSpy).toHaveBeenCalled();
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Querybox', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.Querybox);
            this.input = test.env.element.querySelector('input');
            Coveo.registerCustomMatcher();
        });
        afterEach(function () {
            test = null;
        });
        it('will trigger a query on submit', function () {
            test.cmp.submit();
            test.env;
            expect(test.env.queryController.executeQuery).toHaveBeenCalled();
        });
        it('will log the proper analytics event on submit', function () {
            test.cmp.submit();
            expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.searchboxSubmit, {});
        });
        it('will not trigger a query on submit if the content has not changed', function () {
            test.cmp.submit();
            test.cmp.submit();
            test.cmp.submit();
            test.cmp.submit();
            expect(test.env.queryController.executeQuery).toHaveBeenCalledTimes(1);
        });
        it('will trigger a new query if the content change', function () {
            test.cmp.submit();
            test.cmp.submit();
            test.cmp.setText('Batman');
            test.cmp.submit();
            test.cmp.submit();
            test.cmp.setText('Spiderman');
            test.cmp.submit();
            test.cmp.submit();
            expect(test.env.queryController.executeQuery).toHaveBeenCalledTimes(3);
        });
        it('will set the content of the input in the query', function () {
            test.cmp.setText('Batman');
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.build().q).toEqual('Batman');
        });
        it('will change the state on building query', function () {
            test.cmp.setText('Batman');
            Coveo.Simulate.query(test.env);
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('q', 'Batman');
        });
        it('will change the state when the content change on blur', function () {
            test.cmp.setText('Batman');
            test.cmp.magicBox.onblur();
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('q', 'Batman');
        });
        it('will change the state if the content is cleared', function () {
            test.cmp.setText('Batman');
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('q', 'Batman');
            test.cmp.setText('');
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('q', '');
            test.cmp.setText('Batman');
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('q', 'Batman');
            test.cmp.magicBox.clear();
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('q', '');
        });
        it('will return correctly on getResult', function () {
            test.cmp.setText('Batman');
            expect(test.cmp.getResult().input).toBe('Batman');
        });
        it('will return correctly on getDisplayedResult', function () {
            test.cmp.setText('Batman');
            expect(test.cmp.getDisplayedResult().input).toBe('Batman');
        });
        it('will return correctly on getCursor', function () {
            test.cmp.setText('Batman');
            expect(test.cmp.getCursor()).toBe(6);
            test.cmp.setText('');
            expect(test.cmp.getCursor()).toBe(0);
        });
        it('will return correctly on resultAtCursor', function () {
            test.cmp.setText('Batman');
            expect(test.cmp.resultAtCursor().length).toBe(1);
            expect(test.cmp.resultAtCursor()[0].input).toBe('Batman');
        });
        it('will update state before redirecting', function () {
            test.cmp.setText('Batman');
            Coveo.$$(test.env.root).trigger(Coveo.StandaloneSearchInterfaceEvents.beforeRedirect);
            expect(test.env.queryStateModel.set).toHaveBeenCalledWith('q', 'Batman');
        });
        describe('using a live query state model', function () {
            beforeEach(function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Querybox, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, undefined, function (env) {
                    return env.withLiveQueryStateModel();
                }));
            });
            it('will change the content of the search box if the model change', function () {
                expect(test.cmp.getText()).toBe('');
                test.env.queryStateModel.set('q', 'Batman is better then Spiderman');
                expect(test.cmp.getText()).toBe('Batman is better then Spiderman');
            });
        });
        describe('exposes options', function () {
            it('enableSearchAsYouType will trigger a query after a delay', function (done) {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableSearchAsYouType: true
                });
                expect(test.cmp.magicBox.onchange).toBeDefined();
                test.cmp.magicBox.onchange();
                setTimeout(function () {
                    expect(test.env.queryController.executeQuery).toHaveBeenCalled();
                    done();
                }, test.cmp.options.searchAsYouTypeDelay);
            });
            it('enableSearchAsYouType to false will not trigger a query after a delay', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableSearchAsYouType: false
                });
                expect(test.cmp.magicBox.onchange).not.toBeDefined();
            });
            it('enableSearchAsYouType will log the proper analytics event', function (done) {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableSearchAsYouType: true
                });
                expect(test.cmp.magicBox.onchange).toBeDefined();
                test.cmp.magicBox.onchange();
                setTimeout(function () {
                    expect(test.env.usageAnalytics.logSearchAsYouType).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.searchboxAsYouType, {});
                    done();
                }, test.cmp.options.searchAsYouTypeDelay);
            });
            it('enableSearchAsYouTypeDelay influences the delay before a query', function (done) {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableSearchAsYouType: true,
                    searchAsYouTypeDelay: 5
                });
                expect(test.cmp.magicBox.onchange).toBeDefined();
                test.cmp.magicBox.onchange();
                setTimeout(function () {
                    expect(test.env.queryController.executeQuery).not.toHaveBeenCalled();
                }, 1);
                setTimeout(function () {
                    expect(test.env.queryController.executeQuery).toHaveBeenCalled();
                    done();
                }, 10);
            });
            it('enableQuerySyntax should modify the disableQuerySyntax parameter', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableQuerySyntax: false
                });
                test.cmp.setText('@field==Batman');
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.disableQuerySyntax).toBe(true);
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableQuerySyntax: true
                });
                test.cmp.setText('@field==Batman');
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.disableQuerySyntax).toBe(false);
            });
            it('enableWildcards shoud modify the query builder', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableWildcards: false
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().wildcards).toBeFalsy();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableWildcards: true
                });
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().wildcards).toBe(true);
            });
            it('enableQuestionMarks should modify the query builder', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableQuestionMarks: false
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().questionMark).toBeFalsy();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableQuestionMarks: true
                });
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().questionMark).toBe(true);
            });
            it('enableLowercaseOperators should modify the query builder', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableLowercaseOperators: false
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().lowercaseOperators).toBeFalsy();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enableLowercaseOperators: true
                });
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().lowercaseOperators).toBe(true);
            });
            it('enablePartialMatch should modify the query builder', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enablePartialMatch: false
                });
                test.cmp.setText('Batman');
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().partialMatch).toBeFalsy();
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enablePartialMatch: true
                });
                test.cmp.setText('Batman');
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().partialMatch).toBe(true);
            });
            it('enablePartialMatch should not modify the query builder if there is no content in the input', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    enablePartialMatch: true
                });
                test.cmp.setText('');
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().partialMatch).toBeUndefined();
            });
            it('partialMatchKeywords should modify the query builder', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    partialMatchKeywords: 999,
                    enablePartialMatch: true
                });
                test.cmp.setText('Batman');
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().partialMatchKeywords).toBe(999);
            });
            it('partialMatchKeywords should not modify the query builder if there is no content in the input', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    partialMatchKeywords: 999,
                    enablePartialMatch: true
                });
                test.cmp.setText('');
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().partialMatchKeywords).toBeUndefined();
            });
            it('partialMatchKeywords should not modify the query builder if enablePartialMatch is disabled', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Querybox, {
                    partialMatchKeywords: 999,
                    enablePartialMatch: false
                });
                test.cmp.setText('Batman');
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().partialMatchKeywords).toBeUndefined();
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('QueryBuilder', function () {
        var queryBuilder;
        beforeEach(function () {
            queryBuilder = new Coveo.QueryBuilder();
        });
        afterEach(function () {
            queryBuilder = null;
        });
        it('can addContextValue and addContext', function () {
            queryBuilder.addContextValue('foo', 'bar');
            expect(queryBuilder.build().context['foo']).toBe('bar');
            queryBuilder.addContext({ 'a': 'b', 'c': 'd' });
            expect(queryBuilder.build().context['foo']).toBe('bar');
            expect(queryBuilder.build().context['a']).toBe('b');
        });
        it('can addFieldsToInclude', function () {
            queryBuilder.addFieldsToInclude(['foo', 'bar', 'yo']);
            expect(queryBuilder.build().fieldsToInclude).toEqual(['foo', 'bar', 'yo']);
        });
        it('can addFieldsToExclude', function () {
            expect(queryBuilder.build().fieldsToExclude).toBeUndefined();
            queryBuilder.addFieldsToExclude(['a', 'b', 'c']);
            expect(queryBuilder.build().fieldsToExclude).toEqual(['a', 'b', 'c']);
        });
        it('can addRequiredFields', function () {
            queryBuilder.addRequiredFields(['foo', 'bar', 'yo']);
            // Should not be added, as there is not fieldsToInclude
            expect(queryBuilder.build().fieldsToInclude).toBeNull();
            queryBuilder.addFieldsToInclude(['a', 'b', 'c']);
            // Now everything should be there, as fieldsToInclude were added
            expect(queryBuilder.build().fieldsToInclude).toEqual(['foo', 'bar', 'yo', 'a', 'b', 'c']);
        });
        describe('can compute expression', function () {
            beforeEach(function () {
                queryBuilder.expression.add('basic');
                queryBuilder.advancedExpression.add('advanced');
                queryBuilder.constantExpression.add('constant');
                queryBuilder.disjunctionExpression.add('disjunction');
            });
            it('and computeCompleteExpression', function () {
                expect(queryBuilder.computeCompleteExpression()).toBe('((basic) (advanced) (constant)) OR (disjunction)');
            });
            it('and computeCompleteExpressionParts', function () {
                expect(queryBuilder.computeCompleteExpressionParts().constant).toBe('(constant) OR (disjunction)');
                expect(queryBuilder.computeCompleteExpressionParts().withoutConstant).toBe('((basic) (advanced)) OR (disjunction)');
                expect(queryBuilder.computeCompleteExpressionParts().full).toBe('((basic) (advanced) (constant)) OR (disjunction)');
            });
            it('and computeCompleteExpressionExcept', function () {
                expect(queryBuilder.computeCompleteExpressionExcept('advanced')).toBe('((basic) (constant)) OR (disjunction)');
                expect(queryBuilder.computeCompleteExpressionExcept('basic')).toBe('((advanced) (constant)) OR (disjunction)');
            });
            it('and computeCompleteExpressionPartsExcept', function () {
                expect(queryBuilder.computeCompleteExpressionPartsExcept('advanced').constant).toBe('(constant) OR (disjunction)');
                expect(queryBuilder.computeCompleteExpressionPartsExcept('advanced').withoutConstant).toBe('(basic) OR (disjunction)');
                expect(queryBuilder.computeCompleteExpressionPartsExcept('advanced').full).toBe('((basic) (constant)) OR (disjunction)');
            });
        });
        it('can add properties to query', function () {
            queryBuilder.pipeline = 'pipeline';
            queryBuilder.timezone = 'timezone';
            queryBuilder.searchHub = 'searchHub';
            queryBuilder.tab = 'tab';
            queryBuilder.maximumAge = 123;
            queryBuilder.enableWildcards = true;
            queryBuilder.enableQuestionMarks = true;
            queryBuilder.enableLowercaseOperators = true;
            queryBuilder.enablePartialMatch = true;
            queryBuilder.partialMatchKeywords = 123;
            queryBuilder.partialMatchThreshold = '50%';
            queryBuilder.firstResult = 123;
            queryBuilder.numberOfResults = 123;
            queryBuilder.excerptLength = 123;
            queryBuilder.filterField = 'filterField';
            queryBuilder.filterFieldRange = 123;
            queryBuilder.parentField = 'parentField';
            queryBuilder.childField = 'childField';
            queryBuilder.enableDidYouMean = true;
            queryBuilder.enableDebug = true;
            queryBuilder.enableCollaborativeRating = true;
            queryBuilder.sortCriteria = 'sortCriteria';
            queryBuilder.queryFunctions = [{
                    'function': 'function',
                    'fieldName': 'fieldName'
                }];
            queryBuilder.rankingFunctions = [{
                    expression: 'expression',
                    normalizeWeight: true
                }];
            queryBuilder.groupByRequests = [{
                    field: 'field'
                }];
            queryBuilder.enableDuplicateFiltering = true;
            queryBuilder.context = {
                'foo': 'bar'
            };
            expect(queryBuilder.build().pipeline).toBe('pipeline');
            expect(queryBuilder.build().timezone).toBe('timezone');
            expect(queryBuilder.build().searchHub).toBe('searchHub');
            expect(queryBuilder.build().tab).toBe('tab');
            expect(queryBuilder.build().maximumAge).toBe(123);
            expect(queryBuilder.build().wildcards).toBe(true);
            expect(queryBuilder.build().questionMark).toBe(true);
            expect(queryBuilder.build().lowercaseOperators).toBe(true);
            expect(queryBuilder.build().partialMatch).toBe(true);
            expect(queryBuilder.build().partialMatchKeywords).toBe(123);
            expect(queryBuilder.build().partialMatchThreshold).toBe('50%');
            expect(queryBuilder.build().firstResult).toBe(123);
            expect(queryBuilder.build().numberOfResults).toBe(123);
            expect(queryBuilder.build().excerptLength).toBe(123);
            expect(queryBuilder.build().filterField).toBe('filterField');
            expect(queryBuilder.build().filterFieldRange).toBe(123);
            expect(queryBuilder.build().parentField).toBe('parentField');
            expect(queryBuilder.build().childField).toBe('childField');
            expect(queryBuilder.build().enableDidYouMean).toBe(true);
            expect(queryBuilder.build().debug).toBe(true);
            expect(queryBuilder.build().enableCollaborativeRating).toBe(true);
            expect(queryBuilder.build().sortCriteria).toBe('sortCriteria');
            expect(queryBuilder.build().queryFunctions).toEqual([{
                    'function': 'function',
                    'fieldName': 'fieldName'
                }]);
            expect(queryBuilder.build().rankingFunctions).toEqual([{
                    expression: 'expression',
                    normalizeWeight: true
                }]);
            expect(queryBuilder.build().groupBy).toEqual([{
                    field: 'field'
                }]);
            expect(queryBuilder.build().enableDuplicateFiltering).toBe(true);
            expect(queryBuilder.build().context).toEqual({
                'foo': 'bar'
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('QueryDuration', function () {
        var test;
        var results = Coveo.FakeResults.createFakeResults(10);
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.QueryDuration);
            results = Coveo.FakeResults.createFakeResults(10);
        });
        afterEach(function () {
            test = null;
            results = null;
        });
        it('should be show with suitable value when duration is zero', function () {
            results.duration = 0;
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.element.textContent).toBe('in 0.01 seconds');
        });
        it('should show the query duration with proper formatting when it is under 1 second', function () {
            results.duration = 123;
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.element.textContent).toBe('in 0.12 seconds');
        });
        it('should show the query duration with proper formatting when it is above 1 second', function () {
            results.duration = 1234;
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.element.textContent).toBe('in 1.23 seconds');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('QuerySummary', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.QuerySummary);
        });
        it('should not display tips when there are results', function () {
            var results = Coveo.FakeResults.createFakeResults(10);
            Coveo.Simulate.query(test.env, {
                results: results
            });
            expect(Coveo.$$(test.cmp.element).find('.coveo-query-summary-search-tips-info')).toBeNull();
            results = Coveo.FakeResults.createFakeResults(0);
            Coveo.Simulate.query(test.env, {
                results: results
            });
            expect(Coveo.$$(test.cmp.element).find('.coveo-query-summary-search-tips-info')).not.toBeNull();
        });
        it('should display result range when there are results', function () {
            var results = Coveo.FakeResults.createFakeResults(10);
            Coveo.Simulate.query(test.env, {
                results: results
            });
            expect(Coveo.$$(test.cmp.element).text()).toEqual(jasmine.stringMatching(/^Results 1-10 of 11/));
            results = Coveo.FakeResults.createFakeResults(0);
            Coveo.Simulate.query(test.env, {
                results: results
            });
            expect(Coveo.$$(test.cmp.element).text()).not.toEqual(jasmine.stringMatching(/^Results.*of.*/));
        });
        describe('exposes options', function () {
            it('enableSearchTips allow to display search tips on no results', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.QuerySummary, {
                    enableSearchTips: false
                });
                var results = Coveo.FakeResults.createFakeResults(0);
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(Coveo.$$(test.cmp.element).find('.coveo-query-summary-search-tips-info')).toBeNull();
                test = Coveo.Mock.optionsComponentSetup(Coveo.QuerySummary, {
                    enableSearchTips: true
                });
                results = Coveo.FakeResults.createFakeResults(0);
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(Coveo.$$(test.cmp.element).find('.coveo-query-summary-search-tips-info')).not.toBeNull();
            });
            it('onlyDisplaySearchTips allow to not render the results range', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.QuerySummary, {
                    onlyDisplaySearchTips: false
                });
                var results = Coveo.FakeResults.createFakeResults(10);
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(Coveo.$$(test.cmp.element).text()).toEqual(jasmine.stringMatching(/^Results.*of.*/));
                test = Coveo.Mock.optionsComponentSetup(Coveo.QuerySummary, {
                    onlyDisplaySearchTips: true
                });
                results = Coveo.FakeResults.createFakeResults(10);
                Coveo.Simulate.query(test.env, {
                    results: results
                });
                expect(Coveo.$$(test.cmp.element).text()).not.toEqual(jasmine.stringMatching(/^Results.*of.*/));
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('SearchButton', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.SearchButton);
        });
        afterEach(function () {
            test = null;
        });
        it('can be initialized', function () {
            expect(test.cmp).toBeDefined();
        });
        it('will trigger a query on click', function () {
            test.cmp.click();
            expect(test.env.queryController.executeQuery).toHaveBeenCalled();
        });
        it('will log an analytics event', function () {
            test.cmp.click();
            expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.searchboxSubmit, {});
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    var SearchInterface = Coveo.SearchInterface;
    describe('SearchInterface', function () {
        var cmp;
        beforeEach(function () {
            cmp = new SearchInterface(document.createElement('div'));
        });
        afterEach(function () {
            cmp = null;
        });
        it('should display the wait animation', function () {
            cmp.showWaitAnimation();
            expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
        });
        it('should hide the wait animation', function () {
            cmp.hideWaitAnimation();
            expect(cmp.options.firstLoadingAnimation.parentElement).toBeNull();
        });
        it('should create a suitable environment available to all components', function () {
            expect(cmp.usageAnalytics instanceof Coveo.NoopAnalyticsClient).toBe(true);
            expect(cmp.queryController instanceof Coveo.QueryController).toBe(true);
            expect(cmp.queryStateModel instanceof Coveo.QueryStateModel).toBe(true);
            expect(cmp.componentOptionsModel instanceof Coveo.ComponentOptionsModel).toBe(true);
            expect(cmp.componentStateModel instanceof Coveo.ComponentStateModel).toBe(true);
            expect(cmp instanceof SearchInterface);
            expect(cmp.root).toBe(cmp.element);
        });
        it('should return is new design properly', function () {
            expect(cmp.isNewDesign()).toBe(false);
            var newDesignDiv = document.createElement('div');
            newDesignDiv.setAttribute('data-design', 'new');
            var newDesignCmp = new SearchInterface(newDesignDiv);
            expect(newDesignCmp.isNewDesign()).toBe(true);
        });
        it('should allow to attach and detach component', function () {
            var cmpToAttach = Coveo.Mock.mockComponent(Coveo.Querybox);
            cmp.attachComponent('Querybox', cmpToAttach);
            expect(cmp.getComponents('Querybox')).toContain(cmpToAttach);
            cmp.detachComponent('Querybox', cmpToAttach);
            expect(cmp.getComponents('Querybox')).not.toContain(cmpToAttach);
        });
        describe('usage analytics', function () {
            var searchInterfaceDiv;
            var analyticsDiv;
            beforeEach(function () {
                searchInterfaceDiv = document.createElement('div');
                analyticsDiv = document.createElement('div');
                analyticsDiv.className = 'CoveoAnalytics';
            });
            afterEach(function () {
                searchInterfaceDiv = null;
                analyticsDiv = null;
            });
            it('should initialize if found inside the root', function () {
                searchInterfaceDiv.appendChild(analyticsDiv);
                var searchInterface = new SearchInterface(searchInterfaceDiv);
                expect(searchInterface.usageAnalytics instanceof Coveo.LiveAnalyticsClient).toBe(true);
            });
        });
        it('should hide the animation after a query success, but only once', function (done) {
            cmp.showWaitAnimation();
            expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
            Coveo.$$(cmp.root).trigger(Coveo.QueryEvents.querySuccess);
            _.defer(function () {
                expect(cmp.options.firstLoadingAnimation.parentElement).toBeNull();
                cmp.showWaitAnimation();
                expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
                Coveo.$$(cmp.root).trigger(Coveo.QueryEvents.querySuccess);
                _.defer(function () {
                    expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
                    done();
                });
            });
        });
        it('should hide the animation after a query error, but only once', function (done) {
            cmp.showWaitAnimation();
            expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
            Coveo.$$(cmp.root).trigger(Coveo.QueryEvents.queryError);
            _.defer(function () {
                expect(cmp.options.firstLoadingAnimation.parentElement).toBeNull();
                cmp.showWaitAnimation();
                expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
                Coveo.$$(cmp.root).trigger(Coveo.QueryEvents.queryError);
                _.defer(function () {
                    expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
                    done();
                });
            });
        });
        describe('exposes options', function () {
            var div;
            var mockWindow;
            var env;
            beforeEach(function () {
                div = document.createElement('div');
                env = new Coveo.Mock.MockEnvironmentBuilder().withRoot(div).build();
                mockWindow = Coveo.Mock.mockWindow();
            });
            afterEach(function () {
                div = null;
                env = null;
                mockWindow = null;
            });
            it('enableHistory allow to enable history in the url', function () {
                var cmp = new SearchInterface(div, {
                    enableHistory: true
                }, undefined, mockWindow);
                expect(Coveo.Component.resolveBinding(cmp.element, Coveo.HistoryController)).toBeDefined();
            });
            it('enableHistory can be disabled and won\'t save history in the url', function () {
                var cmp = new SearchInterface(div, {
                    enableHistory: false
                }, undefined, mockWindow);
                expect(Coveo.Component.resolveBinding(cmp.element, Coveo.HistoryController)).toBeUndefined();
            });
            it('useLocalStorageForHistory allow to use local storage for history', function () {
                var cmp = new SearchInterface(div, {
                    enableHistory: true,
                    useLocalStorageForHistory: true
                }, undefined, mockWindow);
                expect(Coveo.Component.resolveBinding(cmp.element, Coveo.HistoryController)).toBeUndefined();
                expect(Coveo.Component.resolveBinding(cmp.element, Coveo.LocalStorageHistoryController)).toBeDefined();
            });
            it('useLocalStorageForHistory allow to use local storage for history, but not if history is disabled', function () {
                var cmp = new SearchInterface(div, {
                    enableHistory: false,
                    useLocalStorageForHistory: true
                }, undefined, mockWindow);
                expect(Coveo.Component.resolveBinding(cmp.element, Coveo.HistoryController)).toBeUndefined();
                expect(Coveo.Component.resolveBinding(cmp.element, Coveo.LocalStorageHistoryController)).toBeUndefined();
            });
            it('resultsPerPage allow to specify the number of results in query', function () {
                var cmp = new SearchInterface(div, {
                    resultsPerPage: 123
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.numberOfResults).toBe(123);
            });
            it('resultsPerPage should be 10 by default', function () {
                var cmp = new SearchInterface(div, undefined, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.numberOfResults).toBe(10);
            });
            it('excerptLength allow to specify the excerpt length of results in a query', function () {
                new SearchInterface(div, {
                    excerptLength: 123
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.excerptLength).toBe(123);
            });
            it('excerptLength should be 200 by default', function () {
                var cmp = new SearchInterface(div, undefined, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.excerptLength).toBe(200);
            });
            it('expression allow to specify and advanced expression to add to the query', function () {
                var cmp = new SearchInterface(div, {
                    expression: 'foobar'
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.advancedExpression.build()).toBe('foobar');
            });
            it('expression should not be added if empty', function () {
                var cmp = new SearchInterface(div, {
                    expression: ''
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.advancedExpression.build()).toBeUndefined();
            });
            it('expression should be empty by default', function () {
                var cmp = new SearchInterface(div, undefined, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.advancedExpression.build()).toBeUndefined();
            });
            it('filterField allow to specify a filtering field', function () {
                var cmp = new SearchInterface(div, {
                    filterField: '@foobar'
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.filterField).toBe('@foobar');
            });
            it('filterField should be empty by default', function () {
                var cmp = new SearchInterface(div, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.filterField).toBeUndefined();
            });
            it('hideUntilFirstQuery should hide the interface until a first query success', function (done) {
                var cmp = new SearchInterface(div, {
                    hideUntilFirstQuery: true
                }, undefined, mockWindow);
                expect(cmp.options.firstLoadingAnimation.parentElement).toBe(cmp.element);
                Coveo.Simulate.query(env);
                _.defer(function () {
                    expect(cmp.options.firstLoadingAnimation.parentElement).toBeNull();
                    done();
                });
            });
            it('hideUntilFirstQuery should not hide the interface if specified', function (done) {
                var cmp = new SearchInterface(div, {
                    hideUntilFirstQuery: false
                }, undefined, mockWindow);
                expect(cmp.options.firstLoadingAnimation.parentElement).toBeNull();
                Coveo.Simulate.query(env);
                _.defer(function () {
                    expect(cmp.options.firstLoadingAnimation.parentElement).toBeNull();
                    done();
                });
            });
            it('timezone allow to specify a timezone in the query', function () {
                var cmp = new SearchInterface(div, {
                    timezone: 'aa-bb'
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.timezone).toBe('aa-bb');
            });
            it('timezone should resolve by default using an external library', function () {
                var cmp = new SearchInterface(div, undefined, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.timezone).toBe(jstz.determine().name());
            });
            it('enableDebugInfo should create a debug component', function (done) {
                var cmp = new SearchInterface(div, {
                    enableDebugInfo: true
                }, undefined, mockWindow);
                _.defer(function () {
                    expect(Coveo.Component.resolveBinding(cmp.element, Coveo.Debug)).toBeDefined();
                    done();
                });
            });
            it('enableDebugInfo disabled should not create a debug component', function (done) {
                var cmp = new SearchInterface(div, {
                    enableDebugInfo: false
                }, undefined, mockWindow);
                _.defer(function () {
                    expect(Coveo.Component.resolveBinding(cmp.element, Coveo.Debug)).toBeUndefined();
                    done();
                });
            });
            it('enableCollaborativeRating allow to specify the collaborative rating in the query', function () {
                var cmp = new SearchInterface(div, {
                    enableCollaborativeRating: true
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.enableCollaborativeRating).toBe(true);
            });
            it('enableCollaborativeRating to false allow to disable the collaborative rating in the query', function () {
                var cmp = new SearchInterface(div, {
                    enableCollaborativeRating: false
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.enableCollaborativeRating).toBe(false);
            });
            it('enableDuplicateFiltering allow to filter duplicate in the query', function () {
                var cmp = new SearchInterface(div, {
                    enableDuplicateFiltering: true
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.enableDuplicateFiltering).toBe(true);
            });
            it('enableDuplicateFiltering to false allow to disable the filter duplicate in the query', function () {
                var cmp = new SearchInterface(div, {
                    enableDuplicateFiltering: false
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.enableDuplicateFiltering).toBe(false);
            });
            it('pipeline allow to specify the pipeline to use in a query', function () {
                var cmp = new SearchInterface(div, {
                    pipeline: 'foobar'
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.pipeline).toBe('foobar');
            });
            it('maximumAge allow to specify the duration of the cache in a query', function () {
                var cmp = new SearchInterface(div, {
                    maximumAge: 123
                }, undefined, mockWindow);
                var simulation = Coveo.Simulate.query(env);
                expect(simulation.queryBuilder.maximumAge).toBe(123);
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Settings', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.Settings);
            test.env.searchInterface.isNewDesign = function () { return true; };
            Coveo.$$(test.env.root).trigger(Coveo.InitializationEvents.afterInitialization);
        });
        it('should be rendered', function () {
            expect(Coveo.$$(test.env.element).find('span.coveo-settings-squares')).not.toBeNull();
        });
        it('should render a popup when opened', function () {
            test.cmp.open();
            expect(Coveo.$$(test.env.root).find('.coveo-settings-advanced-menu')).not.toBeNull();
        });
        it('should remove the popup when closed', function () {
            test.cmp.open();
            test.cmp.close();
            expect(Coveo.$$(test.env.root).find('.coveo-settings-advanced-menu')).toBeNull();
        });
        describe('exposes options', function () {
            describe('menuDelay', function () {
                it('should wait the duration of \'menuDelay\' before closing the popup on mouseleave', function (done) {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Settings, {
                        menuDelay: 999999
                    });
                    test.cmp.open();
                    Coveo.$$(test.cmp.element).trigger('mouseleave');
                    setTimeout(function () {
                        expect(Coveo.$$(test.env.root).find('.coveo-settings-advanced-menu')).not.toBeNull();
                        done();
                    }, 0);
                });
                it('should close the popup after the menuDelay is expired', function (done) {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.Settings, {
                        menuDelay: 2
                    });
                    test.cmp.open();
                    Coveo.$$(Coveo.$$(test.env.root).find('.coveo-settings-advanced-menu')).trigger('mouseleave');
                    setTimeout(function () {
                        expect(Coveo.$$(test.env.root).find('.coveo-settings-advanced-menu')).toBeNull();
                        done();
                    }, 3);
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ShareQuery', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.ShareQuery);
        });
        it('should render properly', function () {
            expect($(test.cmp.element).find('.coveo-share-query-summary-info .coveo-query-summary-info-title')).not.toBeNull();
            expect($(test.cmp.element).find('.coveo-share-query-summary-info .coveo-share-query-summary-info-close')).not.toBeNull();
            expect($(test.cmp.element).find('.coveo-share-query-summary-info .coveo-share-query-summary-info-boxes')).not.toBeNull();
            expect($(test.cmp.element).find('.coveo-share-query-summary-info .coveo-share-query-summary-info-boxes input')).not.toBeNull();
        });
        it('should update according to result', function () {
            Coveo.Simulate.query(test.env, {
                results: {
                    totalCount: 5
                },
                query: {
                    firstResult: 0,
                    q: 'query',
                    aq: 'advanced query',
                    cq: 'constant query'
                }
            });
            expect(test.cmp.getCompleteQuery()).toBe('(query) (advanced query) (constant query)');
        });
        it('should add the proper CSS class when opened', function () {
            test.cmp.open();
            expect(Coveo.$$(test.cmp.element).hasClass('coveo-share-query-opened')).toBe(true);
        });
        it('should remove the CSS class when closed', function () {
            test.cmp.close();
            expect(Coveo.$$(test.cmp.element).hasClass('coveo-share-query-opened')).toBe(false);
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Slider', function () {
        var slider;
        var el;
        var root;
        function getSliderLine(sliderElement) {
            return Coveo.$$(sliderElement).findAll('.coveo-slider-line');
        }
        function getSliderButton(sliderElement) {
            return Coveo.$$(sliderElement).findAll('.coveo-slider-button');
        }
        function getSliderCaption(sliderElement) {
            return Coveo.$$(sliderElement).find('.coveo-slider-caption');
        }
        function getSliderGraph(sliderElement) {
            return Coveo.$$(sliderElement).find('svg');
        }
        function buildGraphData() {
            var graphData = _.map(_.range(0, 10, 1), function (range) {
                return {
                    start: range * 10,
                    end: (range + 1) * 10,
                    y: Math.random()
                };
            });
            return graphData;
        }
        beforeEach(function () {
            el = document.createElement('div');
            el.style.width = '100px';
            root = document.createElement('div');
        });
        afterEach(function () {
            el = null;
            slider = null;
            root = null;
        });
        describe('exposes options', function () {
            it('rangeSlider allows to have one or two button', function () {
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    rangeSlider: false
                }, root);
                expect(getSliderButton(slider.element).length).toBe(1);
                slider = new Coveo.Slider(document.createElement('div'), {
                    start: 0,
                    end: 100,
                    rangeSlider: true
                }, root);
                expect(getSliderButton(slider.element).length).toBe(2);
            });
            it('start and end allow to set the max values', function () {
                slider = new Coveo.Slider(el, {
                    start: 10,
                    end: 156
                }, root);
                slider.initializeState();
                expect(slider.currentValues).toEqual(jasmine.arrayContaining([10, 156]));
                slider.setValues([0, 1000]);
                expect(slider.currentValues).toEqual(jasmine.arrayContaining([10, 156]));
                slider.setValues([0, 100]);
                expect(slider.currentValues).toEqual(jasmine.arrayContaining([10, 100]));
                slider.setValues([50, 51]);
                expect(slider.currentValues).toEqual(jasmine.arrayContaining([50, 51]));
            });
            it('step allows to divide the range by a number of steps', function () {
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    steps: 2
                }, root);
                expect(slider.steps).toEqual(jasmine.arrayContaining([0, 50, 100]));
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    steps: 25
                }, root);
                expect(slider.steps).toEqual(jasmine.arrayContaining(_.range(0, 104, 4)));
            });
            it('getSteps allow to provide a function to generate steps', function () {
                var getStep = jasmine.createSpy('getStep');
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    getSteps: getStep
                }, root);
                expect(getStep).toHaveBeenCalledWith(0, 100);
            });
            it('displayAsValue allows to modify the caption', function () {
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    displayAsValue: {
                        unitSign: 'GIGAFLOPETABYTE',
                        separator: '!!',
                        enable: true
                    }
                }, root);
                slider.initializeState();
                expect(Coveo.$$(getSliderCaption(slider.element)).text()).toBe('0 GIGAFLOPETABYTE !! 100 GIGAFLOPETABYTE');
            });
            it('valueCaption allow to provide a function to generate captions', function () {
                var valueCaption = jasmine.createSpy('valueCaption');
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    valueCaption: valueCaption
                }, root);
                slider.initializeState();
                expect(valueCaption).toHaveBeenCalledWith(jasmine.arrayContaining([0, 100]));
            });
            it('dateField and dateFormat allow to render the values as date', function () {
                var start = new Date(1, 1, 1), end = new Date(2, 2, 2);
                slider = new Coveo.Slider(el, {
                    start: start,
                    end: end,
                    dateField: true,
                    dateFormat: 'm/d/yyyy'
                }, root);
                slider.initializeState();
                expect(Coveo.$$(getSliderCaption(slider.element)).text()).toBe(Globalize.format(start, 'm/d/yyyy') + '  - ' + Globalize.format(end, 'm/d/yyyy') + ' ');
            });
            it('graph allow to add a svg graph', function () {
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    graph: {
                        steps: 10
                    }
                }, root);
                expect(getSliderGraph(slider.element)).toBeDefined();
            });
            it('graph steps allow draw graph data', function () {
                slider = new Coveo.Slider(el, {
                    start: 0,
                    end: 100,
                    graph: {
                        steps: 10
                    }
                }, root);
                new Coveo.SearchInterface(root);
                slider.element.style.width = '100px';
                slider.element.style.height = '100px';
                var graphData = buildGraphData();
                slider.drawGraph(graphData);
                expect(Coveo.$$(getSliderGraph(slider.element)).findAll('rect').length).toBe(10);
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('SortCriteria', function () {
        it('should construct properly without a direction', function () {
            var crit = new Coveo.SortCriteria('relevancy');
            expect(crit.sort).toEqual('relevancy');
            expect(crit.direction).toEqual('');
        });
        it('should construct properly with a direction', function () {
            var crit = new Coveo.SortCriteria('date', 'ascending');
            expect(crit.sort).toEqual('date');
            expect(crit.direction).toEqual('ascending');
        });
        it('should throw an error when passed an invalid criteria', function () {
            expect(function () { return new Coveo.SortCriteria('fdsaf', 'ascending'); }).toThrow();
            expect(function () { return new Coveo.SortCriteria(''); }).toThrow();
        });
        it('should throw an error when passed an invalid direction', function () {
            expect(function () { return new Coveo.SortCriteria('date', 'invaliddirection'); }).toThrow();
        });
        it('should throw an error when not passed a direction to a criteria that needs one', function () {
            expect(function () { return new Coveo.SortCriteria('date'); }).toThrow();
        });
        it('should throw an error when passing a direction to a criteria that doesn\'t need one', function () {
            expect(function () { return new Coveo.SortCriteria('relevancy', 'ascending'); }).toThrow();
        });
        it('should parse a sort criteira string without a direction properly', function () {
            var crit = Coveo.SortCriteria.parse('relevancy');
            expect(crit.sort).toEqual('relevancy');
            expect(crit.direction).toEqual('');
        });
        it('should parse a sort criteria string with a direction properly', function () {
            var crit = Coveo.SortCriteria.parse('date ascending');
            expect(crit.sort).toEqual('date');
            expect(crit.direction).toEqual('ascending');
        });
        describe('putInQueryBuilder', function () {
            var qb;
            beforeEach(function () {
                qb = Coveo.Mock.mock(Coveo.QueryBuilder);
            });
            afterEach(function () {
                qb = null;
            });
            it('should update the queryBuilder without a direction', function () {
                new Coveo.SortCriteria('relevancy').putInQueryBuilder(qb);
                expect(qb.sortCriteria).toEqual('relevancy');
            });
            it('should update the queryBuilder with a direction', function () {
                new Coveo.SortCriteria('date', 'ascending').putInQueryBuilder(qb);
                expect(qb.sortCriteria).toEqual('dateascending');
            });
            it('should update the queryBuilder with a field', function () {
                new Coveo.SortCriteria('@fillde', 'ascending').putInQueryBuilder(qb);
                expect(qb.sortCriteria).toEqual('fieldascending');
                expect(qb.sortField).toEqual('@fillde');
            });
            it('should throw an error if the queryBuilder is null or undefined', function () {
                qb = null;
                expect(function () { return new Coveo.SortCriteria('date', 'ascending').putInQueryBuilder(qb); }).toThrow();
                qb = undefined;
                expect(function () { return new Coveo.SortCriteria('date', 'descending').putInQueryBuilder(qb); }).toThrow();
            });
        });
        describe('getValueFromResult', function () {
            var result;
            beforeEach(function () {
                result = {
                    uri: 'http://gogole.quebec',
                    raw: {
                        date: 12345,
                        myfield: 'myfieldvalue'
                    }
                };
            });
            it('should return the correct field value', function () {
                expect(new Coveo.SortCriteria('@uri', 'ascending').getValueFromResult(result)).toEqual(result.uri);
            });
            it('should return the correct date', function () {
                expect(new Coveo.SortCriteria('date', 'ascending').getValueFromResult(result)).toEqual(result.raw['date']);
            });
            it('should return the correct raw field value', function () {
                expect(new Coveo.SortCriteria('@myfield', 'descending').getValueFromResult(result)).toEqual(result.raw['myfield']);
            });
        });
        describe('toString', function () {
            it('with direction should return correct string', function () {
                expect(new Coveo.SortCriteria('date', 'ascending').toString()).toEqual('date ascending');
            });
            it('without direction should return correct string', function () {
                expect(new Coveo.SortCriteria('relevancy').toString()).toEqual('relevancy');
            });
        });
        it('equals should return true if criterias are equal', function () {
            expect(new Coveo.SortCriteria('date', 'ascending').equals(new Coveo.SortCriteria('date', 'ascending'))).toBe(true);
        });
        it('equals should return false if criterias are not equal', function () {
            expect(new Coveo.SortCriteria('@field', 'descending').equals(new Coveo.SortCriteria('relevancy'))).toBe(false);
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Sort', function () {
        var test;
        function buildSort(sortCriteria) {
            var elem = document.createElement('div');
            elem.dataset['sortCriteria'] = sortCriteria;
            elem = Coveo.Dom.createElement('div', {
                'data-sort-criteria': sortCriteria
            });
            return Coveo.Mock.advancedComponentSetup(Coveo.Sort, {
                element: elem
            });
        }
        beforeEach(function () {
            test = buildSort('date ascending');
        });
        afterEach(function () {
            test = null;
        });
        it('should build the correct criteria from its attribute', function () {
            expect(test.cmp.options.sortCriteria[0].sort).toEqual('date');
            expect(test.cmp.options.sortCriteria[0].direction).toEqual('ascending');
        });
        it('should build the correct field value from its attribute', function () {
            test = buildSort('@somefield ascending');
            expect(test.cmp.options.sortCriteria[0].toString()).toEqual('@somefield ascending');
        });
        it('should trigger \'select\' on click', function () {
            test = buildSort('relevancy');
            spyOn(test.cmp, 'select');
            test.env.element.click();
            expect(test.cmp.select).toHaveBeenCalled();
        });
        it('should set a \'hidden\' CSS class when the results from a querySuccess are empty', function () {
            Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.querySuccess, {
                results: {
                    results: []
                }
            });
            expect(Coveo.$$(test.cmp.element).hasClass('coveo-sort-hidden')).toBe(true);
        });
        it('should not set a \'hidden\' CSS class when the results from a querySuccess are not empty', function () {
            Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.querySuccess, {
                results: {
                    results: [{}, {}]
                }
            });
            expect(Coveo.$$(test.cmp.element).hasClass('coveo-sort-hidden')).toBe(false);
        });
        describe('with a toggle', function () {
            beforeEach(function () {
                test = buildSort('date ascending,date descending');
            });
            it('should build the correct criteria on toggle from its attribute', function () {
                expect(test.cmp.options.sortCriteria[0].equals(new Coveo.SortCriteria('date', 'ascending'))).toBe(true);
                expect(test.cmp.options.sortCriteria[1].equals(new Coveo.SortCriteria('date', 'descending'))).toBe(true);
            });
            it('should toggle between its criterias when selected', function () {
                test.cmp.select();
                expect(test.cmp.getCurrentCriteria().toString()).toEqual('date ascending');
                test.cmp.select();
                expect(test.cmp.getCurrentCriteria().toString()).toEqual('date descending');
            });
            it('should set direction without toggling when selected with explicit direction', function () {
                test.cmp.select('descending');
                expect(test.cmp.getCurrentCriteria().direction).toEqual('descending');
            });
            it('should display an icon', function () {
                var icon = Coveo.$$(test.env.element).find('.coveo-icon');
                expect(Coveo.$$(icon).nodeListToArray.length).toBeGreaterThan(0);
            });
            describe('with a live queryStateModel', function () {
                function buildSort(sortCriteria) {
                    var elem = document.createElement('div');
                    elem.dataset['sortCriteria'] = sortCriteria;
                    return Coveo.Mock.advancedComponentSetup(Coveo.Sort, new Coveo.Mock.AdvancedComponentSetupOptions(elem, undefined, function (builder) {
                        return builder.withLiveQueryStateModel();
                    }));
                }
                function fireBuildingQuery(elem, queryBuilder) {
                    queryBuilder = queryBuilder || new Coveo.QueryBuilder();
                    Coveo.$$(elem).trigger(Coveo.QueryEvents.buildingQuery, {
                        queryBuilder: queryBuilder
                    });
                    Coveo.$$(elem).trigger(Coveo.QueryEvents.doneBuildingQuery, {
                        queryBuilder: queryBuilder
                    });
                    return queryBuilder;
                }
                beforeEach(function () {
                    test = buildSort('date ascending,date descending');
                });
                it('should set itself as selected on the queryStateModel when selected', function () {
                    test.cmp.select();
                    expect(test.env.queryStateModel.get(Coveo.QueryStateModel.attributesEnum.sort)).toBe('date ascending');
                });
                it('should add the correct relevancy sorting expression to the query', function () {
                    test = buildSort('relevancy');
                    test.cmp.select();
                    var queryBuilder = fireBuildingQuery(test.env.root);
                    expect(queryBuilder.sortCriteria).toEqual('relevancy');
                });
                it('should add the correct date sorting expression to the query', function () {
                    test = buildSort('date ascending');
                    test.cmp.select();
                    var queryBuilder = fireBuildingQuery(test.env.root);
                    expect(queryBuilder.sortCriteria).toEqual('dateascending');
                    test = buildSort('date descending');
                    test.cmp.select();
                    queryBuilder = fireBuildingQuery(test.env.root);
                    expect(queryBuilder.sortCriteria).toEqual('datedescending');
                });
                it('should add the correct qre sorting expression to the query', function () {
                    test = buildSort('qre');
                    test.cmp.select();
                    var queryBuilder = fireBuildingQuery(test.env.root);
                    expect(queryBuilder.sortCriteria).toEqual('qre');
                });
                it('should add the correct field sorting expression to the query', function () {
                    test = buildSort('@field ascending');
                    test.cmp.select();
                    var queryBuilder = fireBuildingQuery(test.env.root);
                    expect(queryBuilder.sortCriteria).toEqual('fieldascending');
                    expect(queryBuilder.sortField).toEqual('@field');
                    test = buildSort('@field descending');
                    test.cmp.select();
                    queryBuilder = fireBuildingQuery(test.env.root);
                    expect(queryBuilder.sortCriteria).toEqual('fielddescending');
                    expect(queryBuilder.sortField).toEqual('@field');
                });
            });
        });
        it('should only accept a valid sort criteria', function () {
            expect(function () { return buildSort('invalidname'); }).toThrow();
            expect(function () { return buildSort('relevancy,failingmiserably'); }).toThrow();
        });
        it('should only accept a valid sort direction', function () {
            expect(function () { return buildSort('date in-order-of-failure'); }).toThrow();
        });
        it('should require at least one sort criteria to properly initialize', function () {
            expect(function () { return new Coveo.Sort(document.createElement('div')); }).toThrow();
        });
        it('should validate if a direction is present when sorting a date or a field', function () {
            expect(function () { return buildSort('date'); }).toThrow();
            expect(function () { return buildSort('@field-of-failure'); }).toThrow();
        });
        it('should validate that there is no direction on any other criteria than \'date\' or a field', function () {
            expect(function () { return buildSort('bogus-criteria ascending'); }).toThrow();
            expect(function () { return buildSort('relevancy ascending'); }).toThrow();
            expect(function () { return buildSort('date ascending'); }).not.toThrow();
            expect(function () { return buildSort('@field descending'); }).not.toThrow();
        });
        it('should use data-caption as a body if no body is specified', function () {
            test = Coveo.Mock.advancedComponentSetup(Coveo.Sort, {
                element: Coveo.$$('div', {
                    'data-sort-criteria': 'relevancy',
                    'data-caption': 'foo'
                }).el
            });
            expect(test.env.element.innerText).toEqual('foo');
        });
        it('should left its body intact if data-caption is not defined', function () {
            test = Coveo.Mock.advancedComponentSetup(Coveo.Sort, {
                element: Coveo.$$('div', {
                    'data-sort-criteria': 'relevancy'
                }, 'baz').el
            });
            expect(test.env.element.innerText).toEqual('baz');
        });
        it('should override the body with data-caption if both are defined', function () {
            test = Coveo.Mock.advancedComponentSetup(Coveo.Sort, {
                element: Coveo.Dom.createElement('div', {
                    'data-sort-criteria': 'relevancy',
                    'data-caption': 'overrider'
                }, 'gettingreplaced')
            });
            expect(test.env.element.innerText).toEqual('overrider');
        });
        it('should remove unnecessary spaces between sort and direction', function () {
            test = buildSort('date            ascending');
            expect(test.cmp.options.sortCriteria[0].toString()).toEqual('date ascending');
        });
        it('should remove unnecessary spaces before sort criteria', function () {
            test = buildSort('           date descending');
            expect(test.cmp.options.sortCriteria[0].toString()).toEqual('date descending');
        });
        it('should remove unnecessary spaces after sort criteria', function () {
            test = buildSort('date ascending             ');
            expect(test.cmp.options.sortCriteria[0].toString()).toEqual('date ascending');
        });
        it('should remove unnecessary spaces between multiple sort criterias', function () {
            test = buildSort('date descending   ,    date ascending');
            expect(test.cmp.options.sortCriteria[0].toString()).toEqual('date descending');
            expect(test.cmp.options.sortCriteria[1].toString()).toEqual('date ascending');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    var NoopComponent = Coveo.Components.NoopComponent;
    describe('Tab', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.optionsComponentSetup(Coveo.Tab, {
                id: 'testingtabid',
                caption: 'caption test tab'
            });
        });
        afterEach(function () {
            test = null;
        });
        describe('exposes options', function () {
            it('tab id can be set, and is sent in the query, only if selected', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'niceid'
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().tab).toBeUndefined();
                test.cmp.select();
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().tab).toBe('niceid');
            });
            it('expression is set on the constant part of the query, only if selected', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'niceid',
                    expression: '@foo==bar'
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().cq).toBeUndefined();
                test.cmp.select();
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().cq).toBe('@foo==bar');
            });
            it('expression is set on the advanced part of the query, only if selected and constant is false', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'niceid',
                    expression: '@foo==bar',
                    constant: false
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().aq).toBeUndefined();
                test.cmp.select();
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().aq).toBe('@foo==bar');
            });
            it('caption can specify the caption for the element', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Tab, {
                    caption: 'yo man'
                });
                expect(Coveo.$$(test.cmp.element).text()).toBe('yo man');
            });
            it('icon can be added on a tab', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.Tab, {
                    icon: 'yoman'
                });
                var icn = Coveo.$$(test.cmp.element).find('.coveo-icon');
                expect(Coveo.$$(icn).hasClass('yoman')).toBe(true);
            });
            it('endpoint can be set on a tab, or take default otherwise', function () {
                var ep = new Coveo.SearchEndpoint({ restUri: 'test' });
                Coveo.SearchEndpoint.endpoints['testing'] = ep;
                test = Coveo.Mock.optionsComponentSetup(Coveo.Tab, {
                    endpoint: ep
                });
                expect(test.cmp.options.endpoint).toBe(ep);
                Coveo.SearchEndpoint.endpoints['testing'] = null;
            });
            it('enableDuplicateFiltering will be set on the query, only if selected', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'niceid',
                    enableDuplicateFiltering: true
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().enableDuplicateFiltering).toBe(false);
                test.cmp.select();
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().enableDuplicateFiltering).toBe(true);
            });
            it('pipeline will be set on the query, only if selected', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'niceid',
                    pipeline: 'foobar'
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().pipeline).toBeUndefined();
                test.cmp.select();
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().pipeline).toBe('foobar');
            });
            it('maximumAge will be set on the query, only if selected', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'niceid',
                    maximumAge: 321
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().maximumAge).toBeUndefined();
                test.cmp.select();
                simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.build().maximumAge).toBe(321);
            });
        });
        describe('can control inclusion of other elements', function () {
            var test2;
            var dummyCmp;
            var dummyCmp2;
            var elem;
            var elem2;
            beforeEach(function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'testingtabid',
                    caption: 'caption test tab'
                }, function (env) {
                    return env.withLiveQueryStateModel();
                }));
                test2 = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, {
                    id: 'testingtabid2',
                    caption: 'caption test tab 2'
                }, function (env) {
                    return env.withRoot(test.env.root).withLiveQueryStateModel();
                }));
                elem = document.createElement('div');
                test.env.root.appendChild(elem);
                elem2 = document.createElement('div');
                test.env.root.appendChild(elem2);
                elem.setAttribute('data-tab', 'testingtabid');
                elem2.setAttribute('data-tab', 'testingtabid2');
                dummyCmp = Coveo.Mock.advancedComponentSetup(NoopComponent, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, undefined, function (env) {
                    return env.withRoot(test.env.root);
                }));
                dummyCmp2 = Coveo.Mock.advancedComponentSetup(NoopComponent, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, undefined, function (env) {
                    return env.withRoot(test.env.root);
                }));
                dummyCmp.cmp.element.setAttribute('data-tab', 'testingtabid');
                dummyCmp2.cmp.element.setAttribute('data-tab', 'testingtabid2');
            });
            afterEach(function () {
                test2 = null;
                dummyCmp = null;
                dummyCmp2 = null;
                elem = null;
                elem2 = null;
            });
            it('should hide and show elements if selected', function () {
                test.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(Coveo.$$(elem2).hasClass('coveo-tab-disabled')).toBe(true);
                expect(Coveo.$$(dummyCmp2.cmp.element).hasClass('coveo-tab-disabled')).toBe(true);
                expect(Coveo.$$(dummyCmp.cmp.element).hasClass('coveo-tab-disabled')).toBe(false);
                expect(Coveo.$$(elem).hasClass('coveo-tab-disabled')).toBe(false);
                test2.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(Coveo.$$(elem2).hasClass('coveo-tab-disabled')).toBe(false);
                expect(Coveo.$$(dummyCmp2.cmp.element).hasClass('coveo-tab-disabled')).toBe(false);
                expect(Coveo.$$(dummyCmp.cmp.element).hasClass('coveo-tab-disabled')).toBe(true);
                expect(Coveo.$$(elem).hasClass('coveo-tab-disabled')).toBe(true);
            });
            it('should disable or enable component if selected', function () {
                test.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(false);
                expect(dummyCmp2.cmp.disabled).toBe(true);
                test2.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(true);
                expect(dummyCmp2.cmp.disabled).toBe(false);
            });
            it('should disable or enable component if created under a div with data-tab', function () {
                // remove the attribute directly on the component, and put them under another div which has the attribute data-tab
                dummyCmp.cmp.element.removeAttribute('data-tab');
                dummyCmp2.cmp.element.removeAttribute('data-tab');
                elem.appendChild(dummyCmp.cmp.element);
                elem2.appendChild(dummyCmp2.cmp.element);
                test.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(false);
                expect(dummyCmp2.cmp.disabled).toBe(true);
                test2.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(true);
                expect(dummyCmp2.cmp.disabled).toBe(false);
            });
            it('can specify multiple tab for one component', function () {
                dummyCmp.cmp.element.setAttribute('data-tab', 'testingtabid,testingtabid2');
                test.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(false);
                test2.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(false);
            });
            it('can specify not to be included in a tab for one component', function () {
                dummyCmp.cmp.element.removeAttribute('data-tab');
                dummyCmp.cmp.element.setAttribute('data-tab-not', 'testingtabid');
                test.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(true);
                test2.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(false);
            });
            it('can specify not to be included in multiple tabs for one component', function () {
                dummyCmp.cmp.element.removeAttribute('data-tab');
                dummyCmp.cmp.element.setAttribute('data-tab-not', 'testingtabid,testingtabid2');
                test.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(true);
                test2.cmp.select();
                Coveo.Simulate.query(test.env);
                expect(dummyCmp.cmp.disabled).toBe(true);
            });
        });
        it('should trigger a query on selection', function () {
            test.cmp.select();
            expect(test.env.queryController.executeQuery).toHaveBeenCalled();
        });
        it('should trigger an analytics event on selection', function () {
            test.cmp.select();
            expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.interfaceChange, { interfaceChangeTo: 'testingtabid' });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Triggers', function () {
        var test;
        var results;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.Triggers);
            test.cmp._window = Coveo.Mock.mockWindow();
            results = Coveo.FakeResults.createFakeResults(0);
        });
        it('should do nothing if triggers are not present in the response', function () {
            results.triggers = null;
            Coveo.Simulate.query(test.env, { results: results });
            expect(Coveo.$$(test.cmp.element).hasClass('coveo-visible')).toBe(false);
            expect(test.cmp.element.innerHTML).toBe('');
        });
        it('should set a notification properly when a \'notify\' trigger is present', function () {
            results.triggers = [{ type: 'notify', content: 'quite warm' }];
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.notifications).toEqual(['quite warm']);
        });
        it('should reset the notifications with each request', function () {
            results.triggers = [{ type: 'notify', content: 'quite warm' }];
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.notifications).toEqual(['quite warm']);
            results.triggers = [{ type: 'notify', content: 'a tad cold' }];
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.notifications).toEqual(['a tad cold']);
            results.triggers = [];
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.notifications).toEqual([]);
        });
        it('should handle multiple \'notify\'s properly', function () {
            results.triggers = [
                { type: 'notify', content: 'foo' },
                { type: 'notify', content: 'bar' },
                { type: 'notify', content: '2000' }
            ];
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp.notifications).toEqual(['foo', 'bar', '2000']);
        });
        it('should execute an \'execute\' trigger', function () {
            var funcSpy = jasmine.createSpy('customFunc');
            test.cmp._window['customFunc'] = funcSpy;
            var errorSpy = jasmine.createSpy('error');
            test.cmp.logger.error = errorSpy;
            results.triggers = [{ type: 'execute', content: { name: 'customFunc', params: [123, 'foo', false] } }];
            Coveo.Simulate.query(test.env, { results: results });
            expect(funcSpy).toHaveBeenCalledWith({
                param1: 123,
                param2: 'foo',
                param3: false,
                element: test.env.element
            });
            expect(funcSpy.calls.count()).toBe(1);
            expect(errorSpy).not.toHaveBeenCalled();
        });
        it('should handle an \'execute\' trigger when function doesn\'t exist', function () {
            var errSpy = jasmine.createSpy('errSpy');
            test.cmp.logger.error = errSpy;
            results.triggers = [{ type: 'execute', content: { name: 'foobarFunc', params: ['foobarde', 123] } }];
            Coveo.Simulate.query(test.env, { results: results });
            expect(errSpy.calls.count()).toBe(1);
        });
        it('should handle an \'execute\' trigger when function throws exception', function () {
            var errorSpy = jasmine.createSpy('error');
            test.cmp._window['bombFunc'] = function (params) {
                throw '💣';
            };
            test.cmp.logger.error = errorSpy;
            results.triggers = [{ type: 'execute', content: { name: 'bombFunc', params: [] } }];
            Coveo.Simulate.query(test.env, { results: results });
            expect(errorSpy.calls.count()).toBe(1);
        });
        it('should handle a \'redirect\' trigger properly', function () {
            results.triggers = [
                { type: 'redirect', content: 'http://www.coveo.com' }
            ];
            Coveo.Simulate.query(test.env, { results: results });
            expect(test.cmp._window.location.href).toBe('http://www.coveo.com');
        });
        it('should handle a \'query\' trigger properly', function () {
            var qsmSpy = jasmine.createSpy('qsm');
            var qcSpy = jasmine.createSpy('qc');
            test.cmp.queryStateModel.set = qsmSpy;
            test.cmp.queryController.executeQuery = qcSpy;
            results.triggers = [{ type: 'query', content: '@name=foobar2000' }];
            Coveo.Simulate.query(test.env, { results: results });
            expect(qsmSpy).toHaveBeenCalledWith(Coveo.QueryStateModel.attributesEnum.q, '@name=foobar2000');
            expect(qcSpy.calls.count()).toBe(1);
        });
        describe('should log a custom analytics event', function () {
            var analyticsSpy;
            beforeEach(function () {
                analyticsSpy = jasmine.createSpy('analytics');
                test.cmp.usageAnalytics.logCustomEvent = analyticsSpy;
            });
            it('for a \'redirect\' trigger', function () {
                results.triggers = [{ type: 'redirect', content: 'http://www.coveo.com' }];
                Coveo.Simulate.query(test.env, { results: results });
                expect(analyticsSpy).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.triggerRedirect, {
                    redirectedTo: 'http://www.coveo.com'
                }, test.cmp.element);
            });
            it('for an \'execute\' trigger', function () {
                test.cmp._window['doSomething'] = function () { return null; };
                results.triggers = [{ type: 'execute', content: { name: 'doSomething' } }];
                Coveo.Simulate.query(test.env, { results: results });
                expect(analyticsSpy).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.triggerExecute, {
                    executed: 'doSomething'
                }, test.cmp.element);
            });
            it('for a \'notify\' trigger', function () {
                results.triggers = [{ type: 'notify', content: 'hello there' }];
                Coveo.Simulate.query(test.env, { results: results });
                expect(analyticsSpy).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.triggerNotify, {
                    notification: 'hello there'
                }, test.cmp.element);
            });
            it('for a \'query\' trigger', function () {
                results.triggers = [{ type: 'query', content: '@title=foo' }];
                test.cmp.queryController.executeQuery = function (arg) {
                    arg.beforeExecuteQuery();
                    return new Promise(function () { });
                };
                Coveo.Simulate.query(test.env, { results: results });
                expect(analyticsSpy).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.triggerQuery, {
                    query: '@title=foo'
                }, test.cmp.element);
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ValueElementRenderer', function () {
        var facet;
        var valueRenderer;
        beforeEach(function () {
            facet = Coveo.Mock.optionsComponentSetup(Coveo.Facet, {
                field: '@field'
            }).cmp;
        });
        afterEach(function () {
            facet = null;
            valueRenderer = null;
        });
        it('should build a list element', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 1234)));
            expect(valueRenderer.build().listElement).toBeDefined();
            expect(valueRenderer.build().listElement.getAttribute('data-value')).toBe('foo');
        });
        it('should build a label', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 123)));
            expect(valueRenderer.build().label).toBeDefined();
        });
        it('should build a checkbox', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 123)));
            valueRenderer.facetValue.selected = true;
            valueRenderer.facetValue.excluded = false;
            expect(valueRenderer.build().checkbox.getAttribute('checked')).toBe('checked');
            expect(valueRenderer.build().checkbox.getAttribute('disabled')).toBeNull();
            valueRenderer.facetValue.selected = false;
            valueRenderer.facetValue.excluded = true;
            expect(valueRenderer.build().checkbox.getAttribute('checked')).toBeNull();
            expect(valueRenderer.build().checkbox.getAttribute('disabled')).toBe('disabled');
        });
        it('should build a stylish checkbox', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 123)));
            expect(valueRenderer.build().stylishCheckbox).toBeDefined();
        });
        it('should build a caption', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('this is a nice value', 123)));
            expect(valueRenderer.build().valueCaption).toBeDefined();
            expect(Coveo.$$(valueRenderer.build().valueCaption).text()).toBe('this is a nice value');
        });
        it('should build a value count', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 1)));
            expect(valueRenderer.build().valueCount).toBeDefined();
            expect(Coveo.$$(valueRenderer.build().valueCount).text()).toBe('1');
            // Should format big number
            valueRenderer.facetValue.occurrences = 31416;
            expect(Coveo.$$(valueRenderer.build().valueCount).text()).toBe('31,416');
        });
        it('should build an exclude icon', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 123)));
            expect(valueRenderer.build().excludeIcon).toBeDefined();
        });
        it('should render computed field only if needed', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 123)));
            expect(valueRenderer.build().computedField).toBeUndefined();
            valueRenderer.facet.options.computedField = '@computedField';
            valueRenderer.facet.options.computedFieldOperation = 'sum';
            valueRenderer.facet.options.computedFieldFormat = 'c0';
            valueRenderer.facetValue.computedField = 9999;
            expect(valueRenderer.build().computedField).toBeDefined();
            expect(Coveo.$$(valueRenderer.build().computedField).text()).toBe('$9,999');
        });
        it('should allow to remove element from the dom post build', function () {
            valueRenderer = new Coveo.ValueElementRenderer(facet, Coveo.FacetValue.createFromFieldValue(Coveo.FakeResults.createFakeFieldValue('foo', 1)));
            var count = valueRenderer.build().valueCount;
            expect(count.parentNode).toBeDefined();
            valueRenderer.build().withNo(count);
            expect(count.parentNode).toBeNull();
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Excerpt', function () {
        var test;
        var fakeResult;
        beforeEach(function () {
            fakeResult = Coveo.FakeResults.createFakeResult();
            fakeResult.excerpt = 'This is the excerpt';
            fakeResult.excerptHighlights = [{
                    offset: 12,
                    length: 7
                }];
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.Excerpt, fakeResult, undefined);
        });
        afterEach(function () {
            test = null;
            fakeResult = null;
        });
        it('should highlight the keywords', function () {
            var expectedExcerpt = Coveo.HighlightUtils.highlightString(fakeResult.excerpt, fakeResult.excerptHighlights, null, 'coveo-highlight');
            expect(test.cmp.element.innerHTML).toEqual(expectedExcerpt);
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ResultLink', function () {
        var test;
        var fakeResult;
        beforeEach(function () {
            fakeResult = initFakeResult();
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, undefined);
            spyOn(test.cmp, 'openLink');
            spyOn(window, 'open');
        });
        afterEach(function () {
            test = null;
            fakeResult = null;
        });
        it('should hightlight the result title', function () {
            expect(test.cmp.element.innerHTML).toEqual(Coveo.HighlightUtils.highlightString(fakeResult.title, fakeResult.titleHighlights, null, 'coveo-highlight'));
        });
        it('should contain the clickUri if the result has no title', function () {
            fakeResult.title = undefined;
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, undefined);
            expect(test.cmp.element.innerHTML).toEqual(fakeResult.clickUri);
        });
        it('can receive an onClick option to execute', function (done) {
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(Coveo.$$('div').el, {
                onClick: function () {
                    expect(true).toBe(true);
                    done();
                }
            }));
            Coveo.$$(test.cmp.element).trigger('click');
        });
        it('sends an analytic event on click', function () {
            Coveo.$$(test.cmp.element).trigger('click');
            expect(test.cmp.usageAnalytics.logClickEvent).toHaveBeenCalledTimes(1);
        });
        describe('exposes hrefTemplate', function () {
            it('should not modify the href template if there are no field specified', function () {
                var hrefTemplate = 'test';
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.ResultLink, { hrefTemplate: hrefTemplate }, fakeResult);
                test.cmp.openLinkInNewWindow();
                expect(window.open).toHaveBeenCalledWith(hrefTemplate, jasmine.anything());
            });
            it('should replaces fields in the href template by the results equivalent', function () {
                var hrefTemplate = '${title}';
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.ResultLink, { hrefTemplate: hrefTemplate }, fakeResult);
                test.cmp.openLinkInNewWindow();
                expect(window.open).toHaveBeenCalledWith(fakeResult.title, jasmine.anything());
            });
            it('should support nested values in result', function () {
                var hrefTemplate = '${raw.number}';
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.ResultLink, { hrefTemplate: hrefTemplate }, fakeResult);
                test.cmp.openLinkInNewWindow();
                expect(window.open).toHaveBeenCalledWith(fakeResult.raw['number'].toString(), jasmine.anything());
            });
            it('should not parse standalone accolades', function () {
                var hrefTemplate = '${raw.number}{test}';
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.ResultLink, { hrefTemplate: hrefTemplate }, fakeResult);
                test.cmp.openLinkInNewWindow();
                expect(window.open).toHaveBeenCalledWith(fakeResult.raw['number'] + '{test}', jasmine.anything());
            });
            it('should support external fields', function () {
                window['Coveo']['test'] = 'testExternal';
                var hrefTemplate = '${Coveo.test}';
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.ResultLink, { hrefTemplate: hrefTemplate }, fakeResult);
                test.cmp.openLinkInNewWindow();
                expect(window.open).toHaveBeenCalledWith('testExternal', jasmine.anything());
                window['Coveo']['test'] = undefined;
            });
            it('should support nested external fields with more than 2 keys', function () {
                window['Coveo']['test'] = { key: 'testExternal' };
                var hrefTemplate = '${Coveo.test.key}';
                test = Coveo.Mock.optionsResultComponentSetup(Coveo.ResultLink, { hrefTemplate: hrefTemplate }, fakeResult);
                test.cmp.openLinkInNewWindow();
                expect(window.open).toHaveBeenCalledWith('testExternal', jasmine.anything());
                window['Coveo']['test'] = undefined;
            });
        });
        it('sends an analytics event on context menu', function () {
            Coveo.$$(test.cmp.element).trigger('contextmenu');
            expect(test.cmp.usageAnalytics.logClickEvent).toHaveBeenCalledTimes(1);
        });
        describe('when logging the analytic event', function () {
            it('should use the href if set', function () {
                var element = Coveo.$$('a');
                var href = 'href_test';
                element.setAttribute('href', href);
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(element.el));
                spyOn(test.cmp, 'openLink');
                Coveo.$$(test.cmp.element).trigger('click');
                expect(test.cmp.usageAnalytics.logClickEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.documentOpen, jasmine.objectContaining({ documentURL: href }), fakeResult, test.cmp.root);
            });
            it('should use the clickUri if the href is empty', function () {
                Coveo.$$(test.cmp.element).trigger('click');
                expect(test.cmp.usageAnalytics.logClickEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.documentOpen, jasmine.objectContaining({ documentURL: fakeResult.clickUri }), fakeResult, test.cmp.root);
            });
        });
        describe('when the element is an hyperlink', function () {
            beforeEach(function () {
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(Coveo.$$('a').el));
            });
            it('should set the href to the result click uri', function () {
                expect(test.cmp.element.getAttribute('href')).toEqual(fakeResult.clickUri);
            });
            it('should not override the href if it is set before the initialization', function () {
                var element = Coveo.$$('a');
                var href = 'href_test';
                element.setAttribute('href', href);
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(element.el));
                expect(test.cmp.element.getAttribute('href')).toEqual(href);
            });
            describe('and the result has the outlookfield', function () {
                beforeEach(function () {
                    fakeResult.raw['outlookuri'] = 'uri.for.outlook';
                    fakeResult.raw['outlookformacuri'] = 'uri.for.outlook.for.mac';
                });
                it('should generate the correct href if the os is windows and the option is openInOutlook', function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(Coveo.$$('a').el, { openInOutlook: true }, function (env) {
                        return env.withOs(Coveo.OS_NAME.WINDOWS);
                    }));
                    expect(test.cmp.element.getAttribute('href')).toEqual(fakeResult.raw['outlookuri']);
                });
                it('should generate the correct href if the os is windows and the option is not openInOutlook', function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(Coveo.$$('a').el, { openInOutlook: false }, function (env) {
                        return env.withOs(Coveo.OS_NAME.WINDOWS);
                    }));
                    expect(test.cmp.element.getAttribute('href')).not.toEqual(fakeResult.raw['outlookuri']);
                });
                it('should generate the correct href if the os is mac and the option is openInOutlook', function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(Coveo.$$('a').el, { openInOutlook: true }, function (env) {
                        return env.withOs(Coveo.OS_NAME.MACOSX);
                    }));
                    expect(test.cmp.element.getAttribute('href')).toEqual(fakeResult.raw['outlookformacuri']);
                });
                it('should generate the correct href if the os is mac and the option is not openInOutlook', function () {
                    test = Coveo.Mock.advancedResultComponentSetup(Coveo.ResultLink, fakeResult, new Coveo.Mock.AdvancedComponentSetupOptions(Coveo.$$('a').el, { openInOutlook: false }, function (env) {
                        return env.withOs(Coveo.OS_NAME.MACOSX);
                    }));
                    expect(test.cmp.element.getAttribute('href')).not.toEqual(fakeResult.raw['outlookformacuri']);
                });
            });
        });
    });
    function initFakeResult() {
        var fakeResult = Coveo.FakeResults.createFakeResult();
        fakeResult.title = 'A test title';
        fakeResult.titleHighlights = [{ offset: 2, length: 4 }];
        fakeResult.clickUri = 'uri';
        return fakeResult;
    }
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('Recommendation', function () {
        var mainSearchInterface;
        var test;
        var options;
        var actionsHistory = [1, 2, 3];
        var userId = '123';
        var store;
        beforeEach(function () {
            mainSearchInterface = Coveo.Mock.basicSearchInterfaceSetup(Coveo.SearchInterface);
            options = {
                mainSearchInterface: mainSearchInterface.env.root,
                userContext: JSON.stringify({
                    user_id: userId
                })
            };
            store = {
                addElement: function (query) { },
                getHistory: function () { return actionsHistory; },
                setHistory: function (history) { },
                clear: function () { }
            };
            test = Coveo.Mock.optionsSearchInterfaceSetup(Coveo.Recommendation, options);
            Coveo.Mock.initPageViewScript(store);
        });
        afterEach(function () {
            mainSearchInterface = null;
            options = null;
            test = null;
            coveoanalytics = undefined;
        });
        it('should work if mainInterface is not specified', function () {
            var optionsWithNoMainInterface = {
                mainSearchInterface: null
            };
            expect(function () {
                new Coveo.Recommendation(document.createElement('div'), optionsWithNoMainInterface);
            }).not.toThrow();
        });
        it('should work if coveoanalytics is not specified', function () {
            coveoanalytics = undefined;
            test = Coveo.Mock.optionsSearchInterfaceSetup(Coveo.Recommendation, options);
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.actionsHistory).toEqual('[]');
        });
        it('should not modify the query if it was not triggered by the mainInterface', function () {
            var queryBuilder = new Coveo.QueryBuilder();
            var query = 'test';
            queryBuilder.expression.add(query);
            var simulation = Coveo.Simulate.query(test.env, {
                queryBuilder: queryBuilder
            });
            expect(simulation.queryBuilder.expression.build()).toEqual('test');
        });
        it('should generate a different id by default for each recommendation component', function () {
            var secondRecommendation = Coveo.Mock.basicSearchInterfaceSetup(Coveo.Recommendation);
            expect(test.cmp.options.id).not.toEqual(secondRecommendation.cmp.options.id);
        });
        describe('when the mainInterface triggered a query', function () {
            it('should trigger a query', function () {
                var simulation = Coveo.Simulate.query(mainSearchInterface.env);
                expect(test.cmp.queryController.executeQuery).toHaveBeenCalled();
            });
            it('should send the recommendation id', function () {
                test.cmp.options.id = 'test';
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.recommendation).toEqual('test');
            });
            it('should only copy the optionsToUse', function () {
                _.extend(options, { optionsToUse: ['expression'] });
                test = Coveo.Mock.optionsSearchInterfaceSetup(Coveo.Recommendation, options);
                var queryBuilder = new Coveo.QueryBuilder();
                var query = 'test';
                var advandcedQuery = '@field=test';
                queryBuilder.expression.add(query);
                queryBuilder.advancedExpression.add(advandcedQuery);
                Coveo.Simulate.query(mainSearchInterface.env, {
                    queryBuilder: queryBuilder
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.expression).toEqual(queryBuilder.expression);
                expect(simulation.queryBuilder.advancedExpression).not.toEqual(queryBuilder.advancedExpression);
            });
            it('should add the userContext in the triggered query', function () {
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.context['user_id']).toEqual(userId);
            });
            it('should not add the userContext in the triggered query if userContext was not specified', function () {
                options = {
                    mainSearchInterface: mainSearchInterface.env.root
                };
                test = Coveo.Mock.optionsSearchInterfaceSetup(Coveo.Recommendation, options);
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.context).toBeUndefined();
            });
            describe('exposes option sendActionHistory', function () {
                it('should add the actionsHistory in the triggered query', function () {
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.actionsHistory).toEqual(JSON.stringify(actionsHistory));
                });
                it('should add the actionsHistory even if the user context is not specified', function () {
                    options = {
                        mainSearchInterface: mainSearchInterface.env.root
                    };
                    test = Coveo.Mock.optionsSearchInterfaceSetup(Coveo.Recommendation, options);
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.actionsHistory).toEqual(JSON.stringify(actionsHistory));
                });
                it('should not send the actionsHistory if false', function () {
                    options.sendActionsHistory = false;
                    test = Coveo.Mock.optionsSearchInterfaceSetup(Coveo.Recommendation, options);
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(simulation.queryBuilder.actionsHistory).toBeUndefined();
                });
            });
            describe('exposes option hideIfNoResults', function () {
                it('should hide the interface if there are no recommendations', function () {
                    var simulation = Coveo.Simulate.query(test.env, { results: Coveo.FakeResults.createFakeResults(0) });
                    expect(test.cmp.element.style.display).toEqual('none');
                });
                it('should show the interface if there are recommendations', function () {
                    var simulation = Coveo.Simulate.query(test.env);
                    expect(test.cmp.element.style.display).not.toEqual('none');
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('RecommendationAnalyticsClient', function () {
        var client;
        var recommendation;
        var mainSearchInterface;
        var endpoint;
        var clickElement;
        beforeEach(function () {
            endpoint = Coveo.Mock.mock(Coveo.AnalyticsEndpoint);
            mainSearchInterface = Coveo.Mock.basicSearchInterfaceSetup(Coveo.SearchInterface);
            recommendation = Coveo.Mock.optionsSearchInterfaceSetup(Coveo.Recommendation, { mainSearchInterface: mainSearchInterface.env.root });
            client = new Coveo.RecommendationAnalyticsClient(endpoint, recommendation.env.root, 'foo', 'foo display', false, 'foo run name', 'foo run version', 'default', true, recommendation.cmp.getBindings());
            clickElement = document.createElement('div');
        });
        afterEach(function () {
            endpoint = null;
            mainSearchInterface = null;
            recommendation = null;
            client = null;
            clickElement = null;
        });
        it('should change an interfaceLoad event to recommendationInterfaceLoad', function () {
            spyOn(client, 'pushSearchEvent');
            client.logSearchEvent(Coveo.analyticsActionCauseList.interfaceLoad, {});
            expect(client.pushSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.recommendationInterfaceLoad, jasmine.any(Object));
        });
        it('should change a documentOpen event to recommendationOpen', function () {
            spyOn(client, 'pushClickEvent');
            client.logClickEvent(Coveo.analyticsActionCauseList.documentOpen, {}, Coveo.FakeResults.createFakeResult('foo'), clickElement);
            expect(client.pushClickEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.recommendationOpen, jasmine.any(Object), jasmine.any(Object), clickElement);
        });
        it('should log a second click on the main interface', function () {
            spyOn(mainSearchInterface.cmp.usageAnalytics, 'logClickEvent');
            recommendation.cmp.mainQuerySearchUID = '123';
            client.logClickEvent(Coveo.analyticsActionCauseList.documentOpen, {}, Coveo.FakeResults.createFakeResult('foo'), clickElement);
            expect(mainSearchInterface.cmp.usageAnalytics.logClickEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.recommendationOpen, jasmine.any(Object), jasmine.any(Object), clickElement);
        });
        it('should not log a second click on the main interface if there were no main interface query', function () {
            spyOn(mainSearchInterface.cmp.usageAnalytics, 'logClickEvent');
            client.logClickEvent(Coveo.analyticsActionCauseList.documentOpen, {}, Coveo.FakeResults.createFakeResult('foo'), clickElement);
            expect(mainSearchInterface.cmp.usageAnalytics.logClickEvent).not.toHaveBeenCalledWith(Coveo.analyticsActionCauseList.recommendationOpen, jasmine.any(Object), jasmine.any(Object), clickElement);
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('TemplateLoder', function () {
        var test;
        it('should not load a template into itself for template-ception', function () {
            var badTemplateId = 'badTemplate';
            var badTemplate = new Coveo.Template(function () {
                return "<div class='CoveoTemplateLoader' data-template-id='" + badTemplateId + "'></div>";
            });
            Coveo.TemplateCache.registerTemplate(badTemplateId, badTemplate);
            expect(function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.TemplateLoader, new Coveo.Mock.AdvancedComponentSetupOptions(Coveo.$$('div', {
                    'data-template-id': badTemplateId
                }).el));
            }).toThrow();
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('AnalyticsSuggestions', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.AnalyticsSuggestions);
        });
        afterEach(function () {
            test = null;
            it('should trigger a call to get top query from the analytics', function () {
                Coveo.Simulate.omnibox(test.env);
                expect(test.env.usageAnalytics.getTopQueries).toHaveBeenCalled();
            });
            it('should populate omnibox with returned data from analytics', function (done) {
                test.env.usageAnalytics.getTopQueries = jasmine.createSpy('topQuery');
                test.env.usageAnalytics.getTopQueries.and.returnValue(new Promise(function (resolve) {
                    resolve(['foo', 'bar', 'baz']);
                }));
                var simulation = Coveo.Simulate.omnibox(test.env);
                simulation.rows[0].deferred.then(function (elementResolved) {
                    expect(simulation.rows.length).toBe(1);
                    expect(Coveo.$$(elementResolved.element).text()).toEqual(jasmine.stringMatching('foo'));
                    expect(Coveo.$$(elementResolved.element).text()).toEqual(jasmine.stringMatching('bar'));
                    expect(Coveo.$$(elementResolved.element).text()).toEqual(jasmine.stringMatching('baz'));
                    done();
                });
            });
            it('should log analytics event when selecting a suggestion', function (done) {
                test.env.usageAnalytics.getTopQueries = jasmine.createSpy('topQuery');
                test.env.usageAnalytics.getTopQueries.and.returnValue(new Promise(function (resolve) {
                    resolve(['foo', 'bar', 'baz']);
                }));
                var simulation = Coveo.Simulate.omnibox(test.env);
                simulation.rows[0].deferred.then(function (elementResolved) {
                    test.cmp.selectSuggestion(0);
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxAnalytics, jasmine.objectContaining({ suggestionRanking: 0 }));
                    test.cmp.selectSuggestion('baz');
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxAnalytics, jasmine.objectContaining({ suggestionRanking: 2 }));
                    done();
                });
            });
            it('should log partial queries in analytics', function (done) {
                test.env.usageAnalytics.getTopQueries = jasmine.createSpy('topQuery');
                test.env.usageAnalytics.getTopQueries.and.returnValue(new Promise(function (resolve) {
                    resolve(['foo', 'bar', 'baz']);
                }));
                Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: 't',
                        regex: /t/
                    }
                });
                Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: 'tes',
                        regex: /tes/
                    }
                });
                var simulation = Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: 'test',
                        regex: /test/
                    }
                });
                simulation.rows[0].deferred.then(function (elementResolved) {
                    test.cmp.selectSuggestion(0);
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxAnalytics, jasmine.objectContaining({ partialQueries: 't;tes;test' }));
                    done();
                });
            });
            it('should skip similar consecutive partial queries', function (done) {
                test.env.usageAnalytics.getTopQueries = jasmine.createSpy('topQuery');
                test.env.usageAnalytics.getTopQueries.and.returnValue(new Promise(function (resolve) {
                    resolve(['foo', 'bar', 'baz']);
                }));
                Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: 't',
                        regex: /t/
                    }
                });
                Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: 't',
                        regex: /t/
                    }
                });
                var simulation = Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: 't',
                        regex: /t/
                    }
                });
                simulation.rows[0].deferred.then(function (elementResolved) {
                    test.cmp.selectSuggestion(0);
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxAnalytics, jasmine.objectContaining({ partialQueries: 't' }));
                    done();
                });
            });
            it('should clean the ; char in partial queries', function (done) {
                test.env.usageAnalytics.getTopQueries = jasmine.createSpy('topQuery');
                test.env.usageAnalytics.getTopQueries.and.returnValue(new Promise(function (resolve) {
                    resolve(['foo', 'bar', 'baz']);
                }));
                var simulation = Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: 't;',
                        regex: /t;/
                    }
                });
                simulation.rows[0].deferred.then(function (elementResolved) {
                    test.cmp.selectSuggestion(0);
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxAnalytics, jasmine.objectContaining({ partialQueries: 't' }));
                    done();
                });
            });
            it('should strip very long partial queries to stay under 256 char', function (done) {
                test.env.usageAnalytics.getTopQueries = jasmine.createSpy('topQuery');
                test.env.usageAnalytics.getTopQueries.and.returnValue(new Promise(function (resolve) {
                    resolve(['foo', 'bar', 'baz']);
                }));
                var simulation = Coveo.Simulate.omnibox(test.env, {
                    completeQueryExpression: {
                        word: _.range(0, 500).join(''),
                        regex: /t;/
                    }
                });
                simulation.rows[0].deferred.then(function (elementResolved) {
                    test.cmp.selectSuggestion(0);
                    expect(test.env.usageAnalytics.logSearchEvent).toHaveBeenCalledWith(Coveo.analyticsActionCauseList.omniboxAnalytics, jasmine.anything());
                    done();
                });
            });
            describe('exposes options', function () {
                it('omniboxZIndex should be taken into account', function (done) {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.AnalyticsSuggestions, {
                        omniboxZIndex: 333
                    });
                    test.env.usageAnalytics.getTopQueries = jasmine.createSpy('topQuery');
                    test.env.usageAnalytics.getTopQueries.and.returnValue(new Promise(function (resolve) {
                        resolve(['foo', 'bar', 'baz']);
                    }));
                    var simulation = Coveo.Simulate.omnibox(test.env, {
                        completeQueryExpression: {
                            word: _.range(0, 500).join(''),
                            regex: /t;/
                        }
                    });
                    simulation.rows[0].deferred.then(function (elementResolved) {
                        expect(elementResolved.zIndex).toBe(333);
                        done();
                    });
                });
                it('numberOfSuggestions should be taken into account', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.AnalyticsSuggestions, {
                        numberOfSuggestions: 333
                    });
                    Coveo.Simulate.omnibox(test.env);
                    expect(test.env.usageAnalytics.getTopQueries).toHaveBeenCalledWith(jasmine.objectContaining({ pageSize: 333 }));
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('RecommendationQuery', function () {
        it('should be able to modify the advanced query based on its content', function () {
            var script = Coveo.$$('script');
            script.text('@sysfiletype="youtube"');
            var test = Coveo.Mock.advancedComponentSetup(Coveo.RecommendationQuery, new Coveo.Mock.AdvancedComponentSetupOptions(script.el));
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.advancedExpression.build()).toBe('@sysfiletype="youtube"');
        });
        it('should not modify the query if it is not a script', function () {
            var div = Coveo.$$('div');
            div.text('@sysfiletype="youtube"');
            var test = Coveo.Mock.advancedComponentSetup(Coveo.RecommendationQuery, new Coveo.Mock.AdvancedComponentSetupOptions(div.el));
            var simulation = Coveo.Simulate.query(test.env);
            expect(simulation.queryBuilder.advancedExpression.build()).not.toBe('@sysfiletype="youtube"');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ResultsPreferences', function () {
        var test;
        var element;
        beforeEach(function () {
            element = Coveo.$$('div');
            element.addClass(Coveo.Component.computeCssClassName(Coveo.PreferencesPanel));
        });
        afterEach(function () {
            element = null;
        });
        describe('exposes enableOpenInOutlook', function () {
            it('will build a open in outlook option', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.ResultsPreferences, new Coveo.Mock.AdvancedComponentSetupOptions(element.el, { enableOpenInOutlook: true }));
                expect(Coveo.$$(test.cmp.element).find('input[value="' + Coveo.l('OpenInOutlookWhenPossible') + '"]')).not.toBeNull();
            });
            it('will not build a open in outlook option if false', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.ResultsPreferences, new Coveo.Mock.AdvancedComponentSetupOptions(element.el, { enableOpenInOutlook: false }));
                expect(Coveo.$$(test.cmp.element).find('input[value="' + Coveo.l('OpenInOutlookWhenPossible') + '"]')).toBeNull();
            });
        });
        describe('exposes enableOpenInNewWindow', function () {
            it('will build a open in new window option', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.ResultsPreferences, new Coveo.Mock.AdvancedComponentSetupOptions(element.el, { enableOpenInNewWindow: true }));
                expect(Coveo.$$(test.cmp.element).find('input[value="' + Coveo.l('AlwaysOpenInNewWindow') + '"]')).not.toBeNull();
            });
            it('will not build a open in new window option if false', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.ResultsPreferences, new Coveo.Mock.AdvancedComponentSetupOptions(element.el, { enableOpenInNewWindow: false }));
                expect(Coveo.$$(test.cmp.element).find('input[value="' + Coveo.l('AlwaysOpenInNewWindow') + '"]')).toBeNull();
            });
        });
        describe('when it receives the save event', function () {
            it('will save the current preference in the model', function () {
                test = Coveo.Mock.advancedComponentSetup(Coveo.ResultsPreferences, new Coveo.Mock.AdvancedComponentSetupOptions(element.el));
                Coveo.$$(test.env.root).trigger(Coveo.PreferencesPanelEvents.savePreferences);
                expect(test.env.componentOptionsModel.set).toHaveBeenCalled();
            });
        });
    });
})(Coveo || (Coveo = {}));
;
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('AuthenticationProvider', function () {
        var test;
        var modalBoxCloseSpy;
        beforeEach(function () {
            modalBoxCloseSpy = jasmine.createSpy('modalBoxClose');
            spyOn(Coveo.ModalBox, 'open').and.returnValue({ close: modalBoxCloseSpy });
            test = Coveo.Mock.optionsComponentSetup(Coveo.AuthenticationProvider, {
                name: 'foo',
                caption: 'foobar',
                useIFrame: true
            });
        });
        afterEach(function () {
            test = null;
            modalBoxCloseSpy = null;
        });
        describe('exposes options', function () {
            it('name should push name in buildingCallOptions', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.AuthenticationProvider, {
                    name: 'testpatate'
                });
                var eventArgs = {
                    options: {
                        authentication: []
                    }
                };
                Coveo.$$(test.cmp.root).trigger(Coveo.QueryEvents.buildingCallOptions, eventArgs);
                expect(eventArgs.options.authentication).toEqual(jasmine.arrayContaining(['testpatate']));
            });
            describe('caption', function () {
                it('should set itself in the menu', function () {
                    var populateMenuArgs = {
                        settings: null,
                        menuData: []
                    };
                    Coveo.$$(test.cmp.root).trigger(Coveo.SettingsEvents.settingsPopulateMenu, populateMenuArgs);
                    expect(populateMenuArgs.menuData).toEqual(jasmine.arrayContaining([
                        jasmine.objectContaining({
                            text: Coveo.l('Reauthenticate', 'foobar'),
                            className: 'coveo-authentication-provider',
                            onOpen: jasmine.any(Function)
                        })
                    ]));
                });
                it('should be the title of the modal box when iFrame is enabled', function () {
                    test = Coveo.Mock.optionsComponentSetup(Coveo.AuthenticationProvider, {
                        name: 'foo',
                        caption: 'foobar',
                        useIFrame: true,
                    });
                    Coveo.$$(test.cmp.root).trigger(Coveo.QueryEvents.queryError, { error: { provider: 'foo' } });
                    expect(Coveo.ModalBox.open).toHaveBeenCalledWith(jasmine.anything(), jasmine.objectContaining({
                        title: Coveo.l('Authenticating', 'foobar')
                    }));
                });
            });
            it('useIFrame set to false should redirect to auth provider URL', function () {
                var fakeWindow = Coveo.Mock.mockWindow();
                test = Coveo.Mock.optionsComponentSetup(Coveo.AuthenticationProvider, {
                    name: 'foo',
                    caption: 'foobar',
                    useIFrame: false
                });
                test.cmp._window = fakeWindow;
                test.env.searchEndpoint.getAuthenticationProviderUri = function () { return 'coveo.com'; };
                Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.queryError, { error: { provider: 'foo' } });
                expect(fakeWindow.location.href).toBe('coveo.com');
            });
            it('useIFrame and showIFrame set to true should display a ModalBox containing iframe', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.AuthenticationProvider, {
                    name: 'foo',
                    caption: 'foobar',
                    useIFrame: true,
                    showIFrame: true
                });
                test.env.searchEndpoint.getAuthenticationProviderUri = function () { return 'http://coveo.com/'; };
                Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.queryError, { error: { provider: 'foo' } });
                expect(Coveo.ModalBox.open['calls'].mostRecent().args[0].children[0].src).toBe('http://coveo.com/');
            });
            it('showIFrame set to false should show a waiting popup not containing the iframe', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.AuthenticationProvider, {
                    name: 'foo',
                    caption: 'foobar',
                    useIFrame: true,
                    showIFrame: false
                });
                Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.queryError, { error: { provider: 'foo' } });
                expect(Coveo.ModalBox.open).toHaveBeenCalledWith(jasmine.objectContaining({
                    className: 'coveo-waiting-for-authentication-popup'
                }), jasmine.anything());
            });
        });
        it('should close the ModalBox when a "success" message is posted on window', function () {
            var fakeWindow = Coveo.Mock.mockWindow();
            test.cmp._window = fakeWindow;
            Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.queryError, { error: { provider: 'foo' } });
            Coveo.$$(fakeWindow).trigger('message', { data: 'success' });
            expect(modalBoxCloseSpy).toHaveBeenCalled();
        });
        it('should stop a redirect loop after 3 redirects', function () {
            spyOn(test.cmp.logger, 'error').and.returnValue(null);
            _.times(3, function () { return Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.queryError, { error: { provider: 'foo' } }); });
            Coveo.$$(test.env.root).trigger(Coveo.QueryEvents.queryError, { error: { provider: 'foo' } });
            expect(test.cmp.logger.error).toHaveBeenCalledWith('The AuthenticationProvider is in a redirect loop. This may be due to a back-end configuration problem.');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('CurrentTab', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.CurrentTab);
        });
        afterEach(function () {
            test = null;
        });
        it('is hidden when no tab is active', function () {
            test.env.queryStateModel.set(Coveo.QueryStateModel.attributesEnum.t, undefined);
            expect(Coveo.$$(test.cmp.element).is(':visible')).toBe(false);
        });
        it('displays the caption of the current tab when it changes', function () {
            var root = Coveo.$$('div').el;
            var model = new Coveo.QueryStateModel(root);
            var tab1 = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, { id: 'first', caption: 'First' }, function (builder) {
                return builder.withRoot(root).withQueryStateModel(model);
            }));
            var tab2 = Coveo.Mock.advancedComponentSetup(Coveo.Tab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, { id: 'second', caption: 'Second' }, function (builder) {
                return builder.withRoot(root).withQueryStateModel(model);
            }));
            var test = Coveo.Mock.advancedComponentSetup(Coveo.CurrentTab, new Coveo.Mock.AdvancedComponentSetupOptions(undefined, undefined, function (builder) {
                return builder.withRoot(root).withQueryStateModel(model);
            }));
            tab1.cmp.select();
            expect(Coveo.$$(test.cmp.element).text()).toEqual('First');
            tab2.cmp.select();
            expect(Coveo.$$(test.cmp.element).text()).toEqual('Second');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('QueryBoxQueryParameters', function () {
        var builder;
        beforeEach(function () {
            builder = new Coveo.QueryBuilder();
        });
        afterEach(function () {
            builder = null;
        });
        it('should add enableLowercaseOperators to builder', function () {
            new Coveo.QueryboxQueryParameters({
                enableLowercaseOperators: true
            }).addParameters(builder, 'foobar');
            expect(builder.enableLowercaseOperators).toBe(true);
        });
        it('should add enableQuestionMarks to builder', function () {
            new Coveo.QueryboxQueryParameters({
                enableQuestionMarks: true
            }).addParameters(builder, 'foobar');
            expect(builder.enableQuestionMarks).toBe(true);
        });
        it('should add enableWildcards to builder', function () {
            new Coveo.QueryboxQueryParameters({
                enableWildcards: true
            }).addParameters(builder, 'foobar');
            expect(builder.enableWildcards).toBe(true);
        });
        it('should add enableQuerySyntax to builder', function () {
            new Coveo.QueryboxQueryParameters({
                enableQuerySyntax: false
            }).addParameters(builder, 'foobar');
            expect(builder.disableQuerySyntax).toBe(true);
        });
        it('should add enablePartialMatch to builder', function () {
            new Coveo.QueryboxQueryParameters({
                enablePartialMatch: true,
                partialMatchKeywords: 123,
                partialMatchThreshold: '12%'
            }).addParameters(builder, 'foobar');
            expect(builder.enablePartialMatch).toBe(true);
            expect(builder.partialMatchKeywords).toBe(123);
            expect(builder.partialMatchThreshold).toBe('12%');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ResultList', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.ResultList);
            Coveo.registerCustomMatcher();
        });
        afterEach(function () {
            test = null;
        });
        it('should allow to return the currently displayed result', function () {
            expect(Coveo.ResultList.resultCurrentlyBeingRendered).toBeNull();
            var data = Coveo.FakeResults.createFakeResult();
            test.cmp.buildResult(data);
            expect(Coveo.ResultList.resultCurrentlyBeingRendered).toBe(data);
        });
        it('should set currently displayed result to undefined when they are all rendered', function () {
            var data = Coveo.FakeResults.createFakeResults(13);
            test.cmp.buildResults(data);
            expect(Coveo.ResultList.resultCurrentlyBeingRendered).toBeNull();
        });
        it('should reset currently displayed on new query', function () {
            var data = Coveo.FakeResults.createFakeResult();
            test.cmp.buildResult(data);
            expect(Coveo.ResultList.resultCurrentlyBeingRendered).toBe(data);
            Coveo.Simulate.query(test.env);
            expect(Coveo.ResultList.resultCurrentlyBeingRendered).toBeNull();
        });
        it('should allow to build a single result element', function () {
            var data = Coveo.FakeResults.createFakeResult();
            var built = test.cmp.buildResult(data);
            expect(built).toBeDefined();
            var rs = Coveo.$$(built).find('.CoveoResultLink');
            expect(Coveo.$$(rs).text()).toBe(data.title);
        });
        it('should allow to build multiple results element', function () {
            var data = Coveo.FakeResults.createFakeResults(13);
            var built = test.cmp.buildResults(data);
            expect(built.length).toBe(13);
            var rs = Coveo.$$(built[0]).find('.CoveoResultLink');
            expect(Coveo.$$(rs).text()).toBe(data.results[0].title);
            rs = Coveo.$$(built[12]).find('.CoveoResultLink');
            expect(Coveo.$$(rs).text()).toBe(data.results[12].title);
        });
        it('should allow to render results inside the result list', function () {
            var data = Coveo.FakeResults.createFakeResults(13);
            test.cmp.renderResults(test.cmp.buildResults(data));
            expect(Coveo.$$(test.cmp.element).findAll('.CoveoResult').length).toBe(13);
        });
        it('should trigger result displayed event when rendering', function () {
            var data = Coveo.FakeResults.createFakeResults(6);
            var spyResult = jasmine.createSpy('spyResult');
            var spyResults = jasmine.createSpy('spyResults');
            Coveo.$$(test.cmp.element).on(Coveo.ResultListEvents.newResultDisplayed, spyResult);
            Coveo.$$(test.cmp.element).on(Coveo.ResultListEvents.newResultsDisplayed, spyResults);
            test.cmp.renderResults(test.cmp.buildResults(data));
            expect(spyResult).toHaveBeenCalledTimes(6);
            expect(spyResults).toHaveBeenCalledTimes(1);
        });
        it('should render itself correctly after a full query', function () {
            var spyResult = jasmine.createSpy('spyResult');
            var spyResults = jasmine.createSpy('spyResults');
            Coveo.$$(test.cmp.element).on(Coveo.ResultListEvents.newResultDisplayed, spyResult);
            Coveo.$$(test.cmp.element).on(Coveo.ResultListEvents.newResultsDisplayed, spyResults);
            Coveo.Simulate.query(test.env);
            expect(test.cmp.getDisplayedResults().length).toBe(10);
            expect(test.cmp.getDisplayedResultsElements().length).toBe(10);
            expect(spyResult).toHaveBeenCalledTimes(10);
            expect(spyResults).toHaveBeenCalledTimes(1);
        });
        it('should clear itself on query error', function () {
            Coveo.Simulate.query(test.env);
            expect(test.cmp.getDisplayedResults().length).toBe(10);
            expect(test.cmp.getDisplayedResultsElements().length).toBe(10);
            Coveo.Simulate.query(test.env, {
                error: {
                    message: 'oh noes',
                    type: 'very bad',
                    name: 'oh noes very bad'
                }
            });
            expect(test.cmp.getDisplayedResults().length).toBe(0);
            expect(test.cmp.getDisplayedResultsElements().length).toBe(0);
        });
        describe('exposes options', function () {
            it('resultContainer allow to specify where to render results', function () {
                var aNewContainer = document.createElement('div');
                expect(aNewContainer.children.length).toBe(0);
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    resultContainer: aNewContainer
                });
                Coveo.Simulate.query(test.env);
                expect(aNewContainer.children.length).toBe(10);
            });
            it('resultTemplate allow to specify a template manually', function () {
                var tmpl = Coveo.Mock.mock(Coveo.UnderscoreTemplate);
                var asSpy = tmpl;
                asSpy.instantiateToElement.and.returnValue(document.createElement('div'));
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    resultTemplate: tmpl
                });
                Coveo.Simulate.query(test.env);
                expect(tmpl.instantiateToElement).toHaveBeenCalledTimes(10);
            });
            it('waitAnimation allow to specify a different animation such as spin or fade', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    waitAnimation: 'fade'
                });
                Coveo.Simulate.query(test.env, {
                    callbackDuringQuery: function () {
                        expect(Coveo.$$(test.cmp.options.waitAnimationContainer).hasClass('coveo-fade-out')).toBe(true);
                    },
                    callbackAfterQuery: function () {
                        expect(Coveo.$$(test.cmp.options.waitAnimationContainer).hasClass('coveo-fade-out')).not.toBe(true);
                    }
                });
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    waitAnimation: 'spinner'
                });
                Coveo.Simulate.query(test.env, {
                    callbackDuringQuery: function () {
                        expect(Coveo.$$(test.cmp.options.waitAnimationContainer).find('.coveo-loading-spinner')).toBeDefined();
                    },
                    callbackAfterQuery: function () {
                        expect(Coveo.$$(test.cmp.options.waitAnimationContainer).find('.coveo-loading-spinner')).toBeNull();
                    }
                });
            });
            it('waitAnimationContainer allow to specify where to display the animation', function () {
                var aNewContainer = document.createElement('div');
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    waitAnimation: 'fade',
                    waitAnimationContainer: aNewContainer
                });
                Coveo.Simulate.query(test.env, {
                    callbackDuringQuery: function () {
                        expect(Coveo.$$(aNewContainer).hasClass('coveo-fade-out')).toBe(true);
                    }
                });
            });
            it('enableInfiniteScroll allow to enable infinite scrolling', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    enableInfiniteScroll: false
                });
                Coveo.Simulate.query(test.env);
                expect(test.env.queryController.fetchMore).not.toHaveBeenCalled();
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    enableInfiniteScroll: true
                });
                Coveo.Simulate.query(test.env);
                expect(test.env.queryController.fetchMore).toHaveBeenCalled();
            });
            it('infiniteScrollPageSize allow to specify the number of result to fetch when scrolling', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    enableInfiniteScroll: true,
                    infiniteScrollPageSize: 26
                });
                Coveo.Simulate.query(test.env);
                expect(test.env.queryController.fetchMore).toHaveBeenCalledWith(26);
            });
            it('fieldsToInclude allow to specify an array of fields to include in the query', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.ResultList, {
                    fieldsToInclude: ['@field1', '@field2', '@field3']
                });
                var simulation = Coveo.Simulate.query(test.env);
                expect(simulation.queryBuilder.fieldsToInclude).toContain('field1');
                expect(simulation.queryBuilder.fieldsToInclude).toContain('field2');
                expect(simulation.queryBuilder.fieldsToInclude).toContain('field3');
            });
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ImageResultList', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.ImageResultList);
        });
        afterEach(function () {
            Coveo.$$(test.env.root).trigger(Coveo.InitializationEvents.nuke);
            clearDOM();
            test = null;
        });
        it('should put only one div under the ImageResultList element', function () {
            expect(Coveo.$$(test.cmp.element).findAll('div').length).toEqual(1);
        });
        it('should not put results at the same position', function () {
            createImageResultList('row');
            Coveo.Simulate.query(test.env);
            Coveo.$$(test.cmp.root).trigger(Coveo.ResultListEvents.newResultsDisplayed);
            expectAllDifferentPositions();
        });
        it('it should not overlap results', function () {
            createImageResultList('row');
            Coveo.Simulate.query(test.env);
            Coveo.$$(test.cmp.root).trigger(Coveo.ResultListEvents.newResultsDisplayed);
            expectResultsAreNotOverlapping();
        });
        it('should keep the original image ratio', function () {
            var imageWidth = 150.0;
            var imageHeight = 250.0;
            var initialRatio = imageWidth / imageHeight;
            createImageResultList('row', undefined, undefined, imageWidth, imageHeight);
            Coveo.Simulate.query(test.env);
            Coveo.$$(test.cmp.root).trigger(Coveo.ResultListEvents.newResultsDisplayed);
            var image = Coveo.$$(test.cmp.element).find('img');
            expect(Coveo.$$(image).width() / Coveo.$$(image).height()).toBeCloseTo(initialRatio, 0.01);
        });
        describe('exposes column width option', function () {
            it('should set the width in the column layout', function () {
                var width = 100;
                createImageResultList('column', width, undefined, undefined, undefined, 'div');
                Coveo.Simulate.query(test.env);
                Coveo.$$(test.cmp.root).trigger(Coveo.ResultListEvents.newResultsDisplayed);
                expect(Coveo.$$(Coveo.$$(test.cmp.element).find('.CoveoResult')).width()).toEqual(width);
            });
        });
        describe('exposes option heightThreshold', function () {
            it('should set the max height for the row', function () {
                var maxHeight = 10;
                createImageResultList('row', undefined, maxHeight, 20, maxHeight + 50);
                Coveo.Simulate.query(test.env);
                Coveo.$$(test.cmp.root).trigger(Coveo.ResultListEvents.newResultsDisplayed);
                expect(Coveo.$$(Coveo.$$(test.cmp.element).find('.CoveoResult img')).height()).toEqual(maxHeight);
            });
        });
        function createImageResultList(layoutType, columnWidth, heightThreshold, maxImageWidth, maxImageHeight, resultLayoutElement) {
            if (maxImageWidth === void 0) { maxImageWidth = 200; }
            if (maxImageHeight === void 0) { maxImageHeight = 300; }
            if (resultLayoutElement === void 0) { resultLayoutElement = 'span'; }
            test = Coveo.Mock.optionsComponentSetup(Coveo.ImageResultList, {
                resultTemplate: new Coveo.Template(function (object) {
                    return "<" + resultLayoutElement + ">\n                    <img width='" + maxImageWidth + "px' height='" + maxImageHeight + "px'></img>\n                  </" + resultLayoutElement + ">";
                }),
                layoutType: layoutType,
                heightThreshold: heightThreshold,
                columnWidth: columnWidth
            });
            Coveo.$$(document.body).append(test.cmp.element);
        }
        function clearDOM() {
            var body = Coveo.$$(document.body);
            if (body.findClass('CoveoImageResultList').length > 0) {
                document.body.removeChild(test.cmp.element);
            }
        }
        function expectAllDifferentPositions() {
            var lastPosition = null;
            var images = Coveo.$$(test.cmp.element).findAll('.CoveoResult');
            _.each(images, function (image) {
                var position = {
                    top: image.offsetTop,
                    left: image.offsetLeft
                };
                if (lastPosition != null) {
                    expect(position).not.toEqual(lastPosition);
                }
                lastPosition = position;
            });
        }
        function expectResultsAreNotOverlapping() {
            var lastPosition = null;
            var lastWidth = null;
            var lastHeight = null;
            var images = Coveo.$$(test.cmp.element).findAll('.CoveoResult');
            _.each(images, function (image) {
                var position = {
                    top: image.offsetTop,
                    left: image.offsetLeft
                };
                if (lastPosition != null) {
                    expect(position).not.toEqual(lastPosition);
                    if (lastPosition.top == position.top) {
                        expect(position.left + 2).toBeGreaterThan(lastPosition.left + lastWidth);
                    }
                    else if (lastPosition.left == position.left) {
                        expect(position.top + 2).toBeGreaterThan(lastPosition.top + lastHeight);
                    }
                }
                lastPosition = position;
                lastWidth = Coveo.$$(image).width();
                lastHeight = Coveo.$$(image).height();
            });
        }
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('SearchAlerts', function () {
        var test;
        var settingsData;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.SearchAlerts);
            settingsData = {
                settings: Coveo.Mock.basicComponentSetup(Coveo.Settings).cmp,
                menuData: []
            };
        });
        afterEach(function () {
            test = null;
            settingsData = null;
        });
        describe('exposes enableMessage option', function () {
            it('should be able to send message', function () {
                expect(test.cmp.message).toBeDefined();
            });
            it('should not be able to send message if false', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.SearchAlerts, { enableMessage: false });
                expect(test.cmp.message).toBeUndefined();
            });
        });
        describe('exposes enableManagePanel option', function () {
            it('should add the option in the settings menu', function () {
                Coveo.$$(test.env.root).trigger(Coveo.SettingsEvents.settingsPopulateMenu, settingsData);
                expect(settingsData.menuData).toContain(jasmine.objectContaining({ className: 'coveo-subscriptions-panel' }));
            });
            it('should not add option in the settings menu if false', function () {
                test = Coveo.Mock.optionsComponentSetup(Coveo.SearchAlerts, { enableManagePanel: false });
                Coveo.$$(test.env.root).trigger(Coveo.SettingsEvents.settingsPopulateMenu, settingsData);
                expect(settingsData.menuData).not.toContain(jasmine.objectContaining({ className: 'coveo-subscriptions-panel' }));
            });
        });
        describe('exposes enableFollowQuery options', function () {
            it('should add the option in the settings menu after the first query success', function (done) {
                var promise = Promise.resolve();
                spyOn(test.env.queryController, 'getEndpoint').and.returnValue({ listSubscriptions: function () { return promise; } });
                Coveo.Simulate.query(test.env);
                Promise.resolve().then(function () {
                    Coveo.$$(test.env.root).trigger(Coveo.SettingsEvents.settingsPopulateMenu, settingsData);
                    expect(settingsData.menuData).toContain(jasmine.objectContaining({ className: 'coveo-follow-query' }));
                    done();
                });
            });
            it('should not add the option in the settings menu after the first query success if false', function (done) {
                test = Coveo.Mock.optionsComponentSetup(Coveo.SearchAlerts, { enableFollowQuery: false });
                var promise = Promise.resolve();
                spyOn(test.env.queryController, 'getEndpoint').and.returnValue({ listSubscriptions: function () { return promise; } });
                Coveo.Simulate.query(test.env);
                Promise.resolve().then(function () {
                    Coveo.$$(test.env.root).trigger(Coveo.SettingsEvents.settingsPopulateMenu, settingsData);
                    expect(settingsData.menuData).not.toContain(jasmine.objectContaining({ className: 'coveo-follow-query' }));
                    done();
                });
            });
        });
        describe('open panel', function () {
            var listSubscriptionsMock;
            beforeEach(function () {
                listSubscriptionsMock = jasmine.createSpy('listSubscriptions');
                listSubscriptionsMock.and.returnValue(Promise.resolve([]));
                spyOn(test.cmp.queryController, 'getEndpoint').and.returnValue({ listSubscriptions: listSubscriptionsMock });
                Coveo.ModalBox = jasmine.createSpyObj('ModalBox', ['open']);
            });
            afterEach(function () {
                listSubscriptionsMock = null;
            });
            it('should open a modal box', function (done) {
                test.cmp.openPanel().then(function () {
                    expect(Coveo.ModalBox.open).toHaveBeenCalledWith(jasmine.anything(), jasmine.objectContaining({ className: 'coveo-subscriptions-panel' }));
                    done();
                });
            });
            it('should show an error message if there was an error', function (done) {
                listSubscriptionsMock.and.returnValue(Promise.reject({}));
                test.cmp.openPanel().then(function () {
                    expect(Coveo.$$(Coveo.ModalBox.open.calls.argsFor(0)[0]).find('.coveo-subscriptions-panel-content')).toBeNull();
                    expect(Coveo.$$(Coveo.ModalBox.open.calls.argsFor(0)[0]).find('.coveo-subscriptions-panel-fail')).not.toBeNull();
                    done();
                });
            });
            it('should list the subscriptions', function (done) {
                test.cmp.openPanel().then(function () {
                    expect(Coveo.$$(Coveo.ModalBox.open.calls.argsFor(0)[0]).find('.coveo-subscriptions-panel-content')).not.toBeNull();
                    expect(Coveo.$$(Coveo.ModalBox.open.calls.argsFor(0)[0]).find('.coveo-subscriptions-panel-fail')).toBeNull();
                    done();
                });
            });
        });
        describe('follow query', function () {
            var followMock;
            beforeEach(function () {
                test.cmp.queryController.createQueryBuilder.and.returnValue(new Coveo.QueryBuilder());
                followMock = jasmine.createSpy('follow');
                followMock.and.returnValue(Promise.resolve({}));
                spyOn(test.cmp.queryController, 'getEndpoint').and.returnValue({ follow: followMock });
            });
            afterEach(function () {
                followMock = null;
            });
            it('should call the endpoint', function () {
                test.cmp.followQuery();
                expect(followMock).toHaveBeenCalled();
            });
            it('should trigger a search alert created event', function (done) {
                Coveo.$$(test.env.root).on(Coveo.SearchAlertsEvents.searchAlertsCreated, function () {
                    expect(true).toBe(true);
                    done();
                });
                test.cmp.followQuery();
            });
            it('should trigger a search alert failed event if there was a problem', function (done) {
                followMock.and.returnValue(Promise.resolve());
                Coveo.$$(test.env.root).on(Coveo.SearchAlertsEvents.searchAlertsFail, function () {
                    expect(true).toBe(true);
                    done();
                });
                test.cmp.followQuery();
            });
        });
    });
})(Coveo || (Coveo = {}));
;
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('FollowItem', function () {
        var test;
        var endpointMock;
        var result;
        beforeEach(function () {
            result = Coveo.FakeResults.createFakeResult();
            endpointMock = Coveo.Mock.mockSearchEndpoint();
            endpointMock.listSubscriptions.and.returnValue(Promise.resolve([]));
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.FollowItem, result, new Coveo.Mock.AdvancedComponentSetupOptions(null, null, function (env) {
                return env.withEndpoint(endpointMock);
            }));
        });
        afterEach(function () {
            test = null;
            endpointMock = null;
            result = null;
        });
        it('should set the item as followed if it is followed', function (done) {
            endpointMock.listSubscriptions.and.returnValue(Promise.resolve([{ typeConfig: { id: result.raw.urihash } }]));
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.FollowItem, result, new Coveo.Mock.AdvancedComponentSetupOptions(null, null, function (env) {
                return env.withEndpoint(endpointMock);
            }));
            Promise.resolve().then(function () {
                expect(Coveo.$$(test.cmp.element).hasClass('coveo-follow-item-followed')).toBe(true);
                done();
            });
        });
        it('should set the item as not followed if it is not followed', function (done) {
            Promise.resolve().then(function () {
                expect(Coveo.$$(test.cmp.element).hasClass('coveo-follow-item-followed')).toBe(false);
                done();
            });
        });
        it('should remove the component if the search alerts service is unavailable', function (done) {
            endpointMock.listSubscriptions.and.returnValue(Promise.resolve('Error'));
            var root = Coveo.$$('div').el;
            spyOn(root, 'removeChild');
            test = Coveo.Mock.advancedResultComponentSetup(Coveo.FollowItem, result, new Coveo.Mock.AdvancedComponentSetupOptions(null, null, function (env) {
                return env.withEndpoint(endpointMock).withRoot(root);
            }));
            Promise.resolve({}).then(function () {
                expect(root.removeChild).toHaveBeenCalled();
                done();
            });
        });
        describe('toggleFollow', function () {
            it('should delete the subscription if the document is followed', function (done) {
                endpointMock.listSubscriptions.and.returnValue(Promise.resolve([{ id: '123', typeConfig: { id: result.raw.urihash } }]));
                endpointMock.deleteSubscription.and.returnValue(Promise.resolve());
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FollowItem, result, new Coveo.Mock.AdvancedComponentSetupOptions(null, null, function (env) {
                    return env.withEndpoint(endpointMock);
                }));
                Promise.resolve().then(function () {
                    test.cmp.toggleFollow();
                    expect(endpointMock.deleteSubscription).toHaveBeenCalled();
                    done();
                });
            });
            it('should create a subscription if the document is not followed', function (done) {
                endpointMock.follow.and.returnValue(Promise.resolve());
                test = Coveo.Mock.advancedResultComponentSetup(Coveo.FollowItem, result, new Coveo.Mock.AdvancedComponentSetupOptions(null, null, function (env) {
                    return env.withEndpoint(endpointMock);
                }));
                Promise.resolve().then(function () {
                    test.cmp.toggleFollow();
                    expect(endpointMock.follow).toHaveBeenCalled();
                    done();
                });
            });
        });
    });
})(Coveo || (Coveo = {}));
;
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('SearchAlertsMessage', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicComponentSetup(Coveo.SearchAlertsMessage);
            spyOn(Coveo.PopupUtils, 'positionPopup');
            spyOn(test.cmp, 'startCloseDelay');
            spyOn(test.cmp, 'stopCloseDelay');
        });
        afterEach(function () {
            test = null;
        });
        it('should show a message when a subscription is created', function () {
            var subscription = {
                type: 'followQuery',
                typeConfig: {
                    query: {
                        q: 'test'
                    }
                }
            };
            Coveo.$$(test.env.root).trigger(Coveo.SearchAlertsEvents.searchAlertsCreated, { dom: Coveo.$$('div'), subscription: subscription });
            expect(Coveo.PopupUtils.positionPopup).toHaveBeenCalled();
        });
        it('should show a message on error', function () {
            Coveo.$$(test.env.root).trigger(Coveo.SearchAlertsEvents.searchAlertsFail, { dom: Coveo.$$('div').el });
            expect(Coveo.PopupUtils.positionPopup).toHaveBeenCalled();
        });
        describe('showMessage', function () {
            it('should display the message', function () {
                var div = Coveo.$$('div');
                var message = 'Test';
                test.cmp.showMessage(div, message, false);
                expect(Coveo.$$(Coveo.PopupUtils.positionPopup.calls.argsFor(0)[0]).find('.coveo-subscriptions-messages-content').innerText).toEqual(message);
            });
            it('should display an error if specified', function () {
                var div = Coveo.$$('div');
                var message = 'Test';
                test.cmp.showMessage(div, message, true);
                expect(Coveo.$$(Coveo.PopupUtils.positionPopup.calls.argsFor(0)[0]).hasClass('coveo-subscriptions-messages-error')).toBe(true);
            });
        });
    });
})(Coveo || (Coveo = {}));
;
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('PendingSearchAsYouTypeSearchEvent', function () {
        var pendingEvent;
        var root;
        var endpoint;
        beforeEach(function () {
            root = document.createElement('div');
            endpoint = new Coveo.AnalyticsEndpoint({
                token: 'token',
                serviceUrl: 'serviceUrl',
                organization: 'organization'
            });
        });
        afterEach(function () {
            root = null;
            pendingEvent = null;
            endpoint = null;
        });
        it('should allow to modify cause', function () {
            pendingEvent = new Coveo.PendingSearchAsYouTypeSearchEvent(root, endpoint, Coveo.FakeResults.createFakeSearchEvent(), true);
            pendingEvent.modifyEventCause(Coveo.analyticsActionCauseList.documentTag);
            expect(pendingEvent.getEventCause()).toBe(Coveo.analyticsActionCauseList.documentTag.name);
        });
        it('should allow to modify custom data', function () {
            pendingEvent = new Coveo.PendingSearchAsYouTypeSearchEvent(root, endpoint, Coveo.FakeResults.createFakeSearchEvent(), true);
            pendingEvent.modifyCustomData('foo', 'bar');
            expect(pendingEvent.getEventMeta()).toEqual(jasmine.objectContaining({ 'foo': 'bar' }));
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ChatterLikedBy', function () {
        var test;
        beforeEach(function () {
            test = Coveo.Mock.basicResultComponentSetup(Coveo.ChatterLikedBy);
        });
        afterEach(function () {
            test = null;
        });
        it('should behave correctly with no data', function () {
            expect(test.cmp.element.innerHTML).toBe('');
        });
        it('should behave correctly with a single like', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token', 1);
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterLikedBy, {}, result);
            expect(Coveo.$$(test.cmp.element).find('a').getAttribute('href')).toEqual(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, result.raw.sflikedbyid));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).find('a')).text()).toEqual(result.raw.sflikedby);
        });
        it('should behave correctly with multiple likes', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token', 2);
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterLikedBy, {}, result);
            expect(Coveo.$$(test.cmp.element).find('a').getAttribute('href')).toEqual(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, 'LikeId1'));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).find('a')).text()).toEqual('LikeName1');
            expect(Coveo.$$(Coveo.$$(test.cmp.element).find('span')).text()).toContain("LikeName1 " + Coveo.l('And').toLowerCase() + " LikeName2");
            expect(Coveo.$$(test.cmp.element).findAll('a')[1].getAttribute('href')).toEqual(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, 'LikeId2'));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('a')[1]).text()).toEqual('LikeName2');
        });
        it('should behave correctly with number of likes greater than max like to show', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token', 3);
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterLikedBy, { nbLikesToRender: 2 }, result);
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('a')[2]).text()).toContain("" + Coveo.l('Others', (result.raw.sflikecount - 2).toString(), result.raw.sflikecount - 2));
        });
        it('Test behaviour when nbLikeToRender is set to 0 with multiple likes', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token', 3);
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterLikedBy, { nbLikesToRender: 0 }, result);
            expect(Coveo.$$(test.cmp.element).findAll('a')[0].getAttribute('href')).toEqual(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, 'LikeId1'));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('a')[0]).text()).toEqual('LikeName1');
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('span')[1]).text()).toContain(', ');
            expect(Coveo.$$(test.cmp.element).findAll('a')[1].getAttribute('href')).toContain(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, 'LikeId2'));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('a')[1]).text()).toContain('LikeName2');
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('span')[2]).text()).toContain(" " + Coveo.l('And').toLowerCase() + " ");
            expect(Coveo.$$(test.cmp.element).findAll('a')[2].getAttribute('href')).toContain(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, 'LikeId3'));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('a')[2]).text()).toContain('LikeName3');
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ChatterPostAttachment', function () {
        var test;
        it('should behave correctly with no data', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token', 0, 0, true);
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterPostAttachment, {}, result);
            expect(Coveo.$$(Coveo.$$(test.cmp.element).find('a')).text()).toContain(result.raw.sfcontentfilename);
            expect(Coveo.$$(test.cmp.element).find('a').getAttribute('href')).toContain(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, result.raw.sfcontentversionid));
        });
        it('should behave correctly with no filename but with a contentversionid', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token', 0, 0, true);
            result.raw.sfcontentfilename = undefined;
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterPostAttachment, {}, result);
            expect(Coveo.$$(Coveo.$$(test.cmp.element).find('a')).text()).toContain(Coveo.l('ShowAttachment'));
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="../Test.ts" />
var Coveo;
(function (Coveo) {
    describe('ChatterPostedBy', function () {
        var test;
        it('should behave correctly with no parameters', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token');
            result.raw.sfparentid = undefined;
            result.raw.sfparentname = undefined;
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterPostedBy, {}, result);
            expect(Coveo.$$(Coveo.$$(test.cmp.element).find('span')).text()).toContain(Coveo.l('PostedBy') + " ");
            expect(Coveo.$$(test.cmp.element).find('a').getAttribute('href')).toContain(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, result.raw.sfcreatedbyid));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).find('a')).text()).toContain(result.raw.sfcreatedby);
        });
        it('should behave correctly with no parameters but with a parent relationship', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token');
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterPostedBy, {}, result);
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('span')[1]).text()).toContain(" " + Coveo.l('On').toLowerCase() + " ");
            expect(Coveo.$$(test.cmp.element).findAll('a')[1].getAttribute('href')).toContain(Coveo.ChatterUtils.buildURI(result.clickUri, result.raw.sffeeditemid, result.raw.sfparentid));
            expect(Coveo.$$(Coveo.$$(test.cmp.element).findAll('a')[1]).text()).toContain(result.raw.sfparentname);
        });
        it('should behave correctly with the enablePostedOn parameter with parent relationship', function () {
            var result = Coveo.FakeResults.createFakeFeedItemResult('token');
            test = Coveo.Mock.optionsResultComponentSetup(Coveo.ChatterPostedBy, { enablePostedOn: false }, result);
            expect(Coveo.$$(test.cmp.element).findAll('span')[0]).toBeDefined();
            expect(Coveo.$$(test.cmp.element).findAll('a')[1]).toBeUndefined();
        });
    });
})(Coveo || (Coveo = {}));
/// <reference path="lib/jasmine.d.ts" />
// ***** COVEO SEARCH ******
/// <reference path="../bin/ts/CoveoJsSearch.d.ts" />
// ***** CUSTOM MATCHER ******
/// <reference path="CustomMatchers.ts" />
// ***** TEST UTILITIES ******
/// <reference path="Fake.ts" />
/// <reference path="NoopComponent.ts" />
/// <reference path="MockEnvironment.ts" />
/// <reference path="Simulate.ts" />
// ***** TEST ON UTILS ******
/// <reference path="utils/DomTest.ts" />
/// <reference path="utils/CookieUtilsTest.ts" />
/// <reference path="utils/L10NTest.ts" />
/// <reference path="utils/HighlightUtilsTest.ts" />
// ***** TEST ON MISC ******
/// <reference path="misc/PromisesShimTest.ts" />
// ***** TEST ON MODELS ******
/// <reference path="models/ModelTest.ts" />
/// <reference path="models/QueryStateModelTest.ts" />
// ***** TEST ON CONTROLLERS ******
/// <reference path="controllers/FacetQueryControllerTest.ts" />
/// <reference path="controllers/HistoryControllerTest.ts" />
/// <reference path="controllers/QueryControllerTest.ts" />
// ***** TEST ON REST ******
/// <reference path="rest/EndpointCallerTest.ts" />
/// <reference path="rest/SearchEndpointTest.ts" />
// ***** TEST ON UI ******
/// <reference path="ui/AggregateTest.ts" />
/// <reference path="ui/AnalyticsEndpointTest.ts" />
/// <reference path="ui/AnalyticsTest.ts" />
/// <reference path="ui/BreadcrumbTest.ts" />
/// <reference path="ui/ComponentEventsTest.ts" />
/// <reference path="ui/ComponentTest.ts" />
/// <reference path="ui/DidYouMeanTest.ts" />
/// <reference path="ui/ErrorReportTest.ts" />
/// <reference path="ui/ExportToExcelTest.ts" />
/// <reference path="ui/ExpressionBuilderTest.ts" />
/// <reference path="ui/FacetHeaderTest.ts" />
/// <reference path="ui/FacetSearchParametersTest.ts" />
/// <reference path="ui/FacetSearchTest.ts" />
/// <reference path="ui/FacetSettingsTest.ts" />
/// <reference path="ui/FacetSliderTest.ts" />
/// <reference path="ui/FacetTest.ts" />
/// <reference path="ui/FieldSuggestionsTest.ts" />
/// <reference path="ui/FieldTableTest.ts" />
/// <reference path="ui/FieldValueTest.ts" />
/// <reference path="ui/FoldingTest.ts" />
/// <reference path="ui/HiddenQueryTest.ts" />
/// <reference path="ui/HierarchicalFacetTest.ts" />
/// <reference path="ui/InitializationTest.ts" />
/// <reference path="ui/LiveAnalyticsClientTest.ts" />
/// <reference path="ui/MatrixTest.ts" />
/// <reference path="ui/OmniboxTest.ts" />
/// <reference path="ui/PagerTest.ts" />
/// <reference path="ui/PreferencesPanelTest.ts" />
/// <reference path="ui/QueryboxTest.ts" />
/// <reference path="ui/QueryBuilderTest.ts" />
/// <reference path="ui/QueryDurationTest.ts" />
/// <reference path="ui/QuerySummaryTest.ts" />
/// <reference path="ui/SearchboxTest.ts" />
/// <reference path="ui/SearchButtonTest.ts" />
/// <reference path="ui/SearchInterfaceTest.ts" />
/// <reference path="ui/SettingsTest.ts" />
/// <reference path="ui/ShareQueryTest.ts" />
/// <reference path="ui/SliderTest.ts" />
/// <reference path="ui/SortCriteriaTest.ts" />
/// <reference path="ui/SortTest.ts" />
/// <reference path="ui/TabTest.ts" />
/// <reference path="ui/TriggersTest.ts" />
/// <reference path="ui/ValueElementRendererTest.ts" />
/// <reference path="ui/ExcerptTest.ts" />
/// <reference path="ui/ResultLinkTest.ts" />
/// <reference path="ui/RecommendationTest.ts" />
/// <reference path="ui/RecommendationAnalyticsClientTest.ts" />
/// <reference path="ui/TemplateLoaderTest.ts" />
/// <reference path="ui/AnalyticsSuggestionsTest.ts" />
/// <reference path="ui/RecommendationQueryTest.ts" />
/// <reference path="ui/ResultsPreferencesTest.ts" />
/// <reference path="ui/FieldSuggestionsTest.ts" />
/// <reference path="ui/AuthenticationProviderTest.ts" />
/// <reference path="ui/CurrentTabTest.ts" />
/// <reference path="ui/QueryboxQueryParametersTest.ts" />
/// <reference path="ui/ResultListTest.ts" />
/// <reference path="ui/ImageResultListTest.ts" />
/// <reference path="ui/SearchAlertsTest.ts" />
/// <reference path="ui/FollowItemTest.ts" />
/// <reference path="ui/SearchAlertsMessageTest.ts" />
/// <reference path="ui/PendingSearchAsYouTypeSearchEventTest.ts" />
/// <reference path="ui/ChatterLikedByTest.ts" />
/// <reference path="ui/ChatterPostAttachmentTest.ts" />
/// <reference path="ui/ChatterPostedByTest.ts" />
Coveo.Logger.disable();
var Coveo;
(function (Coveo) {
    var _ = window['_'];
})(Coveo || (Coveo = {}));
function isPhantomJs() {
    return navigator.userAgent.indexOf('PhantomJS') != -1;
}
//# sourceMappingURL=data:application/json;base64,