/// <reference path="../bin/jasmin.d.ts" />
/// <reference path="../bin/MagicBox.d.ts" />
describe('Grammar Expression Builder build expression of type', function () {
    it('ExpressionConstant', function () {
        var exp = Coveo.MagicBox.Grammar.buildExpression('foo', 'id', null);
        expect(exp).toEqual(jasmine.any(Coveo.MagicBox.ExpressionConstant));
    });
    it('ExpressionRef', function () {
        var exp = Coveo.MagicBox.Grammar.buildExpression('[foo]', 'id', null);
        expect(exp).toEqual(jasmine.any(Coveo.MagicBox.ExpressionRef));
        expect(exp.ref).toBe('foo');
        expect(exp.occurrence).toBeNull();
        exp = Coveo.MagicBox.Grammar.buildExpression('[foo?]', 'id', null);
        expect(exp).toEqual(jasmine.any(Coveo.MagicBox.ExpressionRef));
        expect(exp.ref).toBe('foo');
        expect(exp.occurrence).toBe('?');
        exp = Coveo.MagicBox.Grammar.buildExpression('[foo{2}]', 'id', null);
        expect(exp).toEqual(jasmine.any(Coveo.MagicBox.ExpressionRef));
        expect(exp.ref).toBe('foo');
        expect(exp.occurrence).toBe(2);
    });
    it('ExpressionOptions', function () {
        var exp = Coveo.MagicBox.Grammar.buildExpression(['foo', 'bar'], 'id', null);
        expect(exp).toEqual(jasmine.any(Coveo.MagicBox.ExpressionOptions));
        expect(exp.parts.length).toBe(2);
    });
    it('ExpressionList', function () {
        // this generate a list because at [ he do not know if it will be a ref start
        var exp1 = Coveo.MagicBox.Grammar.buildExpression('foo[bar', 'id', null);
        expect(exp1).toEqual(jasmine.any(Coveo.MagicBox.ExpressionList));
        var exp2 = Coveo.MagicBox.Grammar.buildExpression('foo[bar]', 'id', null);
        expect(exp2).toEqual(jasmine.any(Coveo.MagicBox.ExpressionList));
    });
    it('ExpressionRegExp', function () {
        var exp = Coveo.MagicBox.Grammar.buildExpression(/foo/, 'id', null);
        expect(exp).toEqual(jasmine.any(Coveo.MagicBox.ExpressionRegExp));
    });
});
// http://pegjs.org/online
/*
 A = "A" B?
 B = "B" C
 C = "C"
 */
describe('ABC Grammar parse correctly', function () {
    var FakeGrammar = new Coveo.MagicBox.Grammar('A', {
        A: 'A[B?]',
        B: 'B[C+]',
        C: 'C'
    });
    var FakeGrammar2 = new Coveo.MagicBox.Grammar('A', {
        A: '[B][C*]',
        B: 'B',
        C: 'C[B]'
    });
    it('Empty String', function () {
        var result = FakeGrammar.parse('');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "A" but end of input found.');
    });
    it('"A"', function () {
        var result = FakeGrammar.parse('A');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"AB"', function () {
        var result = FakeGrammar.parse('AB');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "C" but end of input found.');
    });
    it('"ABC"', function () {
        var result = FakeGrammar.parse('ABC');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"AC"', function () {
        var result = FakeGrammar.parse('AC');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "B" but "C" found.');
    });
    it('"ABBC"', function () {
        var result = FakeGrammar.parse('ABBC');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "C" but "B" found.');
    });
    it('"BC"', function () {
        var result = FakeGrammar2.parse('BC');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "B" but end of input found.');
    });
    it('"BCBB"', function () {
        var result = FakeGrammar2.parse('BCBB');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected end of input or "C" but "B" found.');
        expect(result.clean().toString()).toBe('BCBB');
    });
});
/*
bcbb

 Expr = Product / Sum / Value
 Value = SubExpr / Number
 SubExpr = "(" Expr ")"
 Number = [0-9]+
 Product = Value "*" Value
 Sum= Value "+" Value

 */
describe('Math Grammar parse correctly', function () {
    var FakeGrammar = new Coveo.MagicBox.Grammar('Expr', {
        Expr: ['Product', 'Sum', 'Value'],
        Value: ['SubExpr', 'Number'],
        SubExpr: '([Expr])',
        Number: /([1-9][0-9]*|0)(\.[0-9]+)?/,
        Product: '[Value]*[Value]',
        Sum: '[Value]+[Value]'
    });
    it('Empty String', function () {
        var result = FakeGrammar.parse('');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected Expr but end of input found.');
    });
    it('"1"', function () {
        var result = FakeGrammar.parse('1');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"1+"', function () {
        var result = FakeGrammar.parse('1+');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected Value but end of input found.');
    });
    it('"1+2"', function () {
        var result = FakeGrammar.parse('1+2');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"1+2+"', function () {
        var result = FakeGrammar.parse('1+2+');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected end of input but "+" found.');
    });
    it('"1+2+3"', function () {
        var result = FakeGrammar.parse('1+2+3');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected end of input but "+" found.');
    });
    it('"(1+2)+3"', function () {
        var result = FakeGrammar.parse('(1+2)+3');
        expect(result.isSuccess()).toBeTruthy();
    });
});
describe('Coveo Field Grammar parse correctly', function () {
    var completeExpressions = Coveo.MagicBox.Grammars.Expressions(Coveo.MagicBox.Grammars.Complete);
    var coveoGrammar = new Coveo.MagicBox.Grammar(completeExpressions.start, completeExpressions.expressions);
    it('Empty String', function () {
        var result = coveoGrammar.parse('');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName"', function () {
        var result = coveoGrammar.parse('@fieldName');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName="', function () {
        var result = coveoGrammar.parse('@fieldName=');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected FieldValue but end of input found.');
        console.log(result.clean());
    });
    it('"@fieldName=value"', function () {
        var result = coveoGrammar.parse('@fieldName=value');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName=(value"', function () {
        var result = coveoGrammar.parse('@fieldName=(value');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected FieldValueSeparator or ")" but end of input found.');
    });
    it('"@fieldName=(value)"', function () {
        var result = coveoGrammar.parse('@fieldName=(value)');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName=(value,)"', function () {
        var result = coveoGrammar.parse('@fieldName=(value,)');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected FieldValueString but ")" found.');
    });
    it('"@fieldName=(value, abc)"', function () {
        var result = coveoGrammar.parse('@fieldName=(value, abc)');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"word @fieldName=(value, abc)"', function () {
        var result = coveoGrammar.parse('word @fieldName=(value, abc)');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"word @fieldName =  (value  , abc)"', function () {
        var result = coveoGrammar.parse('word @fieldName =  (value  , abc)');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"word (word2"', function () {
        var result = coveoGrammar.parse('word (word2');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected ":" or Spaces or ")" but end of input found.');
    });
    it('"word(word2)"', function () {
        var result = coveoGrammar.parse('word(word2)');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected ":" or Spaces or end of input but "(" found.');
    });
    it('"word (word2)"', function () {
        var result = coveoGrammar.parse('word (word2)');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"word OR (word2)"', function () {
        var result = coveoGrammar.parse('word OR (word2)');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"word OR"', function () {
        var result = coveoGrammar.parse('word OR');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"(word OR (word2))"', function () {
        var result = coveoGrammar.parse('(word OR (word2))');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"word @"', function () {
        var result = coveoGrammar.parse('word @');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected FieldName but end of input found.');
    });
    it('"foo ( bar foo )"', function () {
        var result = coveoGrammar.parse('foo ( bar foo )');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"foo bar"', function () {
        var result = coveoGrammar.parse('foo bar');
        expect(result.isSuccess()).toBeTruthy();
        expect(result.clean().toString()).toBe('foo bar');
    });
    it('"$extension("', function () {
        var result = coveoGrammar.parse('$extension(');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected QueryExtensionArgumentName but end of input found.');
    });
    it('"$extension(a"', function () {
        var result = coveoGrammar.parse('$extension(a');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected ":" but end of input found.');
    });
    it('"$extension(a:"', function () {
        var result = coveoGrammar.parse('$extension(a:');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected QueryExtensionArgumentValue but end of input found.');
    });
    it('"$extension(a:value"', function () {
        var result = coveoGrammar.parse('$extension(a:value');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected ":" or Spaces or "," or ")" but end of input found.');
    });
    it('"$extension(a:value)"', function () {
        var result = coveoGrammar.parse('$extension(a:value)');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"$extension(a:value,"', function () {
        var result = coveoGrammar.parse('$extension(a:value,');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected QueryExtensionArgumentName but end of input found.');
    });
    it('"$extension(a:value,b"', function () {
        var result = coveoGrammar.parse('$extension(a:value,b');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected ":" but end of input found.');
    });
    it('"$extension(a:value,b:"', function () {
        var result = coveoGrammar.parse('$extension(a:value,b:');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected QueryExtensionArgumentValue but end of input found.');
    });
    it('"$extension(a:value,b:\'"', function () {
        var result = coveoGrammar.parse('$extension(a:value,b:\'');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "\'" but end of input found.');
    });
    it('"$extension(a:value,b:\'abc\')"', function () {
        var result = coveoGrammar.parse('$extension(a:value,b:\'abc\')');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"["', function () {
        var result = coveoGrammar.parse('[');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "[" but end of input found.');
    });
    it('"[["', function () {
        var result = coveoGrammar.parse('[[');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "@" but end of input found.');
    });
    it('"[[@field"', function () {
        var result = coveoGrammar.parse('[[@field');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected "]" but end of input found.');
    });
    it('"[[@field]"', function () {
        var result = coveoGrammar.parse('[[@field]');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected Expression but end of input found.');
    });
    it('"[[@field]]"', function () {
        var result = coveoGrammar.parse('[[@field]]');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected Expression but "]" found.');
    });
    it('"[[@field] @sysuri"', function () {
        var result = coveoGrammar.parse('[[@field] @sysuri');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected FieldQueryOperation or Spaces or "]" but end of input found.');
    });
    it('"[[@field] @sysuri]"', function () {
        var result = coveoGrammar.parse('[[@field] @sysuri]');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('""Not Quoted""', function () {
        var result = coveoGrammar.parse('"Not Quoted"');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('" start with space"', function () {
        var result = coveoGrammar.parse(' start with space');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"end with space "', function () {
        var result = coveoGrammar.parse('end with space ');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName<now"', function () {
        var result = coveoGrammar.parse('@fieldName<now');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName<now-d"', function () {
        var result = coveoGrammar.parse('@fieldName<now-d');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected DateRelativeNegativeRef or Spaces or end of input but "-" found.');
    });
    it('"@fieldName<now-1d"', function () {
        var result = coveoGrammar.parse('@fieldName<now-1d');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName<10..420"', function () {
        var result = coveoGrammar.parse('@fieldName<10..420');
        expect(result.isSuccess()).toBeFalsy();
        expect(result.getHumanReadableExpect()).toBe('Expected Spaces or end of input but "." found.');
    });
    it('"@fieldName=10..420"', function () {
        var result = coveoGrammar.parse('@fieldName=10..420');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName=420"', function () {
        var result = coveoGrammar.parse('@fieldName=420');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('"@fieldName<420"', function () {
        var result = coveoGrammar.parse('@fieldName<420');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('@fieldName>=2000/01/01', function () {
        var result = coveoGrammar.parse('@fieldName>=2000/01/01');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('@fieldName<=2000/01/01', function () {
        var result = coveoGrammar.parse('@fieldName<=2000/01/01');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('@fieldName>2000/01/01', function () {
        var result = coveoGrammar.parse('@fieldName>2000/01/01');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('@fieldName<2000/01/01', function () {
        var result = coveoGrammar.parse('@fieldName<2000/01/01');
        expect(result.isSuccess()).toBeTruthy();
    });
    it('@fieldName==2000/01/01', function () {
        var result = coveoGrammar.parse('@fieldName==2000/01/01');
        expect(result.isSuccess()).toBeTruthy();
    });
});



/// <reference path="../bin/jasmin.d.ts" />
/// <reference path="../bin/MagicBox.d.ts" />
describe('Suggestions manager', function () {
    var container;
    var suggestionContainer;
    var suggestionManager;
    var suggestion;
    var elementInsideSuggestion;
    var selectableClass = 'selectable';
    var selectedClass = 'selected';
    beforeEach(function () {
        buildContainer();
        suggestionManager = new Coveo.MagicBox.SuggestionsManager(suggestionContainer.el, {
            selectedClass: selectedClass,
            selectableClass: selectableClass
        });
    });
    it('adds selected class when moving on element that is selectable', function () {
        suggestionManager.handleMouseOver({
            target: suggestion.el
        });
        expect(suggestion.hasClass(selectedClass)).toBe(true);
    });
    it('adds selected class when moving on element that is inside a selectable element', function () {
        suggestionManager.handleMouseOver({
            target: elementInsideSuggestion.el
        });
        expect(suggestion.hasClass(selectedClass)).toBe(true);
    });
    it('removes selected class when moving off a selected element', function () {
        suggestion.addClass(selectedClass);
        suggestionManager.handleMouseOut({
            target: suggestion.el,
            relatedTarget: container.el
        });
        expect(suggestion.hasClass(selectedClass)).toBe(false);
    });
    it('removes selected class when moving off an element that is inside a selected element', function () {
        suggestion.addClass(selectedClass);
        suggestionManager.handleMouseOut({
            target: elementInsideSuggestion.el,
            relatedTarget: container.el
        });
        expect(suggestion.hasClass(selectedClass)).toBe(false);
    });
    it('removes selected class when moving from a selected element to off the browser window', function () {
        suggestion.addClass(selectedClass);
        suggestionManager.handleMouseOut({
            target: suggestion.el
        });
        expect(suggestion.hasClass(selectedClass)).toBe(false);
    });
    it('removes selected class when moving from an element inside a selected element to off the browser window', function () {
        suggestion.addClass(selectedClass);
        suggestionManager.handleMouseOut({
            target: elementInsideSuggestion.el
        });
        expect(suggestion.hasClass(selectedClass)).toBe(false);
    });
    it('does not remove selected class when moving element between two element inside the suggestion', function () {
        var someDeepElement = document.createElement('div');
        elementInsideSuggestion.el.appendChild(someDeepElement);
        suggestion.addClass(selectedClass);
        suggestionManager.handleMouseOut({
            target: elementInsideSuggestion.el,
            relatedTarget: someDeepElement
        });
        expect(suggestion.hasClass(selectedClass)).toBe(true);
    });
    function buildContainer() {
        container = Coveo.MagicBox.$$(document.createElement('div'));
        suggestionContainer = Coveo.MagicBox.$$(document.createElement('div'));
        suggestion = Coveo.MagicBox.$$(document.createElement('div'));
        elementInsideSuggestion = Coveo.MagicBox.$$(document.createElement('div'));
        suggestion.addClass(selectableClass);
        suggestion.el.appendChild(elementInsideSuggestion.el);
        suggestionContainer.el.appendChild(suggestion.el);
        container.el.appendChild(suggestionContainer.el);
    }
});
